/**
 * Bridge Test library - general C# language tests for Portarelle
 * @version 16.0.0
 * @author Object.NET, Inc.
 * @copyright Copyright 2008-2017 Object.NET, Inc.
 * @compiler Bridge.NET 16.0.0
 */
Bridge.assembly("Bridge.ClientTest.Batch4", {"Bridge.ClientTest.Batch4.Reflection.Resource2.bin":"EBESExQV","Bridge.ClientTest.Batch4.Reflection.Resource1.bin":"AAECAwQFBgc="}, function ($asm, globals) {
    "use strict";

    Bridge.define("Bridge.ClientTest.Batch4.ActivatorTests", {
        nonGenericCreateInstanceWithoutArgumentsWorks: function () {
            var c = Bridge.cast(Bridge.createInstance(Bridge.ClientTest.Batch4.ActivatorTests.C1), Bridge.ClientTest.Batch4.ActivatorTests.C1);
            Bridge.Test.NUnit.Assert.areNotEqual(null, c);
            Bridge.Test.NUnit.Assert.areEqual(42, c.i);
        },
        nonGenericCreateInstanceWithOneArgumentWorks_SPI_1540: function () {
            var c = Bridge.cast(Bridge.createInstance(Bridge.ClientTest.Batch4.ActivatorTests.C2, [Bridge.box(3, System.Int32)]), Bridge.ClientTest.Batch4.ActivatorTests.C2);
            Bridge.Test.NUnit.Assert.areNotEqual(null, c);
            Bridge.Test.NUnit.Assert.areEqual(3, c.i);

            // #1540
            var arr = System.Array.init([Bridge.box(3, System.Int32)], System.Object);
            c = Bridge.cast(Bridge.Reflection.applyConstructor(Bridge.ClientTest.Batch4.ActivatorTests.C2, arr), Bridge.ClientTest.Batch4.ActivatorTests.C2);
            Bridge.Test.NUnit.Assert.areNotEqual(null, c);
            Bridge.Test.NUnit.Assert.areEqual(3, c.i);
        },
        nonGenericCreateInstanceWithTwoArgumentsWorks_SPI_1541: function () {
            var c = Bridge.cast(Bridge.createInstance(Bridge.ClientTest.Batch4.ActivatorTests.C3, [Bridge.box(7, System.Int32), Bridge.box(8, System.Int32)]), Bridge.ClientTest.Batch4.ActivatorTests.C3);
            Bridge.Test.NUnit.Assert.areNotEqual(null, c);
            Bridge.Test.NUnit.Assert.areEqual(7, c.i);
            Bridge.Test.NUnit.Assert.areEqual(8, c.j);

            // #1541
            var arr = System.Array.init([Bridge.box(7, System.Int32), Bridge.box(8, System.Int32)], System.Object);
            c = Bridge.cast(Bridge.Reflection.applyConstructor(Bridge.ClientTest.Batch4.ActivatorTests.C3, arr), Bridge.ClientTest.Batch4.ActivatorTests.C3);
            Bridge.Test.NUnit.Assert.areNotEqual(null, c);
            Bridge.Test.NUnit.Assert.areEqual(7, c.i);
            Bridge.Test.NUnit.Assert.areEqual(8, c.j);
        },
        genericCreateInstanceWithoutArgumentsWorks: function () {
            var c = Bridge.createInstance(Bridge.ClientTest.Batch4.ActivatorTests.C1);
            Bridge.Test.NUnit.Assert.areNotEqual(null, c);
            Bridge.Test.NUnit.Assert.areEqual(42, c.i);
        },
        genericCreateInstanceWithOneArgumentWorks_SPI_1542: function () {
            var c = Bridge.createInstance(Bridge.ClientTest.Batch4.ActivatorTests.C2, [Bridge.box(3, System.Int32)]);
            Bridge.Test.NUnit.Assert.areNotEqual(null, c);
            Bridge.Test.NUnit.Assert.areEqual(3, c.i);

            // #1542
            var arr = System.Array.init([Bridge.box(3, System.Int32)], System.Object);
            c = Bridge.Reflection.applyConstructor(Bridge.ClientTest.Batch4.ActivatorTests.C2, arr);
            Bridge.Test.NUnit.Assert.areNotEqual(null, c);
            Bridge.Test.NUnit.Assert.areEqual(3, c.i);
        },
        genericCreateInstanceWithTwoArgumentsWorks_SPI_1543: function () {
            var c = Bridge.createInstance(Bridge.ClientTest.Batch4.ActivatorTests.C3, [Bridge.box(7, System.Int32), Bridge.box(8, System.Int32)]);
            Bridge.Test.NUnit.Assert.areNotEqual(null, c);
            Bridge.Test.NUnit.Assert.areEqual(7, c.i);
            Bridge.Test.NUnit.Assert.areEqual(8, c.j);

            // #1543
            var arr = System.Array.init([Bridge.box(7, System.Int32), Bridge.box(8, System.Int32)], System.Object);
            c = Bridge.Reflection.applyConstructor(Bridge.ClientTest.Batch4.ActivatorTests.C3, arr);
            Bridge.Test.NUnit.Assert.areNotEqual(null, c);
            Bridge.Test.NUnit.Assert.areEqual(7, c.i);
            Bridge.Test.NUnit.Assert.areEqual(8, c.j);
        },
        instantiate: function (T) {
            return Bridge.createInstance(T);
        },
        instantiatingTypeParameterWithDefaultConstructorConstraintWorks_SPI_1544: function () {
            var c = this.instantiate(Bridge.ClientTest.Batch4.ActivatorTests.C1);
            Bridge.Test.NUnit.Assert.areEqual(42, c.i);
            // #1544
            Bridge.Test.NUnit.Assert.areStrictEqual(0, this.instantiate(System.Int32));
        },
        createInstanceWithNoArgumentsWorksForClassWithUnnamedDefaultConstructor: function () {
            var c1 = Bridge.createInstance(Bridge.ClientTest.Batch4.ActivatorTests.C1);
            var c2 = Bridge.cast(Bridge.createInstance(Bridge.ClientTest.Batch4.ActivatorTests.C1), Bridge.ClientTest.Batch4.ActivatorTests.C1);
            var c3 = this.instantiate(Bridge.ClientTest.Batch4.ActivatorTests.C1);

            Bridge.Test.NUnit.Assert.areEqual(42, c1.i);
            Bridge.Test.NUnit.Assert.areEqual(42, c2.i);
            Bridge.Test.NUnit.Assert.areEqual(42, c3.i);
        },
        createInstanceWithNoArgumentsWorksForClassWithNamedDefaultConstructor: function () {
            var c1 = Bridge.createInstance(Bridge.ClientTest.Batch4.ActivatorTests.C4);
            var c2 = Bridge.cast(Bridge.createInstance(Bridge.ClientTest.Batch4.ActivatorTests.C4), Bridge.ClientTest.Batch4.ActivatorTests.C4);
            var c3 = this.instantiate(Bridge.ClientTest.Batch4.ActivatorTests.C4);

            Bridge.Test.NUnit.Assert.areEqual(42, c1.i);
            Bridge.Test.NUnit.Assert.areEqual(42, c2.i);
            Bridge.Test.NUnit.Assert.areEqual(42, c3.i);
        },
        createInstanceWithNoArgumentsWorksForClassWithInlineCodeDefaultConstructor_SPI_1545: function () {
            var c1 = Bridge.createInstance(Bridge.ClientTest.Batch4.ActivatorTests.C5);
            var c2 = Bridge.createInstance(Bridge.ClientTest.Batch4.ActivatorTests.C5);
            var c3 = this.instantiate(Bridge.ClientTest.Batch4.ActivatorTests.C5);

            // #1545
            Bridge.Test.NUnit.Assert.areEqual(42, c1.i);
            Bridge.Test.NUnit.Assert.areEqual(42, c2.i);
            Bridge.Test.NUnit.Assert.areEqual(42, c3.i);
        },
        createInstanceWithNoArgumentsWorksForClassWithStaticMethodDefaultConstructor: function () {
            var c1 = Bridge.createInstance(Bridge.ClientTest.Batch4.ActivatorTests.C6);
            var c2 = Bridge.cast(Bridge.createInstance(Bridge.ClientTest.Batch4.ActivatorTests.C6), Bridge.ClientTest.Batch4.ActivatorTests.C6);
            var c3 = this.instantiate(Bridge.ClientTest.Batch4.ActivatorTests.C6);

            Bridge.Test.NUnit.Assert.areEqual(42, c1.i);
            Bridge.Test.NUnit.Assert.areEqual(42, c2.i);
            Bridge.Test.NUnit.Assert.areEqual(42, c3.i);
        },
        createInstanceWithNoArgumentsWorksForClassWithJsonDefaultConstructor: function () {
            var c1 = Bridge.createInstance(System.Object);
            var c2 = Bridge.createInstance(System.Object);
            var c3 = this.instantiate(System.Object);

            Bridge.Test.NUnit.Assert.areEqual(Object, c1.constructor);
            Bridge.Test.NUnit.Assert.areEqual(Object, c2.constructor);
            Bridge.Test.NUnit.Assert.areEqual(Object, c3.constructor);
        },
        createInstanceWithNoArgumentsWorksForGenericClassWithNamedDefaultConstructor: function () {
            var $t, $t1, $t2;
            var c1 = Bridge.createInstance(Bridge.ClientTest.Batch4.ActivatorTests.C8$1(System.Int32));
            var c2 = Bridge.cast(Bridge.createInstance(Bridge.ClientTest.Batch4.ActivatorTests.C8$1(System.Int32)), Bridge.ClientTest.Batch4.ActivatorTests.C8$1(System.Int32));
            var c3 = this.instantiate(Bridge.ClientTest.Batch4.ActivatorTests.C8$1(System.Int32));

            Bridge.Test.NUnit.Assert.areEqual(42, c1.i);
            Bridge.Test.NUnit.Assert.areEqual(System.Int32, ($t = Bridge.Reflection.getGenericArguments(Bridge.getType(c1)))[System.Array.index(0, $t)]);
            Bridge.Test.NUnit.Assert.areEqual(42, c2.i);
            Bridge.Test.NUnit.Assert.areEqual(System.Int32, ($t1 = Bridge.Reflection.getGenericArguments(Bridge.getType(c2)))[System.Array.index(0, $t1)]);
            Bridge.Test.NUnit.Assert.areEqual(42, c3.i);
            Bridge.Test.NUnit.Assert.areEqual(System.Int32, ($t2 = Bridge.Reflection.getGenericArguments(Bridge.getType(c3)))[System.Array.index(0, $t2)]);
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.ActivatorTests.C1", {
        i: 0,
        ctor: function () {
            this.$initialize();
            this.i = 42;
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.ActivatorTests.C2", {
        i: 0,
        ctor: function (i) {
            this.$initialize();
            this.i = i;
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.ActivatorTests.C3", {
        i: 0,
        j: 0,
        ctor: function (i, j) {
            this.$initialize();
            this.i = i;
            this.j = j;
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.ActivatorTests.C4", {
        i: 0,
        ctor: function () {
            this.$initialize();
            this.i = 42;
        },
        $ctor1: function (i) {
            this.$initialize();
            this.i = 1;
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.ActivatorTests.C5", {
        statics: {
            getDefaultValue: function () {
                return { i: 42 };
            }
        },
        i: 0
    });

    Bridge.define("Bridge.ClientTest.Batch4.ActivatorTests.C6", {
        i: 0,
        ctor: function () {
            this.$initialize();
            this.i = 42;
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.ActivatorTests.C8$1", function (T) { return {
        i: 0,
        ctor: function () {
            this.$initialize();
            this.i = 42;
        },
        $ctor1: function (t) {
            this.$initialize();
            this.i = 1;
        }
    }; });

    Bridge.define("Bridge.ClientTest.Batch4.AppDomainTests", {
        getAssembliesWorks_SPI_1646: function () {
            // #1646
            //var arr = AppDomain.CurrentDomain.GetAssemblies();
            //Assert.AreEqual(arr.Length, 2);
            //Assert.True(arr.Contains(typeof(int).Assembly), "#1");
            //Assert.True(arr.Contains(typeof(AppDomainTests).Assembly), "#2");
            // These tests below to preserve the test counter, uncomment the tests above when fixed
            Bridge.Test.NUnit.Assert.areEqual(2, 0);
            Bridge.Test.NUnit.Assert.true$1(false, "#1");
            Bridge.Test.NUnit.Assert.true$1(false, "#2");
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.ArgumentsTests", {
        lengthHelper0: function (args) {
            args = Array.prototype.slice.call(arguments, 0);
            Bridge.Test.NUnit.Assert.areEqual(0, arguments.length);
        },
        lengthHelper1: function (args) {
            args = Array.prototype.slice.call(arguments, 0);
            Bridge.Test.NUnit.Assert.areEqual(1, arguments.length);
        },
        lengthHelper2: function (args) {
            args = Array.prototype.slice.call(arguments, 0);
            Bridge.Test.NUnit.Assert.areEqual(2, arguments.length);
        },
        getArgumentHelper: function (index, args) {
            args = Array.prototype.slice.call(arguments, 1);
            return arguments[index];
        },
        toArrayHelper: function (args) {
            args = Array.prototype.slice.call(arguments, 0);
            return Array.prototype.slice.call(arguments);
        },
        toArrayHelper$1: function (T, args) {
            args = Array.prototype.slice.call(arguments, 1);
            return Array.prototype.slice.call(arguments, 1); // first argument will be generic type
        },
        lengthWorks: function () {
            this.lengthHelper0();
            this.lengthHelper1(Bridge.box(4, System.Int32));
            this.lengthHelper2(Bridge.box(6, System.Int32), "x");
        },
        getArgumentWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual(0, Bridge.unbox(this.getArgumentHelper(0, "x", "y")));
            Bridge.Test.NUnit.Assert.areEqual("x", Bridge.unbox(this.getArgumentHelper(1, "x", "y")));
            Bridge.Test.NUnit.Assert.areEqual("y", Bridge.unbox(this.getArgumentHelper(2, "x", "y")));
        },
        toArrayWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual(System.Array.init(0, null, System.Object), Bridge.unbox(this.toArrayHelper()));
            Bridge.Test.NUnit.Assert.areEqual(System.Array.init(["x"], System.Object), Bridge.unbox(this.toArrayHelper("x")));
            Bridge.Test.NUnit.Assert.areEqual(System.Array.init(["x", Bridge.box(1, System.Int32)], System.Object), Bridge.unbox(this.toArrayHelper("x", Bridge.box(1, System.Int32))));
        },
        toArrayOfTWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual(System.Array.init(0, null, System.Object), Bridge.unbox(this.toArrayHelper$1(System.String)));
            Bridge.Test.NUnit.Assert.areEqual(System.Array.init(["x"], System.String), Bridge.unbox(this.toArrayHelper$1(System.String, "x")));
            Bridge.Test.NUnit.Assert.areEqual(System.Array.init(["x", "y"], System.String), Bridge.unbox(this.toArrayHelper$1(System.String, "x", "y")));
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.ArrayTests", {
        typePropertiesAreCorrect_SPI_1546: function () {
            // #1546
            Bridge.Test.NUnit.Assert.areEqual$1(Bridge.Reflection.getTypeName(System.Object), Bridge.Reflection.getTypeName(Bridge.Reflection.getBaseType(Array)), "BaseType of Array should be object");
        },
        typePropertiesAreCorrect_SPI_1548: function () {
            Bridge.Test.NUnit.Assert.areEqual$1("System.Int32[]", Bridge.Reflection.getTypeFullName(System.Array.type(System.Int32)), "FullName should be Array");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.isClass(Array), "IsClass should be true");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.isClass(System.Array.type(System.Int32)), "IsClass should be true");

            var interfaces = Bridge.Reflection.getInterfaces(System.Array.type(System.Int32));
            Bridge.Test.NUnit.Assert.areEqual$1(6, interfaces.length, "Interface count should be 6");
            Bridge.Test.NUnit.Assert.true$1(System.Array.contains(interfaces, System.Collections.Generic.IEnumerable$1(System.Int32), Function), "Interfaces should contain IEnumerable<int>");
            Bridge.Test.NUnit.Assert.true$1(System.Array.contains(interfaces, System.Collections.Generic.ICollection$1(System.Int32), Function), "Interfaces should contain ICollection<int>");
            Bridge.Test.NUnit.Assert.true$1(System.Array.contains(interfaces, System.Collections.Generic.IList$1(System.Int32), Function), "Interfaces should contain IList<int>");
            // #1626
            //Assert.True(interfaces.Contains(typeof(IReadOnlyCollection<int>)), "Interfaces should contain IReadOnlyCollection<int>");
            //Assert.True(interfaces.Contains(typeof(IReadOnlyList<int>)), "Interfaces should contain IReadOnlyList<int>");

            var arr = System.Array.init([1, 2, 3], System.Int32);
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(arr, Array), "is Array should be true");
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(arr, System.Array.type(System.Int32)), "is int[] should be true");
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(arr, System.Collections.Generic.IList$1(System.Int32)), "is IList<int> should be true");
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(arr, System.Collections.Generic.ICollection$1(System.Int32)), "is ICollection<int> should be true");
            // #1626
            //Assert.True(arr is IReadOnlyList<int>, "is IReadOnlyList<int> should be true");
            //Assert.True(arr is IReadOnlyCollection<int>, "is IReadOnlyCollection<int> should be true");
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(arr, System.Collections.Generic.IEnumerable$1(System.Int32)), "is IEnumerable<int> should be true");
        },
        arrayCanBeAssignedToTheCollectionInterfaces_SPI_1547: function () {
            // #1547
            Bridge.Test.NUnit.Assert.true(Bridge.Reflection.isAssignableFrom(System.Collections.Generic.IEnumerable$1(System.Int32), System.Array.type(System.Int32)));
            Bridge.Test.NUnit.Assert.true(Bridge.Reflection.isAssignableFrom(System.Collections.Generic.ICollection$1(System.Int32), System.Array.type(System.Int32)));
            Bridge.Test.NUnit.Assert.true(Bridge.Reflection.isAssignableFrom(System.Collections.Generic.IList$1(System.Int32), System.Array.type(System.Int32)));
        },
        createWithNegativeLenghtShouldThrow: function () {
            var size = -1;
            Bridge.Test.NUnit.Assert.throws$6(System.ArgumentOutOfRangeException, function () {
                var a = System.Array.init(size, 0, System.Int32);
            });

            var lsize = System.Int64(-1);
            Bridge.Test.NUnit.Assert.throws$6(System.ArgumentOutOfRangeException, function () {
                var a = System.Array.init(lsize, 0, System.Int32);
            });
        },
        lengthWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual(0, System.Array.init(0, 0, System.Int32).length);
            Bridge.Test.NUnit.Assert.areEqual(1, System.Array.init(["x"], System.String).length);
            Bridge.Test.NUnit.Assert.areEqual(2, System.Array.init(["x", "y"], System.String).length);
        },
        rankIsOne: function () {
            Bridge.Test.NUnit.Assert.areEqual(1, System.Array.getRank(System.Array.init(0, 0, System.Int32)));
        },
        getLengthWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual(0, System.Array.getLength(System.Array.init(0, 0, System.Int32), 0));
            Bridge.Test.NUnit.Assert.areEqual(1, System.Array.getLength(System.Array.init(["x"], System.String), 0));
            Bridge.Test.NUnit.Assert.areEqual(2, System.Array.getLength(System.Array.init(["x", "y"], System.String), 0));
        },
        getLowerBound: function () {
            Bridge.Test.NUnit.Assert.areEqual(0, System.Array.getLower(System.Array.init(0, 0, System.Int32), 0));
            Bridge.Test.NUnit.Assert.areEqual(0, System.Array.getLower(System.Array.init(["x"], System.String), 0));
            Bridge.Test.NUnit.Assert.areEqual(0, System.Array.getLower(System.Array.init(["x", "y"], System.String), 0));
        },
        getUpperBoundWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual(-1, (System.Array.getLength(System.Array.init(0, 0, System.Int32), 0) - 1));
            Bridge.Test.NUnit.Assert.areEqual(0, (System.Array.getLength(System.Array.init(["x"], System.String), 0) - 1));
            Bridge.Test.NUnit.Assert.areEqual(1, (System.Array.getLength(System.Array.init(["x", "y"], System.String), 0) - 1));
        },
        gettingValueByIndexWorks: function () {
            var $t, $t1;
            Bridge.Test.NUnit.Assert.areEqual("x", ($t = System.Array.init(["x", "y"], System.String))[System.Array.index(0, $t)]);
            Bridge.Test.NUnit.Assert.areEqual("y", ($t1 = System.Array.init(["x", "y"], System.String))[System.Array.index(1, $t1)]);
        },
        getValueWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual("x", Bridge.unbox(System.Array.get(System.Array.init(["x", "y"], System.String), 0)));
            Bridge.Test.NUnit.Assert.areEqual("y", Bridge.unbox(System.Array.get(System.Array.init(["x", "y"], System.String), 1)));
        },
        settingValueByIndexWorks: function () {
            var arr = System.Array.init(2, null, System.String);
            arr[System.Array.index(0, arr)] = "x";
            arr[System.Array.index(1, arr)] = "y";
            Bridge.Test.NUnit.Assert.areEqual("x", arr[System.Array.index(0, arr)]);
            Bridge.Test.NUnit.Assert.areEqual("y", arr[System.Array.index(1, arr)]);
        },
        setValueWorks: function () {
            var arr = System.Array.init(2, null, System.String);
            System.Array.set(arr, "x", 0);
            System.Array.set(arr, "y", 1);
            Bridge.Test.NUnit.Assert.areEqual("x", arr[System.Array.index(0, arr)]);
            Bridge.Test.NUnit.Assert.areEqual("y", arr[System.Array.index(1, arr)]);
        },
        foreachWorks: function () {
            var $t;
            var result = "";
            $t = Bridge.getEnumerator(System.Array.init(["x", "y"], System.String));
            try {
                while ($t.moveNext()) {
                    var s = $t.Current;
                    result = System.String.concat(result, s);
                }
            }finally {
                if (Bridge.is($t, System.IDisposable)) {
                    $t.System$IDisposable$dispose();
                }
            }Bridge.Test.NUnit.Assert.areEqual("xy", result);
        },
        cloneWorks: function () {
            var arr = System.Array.init(["x", "y"], System.String);
            var arr2 = System.Array.clone(arr);
            Bridge.Test.NUnit.Assert.false(Bridge.referenceEquals(arr, arr2));
            Bridge.Test.NUnit.Assert.areEqual(Bridge.unbox(arr2), arr);
        },
        concatWorks: function () {
            var arr = System.Array.init(["a", "b"], System.String);
            Bridge.Test.NUnit.Assert.areEqual(System.Array.init(["a", "b", "c"], System.String), arr.concat("c"));
            Bridge.Test.NUnit.Assert.areEqual(System.Array.init(["a", "b", "c", "d"], System.String), arr.concat("c", "d"));
            Bridge.Test.NUnit.Assert.areEqual(System.Array.init(["a", "b"], System.String), arr);
        },
        containsWorks: function () {
            var arr = System.Array.init(["x", "y"], System.String);
            Bridge.Test.NUnit.Assert.true(System.Array.contains(arr, "x", System.String));
            Bridge.Test.NUnit.Assert.false(System.Array.contains(arr, "z", System.String));
        },
        containsUsesEqualsMethod: function () {
            var arr = System.Array.init([new Bridge.ClientTest.Batch4.ArrayTests.C(1), new Bridge.ClientTest.Batch4.ArrayTests.C(2), new Bridge.ClientTest.Batch4.ArrayTests.C(3)], Bridge.ClientTest.Batch4.ArrayTests.C);
            Bridge.Test.NUnit.Assert.true(System.Array.contains(arr, new Bridge.ClientTest.Batch4.ArrayTests.C(2), Bridge.ClientTest.Batch4.ArrayTests.C));
            Bridge.Test.NUnit.Assert.false(System.Array.contains(arr, new Bridge.ClientTest.Batch4.ArrayTests.C(4), Bridge.ClientTest.Batch4.ArrayTests.C));
        },
        sliceWithoutEndWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual(System.Array.init(["c", "d"], System.String), System.Array.init(["a", "b", "c", "d"], System.String).slice(2));
        },
        sliceWithEndWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual(System.Array.init(["b", "c"], System.String), System.Array.init(["a", "b", "c", "d"], System.String).slice(1, 3));
        },
        foreachWithArrayItemCallbackWorks: function () {
            var result = "";
            System.Array.forEach(System.Array.init(["a", "b", "c"], System.String), function (s) {
                    result = System.String.concat(result, s);
                });
            Bridge.Test.NUnit.Assert.areEqual("abc", result);
        },
        indexOfWithoutStartIndexWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual(1, System.Array.init(["a", "b", "c", "b"], System.String).indexOf("b"));
        },
        indexOfWithoutStartIndexUsesEqualsMethod: function () {
            var arr = System.Array.init([new Bridge.ClientTest.Batch4.ArrayTests.C(1), new Bridge.ClientTest.Batch4.ArrayTests.C(2), new Bridge.ClientTest.Batch4.ArrayTests.C(3)], Bridge.ClientTest.Batch4.ArrayTests.C);
            Bridge.Test.NUnit.Assert.areEqual(1, System.Array.indexOfT(arr, new Bridge.ClientTest.Batch4.ArrayTests.C(2)));
            Bridge.Test.NUnit.Assert.areEqual(-1, System.Array.indexOfT(arr, new Bridge.ClientTest.Batch4.ArrayTests.C(4)));
        },
        indexOfWithStartIndexWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual(3, System.Array.init(["a", "b", "c", "b"], System.String).indexOf("b", 2));
        },
        indexOfWithStartIndexUsesEqualsMethod: function () {
            var arr = System.Array.init([new Bridge.ClientTest.Batch4.ArrayTests.C(1), new Bridge.ClientTest.Batch4.ArrayTests.C(2), new Bridge.ClientTest.Batch4.ArrayTests.C(3), new Bridge.ClientTest.Batch4.ArrayTests.C(2)], Bridge.ClientTest.Batch4.ArrayTests.C);
            Bridge.Test.NUnit.Assert.areEqual(3, System.Array.indexOfT(arr, new Bridge.ClientTest.Batch4.ArrayTests.C(2), 2));
        },
        joinWithoutDelimiterWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual("a,b,c,b", System.Array.init(["a", "b", "c", "b"], System.String).join());
        },
        joinWithDelimiterWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual("a|b|c|b", System.Array.init(["a", "b", "c", "b"], System.String).join("|"));
        },
        reverseWorks: function () {
            var arr = System.Array.init([1, 3, 4, 1, 3, 2], System.Int32);
            arr.reverse();
            Bridge.Test.NUnit.Assert.areEqual(System.Array.init([2, 3, 1, 4, 3, 1], System.Int32), arr);
        },
        sortWithDefaultCompareWorks: function () {
            var arr = System.Array.init([1, 6, 6, 4, 2], System.Int32);
            System.Array.sort(arr);
            Bridge.Test.NUnit.Assert.areEqual(System.Array.init([1, 2, 4, 6, 6], System.Int32), arr);
        },
        sortWithCompareCallbackWorks: function () {
            var arr = System.Array.init([1, 6, 6, 4, 2], System.Int32);
            System.Array.sort(arr, new (System.Collections.Generic.Comparer$1(System.Int32))($asm.$.Bridge.ClientTest.Batch4.ArrayTests.f1));
            Bridge.Test.NUnit.Assert.areEqual(System.Array.init([6, 6, 4, 2, 1], System.Int32), arr);
        },
        foreachWhenCastToIListWorks: function () {
            var $t;
            var list = System.Array.init(["x", "y"], System.String);
            var result = "";
            $t = Bridge.getEnumerator(list, System.String);
            try {
                while ($t.moveNext()) {
                    var s = $t.Current;
                    result = System.String.concat(result, s);
                }
            }finally {
                if (Bridge.is($t, System.IDisposable)) {
                    $t.System$IDisposable$dispose();
                }
            }Bridge.Test.NUnit.Assert.areEqual("xy", result);
        },
        iCollectionCountWorks: function () {
            var l = System.Array.init(["x", "y", "z"], System.String);
            Bridge.Test.NUnit.Assert.areEqual(3, System.Array.getCount(l, System.String));
        },
        iCollectionAddWorks: function () {
            // #1548
            var l = System.Array.init(["x", "y", "z"], System.String);
            Bridge.Test.NUnit.Assert.throws$6(System.NotSupportedException, function () {
                System.Array.add(l, "a", System.String);
            });
        },
        iCollectionClearWorks_NDN_1548: function () {
            // #1548
            var l = System.Array.init(["x", "y", "z"], System.String);
            Bridge.Test.NUnit.Assert.throws$6(System.NotSupportedException, function () {
                System.Array.clear(l, System.String);
            });
            Bridge.Test.NUnit.Assert.areDeepEqual(System.Array.init(["x", "y", "z"], System.String), l);
        },
        iCollectionContainsWorks: function () {
            var l = System.Array.init(["x", "y", "z"], System.String);
            Bridge.Test.NUnit.Assert.true(System.Array.contains(l, "y", System.String));
            Bridge.Test.NUnit.Assert.false(System.Array.contains(l, "a", System.String));
        },
        iCollectionContainsUsesEqualsMethod: function () {
            var l = System.Array.init([new Bridge.ClientTest.Batch4.ArrayTests.C(1), new Bridge.ClientTest.Batch4.ArrayTests.C(2), new Bridge.ClientTest.Batch4.ArrayTests.C(3)], Bridge.ClientTest.Batch4.ArrayTests.C);
            Bridge.Test.NUnit.Assert.true(System.Array.contains(l, new Bridge.ClientTest.Batch4.ArrayTests.C(2), Bridge.ClientTest.Batch4.ArrayTests.C));
            Bridge.Test.NUnit.Assert.false(System.Array.contains(l, new Bridge.ClientTest.Batch4.ArrayTests.C(4), Bridge.ClientTest.Batch4.ArrayTests.C));
        },
        iCollectionRemoveWorks: function () {
            // #1548
            var l = System.Array.init(["x", "y", "z"], System.String);
            Bridge.Test.NUnit.Assert.throws$6(System.NotSupportedException, function () {
                System.Array.remove(l, "y", System.String);
            });
            Bridge.Test.NUnit.Assert.areDeepEqual(System.Array.init(["x", "y", "z"], System.String), l);
            Bridge.Test.NUnit.Assert.true(true); // adjust to keep count after rewriting
        },
        iListIndexingWorks: function () {
            var l = System.Array.init(["x", "y", "z"], System.String);
            Bridge.Test.NUnit.Assert.areEqual("y", System.Array.getItem(l, 1, System.String));
            System.Array.setItem(l, 1, "a", System.String);
            Bridge.Test.NUnit.Assert.areEqual(System.Array.init(["x", "a", "z"], System.String), l);
        },
        iListIndexOfWorks: function () {
            var l = System.Array.init(["x", "y", "z"], System.String);
            Bridge.Test.NUnit.Assert.areEqual(1, System.Array.indexOf(l, "y", 0, null, System.String));
            Bridge.Test.NUnit.Assert.areEqual(-1, System.Array.indexOf(l, "a", 0, null, System.String));
        },
        iListIndexOfUsesEqualsMethod: function () {
            var arr = System.Array.init([new Bridge.ClientTest.Batch4.ArrayTests.C(1), new Bridge.ClientTest.Batch4.ArrayTests.C(2), new Bridge.ClientTest.Batch4.ArrayTests.C(3)], Bridge.ClientTest.Batch4.ArrayTests.C);
            Bridge.Test.NUnit.Assert.areEqual(1, System.Array.indexOfT(arr, new Bridge.ClientTest.Batch4.ArrayTests.C(2)));
            Bridge.Test.NUnit.Assert.areEqual(-1, System.Array.indexOfT(arr, new Bridge.ClientTest.Batch4.ArrayTests.C(4)));
        },
        iListInsertWorks: function () {
            // #1548
            var l = System.Array.init(["x", "y", "z"], System.String);
            Bridge.Test.NUnit.Assert.throws$6(System.NotSupportedException, function () {
                System.Array.insert(l, 1, "a", System.String);
            });
            Bridge.Test.NUnit.Assert.areDeepEqual(System.Array.init(["x", "y", "z"], System.String), l);
        },
        iListRemoveAtWorks: function () {
            // #1548
            var l = System.Array.init(["x", "y", "z"], System.String);
            Bridge.Test.NUnit.Assert.throws$6(System.NotSupportedException, function () {
                System.Array.removeAt(l, 1, System.String);
            });
            Bridge.Test.NUnit.Assert.areDeepEqual(System.Array.init(["x", "y", "z"], System.String), l);

        },
        repeatWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual(System.Array.init(0, 0, System.Int32), System.Array.init(0, 10, System.Int32));
            Bridge.Test.NUnit.Assert.areEqual(System.Array.init([42, 42, 42], System.Int32), System.Array.init(3, 42, System.Int32));
            Bridge.Test.NUnit.Assert.areEqual(System.Array.init(["X", "X", "X", "X", "X"], System.String), System.Array.init(5, "X", System.String));
        },
        clearWorks: function () {
            var arr1 = System.Array.init([10, 11, 12, 13], System.Byte);
            System.Array.fill(arr1, 0, 2, 2);
            Bridge.Test.NUnit.Assert.areEqual(System.Array.init([10, 11, 0, 0], System.Byte), arr1);

            var arr2 = System.Array.init([10, 11, 12, 13], System.Int32);
            System.Array.fill(arr2, 0, 0, 4);
            Bridge.Test.NUnit.Assert.areEqual(System.Array.init([0, 0, 0, 0], System.Int32), arr2);

            var arr3 = System.Array.init(["A", "B", "C", "D"], System.String);
            System.Array.fill(arr3, null, 3, 1);
            Bridge.Test.NUnit.Assert.areEqual(System.Array.init(["A", "B", "C", null], System.String), arr3);
        },
        copyWithDifferentArraysWorks: function () {
            var arr1 = System.Array.init([1, 2, 3, 4], System.Int32);
            var arr2 = System.Array.init([9, 8, 7, 6], System.Int32);
            System.Array.copy(arr1, 0, arr2, 0, 2);
            Bridge.Test.NUnit.Assert.areEqual(System.Array.init([1, 2, 7, 6], System.Int32), arr2);

            var arr3 = System.Array.init([9, 8, 7, 6], System.Int32);
            System.Array.copy(arr1, 3, arr3, 2, 1);
            Bridge.Test.NUnit.Assert.areEqual(System.Array.init([9, 8, 4, 6], System.Int32), arr3);
        },
        copyWithinArrayWorks: function () {
            var arr1 = System.Array.init([1, 2, 3, 4], System.Int32);
            System.Array.copy(arr1, 0, arr1, 1, 2);
            Bridge.Test.NUnit.Assert.areEqual(System.Array.init([1, 1, 2, 4], System.Int32), arr1);

            var arr2 = System.Array.init([1, 2, 3, 4], System.Int32);
            System.Array.copy(arr2, 2, arr2, 1, 2);
            Bridge.Test.NUnit.Assert.areEqual(System.Array.init([1, 3, 4, 4], System.Int32), arr2);
        }
    });

    Bridge.ns("Bridge.ClientTest.Batch4.ArrayTests", $asm.$);

    Bridge.apply($asm.$.Bridge.ClientTest.Batch4.ArrayTests, {
        f1: function (x, y) {
            return ((y - x) | 0);
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.ArrayTests.C", {
        i: 0,
        ctor: function (i) {
            this.$initialize();
            this.i = i;
        },
        equals: function (o) {
            return Bridge.is(o, Bridge.ClientTest.Batch4.ArrayTests.C) && this.i === Bridge.cast(o, Bridge.ClientTest.Batch4.ArrayTests.C).i;
        },
        getHashCode: function () {
            return this.i;
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.Collections.Generic.ComparerTests", {
        typePropertiesAreCorrect_SPI_1546: function () {
            // #1546
            Bridge.Test.NUnit.Assert.areStrictEqual$1(System.Object, Bridge.Reflection.getBaseType(System.Collections.Generic.Comparer$1(System.Object)), "BaseType should be correct");
        },
        typePropertiesAreCorrect: function () {
            Bridge.Test.NUnit.Assert.areEqual$1("System.Collections.Generic.Comparer`1[[System.Object, mscorlib]]", Bridge.Reflection.getTypeFullName(System.Collections.Generic.Comparer$1(System.Object)), "FullName should be correct");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.isClass(System.Collections.Generic.Comparer$1(System.Object)), "IsClass should be true");

            var comparer = new (System.Collections.Generic.Comparer$1(System.Object))(System.Collections.Generic.Comparer$1.$default.fn);
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(comparer, System.Collections.Generic.Comparer$1(System.Object)), "is Comparer<object> should be true");
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(comparer, System.Collections.Generic.IComparer$1(System.Object)), "is IComparer<object> should be true");
        },
        defaultComparerCanOrderNumbers: function () {
            Bridge.Test.NUnit.Assert.areEqual$1(-1, new (System.Collections.Generic.Comparer$1(System.Int32))(System.Collections.Generic.Comparer$1.$default.fn).compare(3, 8), "Compare(3, 8) should be -1");
            Bridge.Test.NUnit.Assert.areEqual$1(0, new (System.Collections.Generic.Comparer$1(System.Int32))(System.Collections.Generic.Comparer$1.$default.fn).compare(3, 3), "Compare(3, 3) should be 0");
            Bridge.Test.NUnit.Assert.areEqual$1(1, new (System.Collections.Generic.Comparer$1(System.Int32))(System.Collections.Generic.Comparer$1.$default.fn).compare(8, 3), "Compare(8, 3) should be 1");
        },
        defaultComparerCanOrderNullValues: function () {
            Bridge.Test.NUnit.Assert.areEqual$1(1, new (System.Collections.Generic.Comparer$1(System.Int32))(System.Collections.Generic.Comparer$1.$default.fn).compare(0, null), "Compare(0, null) should be 1");
            Bridge.Test.NUnit.Assert.areEqual$1(-1, new (System.Collections.Generic.Comparer$1(System.Int32))(System.Collections.Generic.Comparer$1.$default.fn).compare(null, 0), "Compare(null, 0) should be -1");
            Bridge.Test.NUnit.Assert.areEqual$1(0, new (System.Collections.Generic.Comparer$1(System.Int32))(System.Collections.Generic.Comparer$1.$default.fn).compare(null, null), "Compare(null, null) should be 0");
        },
        defaultComparerUsesCompareMethodIfClassImplementsIComparable: function () {
            Bridge.Test.NUnit.Assert.areEqual$1(-1, new (System.Collections.Generic.Comparer$1(Bridge.ClientTest.Batch4.Collections.Generic.ComparerTests.C))(System.Collections.Generic.Comparer$1.$default.fn).compare(new Bridge.ClientTest.Batch4.Collections.Generic.ComparerTests.C(3), new Bridge.ClientTest.Batch4.Collections.Generic.ComparerTests.C(8)), "Compare(3, 8) should be -1");
            Bridge.Test.NUnit.Assert.areEqual$1(0, new (System.Collections.Generic.Comparer$1(Bridge.ClientTest.Batch4.Collections.Generic.ComparerTests.C))(System.Collections.Generic.Comparer$1.$default.fn).compare(new Bridge.ClientTest.Batch4.Collections.Generic.ComparerTests.C(3), new Bridge.ClientTest.Batch4.Collections.Generic.ComparerTests.C(3)), "Compare(3, 3) should be 0");
            Bridge.Test.NUnit.Assert.areEqual$1(1, new (System.Collections.Generic.Comparer$1(Bridge.ClientTest.Batch4.Collections.Generic.ComparerTests.C))(System.Collections.Generic.Comparer$1.$default.fn).compare(new Bridge.ClientTest.Batch4.Collections.Generic.ComparerTests.C(8), new Bridge.ClientTest.Batch4.Collections.Generic.ComparerTests.C(3)), "Compare(8, 3) should be 1");
        },
        createWorks: function () {
            var comparer = new (System.Collections.Generic.Comparer$1(System.Int32))($asm.$.Bridge.ClientTest.Batch4.Collections.Generic.ComparerTests.f1);
            Bridge.Test.NUnit.Assert.areEqual$1(42, comparer.compare(8, 3), "The result should be 42");
        }
    });

    Bridge.ns("Bridge.ClientTest.Batch4.Collections.Generic.ComparerTests", $asm.$);

    Bridge.apply($asm.$.Bridge.ClientTest.Batch4.Collections.Generic.ComparerTests, {
        f1: function (x, y) {
            Bridge.Test.NUnit.Assert.areEqual$1(8, x, "x should be 8");
            Bridge.Test.NUnit.Assert.areEqual$1(3, y, "y should be 3");
            return 42;
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.Collections.Generic.ComparerTests.C", {
        inherits: function () { return [System.IComparable$1(Bridge.ClientTest.Batch4.Collections.Generic.ComparerTests.C)]; },
        value: 0,
        config: {
            alias: [
            "compareTo", "System$IComparable$1$Bridge$ClientTest$Batch4$Collections$Generic$ComparerTests$C$compareTo"
            ]
        },
        ctor: function (value) {
            this.$initialize();
            this.value = value;
        },
        compareTo: function (other) {
            return Bridge.compare(this.value, other.value);
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.Collections.Generic.EqualityComparerTests", {
        typePropertiesAreCorrect_SPI_1546: function () {
            // #1546
            Bridge.Test.NUnit.Assert.areStrictEqual$1(System.Object, Bridge.Reflection.getBaseType(System.Collections.Generic.EqualityComparer$1(System.Object)), "BaseType should be correct");
        },
        typePropertiesAreCorrect: function () {
            Bridge.Test.NUnit.Assert.areEqual$1("System.Collections.Generic.EqualityComparer`1[[System.Object, mscorlib]]", Bridge.Reflection.getTypeFullName(System.Collections.Generic.EqualityComparer$1(System.Object)), "FullName should be correct");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.isClass(System.Collections.Generic.EqualityComparer$1(System.Object)), "IsClass should be true");

            var dict = System.Collections.Generic.EqualityComparer$1(System.Object).def;
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(dict, System.Collections.Generic.EqualityComparer$1(System.Object)), "is EqualityComparer<object> should be true");
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(dict, System.Collections.Generic.IEqualityComparer$1(System.Object)), "is IEqualityComparer<object> should be true");
        },
        defaultComparerCanGetHashCodeOfNumber: function () {
            Bridge.Test.NUnit.Assert.areEqual(Bridge.getHashCode((12345)), System.Collections.Generic.EqualityComparer$1(System.Object).def.getHashCode2(Bridge.box(12345, System.Int32)));
        },
        defaultComparerReturnsZeroAsHashCodeForNullAndUndefined: function () {
            Bridge.Test.NUnit.Assert.areEqual(0, System.Collections.Generic.EqualityComparer$1(System.Object).def.getHashCode2(null));
            Bridge.Test.NUnit.Assert.areEqual(0, System.Collections.Generic.EqualityComparer$1(System.Object).def.getHashCode2(undefined));
        },
        defaultComparerCanDetermineEquality: function () {
            var o1 = {  }, o2 = {  };
            Bridge.Test.NUnit.Assert.true(System.Collections.Generic.EqualityComparer$1(System.Object).def.equals2(null, null));
            Bridge.Test.NUnit.Assert.false(System.Collections.Generic.EqualityComparer$1(System.Object).def.equals2(null, o1));
            Bridge.Test.NUnit.Assert.false(System.Collections.Generic.EqualityComparer$1(System.Object).def.equals2(o1, null));
            Bridge.Test.NUnit.Assert.true(System.Collections.Generic.EqualityComparer$1(System.Object).def.equals2(o1, o1));
            Bridge.Test.NUnit.Assert.false(System.Collections.Generic.EqualityComparer$1(System.Object).def.equals2(o1, o2));
        },
        defaultComparerInvokesOverriddenGetHashCode: function () {
            Bridge.Test.NUnit.Assert.areEqual(42158, System.Collections.Generic.EqualityComparer$1(System.Object).def.getHashCode2(Bridge.merge(new Bridge.ClientTest.Batch4.Collections.Generic.EqualityComparerTests.MyClass(), {
                hashCode: 42158
            } )));
        },
        defaultComparerInvokesOverriddenEquals: function () {
            var c = new Bridge.ClientTest.Batch4.Collections.Generic.EqualityComparerTests.MyClass();
            var other = new Bridge.ClientTest.Batch4.Collections.Generic.EqualityComparerTests.MyClass();
            c.shouldEqual = false;
            Bridge.Test.NUnit.Assert.false(System.Collections.Generic.EqualityComparer$1(System.Object).def.equals2(c, other));
            Bridge.Test.NUnit.Assert.areStrictEqual(other, Bridge.unbox(c.other));

            c.shouldEqual = true;
            c.other = null;
            Bridge.Test.NUnit.Assert.true(System.Collections.Generic.EqualityComparer$1(System.Object).def.equals2(c, other));
            Bridge.Test.NUnit.Assert.areStrictEqual(other, Bridge.unbox(c.other));

            c.shouldEqual = true;
            c.other = other;
            Bridge.Test.NUnit.Assert.false(System.Collections.Generic.EqualityComparer$1(System.Object).def.equals2(c, null)); // We should not invoke our own equals so its return value does not matter.
            Bridge.Test.NUnit.Assert.areEqual(other, Bridge.unbox(c.other)); // We should not invoke our own equals so the 'other' member should not be set.
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.Collections.Generic.EqualityComparerTests.MyClass", {
        hashCode: 0,
        other: null,
        shouldEqual: false,
        getHashCode: function () {
            return this.hashCode;
        },
        equals: function (o) {
            this.other = o;
            return this.shouldEqual;
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.Collections.Generic.GenericDictionaryTests", {
        typePropertiesAreCorrect: function () {
            Bridge.Test.NUnit.Assert.areEqual$1("System.Collections.Generic.Dictionary`2[[System.Int32, mscorlib],[System.String, mscorlib]]", Bridge.Reflection.getTypeFullName(System.Collections.Generic.Dictionary$2(System.Int32,System.String)), "FullName should be correct");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.isClass(System.Collections.Generic.Dictionary$2(System.Int32,System.String)), "IsClass should be true");
            var dict = new (System.Collections.Generic.Dictionary$2(System.Int32,System.String))();
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(dict, System.Collections.Generic.Dictionary$2(System.Int32,System.String)), "is Dictionary<int,string> should be true");
            // #1626
            //Assert.True(dict is IReadOnlyDictionary<int, string>, "is IReadOnlyDictionary<int,string> should be true");
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(dict, System.Collections.Generic.IDictionary$2(System.Int32,System.String)), "is IDictionary<int,string> should be true");
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(dict, System.Collections.Generic.IEnumerable$1(System.Collections.Generic.KeyValuePair$2(System.Int32,System.String))), "is IEnumerable<KeyValuePair<int,string>> should be true");
        },
        defaultConstructorWorks_SPI_1549: function () {
            var d = new (System.Collections.Generic.Dictionary$2(System.Int32,System.String))();
            Bridge.Test.NUnit.Assert.areEqual(0, d.count);

            // #1549
            Bridge.Test.NUnit.Assert.areStrictEqual(System.Collections.Generic.EqualityComparer$1(System.Int32).def, d.comparer);
        },
        capacityConstructorWorks_SPI_1549: function () {
            var d = new (System.Collections.Generic.Dictionary$2(System.Int32, System.String))();
            Bridge.Test.NUnit.Assert.areEqual(0, d.count);

            // #1549
            Bridge.Test.NUnit.Assert.areStrictEqual(System.Collections.Generic.EqualityComparer$1(System.Int32).def, d.comparer);
        },
        capacityAndEqualityComparerWorks: function () {
            var c = new Bridge.ClientTest.Batch4.Collections.Generic.GenericDictionaryTests.TestEqualityComparer();
            var d = new (System.Collections.Generic.Dictionary$2(System.String, System.String))(null, c);
            Bridge.Test.NUnit.Assert.areEqual(0, d.count);

            Bridge.Test.NUnit.Assert.areStrictEqual(c, d.comparer);
        },
        copyConstructorWorks_SPI_1549: function () {
            var orig = new (System.Collections.Generic.Dictionary$2(System.String,System.Int32))();
            orig.set("a", 1);
            orig.set("b", 2);

            var d = new (System.Collections.Generic.Dictionary$2(System.String,System.Int32))(orig);
            var d2 = new (System.Collections.Generic.Dictionary$2(System.String,System.Int32))(d);
            Bridge.Test.NUnit.Assert.false(Bridge.referenceEquals(d, d2));
            Bridge.Test.NUnit.Assert.areEqual(2, d2.count);
            Bridge.Test.NUnit.Assert.areEqual(1, d2.get("a"));
            Bridge.Test.NUnit.Assert.areEqual(2, d2.get("b"));

            // #1549
            Bridge.Test.NUnit.Assert.areStrictEqual(System.Collections.Generic.EqualityComparer$1(System.String).def, d2.comparer);
        },
        equalityComparerOnlyConstructorWorks: function () {
            var c = new Bridge.ClientTest.Batch4.Collections.Generic.GenericDictionaryTests.TestEqualityComparer();
            var d = new (System.Collections.Generic.Dictionary$2(System.String, System.Int32))(null, c);
            Bridge.Test.NUnit.Assert.areEqual(0, d.count);
            Bridge.Test.NUnit.Assert.areStrictEqual(c, d.comparer);
        },
        constructorWithBothDictionaryAndEqualityComparerWorks: function () {
            var c = new Bridge.ClientTest.Batch4.Collections.Generic.GenericDictionaryTests.TestEqualityComparer();
            var orig = new (System.Collections.Generic.Dictionary$2(System.String,System.Int32))();
            orig.set("a", 1);
            orig.set("b", 2);

            var d = new (System.Collections.Generic.Dictionary$2(System.String,System.Int32))(orig);
            var d2 = new (System.Collections.Generic.Dictionary$2(System.String,System.Int32))(d, c);
            Bridge.Test.NUnit.Assert.false(Bridge.referenceEquals(d, d2));
            Bridge.Test.NUnit.Assert.areEqual(2, d2.count);
            Bridge.Test.NUnit.Assert.areEqual(1, d2.get("a"));
            Bridge.Test.NUnit.Assert.areEqual(2, d2.get("b"));
            Bridge.Test.NUnit.Assert.areStrictEqual(c, d2.comparer);
        },
        countWorks: function () {
            var d = new (System.Collections.Generic.Dictionary$2(System.Int32,System.String))();
            Bridge.Test.NUnit.Assert.areEqual(0, d.count);
            d.add(1, "1");
            Bridge.Test.NUnit.Assert.areEqual(1, d.count);
            d.add(2, "2");
            Bridge.Test.NUnit.Assert.areEqual(2, d.count);
        },
        keysWorks: function () {
            var $t;
            var d = $asm.$.Bridge.ClientTest.Batch4.Collections.Generic.GenericDictionaryTests.f1(new (System.Collections.Generic.Dictionary$2(System.String,System.String))());
            var keys = d.getKeys();
            Bridge.Test.NUnit.Assert.true(Bridge.is(keys, System.Collections.Generic.IEnumerable$1(System.String)));
            Bridge.Test.NUnit.Assert.true(Bridge.is(keys, System.Collections.Generic.ICollection$1(System.String)));
            Bridge.Test.NUnit.Assert.areEqual(2, System.Array.getCount(keys, System.String));
            Bridge.Test.NUnit.Assert.true(System.Array.contains(keys, "1", System.String));
            Bridge.Test.NUnit.Assert.true(System.Array.contains(keys, "2", System.String));
            Bridge.Test.NUnit.Assert.false(System.Array.contains(keys, "a", System.String));

            var count = 0;
            $t = Bridge.getEnumerator(d.getKeys(), System.String);
            try {
                while ($t.moveNext()) {
                    var key = $t.Current;
                    if (!Bridge.referenceEquals(key, "1") && !Bridge.referenceEquals(key, "2")) {
                        Bridge.Test.NUnit.Assert.fail$1(System.String.concat("Unexpected key ", key));
                    }
                    count = (count + 1) | 0;
                }
            }finally {
                if (Bridge.is($t, System.IDisposable)) {
                    $t.System$IDisposable$dispose();
                }
            }Bridge.Test.NUnit.Assert.areEqual(2, count);
        },
        valuesWorks: function () {
            var $t;
            var d = $asm.$.Bridge.ClientTest.Batch4.Collections.Generic.GenericDictionaryTests.f2(new (System.Collections.Generic.Dictionary$2(System.Int32,System.String))());
            var values = d.getValues();
            Bridge.Test.NUnit.Assert.true(Bridge.is(values, System.Collections.Generic.IEnumerable$1(System.String)));
            Bridge.Test.NUnit.Assert.true(Bridge.is(values, System.Collections.Generic.ICollection$1(System.String)));
            Bridge.Test.NUnit.Assert.areEqual(2, System.Array.getCount(values, System.String));
            Bridge.Test.NUnit.Assert.true(System.Array.contains(values, "a", System.String));
            Bridge.Test.NUnit.Assert.true(System.Array.contains(values, "b", System.String));
            Bridge.Test.NUnit.Assert.false(System.Array.contains(values, "1", System.String));

            var count = 0;
            $t = Bridge.getEnumerator(d.getValues(), System.String);
            try {
                while ($t.moveNext()) {
                    var value = $t.Current;
                    if (!Bridge.referenceEquals(value, "a") && !Bridge.referenceEquals(value, "b")) {
                        Bridge.Test.NUnit.Assert.fail$1(System.String.concat("Unexpected key ", value));
                    }
                    count = (count + 1) | 0;
                }
            }finally {
                if (Bridge.is($t, System.IDisposable)) {
                    $t.System$IDisposable$dispose();
                }
            }Bridge.Test.NUnit.Assert.areEqual(2, count);
        },
        indexerGetterWorksForExistingItems: function () {
            var d = $asm.$.Bridge.ClientTest.Batch4.Collections.Generic.GenericDictionaryTests.f3(new (System.Collections.Generic.Dictionary$2(System.Int32,System.String))());
            Bridge.Test.NUnit.Assert.areEqual("a", d.get(1));
        },
        indexerSetterWorks: function () {
            var d = $asm.$.Bridge.ClientTest.Batch4.Collections.Generic.GenericDictionaryTests.f4(new (System.Collections.Generic.Dictionary$2(System.Int32,System.String))());
            d.set(2, "c");
            d.set(3, "d");
            Bridge.Test.NUnit.Assert.areEqual(d.count, 3);
            Bridge.Test.NUnit.Assert.areEqual("a", d.get(1));
            Bridge.Test.NUnit.Assert.areEqual("c", d.get(2));
            Bridge.Test.NUnit.Assert.areEqual("d", d.get(3));
        },
        indexerGetterThrowsForNonExistingItems: function () {
            var d = $asm.$.Bridge.ClientTest.Batch4.Collections.Generic.GenericDictionaryTests.f5(new (System.Collections.Generic.Dictionary$2(System.Int32,System.String))());
            try {
                var x = d.get(10);
                Bridge.Test.NUnit.Assert.true(false);
            }
            catch ($e1) {
                $e1 = System.Exception.create($e1);
                if (Bridge.is($e1, System.Collections.Generic.KeyNotFoundException)) {
                } else {
                    throw $e1;
                }
            }
        },
        addWorks: function () {
            var d = $asm.$.Bridge.ClientTest.Batch4.Collections.Generic.GenericDictionaryTests.f6(new (System.Collections.Generic.Dictionary$2(System.Int32,System.String))());
            d.add(3, "c");
            Bridge.Test.NUnit.Assert.areEqual(d.count, 3);
            Bridge.Test.NUnit.Assert.areEqual("a", d.get(1));
            Bridge.Test.NUnit.Assert.areEqual("b", d.get(2));
            Bridge.Test.NUnit.Assert.areEqual("c", d.get(3));
        },
        addThrowsIfItemAlreadyExists: function () {
            var d = $asm.$.Bridge.ClientTest.Batch4.Collections.Generic.GenericDictionaryTests.f7(new (System.Collections.Generic.Dictionary$2(System.Int32,System.String))());
            try {
                d.add(2, "b");
                Bridge.Test.NUnit.Assert.true(false);
            }
            catch ($e1) {
                $e1 = System.Exception.create($e1);
                if (Bridge.is($e1, System.ArgumentException)) {
                } else {
                    throw $e1;
                }
            }
        },
        clearWorks: function () {
            var d = $asm.$.Bridge.ClientTest.Batch4.Collections.Generic.GenericDictionaryTests.f8(new (System.Collections.Generic.Dictionary$2(System.Int32,System.String))());
            d.clear();
            Bridge.Test.NUnit.Assert.areEqual(0, d.count);
        },
        containsKeyWorks: function () {
            var d = $asm.$.Bridge.ClientTest.Batch4.Collections.Generic.GenericDictionaryTests.f9(new (System.Collections.Generic.Dictionary$2(System.Int32,System.String))());
            Bridge.Test.NUnit.Assert.true(d.containsKey(1));
            Bridge.Test.NUnit.Assert.false(d.containsKey(3));
        },
        enumeratingWorks: function () {
            var $t;
            var d = $asm.$.Bridge.ClientTest.Batch4.Collections.Generic.GenericDictionaryTests.f10(new (System.Collections.Generic.Dictionary$2(System.String,System.String))());
            var count = 0;
            $t = Bridge.getEnumerator(d);
            try {
                while ($t.moveNext()) {
                    var kvp = $t.Current;
                    if (Bridge.referenceEquals(kvp.key, "1")) {
                        Bridge.Test.NUnit.Assert.areEqual("a", kvp.value);
                    } else if (Bridge.referenceEquals(kvp.key, "2")) {
                        Bridge.Test.NUnit.Assert.areEqual("b", kvp.value);
                    } else {
                        Bridge.Test.NUnit.Assert.fail$1(System.String.concat("Invalid key ", kvp.key));
                    }
                    count = (count + 1) | 0;
                }
            }finally {
                if (Bridge.is($t, System.IDisposable)) {
                    $t.System$IDisposable$dispose();
                }
            }Bridge.Test.NUnit.Assert.areEqual(2, count);
        },
        removeWorks: function () {
            var d = $asm.$.Bridge.ClientTest.Batch4.Collections.Generic.GenericDictionaryTests.f11(new (System.Collections.Generic.Dictionary$2(System.Int32,System.String))());
            Bridge.Test.NUnit.Assert.areStrictEqual(true, d.remove(2));
            Bridge.Test.NUnit.Assert.areStrictEqual(false, d.remove(3));
            Bridge.Test.NUnit.Assert.areEqual(1, d.count);
            Bridge.Test.NUnit.Assert.areEqual("a", d.get(1));
        },
        tryGetValueWithIntKeysWorks: function () {
            var d = $asm.$.Bridge.ClientTest.Batch4.Collections.Generic.GenericDictionaryTests.f12(new (System.Collections.Generic.Dictionary$2(System.String,System.Int32))());
            var i = { };

            Bridge.Test.NUnit.Assert.true(d.tryGetValue("a", i));
            Bridge.Test.NUnit.Assert.areEqual(1, i.v);
            Bridge.Test.NUnit.Assert.false(d.tryGetValue("c", i));
            Bridge.Test.NUnit.Assert.areEqual(0, i.v);
        },
        tryGetValueWithObjectKeysWorks: function () {
            var d = $asm.$.Bridge.ClientTest.Batch4.Collections.Generic.GenericDictionaryTests.f13(new (System.Collections.Generic.Dictionary$2(System.String,System.Object))());
            var o = { };

            Bridge.Test.NUnit.Assert.true(d.tryGetValue("a", o));
            Bridge.Test.NUnit.Assert.areEqual(1, Bridge.unbox(o.v));
            Bridge.Test.NUnit.Assert.false(d.tryGetValue("c", o));
            Bridge.Test.NUnit.Assert.areStrictEqual(null, Bridge.unbox(o.v));
        },
        canUseCustomComparer: function () {
            var d = $asm.$.Bridge.ClientTest.Batch4.Collections.Generic.GenericDictionaryTests.f14(new (System.Collections.Generic.Dictionary$2(System.String, System.Int32))(null, new Bridge.ClientTest.Batch4.Collections.Generic.GenericDictionaryTests.TestEqualityComparer()));
            d.set("a2", 100);
            Bridge.Test.NUnit.Assert.areEqual(100, d.get("a3"));
            Bridge.Test.NUnit.Assert.areEqual(2, d.count);
        }
    });

    Bridge.ns("Bridge.ClientTest.Batch4.Collections.Generic.GenericDictionaryTests", $asm.$);

    Bridge.apply($asm.$.Bridge.ClientTest.Batch4.Collections.Generic.GenericDictionaryTests, {
        f1: function (_o10) {
            _o10.add("1", "a");
            _o10.add("2", "b");
            return _o10;
        },
        f2: function (_o11) {
            _o11.add(1, "a");
            _o11.add(2, "b");
            return _o11;
        },
        f3: function (_o12) {
            _o12.add(1, "a");
            _o12.add(2, "b");
            return _o12;
        },
        f4: function (_o13) {
            _o13.add(1, "a");
            _o13.add(2, "b");
            return _o13;
        },
        f5: function (_o14) {
            _o14.add(1, "a");
            _o14.add(2, "b");
            return _o14;
        },
        f6: function (_o15) {
            _o15.add(1, "a");
            _o15.add(2, "b");
            return _o15;
        },
        f7: function (_o16) {
            _o16.add(1, "a");
            _o16.add(2, "b");
            return _o16;
        },
        f8: function (_o17) {
            _o17.add(1, "a");
            _o17.add(2, "b");
            return _o17;
        },
        f9: function (_o18) {
            _o18.add(1, "a");
            _o18.add(2, "b");
            return _o18;
        },
        f10: function (_o19) {
            _o19.add("1", "a");
            _o19.add("2", "b");
            return _o19;
        },
        f11: function (_o20) {
            _o20.add(1, "a");
            _o20.add(2, "b");
            return _o20;
        },
        f12: function (_o21) {
            _o21.add("a", 1);
            _o21.add("b", 2);
            return _o21;
        },
        f13: function (_o22) {
            _o22.add("a", Bridge.box(1, System.Int32));
            _o22.add("b", "X");
            return _o22;
        },
        f14: function (_o23) {
            _o23.add("a", 1);
            _o23.add("b", 2);
            return _o23;
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.Collections.Generic.GenericDictionaryTests.TestEqualityComparer", {
        inherits: [System.Collections.Generic.EqualityComparer$1(System.String)],
        config: {
            alias: [
            "equals2", "System$Collections$Generic$IEqualityComparer$1$System$String$equals2",
            "getHashCode2", "System$Collections$Generic$IEqualityComparer$1$System$String$getHashCode2"
            ]
        },
        equals2: function (x, y) {
            return x.charCodeAt(0) === y.charCodeAt(0);
        },
        getHashCode2: function (obj) {
            return obj.charCodeAt(0);
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.Collections.Generic.ICollectionTests", {
        typePropertiesAreCorrect: function () {
            Bridge.Test.NUnit.Assert.areEqual$1("System.Collections.Generic.ICollection`1[[System.Object, mscorlib]]", Bridge.Reflection.getTypeFullName(System.Collections.Generic.ICollection$1(System.Object)), "FullName should be correct");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.isInterface(System.Collections.Generic.ICollection$1(System.Object)), "IsInterface should be true");

            var interfaces = Bridge.Reflection.getInterfaces(System.Collections.Generic.ICollection$1(System.Object));
            Bridge.Test.NUnit.Assert.areEqual$1(2, interfaces.length, "Interfaces length");
            Bridge.Test.NUnit.Assert.areEqual$1(System.Collections.Generic.IEnumerable$1(System.Object), interfaces[System.Array.index(0, interfaces)], "Interfaces");
        },
        arrayImplementsICollection: function () {
            Bridge.Test.NUnit.Assert.true(Bridge.is(System.Array.init(1, 0, System.Int32), System.Collections.Generic.ICollection$1(System.Int32)));
        },
        customClassThatShouldImplementICollectionDoesSo: function () {
            Bridge.Test.NUnit.Assert.true(Bridge.is(new Bridge.ClientTest.Batch4.Collections.Generic.ICollectionTests.MyCollection(System.Array.init(0, null, System.String)), System.Collections.Generic.ICollection$1(System.String)));
        },
        arrayCastToICollectionCountWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual(3, System.Array.getCount(Bridge.cast(System.Array.init(["x", "y", "z"], System.String), System.Collections.Generic.ICollection$1(System.String)), System.String));
        },
        classImplementingICollectionCountWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual(2, new Bridge.ClientTest.Batch4.Collections.Generic.ICollectionTests.MyCollection(System.Array.init(["x", "y"], System.String)).Count);
        },
        classImplementingICollectionCastToICollectionCountWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual(3, System.Array.getCount(Bridge.cast(new Bridge.ClientTest.Batch4.Collections.Generic.ICollectionTests.MyCollection(System.Array.init(["x", "y", "z"], System.String)), System.Collections.Generic.ICollection$1(System.String)), System.String));
        },
        classImplementingICollectionAddWorks: function () {
            var c = new Bridge.ClientTest.Batch4.Collections.Generic.ICollectionTests.MyCollection(System.Array.init(["x", "y"], System.String));
            c.add("z");
            Bridge.Test.NUnit.Assert.areEqual(3, c.Count);
            Bridge.Test.NUnit.Assert.true(c.contains("z"));
        },
        classImplementingICollectionCastToICollectionAddWorks: function () {
            var c = new Bridge.ClientTest.Batch4.Collections.Generic.ICollectionTests.MyCollection(System.Array.init(["x", "y"], System.String));
            System.Array.add(c, "z", System.String);
            Bridge.Test.NUnit.Assert.areEqual(3, System.Array.getCount(c, System.String));
            Bridge.Test.NUnit.Assert.true(System.Array.contains(c, "z", System.String));
        },
        classImplementingICollectionClearWorks: function () {
            var c = new Bridge.ClientTest.Batch4.Collections.Generic.ICollectionTests.MyCollection(System.Array.init(["x", "y"], System.String));
            c.clear();
            Bridge.Test.NUnit.Assert.areEqual(0, c.Count);
        },
        classImplementingICollectionCastToICollectionClearWorks: function () {
            var c = new Bridge.ClientTest.Batch4.Collections.Generic.ICollectionTests.MyCollection(System.Array.init(["x", "y"], System.String));
            System.Array.clear(c, System.String);
            Bridge.Test.NUnit.Assert.areEqual(0, System.Array.getCount(c, System.String));
        },
        arrayCastToICollectionContainsWorks: function () {
            var arr = System.Array.init([new Bridge.ClientTest.Batch4.Collections.Generic.ICollectionTests.C(1), new Bridge.ClientTest.Batch4.Collections.Generic.ICollectionTests.C(2), new Bridge.ClientTest.Batch4.Collections.Generic.ICollectionTests.C(3)], Bridge.ClientTest.Batch4.Collections.Generic.ICollectionTests.C);
            Bridge.Test.NUnit.Assert.true(System.Array.contains(arr, new Bridge.ClientTest.Batch4.Collections.Generic.ICollectionTests.C(2), Bridge.ClientTest.Batch4.Collections.Generic.ICollectionTests.C));
            Bridge.Test.NUnit.Assert.false(System.Array.contains(arr, new Bridge.ClientTest.Batch4.Collections.Generic.ICollectionTests.C(4), Bridge.ClientTest.Batch4.Collections.Generic.ICollectionTests.C));
        },
        classImplementingICollectionContainsWorks: function () {
            var c = new Bridge.ClientTest.Batch4.Collections.Generic.ICollectionTests.MyCollection(System.Array.init(["x", "y"], System.String));
            Bridge.Test.NUnit.Assert.true(c.contains("x"));
            Bridge.Test.NUnit.Assert.false(c.contains("z"));
        },
        classImplementingICollectionCastToICollectionContainsWorks: function () {
            var c = new Bridge.ClientTest.Batch4.Collections.Generic.ICollectionTests.MyCollection(System.Array.init(["x", "y"], System.String));
            Bridge.Test.NUnit.Assert.true(System.Array.contains(c, "x", System.String));
            Bridge.Test.NUnit.Assert.false(System.Array.contains(c, "z", System.String));
        },
        classImplementingICollectionRemoveWorks: function () {
            var c = new Bridge.ClientTest.Batch4.Collections.Generic.ICollectionTests.MyCollection(System.Array.init(["x", "y"], System.String));
            c.remove("x");
            Bridge.Test.NUnit.Assert.areEqual(1, c.Count);
            c.remove("y");
            Bridge.Test.NUnit.Assert.areEqual(0, c.Count);
        },
        classImplementingICollectionCastToICollectionRemoveWorks: function () {
            var c = new Bridge.ClientTest.Batch4.Collections.Generic.ICollectionTests.MyCollection(System.Array.init(["x", "y"], System.String));
            System.Array.remove(c, "x", System.String);
            Bridge.Test.NUnit.Assert.areEqual(1, System.Array.getCount(c, System.String));
            System.Array.remove(c, "y", System.String);
            Bridge.Test.NUnit.Assert.areEqual(0, System.Array.getCount(c, System.String));
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.Collections.Generic.ICollectionTests.C", {
        _i: 0,
        ctor: function (i) {
            this.$initialize();
            this._i = i;
        },
        equals: function (o) {
            return Bridge.is(o, Bridge.ClientTest.Batch4.Collections.Generic.ICollectionTests.C) && this._i === Bridge.cast(o, Bridge.ClientTest.Batch4.Collections.Generic.ICollectionTests.C)._i;
        },
        getHashCode: function () {
            return this._i;
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.Collections.Generic.ICollectionTests.MyCollection", {
        inherits: [System.Collections.Generic.ICollection$1(System.String)],
        config: {
            properties: {
                Items: null,
                Count: {
                    get: function () {
                        return this.Items.Count;
                    }
                },
                IsReadOnly: {
                    get: function () {
                        return false;
                    }
                }
            },
            alias: [
            "getEnumerator", "System$Collections$Generic$IEnumerable$1$System$String$getEnumerator",
            "Count", "System$Collections$Generic$ICollection$1$System$String$Count",
            "IsReadOnly", "System$Collections$Generic$ICollection$1$System$String$IsReadOnly",
            "add", "System$Collections$Generic$ICollection$1$System$String$add",
            "clear", "System$Collections$Generic$ICollection$1$System$String$clear",
            "contains", "System$Collections$Generic$ICollection$1$System$String$contains",
            "copyTo", "System$Collections$Generic$ICollection$1$System$String$copyTo",
            "remove", "System$Collections$Generic$ICollection$1$System$String$remove"
            ]
        },
        ctor: function (items) {
            this.$initialize();
            this.Items = new (System.Collections.Generic.List$1(System.String))(items);
        },
        System$Collections$IEnumerable$getEnumerator: function () {
            return this.getEnumerator();
        },
        getEnumerator: function () {
            return this.Items.getEnumerator();
        },
        add: function (item) {
            this.Items.add(item);
        },
        clear: function () {
            this.Items.clear();
        },
        contains: function (item) {
            return this.Items.contains(item);
        },
        copyTo: function (array, arrayIndex) {
            this.Items.copyTo(array, arrayIndex);
        },
        remove: function (item) {
            return this.Items.remove(item);
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.Collections.Generic.IDictionaryTests", {
        typePropertiesAreCorrect: function () {
            Bridge.Test.NUnit.Assert.areEqual$1("System.Collections.Generic.IDictionary`2[[System.Object, mscorlib],[System.Object, mscorlib]]", Bridge.Reflection.getTypeFullName(System.Collections.Generic.IDictionary$2(System.Object,System.Object)), "FullName should be correct");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.isInterface(System.Collections.Generic.IDictionary$2(System.Object,System.Object)), "IsInterface should be true");

            var interfaces = Bridge.Reflection.getInterfaces(System.Collections.Generic.IDictionary$2(System.Object,System.Object));
            Bridge.Test.NUnit.Assert.areEqual$1(2, interfaces.length, "Interfaces length");
            Bridge.Test.NUnit.Assert.areEqual$1(System.Collections.Generic.IEnumerable$1(System.Collections.Generic.KeyValuePair$2(System.Object,System.Object)), interfaces[System.Array.index(0, interfaces)], "Interfaces");
        },
        classImplementsInterfaces_SPI_1626: function () {
            Bridge.Test.NUnit.Assert.true(Bridge.is(new Bridge.ClientTest.Batch4.Collections.Generic.IDictionaryTests.MyDictionary.ctor(), System.Collections.Generic.IDictionary$2(System.Int32,System.String)));
            // #1626
            //Assert.True((object)new MyDictionary() is IReadOnlyDictionary<int, string>);
        },
        countWorks: function () {
            var d = new Bridge.ClientTest.Batch4.Collections.Generic.IDictionaryTests.MyDictionary.ctor();
            Bridge.Test.NUnit.Assert.areEqual(0, d.Count);

            var d2 = new Bridge.ClientTest.Batch4.Collections.Generic.IDictionaryTests.MyDictionary.$ctor1($asm.$.Bridge.ClientTest.Batch4.Collections.Generic.IDictionaryTests.f1(new (System.Collections.Generic.Dictionary$2(System.Int32,System.String))()));
            Bridge.Test.NUnit.Assert.areEqual(1, d2.Count);

            var d3 = new Bridge.ClientTest.Batch4.Collections.Generic.IDictionaryTests.MyDictionary.ctor();
            Bridge.Test.NUnit.Assert.areEqual(0, d3.Count);
        },
        keysWorks: function () {
            var $t;
            var actualKeys = System.Array.init([3, 6, 9], System.Int32);
            var d = new Bridge.ClientTest.Batch4.Collections.Generic.IDictionaryTests.MyDictionary.$ctor1($asm.$.Bridge.ClientTest.Batch4.Collections.Generic.IDictionaryTests.f2(new (System.Collections.Generic.Dictionary$2(System.Int32,System.String))()));
            var keys = Bridge.cast(d, System.Collections.Generic.IDictionary$2(System.Int32,System.String)).System$Collections$Generic$IDictionary$2$System$Int32$System$String$Keys;
            Bridge.Test.NUnit.Assert.true(Bridge.is(keys, System.Collections.Generic.IEnumerable$1(System.Int32)));
            Bridge.Test.NUnit.Assert.true(Bridge.hasValue(keys));

            var i = 0;
            $t = Bridge.getEnumerator(keys, System.Int32);
            try {
                while ($t.moveNext()) {
                    var key = $t.Current;
                    Bridge.Test.NUnit.Assert.areEqual(actualKeys[System.Array.index(i, actualKeys)], key);
                    i = (i + 1) | 0;
                }
            }finally {
                if (Bridge.is($t, System.IDisposable)) {
                    $t.System$IDisposable$dispose();
                }
            }Bridge.Test.NUnit.Assert.areEqual(actualKeys.length, i);
        },
        getItemWorks: function () {
            var d = new Bridge.ClientTest.Batch4.Collections.Generic.IDictionaryTests.MyDictionary.$ctor1($asm.$.Bridge.ClientTest.Batch4.Collections.Generic.IDictionaryTests.f3(new (System.Collections.Generic.Dictionary$2(System.Int32,System.String))()));
            var di = Bridge.cast(d, System.Collections.Generic.IDictionary$2(System.Int32,System.String));
            var di2 = Bridge.cast(d, System.Collections.Generic.IDictionary$2(System.Int32,System.String));

            Bridge.Test.NUnit.Assert.areEqual("x", d.getItem(9));
            Bridge.Test.NUnit.Assert.areEqual("b", di.System$Collections$Generic$IDictionary$2$System$Int32$System$String$getItem(3));
            Bridge.Test.NUnit.Assert.areEqual("z", di2.System$Collections$Generic$IDictionary$2$System$Int32$System$String$getItem(6));

            try {
                var x = d.getItem(1);
                Bridge.Test.NUnit.Assert.fail$1("Should throw");
            }
            catch ($e1) {
                $e1 = System.Exception.create($e1);
            }

            try {
                var x1 = di.System$Collections$Generic$IDictionary$2$System$Int32$System$String$getItem(1);
                Bridge.Test.NUnit.Assert.fail$1("Should throw");
            }
            catch ($e2) {
                $e2 = System.Exception.create($e2);
            }

            try {
                var x2 = di2.System$Collections$Generic$IDictionary$2$System$Int32$System$String$getItem(1);
                Bridge.Test.NUnit.Assert.fail$1("Should throw");
            }
            catch ($e3) {
                $e3 = System.Exception.create($e3);
            }
        },
        valuesWorks: function () {
            var $t;
            var actualValues = System.Array.init(["b", "z", "x"], System.String);
            var d2 = new Bridge.ClientTest.Batch4.Collections.Generic.IDictionaryTests.MyDictionary.$ctor1($asm.$.Bridge.ClientTest.Batch4.Collections.Generic.IDictionaryTests.f4(new (System.Collections.Generic.Dictionary$2(System.Int32,System.String))()));
            var values = Bridge.cast(d2, System.Collections.Generic.IDictionary$2(System.Int32,System.String)).System$Collections$Generic$IDictionary$2$System$Int32$System$String$Values;
            Bridge.Test.NUnit.Assert.true(Bridge.is(values, System.Collections.IEnumerable));

            var i = 0;

            $t = Bridge.getEnumerator(values, System.String);
            try {
                while ($t.moveNext()) {
                    var val = $t.Current;
                    Bridge.Test.NUnit.Assert.areEqual(actualValues[System.Array.index(i, actualValues)], val);
                    i = (i + 1) | 0;
                }
            }finally {
                if (Bridge.is($t, System.IDisposable)) {
                    $t.System$IDisposable$dispose();
                }
            }Bridge.Test.NUnit.Assert.areEqual(actualValues.length, i);
        },
        containsKeyWorks: function () {
            var d = new Bridge.ClientTest.Batch4.Collections.Generic.IDictionaryTests.MyDictionary.$ctor1($asm.$.Bridge.ClientTest.Batch4.Collections.Generic.IDictionaryTests.f5(new (System.Collections.Generic.Dictionary$2(System.Int32,System.String))()));
            Bridge.Test.NUnit.Assert.true(Bridge.is(new Bridge.ClientTest.Batch4.Collections.Generic.IDictionaryTests.MyDictionary.ctor(), System.Collections.Generic.IDictionary$2(System.Int32,System.String)));
            // #1626
            //var di = (IReadOnlyDictionary<int, string>)d;
            var di2 = Bridge.cast(d, System.Collections.Generic.IDictionary$2(System.Int32,System.String));

            Bridge.Test.NUnit.Assert.true(d.containsKey(9));
            //Assert.True(di.ContainsKey(6));
            Bridge.Test.NUnit.Assert.true(di2.System$Collections$Generic$IDictionary$2$System$Int32$System$String$containsKey(3));

            Bridge.Test.NUnit.Assert.false(d.containsKey(923));
            //Assert.False(di.ContainsKey(6124));
            Bridge.Test.NUnit.Assert.false(di2.System$Collections$Generic$IDictionary$2$System$Int32$System$String$containsKey(353));
        },
        tryGetValueWorks: function () {
            var d = new Bridge.ClientTest.Batch4.Collections.Generic.IDictionaryTests.MyDictionary.$ctor1($asm.$.Bridge.ClientTest.Batch4.Collections.Generic.IDictionaryTests.f6(new (System.Collections.Generic.Dictionary$2(System.Int32,System.String))()));
            // #1626
            //var di = (IReadOnlyDictionary<int, string>)d;
            var di2 = Bridge.cast(d, System.Collections.Generic.IDictionary$2(System.Int32,System.String));

            var outVal = { };
            Bridge.Test.NUnit.Assert.true(d.tryGetValue(9, outVal));
            Bridge.Test.NUnit.Assert.areEqual("x", outVal.v);
            //Assert.True(di.TryGetValue(6, out outVal));
            //Assert.AreEqual(outVal, "z");
            Bridge.Test.NUnit.Assert.true(di2.System$Collections$Generic$IDictionary$2$System$Int32$System$String$tryGetValue(3, outVal));
            Bridge.Test.NUnit.Assert.areEqual("b", outVal.v);

            outVal.v = "!!!";
            Bridge.Test.NUnit.Assert.false(d.tryGetValue(923, outVal));
            Bridge.Test.NUnit.Assert.areEqual(null, outVal.v);
            //outVal = "!!!";
            //Assert.False(di.TryGetValue(6124, out outVal));
            //Assert.AreEqual(outVal, null);
            outVal.v = "!!!";
            Bridge.Test.NUnit.Assert.false(di2.System$Collections$Generic$IDictionary$2$System$Int32$System$String$tryGetValue(353, outVal));
            Bridge.Test.NUnit.Assert.areEqual(null, outVal.v);
        },
        addWorks: function () {
            var d = new Bridge.ClientTest.Batch4.Collections.Generic.IDictionaryTests.MyDictionary.ctor();
            var di = Bridge.cast(d, System.Collections.Generic.IDictionary$2(System.Int32,System.String));

            d.add$1(5, "aa");
            Bridge.Test.NUnit.Assert.areEqual("aa", d.getItem(5));
            Bridge.Test.NUnit.Assert.areEqual(1, d.Count);

            di.System$Collections$Generic$IDictionary$2$System$Int32$System$String$add(3, "bb");
            Bridge.Test.NUnit.Assert.areEqual("bb", di.System$Collections$Generic$IDictionary$2$System$Int32$System$String$getItem(3));
            Bridge.Test.NUnit.Assert.areEqual(2, System.Array.getCount(di, System.Collections.Generic.KeyValuePair$2(System.Int32,System.String)));

            try {
                d.add$1(5, "zz");
                Bridge.Test.NUnit.Assert.fail$1("Should throw");
            }
            catch ($e1) {
                $e1 = System.Exception.create($e1);
            }
        },
        clearWorks: function () {
            var d = new Bridge.ClientTest.Batch4.Collections.Generic.IDictionaryTests.MyDictionary.$ctor1($asm.$.Bridge.ClientTest.Batch4.Collections.Generic.IDictionaryTests.f7(new (System.Collections.Generic.Dictionary$2(System.Int32,System.String))()));

            Bridge.Test.NUnit.Assert.areEqual(3, d.Count);
            d.clear();
            Bridge.Test.NUnit.Assert.areEqual(0, d.Count);
        },
        removeWorks: function () {
            var d = new Bridge.ClientTest.Batch4.Collections.Generic.IDictionaryTests.MyDictionary.$ctor1($asm.$.Bridge.ClientTest.Batch4.Collections.Generic.IDictionaryTests.f8(new (System.Collections.Generic.Dictionary$2(System.Int32,System.String))()));
            var di = Bridge.cast(d, System.Collections.Generic.IDictionary$2(System.Int32,System.String));

            Bridge.Test.NUnit.Assert.areStrictEqual(true, d.remove$1(6));
            Bridge.Test.NUnit.Assert.areEqual(3, d.Count);
            Bridge.Test.NUnit.Assert.false(d.containsKey(6));

            Bridge.Test.NUnit.Assert.areStrictEqual(true, di.System$Collections$Generic$IDictionary$2$System$Int32$System$String$remove(3));
            Bridge.Test.NUnit.Assert.areEqual(2, System.Array.getCount(di, System.Collections.Generic.KeyValuePair$2(System.Int32,System.String)));
            Bridge.Test.NUnit.Assert.false(di.System$Collections$Generic$IDictionary$2$System$Int32$System$String$containsKey(3));

            Bridge.Test.NUnit.Assert.true(di.System$Collections$Generic$IDictionary$2$System$Int32$System$String$containsKey(13));
        },
        setItemWorks: function () {
            var d = new Bridge.ClientTest.Batch4.Collections.Generic.IDictionaryTests.MyDictionary.$ctor1($asm.$.Bridge.ClientTest.Batch4.Collections.Generic.IDictionaryTests.f9(new (System.Collections.Generic.Dictionary$2(System.Int32,System.String))()));
            var di = Bridge.cast(d, System.Collections.Generic.IDictionary$2(System.Int32,System.String));

            d.setItem(3, "check");
            Bridge.Test.NUnit.Assert.areEqual("check", d.getItem(3));
            Bridge.Test.NUnit.Assert.false(d.containsKey(10));

            di.System$Collections$Generic$IDictionary$2$System$Int32$System$String$setItem(10, "stuff");
            Bridge.Test.NUnit.Assert.areEqual("stuff", di.System$Collections$Generic$IDictionary$2$System$Int32$System$String$getItem(10));
            Bridge.Test.NUnit.Assert.true(di.System$Collections$Generic$IDictionary$2$System$Int32$System$String$containsKey(10));
        }
    });

    Bridge.ns("Bridge.ClientTest.Batch4.Collections.Generic.IDictionaryTests", $asm.$);

    Bridge.apply($asm.$.Bridge.ClientTest.Batch4.Collections.Generic.IDictionaryTests, {
        f1: function (_o1) {
            _o1.add(3, "c");
            return _o1;
        },
        f2: function (_o2) {
            _o2.add(3, "b");
            _o2.add(6, "z");
            _o2.add(9, "x");
            return _o2;
        },
        f3: function (_o3) {
            _o3.add(3, "b");
            _o3.add(6, "z");
            _o3.add(9, "x");
            return _o3;
        },
        f4: function (_o4) {
            _o4.add(3, "b");
            _o4.add(6, "z");
            _o4.add(9, "x");
            return _o4;
        },
        f5: function (_o5) {
            _o5.add(3, "b");
            _o5.add(6, "z");
            _o5.add(9, "x");
            return _o5;
        },
        f6: function (_o6) {
            _o6.add(3, "b");
            _o6.add(6, "z");
            _o6.add(9, "x");
            return _o6;
        },
        f7: function (_o7) {
            _o7.add(3, "b");
            _o7.add(6, "z");
            _o7.add(9, "x");
            return _o7;
        },
        f8: function (_o8) {
            _o8.add(3, "b");
            _o8.add(6, "z");
            _o8.add(9, "x");
            _o8.add(13, "y");
            return _o8;
        },
        f9: function (_o9) {
            _o9.add(3, "b");
            _o9.add(6, "z");
            _o9.add(9, "x");
            _o9.add(13, "y");
            return _o9;
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.Collections.Generic.IDictionaryTests.MyDictionary", {
        inherits: [System.Collections.Generic.IDictionary$2(System.Int32,System.String)],
        _backingDictionary: null,
        config: {
            properties: {
                Keys: {
                    get: function () {
                        return this._backingDictionary.getKeys();
                    }
                },
                Values: {
                    get: function () {
                        return this._backingDictionary.getValues();
                    }
                },
                Count: {
                    get: function () {
                        return this._backingDictionary.count;
                    }
                },
                IsReadOnly: {
                    get: function () {
                        return this._backingDictionary.getIsReadOnly();
                    }
                }
            },
            alias: [
            "getEnumerator", "System$Collections$Generic$IEnumerable$1$System$Collections$Generic$KeyValuePair$2$System$Int32$System$String$getEnumerator",
            "getItem", "System$Collections$Generic$IDictionary$2$System$Int32$System$String$getItem",
            "setItem", "System$Collections$Generic$IDictionary$2$System$Int32$System$String$setItem",
            "Keys", "System$Collections$Generic$IDictionary$2$System$Int32$System$String$Keys",
            "Values", "System$Collections$Generic$IDictionary$2$System$Int32$System$String$Values",
            "Count", "System$Collections$Generic$ICollection$1$System$Collections$Generic$KeyValuePair$2$System$Int32$System$String$Count",
            "IsReadOnly", "System$Collections$Generic$ICollection$1$System$Collections$Generic$KeyValuePair$2$System$Int32$System$String$IsReadOnly",
            "add", "System$Collections$Generic$ICollection$1$System$Collections$Generic$KeyValuePair$2$System$Int32$System$String$add",
            "copyTo", "System$Collections$Generic$ICollection$1$System$Collections$Generic$KeyValuePair$2$System$Int32$System$String$copyTo",
            "add$1", "System$Collections$Generic$IDictionary$2$System$Int32$System$String$add",
            "remove$1", "System$Collections$Generic$IDictionary$2$System$Int32$System$String$remove",
            "containsKey", "System$Collections$Generic$IDictionary$2$System$Int32$System$String$containsKey",
            "tryGetValue", "System$Collections$Generic$IDictionary$2$System$Int32$System$String$tryGetValue",
            "clear", "System$Collections$Generic$ICollection$1$System$Collections$Generic$KeyValuePair$2$System$Int32$System$String$clear",
            "contains", "System$Collections$Generic$ICollection$1$System$Collections$Generic$KeyValuePair$2$System$Int32$System$String$contains",
            "remove", "System$Collections$Generic$ICollection$1$System$Collections$Generic$KeyValuePair$2$System$Int32$System$String$remove"
            ]
        },
        ctor: function () {
            Bridge.ClientTest.Batch4.Collections.Generic.IDictionaryTests.MyDictionary.$ctor1.call(this, new (System.Collections.Generic.Dictionary$2(System.Int32,System.String))());
        },
        $ctor1: function (initialValues) {
            this.$initialize();
            this._backingDictionary = initialValues;
        },
        getItem: function (key) {
            return this._backingDictionary.get(key);
        },
        setItem: function (key, value) {
            this._backingDictionary.set(key, value);
        },
        System$Collections$IEnumerable$getEnumerator: function () {
            return this.getEnumerator();
        },
        getEnumerator: function () {
            return this._backingDictionary.getEnumerator();
        },
        add: function (item) {
            System.Array.add(Bridge.cast(this._backingDictionary, System.Collections.Generic.ICollection$1(System.Collections.Generic.KeyValuePair$2(System.Int32,System.String))), item, System.Collections.Generic.KeyValuePair$2(System.Int32,System.String));
        },
        add$1: function (key, value) {
            this._backingDictionary.add(key, value);
        },
        copyTo: function (array, arrayIndex) {
            System.Array.copyTo(Bridge.cast(this._backingDictionary, System.Collections.Generic.ICollection$1(System.Collections.Generic.KeyValuePair$2(System.Int32,System.String))), array, arrayIndex, System.Collections.Generic.KeyValuePair$2(System.Int32,System.String));
        },
        remove$1: function (key) {
            return this._backingDictionary.remove(key);
        },
        remove: function (item) {
            return System.Array.remove(Bridge.cast(this._backingDictionary, System.Collections.Generic.ICollection$1(System.Collections.Generic.KeyValuePair$2(System.Int32,System.String))), item, System.Collections.Generic.KeyValuePair$2(System.Int32,System.String));
        },
        containsKey: function (key) {
            return this._backingDictionary.containsKey(key);
        },
        tryGetValue: function (key, value) {
            return this._backingDictionary.tryGetValue(key, value);
        },
        clear: function () {
            this._backingDictionary.clear();
        },
        contains: function (item) {
            return System.Array.contains(Bridge.cast(this._backingDictionary, System.Collections.Generic.ICollection$1(System.Collections.Generic.KeyValuePair$2(System.Int32,System.String))), item, System.Collections.Generic.KeyValuePair$2(System.Int32,System.String));
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.Collections.Generic.IEnumerableTests", {
        arrayImplementsIEnumerable: function () {
            Bridge.Test.NUnit.Assert.true(Bridge.is(System.Array.init(1, 0, System.Int32), System.Collections.Generic.IEnumerable$1(System.Int32)));
        },
        customClassThatShouldImplementIEnumerableDoesSo: function () {
            Bridge.Test.NUnit.Assert.true(Bridge.is(new Bridge.ClientTest.Batch4.Collections.Generic.IEnumerableTests.MyEnumerable(), System.Collections.Generic.IEnumerable$1(System.String)));
        },
        arrayGetEnumeratorMethodWorks: function () {
            var e = Bridge.getEnumerator(System.Array.init(["x", "y", "z"], System.String));
            Bridge.Test.NUnit.Assert.true(e.System$Collections$IEnumerator$moveNext());
            Bridge.Test.NUnit.Assert.areEqual("x", Bridge.unbox(e.System$Collections$IEnumerator$Current));
            Bridge.Test.NUnit.Assert.true(e.System$Collections$IEnumerator$moveNext());
            Bridge.Test.NUnit.Assert.areEqual("y", Bridge.unbox(e.System$Collections$IEnumerator$Current));
            Bridge.Test.NUnit.Assert.true(e.System$Collections$IEnumerator$moveNext());
            Bridge.Test.NUnit.Assert.areEqual("z", Bridge.unbox(e.System$Collections$IEnumerator$Current));
            Bridge.Test.NUnit.Assert.false(e.System$Collections$IEnumerator$moveNext());
        },
        arrayCastToIEnumerableCanBeEnumerated: function () {
            var enm = System.Array.init(["x", "y", "z"], System.String);
            var e = Bridge.getEnumerator(enm, System.String);
            Bridge.Test.NUnit.Assert.true(e.System$Collections$IEnumerator$moveNext());
            Bridge.Test.NUnit.Assert.areEqual("x", e[Bridge.geti(e, "System$Collections$Generic$IEnumerator$1$System$String$Current$1", "Current$1")]);
            Bridge.Test.NUnit.Assert.true(e.System$Collections$IEnumerator$moveNext());
            Bridge.Test.NUnit.Assert.areEqual("y", e[Bridge.geti(e, "System$Collections$Generic$IEnumerator$1$System$String$Current$1", "Current$1")]);
            Bridge.Test.NUnit.Assert.true(e.System$Collections$IEnumerator$moveNext());
            Bridge.Test.NUnit.Assert.areEqual("z", e[Bridge.geti(e, "System$Collections$Generic$IEnumerator$1$System$String$Current$1", "Current$1")]);
            Bridge.Test.NUnit.Assert.false(e.System$Collections$IEnumerator$moveNext());
        },
        classImplementingIEnumerableCanBeEnumerated: function () {
            var enm = new Bridge.ClientTest.Batch4.Collections.Generic.IEnumerableTests.MyEnumerable();
            var e = enm.getEnumerator();
            Bridge.Test.NUnit.Assert.true(e.System$Collections$IEnumerator$moveNext());
            Bridge.Test.NUnit.Assert.areEqual("x", e[Bridge.geti(e, "System$Collections$Generic$IEnumerator$1$System$String$Current$1", "Current$1")]);
            Bridge.Test.NUnit.Assert.true(e.System$Collections$IEnumerator$moveNext());
            Bridge.Test.NUnit.Assert.areEqual("y", e[Bridge.geti(e, "System$Collections$Generic$IEnumerator$1$System$String$Current$1", "Current$1")]);
            Bridge.Test.NUnit.Assert.true(e.System$Collections$IEnumerator$moveNext());
            Bridge.Test.NUnit.Assert.areEqual("z", e[Bridge.geti(e, "System$Collections$Generic$IEnumerator$1$System$String$Current$1", "Current$1")]);
            Bridge.Test.NUnit.Assert.false(e.System$Collections$IEnumerator$moveNext());
        },
        classImplementingIEnumerableCastToIEnumerableCanBeEnumerated: function () {
            var enm = new Bridge.ClientTest.Batch4.Collections.Generic.IEnumerableTests.MyEnumerable();
            var e = Bridge.getEnumerator(enm, System.String);
            Bridge.Test.NUnit.Assert.true(e.System$Collections$IEnumerator$moveNext());
            Bridge.Test.NUnit.Assert.areEqual("x", e[Bridge.geti(e, "System$Collections$Generic$IEnumerator$1$System$String$Current$1", "Current$1")]);
            Bridge.Test.NUnit.Assert.true(e.System$Collections$IEnumerator$moveNext());
            Bridge.Test.NUnit.Assert.areEqual("y", e[Bridge.geti(e, "System$Collections$Generic$IEnumerator$1$System$String$Current$1", "Current$1")]);
            Bridge.Test.NUnit.Assert.true(e.System$Collections$IEnumerator$moveNext());
            Bridge.Test.NUnit.Assert.areEqual("z", e[Bridge.geti(e, "System$Collections$Generic$IEnumerator$1$System$String$Current$1", "Current$1")]);
            Bridge.Test.NUnit.Assert.false(e.System$Collections$IEnumerator$moveNext());
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.Collections.Generic.IEnumerableTests.MyEnumerable", {
        inherits: [System.Collections.Generic.IEnumerable$1(System.String)],
        config: {
            alias: [
            "getEnumerator", "System$Collections$Generic$IEnumerable$1$System$String$getEnumerator"
            ]
        },
        getEnumerator: function () {
            var $step = 0,
                $jumpFromFinally,
                $returnValue,
                $async_e;

            var $enumerator = new (Bridge.GeneratorEnumerator$1(System.String))(Bridge.fn.bind(this, function () {
                try {
                    for (;;) {
                        switch ($step) {
                            case 0: {
                                $enumerator.current = "x";
                                    $step = 1;
                                    return true;
                            }
                            case 1: {
                                $enumerator.current = "y";
                                    $step = 2;
                                    return true;
                            }
                            case 2: {
                                $enumerator.current = "z";
                                    $step = 3;
                                    return true;
                            }
                            case 3: {

                            }
                            default: {
                                return false;
                            }
                        }
                    }
                } catch($async_e1) {
                    $async_e = System.Exception.create($async_e1);
                    throw $async_e;
                }
            }));
            return $enumerator;
        },
        System$Collections$IEnumerable$getEnumerator: function () {
            return this.getEnumerator();
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.Collections.Generic.IListTests", {
        typePropertiesAreCorrect: function () {
            Bridge.Test.NUnit.Assert.areEqual$1("System.Collections.Generic.IList`1[[System.Object, mscorlib]]", Bridge.Reflection.getTypeFullName(System.Collections.Generic.IList$1(System.Object)), "FullName should be correct");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.isInterface(System.Collections.Generic.IList$1(System.Object)), "IsInterface should be true");

            var interfaces = Bridge.Reflection.getInterfaces(System.Collections.Generic.IList$1(System.Object));
            Bridge.Test.NUnit.Assert.areEqual$1(3, interfaces.length, "Interfaces length");
            Bridge.Test.NUnit.Assert.true$1(System.Array.contains(interfaces, System.Collections.Generic.IEnumerable$1(System.Object), Function), "Interfaces should contain IEnumerable");
            Bridge.Test.NUnit.Assert.true$1(System.Array.contains(interfaces, System.Collections.Generic.ICollection$1(System.Object), Function), "Interfaces should contain ICollection");
        },
        arrayImplementsIList: function () {
            Bridge.Test.NUnit.Assert.true(Bridge.is(System.Array.init(1, 0, System.Int32), System.Collections.Generic.IList$1(System.Int32)));
        },
        customClassThatShouldImplementIListDoesSo: function () {
            Bridge.Test.NUnit.Assert.true(Bridge.is(new Bridge.ClientTest.Batch4.Collections.Generic.IListTests.MyList(System.Array.init(0, null, System.String)), System.Collections.Generic.IList$1(System.String)));
        },
        arrayCastToIListGetItemWorks: function () {
            var l = System.Array.init(["x", "y", "z"], System.String);
            Bridge.Test.NUnit.Assert.areEqual("y", System.Array.getItem(l, 1, System.String));
        },
        classImplementingIListGetItemWorks: function () {
            var l = new Bridge.ClientTest.Batch4.Collections.Generic.IListTests.MyList(System.Array.init(["x", "y", "z"], System.String));
            Bridge.Test.NUnit.Assert.areEqual("y", l.getItem(1));
        },
        classImplementingIListCastToIListGetItemWorks: function () {
            var l = new Bridge.ClientTest.Batch4.Collections.Generic.IListTests.MyList(System.Array.init(["x", "y", "z"], System.String));
            Bridge.Test.NUnit.Assert.areEqual("y", System.Array.getItem(l, 1, System.String));
        },
        arrayCastToIListSetItemWorks: function () {
            var l = System.Array.init(["x", "y", "z"], System.String);
            System.Array.setItem(l, 1, "a", System.String);
            Bridge.Test.NUnit.Assert.areEqual("a", System.Array.getItem(l, 1, System.String));
        },
        classImplementingIListSetItemWorks: function () {
            var l = new Bridge.ClientTest.Batch4.Collections.Generic.IListTests.MyList(System.Array.init(["x", "y", "z"], System.String));
            l.setItem(1, "a");
            Bridge.Test.NUnit.Assert.areEqual("a", l.getItem(1));
        },
        classImplementingIListCastToIListSetItemWorks: function () {
            var l = new Bridge.ClientTest.Batch4.Collections.Generic.IListTests.MyList(System.Array.init(["x", "y", "z"], System.String));
            System.Array.setItem(l, 1, "a", System.String);
            Bridge.Test.NUnit.Assert.areEqual("a", System.Array.getItem(l, 1, System.String));
        },
        arrayCastToIListIndexOfWorks: function () {
            var arr = System.Array.init([new Bridge.ClientTest.Batch4.Collections.Generic.IListTests.C(1), new Bridge.ClientTest.Batch4.Collections.Generic.IListTests.C(2), new Bridge.ClientTest.Batch4.Collections.Generic.IListTests.C(3)], Bridge.ClientTest.Batch4.Collections.Generic.IListTests.C);
            Bridge.Test.NUnit.Assert.areEqual(1, System.Array.indexOf(arr, new Bridge.ClientTest.Batch4.Collections.Generic.IListTests.C(2), 0, null, Bridge.ClientTest.Batch4.Collections.Generic.IListTests.C));
            Bridge.Test.NUnit.Assert.areEqual(-1, System.Array.indexOf(arr, new Bridge.ClientTest.Batch4.Collections.Generic.IListTests.C(4), 0, null, Bridge.ClientTest.Batch4.Collections.Generic.IListTests.C));
        },
        classImplementingIListIndexOfWorks: function () {
            var c = new Bridge.ClientTest.Batch4.Collections.Generic.IListTests.MyList(System.Array.init(["x", "y"], System.String));
            Bridge.Test.NUnit.Assert.areEqual(1, c.indexOf("y"));
            Bridge.Test.NUnit.Assert.areEqual(-1, c.indexOf("z"));
        },
        classImplementingIListCastToIListIndexOfWorks: function () {
            var l = new Bridge.ClientTest.Batch4.Collections.Generic.IListTests.MyList(System.Array.init(["x", "y"], System.String));
            Bridge.Test.NUnit.Assert.areEqual(1, System.Array.indexOf(l, "y", 0, null, System.String));
            Bridge.Test.NUnit.Assert.areEqual(-1, System.Array.indexOf(l, "z", 0, null, System.String));
        },
        classImplementingIListInsertWorks: function () {
            var l = new Bridge.ClientTest.Batch4.Collections.Generic.IListTests.MyList(System.Array.init(["x", "y"], System.String));
            l.insert(1, "z");
            Bridge.Test.NUnit.Assert.areEqual(System.Array.init(["x", "z", "y"], System.String), l.Items.toArray());
        },
        classImplementingIListCastToIListInsertWorks: function () {
            var l = new Bridge.ClientTest.Batch4.Collections.Generic.IListTests.MyList(System.Array.init(["x", "y"], System.String));
            System.Array.insert(l, 1, "z", System.String);
            Bridge.Test.NUnit.Assert.areEqual(System.Array.init(["x", "z", "y"], System.String), Bridge.cast(l, Bridge.ClientTest.Batch4.Collections.Generic.IListTests.MyList).Items.toArray());
        },
        classImplementingIListRemoveAtWorks: function () {
            var l = new Bridge.ClientTest.Batch4.Collections.Generic.IListTests.MyList(System.Array.init(["x", "y", "z"], System.String));
            l.removeAt(1);
            Bridge.Test.NUnit.Assert.areEqual(System.Array.init(["x", "z"], System.String), l.Items.toArray());
        },
        classImplementingIListCastToIListRemoveAtWorks: function () {
            var l = new Bridge.ClientTest.Batch4.Collections.Generic.IListTests.MyList(System.Array.init(["x", "y", "z"], System.String));
            System.Array.removeAt(l, 1, System.String);
            Bridge.Test.NUnit.Assert.areEqual(System.Array.init(["x", "z"], System.String), Bridge.cast(l, Bridge.ClientTest.Batch4.Collections.Generic.IListTests.MyList).Items.toArray());
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.Collections.Generic.IListTests.C", {
        _i: 0,
        ctor: function (i) {
            this.$initialize();
            this._i = i;
        },
        equals: function (o) {
            return Bridge.is(o, Bridge.ClientTest.Batch4.Collections.Generic.IListTests.C) && this._i === Bridge.cast(o, Bridge.ClientTest.Batch4.Collections.Generic.IListTests.C)._i;
        },
        getHashCode: function () {
            return this._i;
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.Collections.Generic.IListTests.MyList", {
        inherits: [System.Collections.Generic.IList$1(System.String)],
        config: {
            properties: {
                Items: null,
                Count: {
                    get: function () {
                        return this.Items.Count;
                    }
                },
                IsReadOnly: {
                    get: function () {
                        return false;
                    }
                }
            },
            alias: [
            "getEnumerator", "System$Collections$Generic$IEnumerable$1$System$String$getEnumerator",
            "Count", "System$Collections$Generic$ICollection$1$System$String$Count",
            "IsReadOnly", "System$Collections$Generic$ICollection$1$System$String$IsReadOnly",
            "add", "System$Collections$Generic$ICollection$1$System$String$add",
            "clear", "System$Collections$Generic$ICollection$1$System$String$clear",
            "contains", "System$Collections$Generic$ICollection$1$System$String$contains",
            "copyTo", "System$Collections$Generic$ICollection$1$System$String$copyTo",
            "remove", "System$Collections$Generic$ICollection$1$System$String$remove",
            "getItem", "System$Collections$Generic$IList$1$System$String$getItem",
            "setItem", "System$Collections$Generic$IList$1$System$String$setItem",
            "indexOf", "System$Collections$Generic$IList$1$System$String$indexOf",
            "insert", "System$Collections$Generic$IList$1$System$String$insert",
            "removeAt", "System$Collections$Generic$IList$1$System$String$removeAt"
            ]
        },
        ctor: function (items) {
            this.$initialize();
            this.Items = new (System.Collections.Generic.List$1(System.String))(items);
        },
        getItem: function (index) {
            return this.Items.getItem(index);
        },
        setItem: function (index, value) {
            this.Items.setItem(index, value);
        },
        System$Collections$IEnumerable$getEnumerator: function () {
            return this.getEnumerator();
        },
        getEnumerator: function () {
            return this.Items.getEnumerator();
        },
        add: function (item) {
            this.Items.add(item);
        },
        clear: function () {
            this.Items.clear();
        },
        contains: function (item) {
            return this.Items.contains(item);
        },
        copyTo: function (array, arrayIndex) {
            this.Items.copyTo(array, arrayIndex);
        },
        remove: function (item) {
            return this.Items.remove(item);
        },
        indexOf: function (item) {
            return this.Items.indexOf(item);
        },
        insert: function (index, item) {
            this.Items.insert(index, item);
        },
        removeAt: function (index) {
            this.Items.removeAt(index);
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.Collections.Generic.IteratorBlockTests", {
        assertEqual: function (actual, expected, message) {
            if (message === void 0) { message = null; }
            Bridge.Test.NUnit.Assert.areEqual$1(System.String.replaceAll(expected, "\r\n", "\n"), System.String.replaceAll(actual, "\r\n", "\n"), message);
        },
        typeReturnedByIteratorBlockReturningIEnumeratorImplementsThatInterfaceAndIDisposable_SPI_1554: function () {
            var enm = null;

            // #1554
            // Test restructure to keep assertion count correct (prevent uncaught test exception)
            Bridge.ClientTest.Batch4.TestHelper.safe(function () {
                enm = new Bridge.ClientTest.Batch4.Collections.Generic.IteratorBlockTests.C(null).getEnumerator(0);
            });
            Bridge.Test.NUnit.Assert.true(Bridge.is(enm, System.Collections.Generic.IEnumerator$1(System.Int32)));
            Bridge.Test.NUnit.Assert.true(Bridge.is(enm, System.Collections.IEnumerator));
            Bridge.Test.NUnit.Assert.true(Bridge.is(enm, System.IDisposable));
        },
        enumeratingIEnumeratorIteratorToEndWorks_SPI_1555: function () {
            // #1555
            var sb = new System.Text.StringBuilder();
            var enm = new Bridge.ClientTest.Batch4.Collections.Generic.IteratorBlockTests.C(sb).getEnumerator(2);

            while (enm.System$Collections$IEnumerator$moveNext()) {
                sb.appendLine("got " + enm[Bridge.geti(enm, "System$Collections$Generic$IEnumerator$1$System$Int32$Current$1", "Current$1")]);
            }

            this.assertEqual(sb.toString(), "yielding 0\r\ngot 0\r\nyielding 1\r\ngot 1\r\nyielding -1\r\ngot -1\r\nin finally\r\n");
        },
        prematureDisposalOfIEnumeratorIteratorExecutesFinallyBlocks_SPI_1555: function () {
            // #1555
            var sb = new System.Text.StringBuilder();
            var enm = new Bridge.ClientTest.Batch4.Collections.Generic.IteratorBlockTests.C(sb).getEnumerator(5);

            for (var i = 0; i < 2; i = (i + 1) | 0) {
                enm.System$Collections$IEnumerator$moveNext();
                sb.appendLine("got " + enm[Bridge.geti(enm, "System$Collections$Generic$IEnumerator$1$System$Int32$Current$1", "Current$1")]);
            }
            enm.System$IDisposable$dispose();

            this.assertEqual(sb.toString(), "yielding 0\r\ngot 0\r\nyielding 1\r\ngot 1\r\nin finally\r\n");
        },
        exceptionInIEnumeratorIteratorBodyExecutesFinallyBlocks_SPI_1554: function () {
            var sb = new System.Text.StringBuilder();
            var enm = null;

            // #1554
            // Test restructure to keep assertion count correct (prevent uncaught test exception)
            Bridge.ClientTest.Batch4.TestHelper.safe(function () {
                enm = new Bridge.ClientTest.Batch4.Collections.Generic.IteratorBlockTests.C(sb).getEnumeratorThrows();
            });

            try {
                for (var i = 0; i < 100; i = (i + 1) | 0) {
                    enm.System$Collections$IEnumerator$moveNext();
                    sb.appendLine("got " + enm[Bridge.geti(enm, "System$Collections$Generic$IEnumerator$1$System$Int32$Current$1", "Current$1")]);
                }
                Bridge.Test.NUnit.Assert.fail$1("Should have thrown an exception in the loop");
            }
            catch ($e1) {
                $e1 = System.Exception.create($e1);
                sb.appendLine("caught exception");
            }

            this.assertEqual(sb.toString(), "yielding 1\r\ngot 1\r\nyielding 2\r\ngot 2\r\nthrowing\r\nin finally\r\ncaught exception\r\n");
        },
        typeReturnedByIteratorBlockReturningIEnumerableImplementsThatInterface_SPI_1554: function () {
            var enm = null;
            // #1554
            // Test restructure to keep assertion count correct (prevent uncaught test exception)
            Bridge.ClientTest.Batch4.TestHelper.safe(function () {
                enm = new Bridge.ClientTest.Batch4.Collections.Generic.IteratorBlockTests.C(null).getEnumerable(0);
            });

            Bridge.Test.NUnit.Assert.true(Bridge.is(enm, System.Collections.Generic.IEnumerable$1(System.Int32)));
            Bridge.Test.NUnit.Assert.true(Bridge.is(enm, System.Collections.IEnumerable));
        },
        enumeratingIEnumerableIteratorToEndWorks_SPI_1555: function () {
            var $t, $t1;
            // #1555
            var sb = new System.Text.StringBuilder();
            var enm = new Bridge.ClientTest.Batch4.Collections.Generic.IteratorBlockTests.C(sb).getEnumerable(2);

            $t = Bridge.getEnumerator(enm, System.Int32);
            try {
                while ($t.moveNext()) {
                    var i = $t.Current;
                    sb.appendLine("got " + i);
                }
            }finally {
                if (Bridge.is($t, System.IDisposable)) {
                    $t.System$IDisposable$dispose();
                }
            }sb.appendLine("-");
            $t1 = Bridge.getEnumerator(enm, System.Int32);
            try {
                while ($t1.moveNext()) {
                    var i1 = $t1.Current;
                    sb.appendLine("got " + i1);
                }
            }finally {
                if (Bridge.is($t1, System.IDisposable)) {
                    $t1.System$IDisposable$dispose();
                }
            }
            this.assertEqual(sb.toString(), "yielding 0\r\ngot 0\r\nyielding 1\r\ngot 1\r\nyielding -1\r\ngot -1\r\nin finally\r\n-\r\nyielding 0\r\ngot 0\r\nyielding 1\r\ngot 1\r\nyielding -1\r\ngot -1\r\nin finally\r\n");
        },
        prematureDisposalOfIEnumerableIteratorExecutesFinallyBlocks_SPI_1555: function () {
            var $t;
            // #1555
            var sb = new System.Text.StringBuilder();
            var n = 0;
            $t = Bridge.getEnumerator(new Bridge.ClientTest.Batch4.Collections.Generic.IteratorBlockTests.C(sb).getEnumerable(5), System.Int32);
            try {
                while ($t.moveNext()) {
                    var i = $t.Current;
                    sb.appendLine("got " + i);
                    if (((n = (n + 1) | 0)) === 2) {
                        break;
                    }
                }
            }finally {
                if (Bridge.is($t, System.IDisposable)) {
                    $t.System$IDisposable$dispose();
                }
            }
            this.assertEqual(sb.toString(), "yielding 0\r\ngot 0\r\nyielding 1\r\ngot 1\r\nin finally\r\n");
        },
        exceptionInIEnumerableIteratorBodyExecutesFinallyBlocks_SPI_1554: function () {
            var sb = new System.Text.StringBuilder();
            var enumerable = null;

            // #1554
            // Test restructure to keep assertion count correct (prevent uncaught test exception)
            Bridge.ClientTest.Batch4.TestHelper.safe(function () {
                enumerable = new Bridge.ClientTest.Batch4.Collections.Generic.IteratorBlockTests.C(sb).getEnumerableThrows(5);
            });

            try {
                var enumerator = Bridge.getEnumerator(enumerable, System.Int32);
                for (var i = 0; i < 100; i = (i + 1) | 0) {
                    enumerator.System$Collections$IEnumerator$moveNext();
                    sb.appendLine("got " + enumerator[Bridge.geti(enumerator, "System$Collections$Generic$IEnumerator$1$System$Int32$Current$1", "Current$1")]);
                }
                Bridge.Test.NUnit.Assert.fail$1("Should have thrown");
            }
            catch ($e1) {
                $e1 = System.Exception.create($e1);
                sb.appendLine("caught exception");
            }

            this.assertEqual(sb.toString(), "yielding 1\r\ngot 1\r\nyielding 2\r\ngot 2\r\nthrowing\r\nin finally\r\ncaught exception\r\n");
        },
        enumeratingAnIteratorBlockReturningIEnumerableMultipleTimesUsesTheInitialValuesForParameters: function () {
            var $t, $t1;
            var sb = new System.Text.StringBuilder();

            var enm = new Bridge.ClientTest.Batch4.Collections.Generic.IteratorBlockTests.C(sb).getEnumerableMutateParameter(3);
            $t = Bridge.getEnumerator(enm, System.Int32);
            try {
                while ($t.moveNext()) {
                    var i = $t.Current;
                    sb.appendLine(i.toString());
                }
            }finally {
                if (Bridge.is($t, System.IDisposable)) {
                    $t.System$IDisposable$dispose();
                }
            }$t1 = Bridge.getEnumerator(enm, System.Int32);
            try {
                while ($t1.moveNext()) {
                    var i1 = $t1.Current;
                    sb.appendLine(i1.toString());
                }
            }finally {
                if (Bridge.is($t1, System.IDisposable)) {
                    $t1.System$IDisposable$dispose();
                }
            }
            this.assertEqual(sb.toString(), "3\r\n2\r\n1\r\n3\r\n2\r\n1\r\n");
        },
        differentGetEnumeratorCallsOnIteratorBlockReturningIEnumerableGetOwnCopiesOfLocals: function () {
            var sb = new System.Text.StringBuilder();

            var enumerable = new Bridge.ClientTest.Batch4.Collections.Generic.IteratorBlockTests.C(sb).getEnumerableSimple(3);
            var enm1 = Bridge.getEnumerator(enumerable, System.Int32);
            var enm2 = Bridge.getEnumerator(enumerable, System.Int32);

            while (enm1.System$Collections$IEnumerator$moveNext()) {
                enm2.System$Collections$IEnumerator$moveNext();
                sb.appendLine(enm1[Bridge.geti(enm1, "System$Collections$Generic$IEnumerator$1$System$Int32$Current$1", "Current$1")].toString());
                sb.appendLine(enm2[Bridge.geti(enm2, "System$Collections$Generic$IEnumerator$1$System$Int32$Current$1", "Current$1")].toString());
            }

            this.assertEqual(sb.toString(), "0\r\n0\r\n1\r\n1\r\n2\r\n2\r\n-1\r\n-1\r\n");
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.Collections.Generic.IteratorBlockTests.C", {
        _sb: null,
        ctor: function (sb) {
            this.$initialize();
            this._sb = sb;
        },
        getEnumerator: function (n) {
            var $step = 0,
                $jumpFromFinally,
                $returnValue,
                i,
                $async_e,
                $async_e1;

            var $enumerator = new (Bridge.GeneratorEnumerator$1(System.Int32))(Bridge.fn.bind(this, function () {
                try {
                    for (;;) {
                        switch ($step) {
                            case 0: {
                                $step = 1;
                                continue;
                            }
                            case 1: {
                                i = 0;
                                    $step = 2;
                                    continue;
                            }
                            case 2: {
                                if ( i < n ) {
                                        $step = 3;
                                        continue;
                                    }
                                $step = 6;
                                continue;
                            }
                            case 3: {
                                this._sb.appendLine("yielding " + i);
                                    $enumerator.current = i;
                                    $step = 4;
                                    return true;
                            }
                            case 4: {
                                $step = 5;
                                continue;
                            }
                            case 5: {
                                i = (i + 1) | 0;
                                $step = 2;
                                continue;
                            }
                            case 6: {
                                this._sb.appendLine("yielding -1");
                                    $enumerator.current = -1;
                                    $step = 7;
                                    return true;
                            }
                            case 7: {
                                $step = 8;
                                continue;
                            }
                            case 8: {
                                this._sb.appendLine("in finally");

                                    if ($jumpFromFinally > -1) {
                                        $step = $jumpFromFinally;
                                        $jumpFromFinally = null;
                                    } else if ($async_e) {
                                        throw $async_e;
                                        return;
                                    } else if (Bridge.isDefined($returnValue)) {
                                        $tcs.setResult($returnValue);
                                        return;
                                    }
                                $step = 9;
                                continue;
                            }
                            case 9: {

                            }
                            default: {
                                return false;
                            }
                        }
                    }
                } catch($async_e1) {
                    $async_e = System.Exception.create($async_e1);
                    if ($step >= 1 && $step <= 7){

                        $step = 8;
                        $enumerator.moveNext();
                        return;
                    }
                    throw $async_e;
                }
            }), function () {
                if ($step >= 1 && $step <= 7){

                    $step = 8;
                    $enumerator.moveNext();
                    return;
                }

            });
            return $enumerator;
        },
        getEnumeratorThrows: function () {
            var $step = 0,
                $jumpFromFinally,
                $returnValue,
                $async_e,
                $async_e1;

            var $enumerator = new (Bridge.GeneratorEnumerator$1(System.Int32))(Bridge.fn.bind(this, function () {
                try {
                    for (;;) {
                        switch ($step) {
                            case 0: {
                                $step = 1;
                                continue;
                            }
                            case 1: {
                                this._sb.appendLine("yielding 1");
                                    $enumerator.current = 1;
                                    $step = 2;
                                    return true;
                            }
                            case 2: {
                                this._sb.appendLine("yielding 2");
                                    $enumerator.current = 2;
                                    $step = 3;
                                    return true;
                            }
                            case 3: {
                                this._sb.appendLine("throwing");
                                    throw new System.Exception("test");
                                $step = 4;
                                continue;
                            }
                            case 4: {
                                this._sb.appendLine("in finally");

                                    if ($jumpFromFinally > -1) {
                                        $step = $jumpFromFinally;
                                        $jumpFromFinally = null;
                                    } else if ($async_e) {
                                        throw $async_e;
                                        return;
                                    } else if (Bridge.isDefined($returnValue)) {
                                        $tcs.setResult($returnValue);
                                        return;
                                    }
                                $step = 5;
                                continue;
                            }
                            case 5: {

                            }
                            default: {
                                return false;
                            }
                        }
                    }
                } catch($async_e1) {
                    $async_e = System.Exception.create($async_e1);
                    if ($step >= 1 && $step <= 3){

                        $step = 4;
                        $enumerator.moveNext();
                        return;
                    }
                    throw $async_e;
                }
            }), function () {
                if ($step >= 1 && $step <= 3){

                    $step = 4;
                    $enumerator.moveNext();
                    return;
                }

            });
            return $enumerator;
        },
        getEnumerable: function (n) {
            return new (Bridge.GeneratorEnumerable$1(System.Int32))(Bridge.fn.bind(this, function (n) {
                var $step = 0,
                    $jumpFromFinally,
                    $returnValue,
                    i,
                    $async_e,
                    $async_e1;

                var $enumerator = new (Bridge.GeneratorEnumerator$1(System.Int32))(Bridge.fn.bind(this, function () {
                    try {
                        for (;;) {
                            switch ($step) {
                                case 0: {
                                    $step = 1;
                                    continue;
                                }
                                case 1: {
                                    i = 0;
                                        $step = 2;
                                        continue;
                                }
                                case 2: {
                                    if ( i < n ) {
                                            $step = 3;
                                            continue;
                                        }
                                    $step = 6;
                                    continue;
                                }
                                case 3: {
                                    this._sb.appendLine("yielding " + i);
                                        $enumerator.current = i;
                                        $step = 4;
                                        return true;
                                }
                                case 4: {
                                    $step = 5;
                                    continue;
                                }
                                case 5: {
                                    i = (i + 1) | 0;
                                    $step = 2;
                                    continue;
                                }
                                case 6: {
                                    this._sb.appendLine("yielding -1");
                                        $enumerator.current = -1;
                                        $step = 7;
                                        return true;
                                }
                                case 7: {
                                    $step = 8;
                                    continue;
                                }
                                case 8: {
                                    this._sb.appendLine("in finally");

                                        if ($jumpFromFinally > -1) {
                                            $step = $jumpFromFinally;
                                            $jumpFromFinally = null;
                                        } else if ($async_e) {
                                            throw $async_e;
                                            return;
                                        } else if (Bridge.isDefined($returnValue)) {
                                            $tcs.setResult($returnValue);
                                            return;
                                        }
                                    $step = 9;
                                    continue;
                                }
                                case 9: {
                                    n = 0; // Just to verify that the value of 'n' is not reused in the next call

                                }
                                default: {
                                    return false;
                                }
                            }
                        }
                    } catch($async_e1) {
                        $async_e = System.Exception.create($async_e1);
                        if ($step >= 1 && $step <= 7){

                            $step = 8;
                            $enumerator.moveNext();
                            return;
                        }
                        throw $async_e;
                    }
                }), function () {
                    if ($step >= 1 && $step <= 7){

                        $step = 8;
                        $enumerator.moveNext();
                        return;
                    }

                });
                return $enumerator;
            }, arguments));
        },
        getEnumerableThrows: function (n) {
            return new (Bridge.GeneratorEnumerable$1(System.Int32))(Bridge.fn.bind(this, function (n) {
                var $step = 0,
                    $jumpFromFinally,
                    $returnValue,
                    $async_e,
                    $async_e1;

                var $enumerator = new (Bridge.GeneratorEnumerator$1(System.Int32))(Bridge.fn.bind(this, function () {
                    try {
                        for (;;) {
                            switch ($step) {
                                case 0: {
                                    $step = 1;
                                    continue;
                                }
                                case 1: {
                                    this._sb.appendLine("yielding 1");
                                        $enumerator.current = 1;
                                        $step = 2;
                                        return true;
                                }
                                case 2: {
                                    this._sb.appendLine("yielding 2");
                                        $enumerator.current = 2;
                                        $step = 3;
                                        return true;
                                }
                                case 3: {
                                    this._sb.appendLine("throwing");
                                        throw new System.Exception("test");
                                    $step = 4;
                                    continue;
                                }
                                case 4: {
                                    this._sb.appendLine("in finally");

                                        if ($jumpFromFinally > -1) {
                                            $step = $jumpFromFinally;
                                            $jumpFromFinally = null;
                                        } else if ($async_e) {
                                            throw $async_e;
                                            return;
                                        } else if (Bridge.isDefined($returnValue)) {
                                            $tcs.setResult($returnValue);
                                            return;
                                        }
                                    $step = 5;
                                    continue;
                                }
                                case 5: {

                                }
                                default: {
                                    return false;
                                }
                            }
                        }
                    } catch($async_e1) {
                        $async_e = System.Exception.create($async_e1);
                        if ($step >= 1 && $step <= 3){

                            $step = 4;
                            $enumerator.moveNext();
                            return;
                        }
                        throw $async_e;
                    }
                }), function () {
                    if ($step >= 1 && $step <= 3){

                        $step = 4;
                        $enumerator.moveNext();
                        return;
                    }

                });
                return $enumerator;
            }, arguments));
        },
        getEnumerableMutateParameter: function (n) {
            return new (Bridge.GeneratorEnumerable$1(System.Int32))(Bridge.fn.bind(this, function (n) {
                var $step = 0,
                    $jumpFromFinally,
                    $returnValue,
                    $async_e;

                var $enumerator = new (Bridge.GeneratorEnumerator$1(System.Int32))(Bridge.fn.bind(this, function () {
                    try {
                        for (;;) {
                            switch ($step) {
                                case 0: {
                                    
                                        $step = 1;
                                        continue;
                                }
                                case 1: {
                                    if ( n > 0 ) {
                                            $step = 2;
                                            continue;
                                        }
                                    $step = 5;
                                    continue;
                                }
                                case 2: {
                                    $enumerator.current = n;
                                        $step = 3;
                                        return true;
                                }
                                case 3: {
                                    $step = 4;
                                    continue;
                                }
                                case 4: {
                                    n = (n - 1) | 0;
                                    $step = 1;
                                    continue;
                                }
                                case 5: {

                                }
                                default: {
                                    return false;
                                }
                            }
                        }
                    } catch($async_e1) {
                        $async_e = System.Exception.create($async_e1);
                        throw $async_e;
                    }
                }));
                return $enumerator;
            }, arguments));
        },
        getEnumerableSimple: function (n) {
            return new (Bridge.GeneratorEnumerable$1(System.Int32))(Bridge.fn.bind(this, function (n) {
                var $step = 0,
                    $jumpFromFinally,
                    $returnValue,
                    i,
                    $async_e;

                var $enumerator = new (Bridge.GeneratorEnumerator$1(System.Int32))(Bridge.fn.bind(this, function () {
                    try {
                        for (;;) {
                            switch ($step) {
                                case 0: {
                                    i = 0;
                                        $step = 1;
                                        continue;
                                }
                                case 1: {
                                    if ( i < n ) {
                                            $step = 2;
                                            continue;
                                        }
                                    $step = 5;
                                    continue;
                                }
                                case 2: {
                                    $enumerator.current = i;
                                        $step = 3;
                                        return true;
                                }
                                case 3: {
                                    $step = 4;
                                    continue;
                                }
                                case 4: {
                                    i = (i + 1) | 0;
                                    $step = 1;
                                    continue;
                                }
                                case 5: {
                                    $enumerator.current = -1;
                                        $step = 6;
                                        return true;
                                }
                                case 6: {

                                }
                                default: {
                                    return false;
                                }
                            }
                        }
                    } catch($async_e1) {
                        $async_e = System.Exception.create($async_e1);
                        throw $async_e;
                    }
                }));
                return $enumerator;
            }, arguments));
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.Collections.Generic.KeyValuePairTests", {
        theConstructorWithParametersCanBeUsed: function () {
            var v = new (System.Collections.Generic.KeyValuePair$2(System.String,System.Int32))("Hello", 42);
            Bridge.Test.NUnit.Assert.true$1(Bridge.hasValue(v), "is KeyValuePair");
            Bridge.Test.NUnit.Assert.areEqual("Hello", v.key);
            Bridge.Test.NUnit.Assert.areEqual(42, v.value);
        },
        typeTestWorks: function () {
            Bridge.Test.NUnit.Assert.true$1(Bridge.hasValue(new (System.Collections.Generic.KeyValuePair$2(System.Int32,System.String))(42, "Hello")), "#1");
            Bridge.Test.NUnit.Assert.false$1(Bridge.is(5, System.Collections.Generic.KeyValuePair$2(System.Int32,System.String)), "#2");
        },
        runCheck: function (T, o) {
            return Bridge.is(o, T);
        },
        typeTestWorksGeneric_SPI_1556: function () {
            // #1556
            Bridge.Test.NUnit.Assert.true$1(this.runCheck(System.Collections.Generic.KeyValuePair$2(System.Int32,System.String), new (System.Collections.Generic.KeyValuePair$2(System.Int32,System.String))()), "#1");
            Bridge.Test.NUnit.Assert.false$1(this.runCheck(System.Collections.Generic.KeyValuePair$2(System.Int32,System.String), Bridge.box(5, System.Int32)), "#2");
        },
        theDefaultConstructorCanBeUsed_SPI_1556: function () {
            // #1556
            var v = new (System.Collections.Generic.KeyValuePair$2(System.DateTime,System.Int32))();
            Bridge.Test.NUnit.Assert.true$1(Bridge.hasValue(v), "is KeyValuePair");
            Bridge.Test.NUnit.Assert.true(Bridge.hasValue(v.key));
            Bridge.Test.NUnit.Assert.areEqual(v.value, 0);
        },
        creatingADefaultKeyValuePairCreatesAnInstanceThatIsNotNull_SPI_1556: function () {
            // #1556
            var v = Bridge.getDefaultValue(System.Collections.Generic.KeyValuePair$2(System.Int32,System.String));
            Bridge.Test.NUnit.Assert.true$1(Bridge.hasValue(v), "is KeyValuePair");
            Bridge.Test.NUnit.Assert.notNull$1(v, "is not null");
            Bridge.Test.NUnit.Assert.areEqual$1(0, v.key, "has key");
            Bridge.Test.NUnit.Assert.null$1(v.value, "has no value");
        },
        activatorCreateInstanceWorks: function () {
            var v = Bridge.createInstance(System.Collections.Generic.KeyValuePair$2(System.String,System.String));

            Bridge.Test.NUnit.Assert.true$1(Bridge.hasValue(v), "is KeyValuePair");
            Bridge.Test.NUnit.Assert.notNull(v);
            Bridge.Test.NUnit.Assert.null(v.key);
            Bridge.Test.NUnit.Assert.null(v.value);
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.Collections.Generic.ListTests", {
        typePropertiesAreCorrect: function () {
            Bridge.Test.NUnit.Assert.areEqual$1("System.Collections.Generic.List`1[[System.Int32, mscorlib]]", Bridge.Reflection.getTypeFullName(System.Collections.Generic.List$1(System.Int32)), "FullName should be Array");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.isClass(System.Collections.Generic.List$1(System.Int32)), "IsClass should be true");
            var list = new (System.Collections.Generic.List$1(System.Int32))();
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(list, System.Collections.Generic.List$1(System.Int32)), "is int[] should be true");
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(list, System.Collections.Generic.IList$1(System.Int32)), "is IList<int> should be true");
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(list, System.Collections.Generic.ICollection$1(System.Int32)), "is ICollection<int> should be true");
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(list, System.Collections.Generic.IEnumerable$1(System.Int32)), "is IEnumerable<int> should be true");
        },
        defaultConstructorWorks: function () {
            var l = new (System.Collections.Generic.List$1(System.Int32))();
            Bridge.Test.NUnit.Assert.areEqual(0, l.Count);
        },
        constructorWithCapacityWorks: function () {
            var l = new (System.Collections.Generic.List$1(System.Int32))(12);
            Bridge.Test.NUnit.Assert.areEqual(0, l.Count);
        },
        constructingFromArrayWorks: function () {
            var arr = System.Array.init([1, 4, 7, 8], System.Int32);
            var l = new (System.Collections.Generic.List$1(System.Int32))(arr);
            Bridge.Test.NUnit.Assert.false(Bridge.referenceEquals(l, arr));
            Bridge.Test.NUnit.Assert.areEqual(arr, l.toArray());
        },
        constructingFromListWorks: function () {
            var arr = new (System.Collections.Generic.List$1(System.Int32))();
            arr.add(1);
            arr.add(4);
            arr.add(7);
            arr.add(8);

            var l = new (System.Collections.Generic.List$1(System.Int32))(arr);
            Bridge.Test.NUnit.Assert.false(Bridge.referenceEquals(l, arr));
            Bridge.Test.NUnit.Assert.areEqual(arr, l);
        },
        constructingFromIEnumerableWorks: function () {
            var arr = new (System.Collections.Generic.List$1(System.Int32))();
            arr.add(1);
            arr.add(4);
            arr.add(7);
            arr.add(8);

            var enm = Bridge.cast(arr, System.Collections.Generic.IEnumerable$1(System.Int32));
            var l = new (System.Collections.Generic.List$1(System.Int32))(enm);
            Bridge.Test.NUnit.Assert.false(Bridge.referenceEquals(l, enm));
            Bridge.Test.NUnit.Assert.areEqual(System.Array.init([1, 4, 7, 8], System.Int32), l.toArray());
        },
        countWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual(0, new (System.Collections.Generic.List$1(System.String))().Count);
            Bridge.Test.NUnit.Assert.areEqual(1, $asm.$.Bridge.ClientTest.Batch4.Collections.Generic.ListTests.f1(new (System.Collections.Generic.List$1(System.String))()).Count);
            Bridge.Test.NUnit.Assert.areEqual(2, $asm.$.Bridge.ClientTest.Batch4.Collections.Generic.ListTests.f2(new (System.Collections.Generic.List$1(System.String))()).Count);
        },
        indexingWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual("x", $asm.$.Bridge.ClientTest.Batch4.Collections.Generic.ListTests.f3(new (System.Collections.Generic.List$1(System.String))()).getItem(0));
            Bridge.Test.NUnit.Assert.areEqual("y", $asm.$.Bridge.ClientTest.Batch4.Collections.Generic.ListTests.f4(new (System.Collections.Generic.List$1(System.String))()).getItem(1));
        },
        foreachWorks: function () {
            var $t;
            var result = "";
            $t = Bridge.getEnumerator($asm.$.Bridge.ClientTest.Batch4.Collections.Generic.ListTests.f5(new (System.Collections.Generic.List$1(System.String))()));
            try {
                while ($t.moveNext()) {
                    var s = $t.Current;
                    result = System.String.concat(result, s);
                }
            }finally {
                if (Bridge.is($t, System.IDisposable)) {
                    $t.System$IDisposable$dispose();
                }
            }Bridge.Test.NUnit.Assert.areEqual("xy", result);
        },
        getEnumeratorWorks: function () {
            var e = $asm.$.Bridge.ClientTest.Batch4.Collections.Generic.ListTests.f6(new (System.Collections.Generic.List$1(System.String))()).getEnumerator();
            Bridge.Test.NUnit.Assert.true(e.System$Collections$IEnumerator$moveNext());
            Bridge.Test.NUnit.Assert.areEqual("x", e[Bridge.geti(e, "System$Collections$Generic$IEnumerator$1$System$String$Current$1", "Current$1")]);
            Bridge.Test.NUnit.Assert.true(e.System$Collections$IEnumerator$moveNext());
            Bridge.Test.NUnit.Assert.areEqual("y", e[Bridge.geti(e, "System$Collections$Generic$IEnumerator$1$System$String$Current$1", "Current$1")]);
            Bridge.Test.NUnit.Assert.false(e.System$Collections$IEnumerator$moveNext());
        },
        addWorks: function () {
            var l = $asm.$.Bridge.ClientTest.Batch4.Collections.Generic.ListTests.f7(new (System.Collections.Generic.List$1(System.String))());
            l.add("a");
            Bridge.Test.NUnit.Assert.areEqual(System.Array.init(["x", "y", "a"], System.String), l.toArray());
        },
        addRangeWorks: function () {
            var l = $asm.$.Bridge.ClientTest.Batch4.Collections.Generic.ListTests.f8(new (System.Collections.Generic.List$1(System.String))());
            l.addRange(System.Array.init(["a", "b", "c"], System.String));
            Bridge.Test.NUnit.Assert.areEqual(System.Array.init(["x", "y", "a", "b", "c"], System.String), l.toArray());
        },
        clearWorks: function () {
            var l = $asm.$.Bridge.ClientTest.Batch4.Collections.Generic.ListTests.f9(new (System.Collections.Generic.List$1(System.String))());
            l.clear();
            Bridge.Test.NUnit.Assert.areEqual(l.Count, 0);
        },
        concatWorks: function () {
            var list = $asm.$.Bridge.ClientTest.Batch4.Collections.Generic.ListTests.f10(new (System.Collections.Generic.List$1(System.String))());
            Bridge.Test.NUnit.Assert.areEqual(System.Array.init(["a", "b", "c"], System.String), System.Linq.Enumerable.from(list).concat(System.Array.init(["c"], System.String)).toArray());
            Bridge.Test.NUnit.Assert.areEqual(System.Array.init(["a", "b", "c", "d"], System.String), System.Linq.Enumerable.from(list).concat($asm.$.Bridge.ClientTest.Batch4.Collections.Generic.ListTests.f11(new (System.Collections.Generic.List$1(System.String))())).toArray());
            Bridge.Test.NUnit.Assert.areEqual(System.Array.init(["a", "b"], System.String), list.toArray());
        },
        containsWorks: function () {
            var list = $asm.$.Bridge.ClientTest.Batch4.Collections.Generic.ListTests.f12(new (System.Collections.Generic.List$1(System.String))());
            Bridge.Test.NUnit.Assert.true(list.contains("x"));
            Bridge.Test.NUnit.Assert.false(list.contains("z"));
        },
        containsUsesEqualsMethod: function () {
            var l = $asm.$.Bridge.ClientTest.Batch4.Collections.Generic.ListTests.f13(new (System.Collections.Generic.List$1(Bridge.ClientTest.Batch4.Collections.Generic.ListTests.C))());
            Bridge.Test.NUnit.Assert.true(l.contains(new Bridge.ClientTest.Batch4.Collections.Generic.ListTests.C(2)));
            Bridge.Test.NUnit.Assert.false(l.contains(new Bridge.ClientTest.Batch4.Collections.Generic.ListTests.C(4)));
        },
        sliceWithoutEndWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual(System.Array.init(["c", "d"], System.String), $asm.$.Bridge.ClientTest.Batch4.Collections.Generic.ListTests.f14(new (System.Collections.Generic.List$1(System.String))()).slice(2).toArray());
        },
        sliceWithEndWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual(System.Array.init(["b", "c"], System.String), $asm.$.Bridge.ClientTest.Batch4.Collections.Generic.ListTests.f15(new (System.Collections.Generic.List$1(System.String))()).slice(1, 3).toArray());
        },
        indexOfWithoutStartIndexWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual(1, System.Array.init(["a", "b", "c", "b"], System.String).indexOf("b"));
        },
        indexOfWithoutStartIndexUsesEqualsMethod: function () {
            var l = $asm.$.Bridge.ClientTest.Batch4.Collections.Generic.ListTests.f16(new (System.Collections.Generic.List$1(Bridge.ClientTest.Batch4.Collections.Generic.ListTests.C))());
            Bridge.Test.NUnit.Assert.areEqual(1, l.indexOf(new Bridge.ClientTest.Batch4.Collections.Generic.ListTests.C(2)));
            Bridge.Test.NUnit.Assert.areEqual(-1, l.indexOf(new Bridge.ClientTest.Batch4.Collections.Generic.ListTests.C(4)));
        },
        indexOfWithStartIndexWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual(3, $asm.$.Bridge.ClientTest.Batch4.Collections.Generic.ListTests.f17(new (System.Collections.Generic.List$1(System.String))()).indexOf("b", 2));
        },
        indexOfWithStartIndexUsesEqualsMethod: function () {
            Bridge.Test.NUnit.Assert.areEqual(3, $asm.$.Bridge.ClientTest.Batch4.Collections.Generic.ListTests.f18(new (System.Collections.Generic.List$1(Bridge.ClientTest.Batch4.Collections.Generic.ListTests.C))()).indexOf(new Bridge.ClientTest.Batch4.Collections.Generic.ListTests.C(2), 2));
        },
        insertWorks: function () {
            var l = $asm.$.Bridge.ClientTest.Batch4.Collections.Generic.ListTests.f19(new (System.Collections.Generic.List$1(System.String))());
            l.insert(1, "a");
            Bridge.Test.NUnit.Assert.areEqual(System.Array.init(["x", "a", "y"], System.String), l.toArray());
        },
        insertRangeWorks: function () {
            var l = $asm.$.Bridge.ClientTest.Batch4.Collections.Generic.ListTests.f20(new (System.Collections.Generic.List$1(System.String))());
            l.insertRange(1, System.Array.init(["a", "b"], System.String));
            Bridge.Test.NUnit.Assert.areEqual(System.Array.init(["x", "a", "b", "y"], System.String), l.toArray());
        },
        joinWithoutDelimiterWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual("a,b,c,b", $asm.$.Bridge.ClientTest.Batch4.Collections.Generic.ListTests.f21(new (System.Collections.Generic.List$1(System.String))()).join());
        },
        joinWithDelimiterWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual("a|b|c|b", $asm.$.Bridge.ClientTest.Batch4.Collections.Generic.ListTests.f22(new (System.Collections.Generic.List$1(System.String))()).join("|"));
        },
        removeWorks: function () {
            var list = $asm.$.Bridge.ClientTest.Batch4.Collections.Generic.ListTests.f23(new (System.Collections.Generic.List$1(System.String))());
            Bridge.Test.NUnit.Assert.true(list.remove("a"));
            Bridge.Test.NUnit.Assert.areEqual(System.Array.init(["b", "c", "a"], System.String), list.toArray());
        },
        removeReturnsFalseIfTheElementWasNotFound: function () {
            var list = $asm.$.Bridge.ClientTest.Batch4.Collections.Generic.ListTests.f24(new (System.Collections.Generic.List$1(System.String))());
            Bridge.Test.NUnit.Assert.false(list.remove("d"));
            Bridge.Test.NUnit.Assert.areEqual(System.Array.init(["a", "b", "c", "a"], System.String), list.toArray());
        },
        removeCanRemoveNullItem: function () {
            var list = $asm.$.Bridge.ClientTest.Batch4.Collections.Generic.ListTests.f25(new (System.Collections.Generic.List$1(System.String))());
            Bridge.Test.NUnit.Assert.true(list.remove(null));
            Bridge.Test.NUnit.Assert.areEqual(System.Array.init(["a", "c", null], System.String), list.toArray());
        },
        removeUsesEqualsMethod: function () {
            var list = $asm.$.Bridge.ClientTest.Batch4.Collections.Generic.ListTests.f26(new (System.Collections.Generic.List$1(Bridge.ClientTest.Batch4.Collections.Generic.ListTests.C))());
            list.remove(new Bridge.ClientTest.Batch4.Collections.Generic.ListTests.C(2));
            Bridge.Test.NUnit.Assert.areEqual(2, list.Count);
            Bridge.Test.NUnit.Assert.areEqual(1, list.getItem(0).i);
            Bridge.Test.NUnit.Assert.areEqual(3, list.getItem(1).i);
        },
        removeAtWorks: function () {
            var list = $asm.$.Bridge.ClientTest.Batch4.Collections.Generic.ListTests.f27(new (System.Collections.Generic.List$1(System.String))());
            list.removeAt(1);
            Bridge.Test.NUnit.Assert.areEqual(System.Array.init(["a", "c", "a"], System.String), list.toArray());
        },
        removeRangeWorks: function () {
            var list = $asm.$.Bridge.ClientTest.Batch4.Collections.Generic.ListTests.f28(new (System.Collections.Generic.List$1(System.String))());
            list.removeRange(1, 2);
            Bridge.Test.NUnit.Assert.areEqual(System.Array.init(["a", "d"], System.String), list.toArray());
        },
        reverseWorks: function () {
            var list = $asm.$.Bridge.ClientTest.Batch4.Collections.Generic.ListTests.f29(new (System.Collections.Generic.List$1(System.Int32))());
            list.reverse();
            Bridge.Test.NUnit.Assert.areEqual(System.Array.init([2, 3, 1, 4, 3, 1], System.Int32), list.toArray());
        },
        sortWithDefaultCompareWorks: function () {
            var list = $asm.$.Bridge.ClientTest.Batch4.Collections.Generic.ListTests.f30(new (System.Collections.Generic.List$1(System.Int32))());
            list.sort();
            Bridge.Test.NUnit.Assert.areEqual(System.Array.init([1, 2, 4, 6, 6], System.Int32), list.toArray());
        },
        sortWithCompareCallbackWorks: function () {
            var list = $asm.$.Bridge.ClientTest.Batch4.Collections.Generic.ListTests.f31(new (System.Collections.Generic.List$1(System.Int32))());
            list.sort($asm.$.Bridge.ClientTest.Batch4.Collections.Generic.ListTests.f32);
            Bridge.Test.NUnit.Assert.areEqual(System.Array.init([6, 6, 4, 2, 1], System.Int32), list.toArray());
        },
        sortWithIComparerWorks: function () {
            var $t;
            var list = $asm.$.Bridge.ClientTest.Batch4.Collections.Generic.ListTests.f33(new (System.Collections.Generic.List$1(System.Int32))());
            ($t = new Bridge.ClientTest.Batch4.Collections.Generic.ListTests.TestReverseComparer(), list.sort(Bridge.fn.bind($t, $t.compare)));
            Bridge.Test.NUnit.Assert.areEqual(System.Array.init([6, 6, 4, 2, 1], System.Int32), list.toArray());
        },
        foreachWhenCastToIEnumerableWorks: function () {
            var $t;
            var list = $asm.$.Bridge.ClientTest.Batch4.Collections.Generic.ListTests.f34(new (System.Collections.Generic.List$1(System.String))());
            var result = "";
            $t = Bridge.getEnumerator(list, System.String);
            try {
                while ($t.moveNext()) {
                    var s = $t.Current;
                    result = System.String.concat(result, s);
                }
            }finally {
                if (Bridge.is($t, System.IDisposable)) {
                    $t.System$IDisposable$dispose();
                }
            }Bridge.Test.NUnit.Assert.areEqual("xy", result);
        },
        iEnumerableGetEnumeratorWorks: function () {
            var l = Bridge.cast($asm.$.Bridge.ClientTest.Batch4.Collections.Generic.ListTests.f35(new (System.Collections.Generic.List$1(System.String))()), System.Collections.Generic.IEnumerable$1(System.String));
            var e = Bridge.getEnumerator(l, System.String);
            Bridge.Test.NUnit.Assert.true(e.System$Collections$IEnumerator$moveNext());
            Bridge.Test.NUnit.Assert.areEqual("x", e[Bridge.geti(e, "System$Collections$Generic$IEnumerator$1$System$String$Current$1", "Current$1")]);
            Bridge.Test.NUnit.Assert.true(e.System$Collections$IEnumerator$moveNext());
            Bridge.Test.NUnit.Assert.areEqual("y", e[Bridge.geti(e, "System$Collections$Generic$IEnumerator$1$System$String$Current$1", "Current$1")]);
            Bridge.Test.NUnit.Assert.false(e.System$Collections$IEnumerator$moveNext());
        },
        iCollectionCountWorks: function () {
            var l = $asm.$.Bridge.ClientTest.Batch4.Collections.Generic.ListTests.f36(new (System.Collections.Generic.List$1(System.String))());
            Bridge.Test.NUnit.Assert.areEqual(3, System.Array.getCount(l, System.String));
        },
        iCollectionAddWorks: function () {
            var l = $asm.$.Bridge.ClientTest.Batch4.Collections.Generic.ListTests.f37(new (System.Collections.Generic.List$1(System.String))());
            System.Array.add(l, "a", System.String);
            Bridge.Test.NUnit.Assert.areEqual(System.Array.init(["x", "y", "z", "a"], System.String), System.Linq.Enumerable.from(l).toArray());
        },
        iCollectionClearWorks: function () {
            var l = $asm.$.Bridge.ClientTest.Batch4.Collections.Generic.ListTests.f38(new (System.Collections.Generic.List$1(System.String))());
            System.Array.clear(l, System.String);
            Bridge.Test.NUnit.Assert.areEqual(System.Array.init(0, null, System.String), System.Linq.Enumerable.from(l).toArray());
        },
        iCollectionContainsWorks: function () {
            var l = $asm.$.Bridge.ClientTest.Batch4.Collections.Generic.ListTests.f39(new (System.Collections.Generic.List$1(System.String))());
            Bridge.Test.NUnit.Assert.true(System.Array.contains(l, "y", System.String));
            Bridge.Test.NUnit.Assert.false(System.Array.contains(l, "a", System.String));
        },
        iCollectionContainsUsesEqualsMethod: function () {
            var l = $asm.$.Bridge.ClientTest.Batch4.Collections.Generic.ListTests.f40(new (System.Collections.Generic.List$1(Bridge.ClientTest.Batch4.Collections.Generic.ListTests.C))());
            Bridge.Test.NUnit.Assert.true(System.Array.contains(l, new Bridge.ClientTest.Batch4.Collections.Generic.ListTests.C(2), Bridge.ClientTest.Batch4.Collections.Generic.ListTests.C));
            Bridge.Test.NUnit.Assert.false(System.Array.contains(l, new Bridge.ClientTest.Batch4.Collections.Generic.ListTests.C(4), Bridge.ClientTest.Batch4.Collections.Generic.ListTests.C));
        },
        iCollectionRemoveWorks: function () {
            var l = $asm.$.Bridge.ClientTest.Batch4.Collections.Generic.ListTests.f41(new (System.Collections.Generic.List$1(System.String))());
            Bridge.Test.NUnit.Assert.true(System.Array.remove(l, "y", System.String));
            Bridge.Test.NUnit.Assert.false(System.Array.remove(l, "a", System.String));
            Bridge.Test.NUnit.Assert.areEqual(System.Array.init(["x", "z"], System.String), System.Linq.Enumerable.from(l).toArray());
        },
        iCollectionRemoveCanRemoveNullItem: function () {
            var list = $asm.$.Bridge.ClientTest.Batch4.Collections.Generic.ListTests.f42(new (System.Collections.Generic.List$1(System.String))());
            Bridge.Test.NUnit.Assert.true(System.Array.remove(list, null, System.String));
            Bridge.Test.NUnit.Assert.areEqual(System.Array.init(["a", "c", null], System.String), System.Linq.Enumerable.from(list).toArray());
        },
        iCollectionRemoveUsesEqualsMethod: function () {
            var list = $asm.$.Bridge.ClientTest.Batch4.Collections.Generic.ListTests.f43(new (System.Collections.Generic.List$1(Bridge.ClientTest.Batch4.Collections.Generic.ListTests.C))());
            System.Array.remove(list, new Bridge.ClientTest.Batch4.Collections.Generic.ListTests.C(2), Bridge.ClientTest.Batch4.Collections.Generic.ListTests.C);
            Bridge.Test.NUnit.Assert.areEqual(2, System.Array.getCount(list, Bridge.ClientTest.Batch4.Collections.Generic.ListTests.C));
            Bridge.Test.NUnit.Assert.areEqual(1, System.Array.getItem(list, 0, Bridge.ClientTest.Batch4.Collections.Generic.ListTests.C).i);
            Bridge.Test.NUnit.Assert.areEqual(3, System.Array.getItem(list, 1, Bridge.ClientTest.Batch4.Collections.Generic.ListTests.C).i);
        },
        iListIndexingWorks: function () {
            var l = $asm.$.Bridge.ClientTest.Batch4.Collections.Generic.ListTests.f44(new (System.Collections.Generic.List$1(System.String))());
            Bridge.Test.NUnit.Assert.areEqual("y", System.Array.getItem(l, 1, System.String));
            System.Array.setItem(l, 1, "a", System.String);
            Bridge.Test.NUnit.Assert.areEqual(System.Array.init(["x", "a", "z"], System.String), System.Linq.Enumerable.from(l).toArray());
        },
        iListIndexOfWorks: function () {
            var l = $asm.$.Bridge.ClientTest.Batch4.Collections.Generic.ListTests.f45(new (System.Collections.Generic.List$1(System.String))());
            Bridge.Test.NUnit.Assert.areEqual(1, System.Array.indexOf(l, "y", 0, null, System.String));
            Bridge.Test.NUnit.Assert.areEqual(-1, System.Array.indexOf(l, "a", 0, null, System.String));
        },
        iListIndexOfUsesEqualsMethod: function () {
            var l = $asm.$.Bridge.ClientTest.Batch4.Collections.Generic.ListTests.f46(new (System.Collections.Generic.List$1(Bridge.ClientTest.Batch4.Collections.Generic.ListTests.C))());
            Bridge.Test.NUnit.Assert.areEqual(1, System.Array.indexOf(l, new Bridge.ClientTest.Batch4.Collections.Generic.ListTests.C(2), 0, null, Bridge.ClientTest.Batch4.Collections.Generic.ListTests.C));
            Bridge.Test.NUnit.Assert.areEqual(-1, System.Array.indexOf(l, new Bridge.ClientTest.Batch4.Collections.Generic.ListTests.C(4), 0, null, Bridge.ClientTest.Batch4.Collections.Generic.ListTests.C));
        },
        iListInsertWorks: function () {
            var l = $asm.$.Bridge.ClientTest.Batch4.Collections.Generic.ListTests.f47(new (System.Collections.Generic.List$1(System.String))());
            System.Array.insert(l, 1, "a", System.String);
            Bridge.Test.NUnit.Assert.areEqual(System.Array.init(["x", "a", "y", "z"], System.String), System.Linq.Enumerable.from(l).toArray());
        },
        iListRemoveAtWorks: function () {
            var l = $asm.$.Bridge.ClientTest.Batch4.Collections.Generic.ListTests.f48(new (System.Collections.Generic.List$1(System.String))());
            System.Array.removeAt(l, 1, System.String);
            Bridge.Test.NUnit.Assert.areEqual(System.Array.init(["x", "z"], System.String), System.Linq.Enumerable.from(l).toArray());
        },
        toArrayWorks: function () {
            var l = new (System.Collections.Generic.List$1(System.String))();
            l.add("a");
            l.add("b");
            var actual = l.toArray();
            Bridge.Test.NUnit.Assert.false(Bridge.referenceEquals(l, actual));
            Bridge.Test.NUnit.Assert.true(Bridge.is(actual, Array));
            Bridge.Test.NUnit.Assert.areEqual(System.Array.init(["a", "b"], System.String), actual);
        }
    });

    Bridge.ns("Bridge.ClientTest.Batch4.Collections.Generic.ListTests", $asm.$);

    Bridge.apply($asm.$.Bridge.ClientTest.Batch4.Collections.Generic.ListTests, {
        f1: function (_o24) {
            _o24.add("x");
            return _o24;
        },
        f2: function (_o25) {
            _o25.add("x");
            _o25.add("y");
            return _o25;
        },
        f3: function (_o26) {
            _o26.add("x");
            _o26.add("y");
            return _o26;
        },
        f4: function (_o27) {
            _o27.add("x");
            _o27.add("y");
            return _o27;
        },
        f5: function (_o28) {
            _o28.add("x");
            _o28.add("y");
            return _o28;
        },
        f6: function (_o29) {
            _o29.add("x");
            _o29.add("y");
            return _o29;
        },
        f7: function (_o30) {
            _o30.add("x");
            _o30.add("y");
            return _o30;
        },
        f8: function (_o31) {
            _o31.add("x");
            _o31.add("y");
            return _o31;
        },
        f9: function (_o32) {
            _o32.add("x");
            _o32.add("y");
            return _o32;
        },
        f10: function (_o33) {
            _o33.add("a");
            _o33.add("b");
            return _o33;
        },
        f11: function (_o34) {
            _o34.add("c");
            _o34.add("d");
            return _o34;
        },
        f12: function (_o35) {
            _o35.add("x");
            _o35.add("y");
            return _o35;
        },
        f13: function (_o36) {
            _o36.add(new Bridge.ClientTest.Batch4.Collections.Generic.ListTests.C(1));
            _o36.add(new Bridge.ClientTest.Batch4.Collections.Generic.ListTests.C(2));
            _o36.add(new Bridge.ClientTest.Batch4.Collections.Generic.ListTests.C(3));
            return _o36;
        },
        f14: function (_o37) {
            _o37.add("a");
            _o37.add("b");
            _o37.add("c");
            _o37.add("d");
            return _o37;
        },
        f15: function (_o38) {
            _o38.add("a");
            _o38.add("b");
            _o38.add("c");
            _o38.add("d");
            return _o38;
        },
        f16: function (_o39) {
            _o39.add(new Bridge.ClientTest.Batch4.Collections.Generic.ListTests.C(1));
            _o39.add(new Bridge.ClientTest.Batch4.Collections.Generic.ListTests.C(2));
            _o39.add(new Bridge.ClientTest.Batch4.Collections.Generic.ListTests.C(3));
            return _o39;
        },
        f17: function (_o40) {
            _o40.add("a");
            _o40.add("b");
            _o40.add("c");
            _o40.add("b");
            return _o40;
        },
        f18: function (_o41) {
            _o41.add(new Bridge.ClientTest.Batch4.Collections.Generic.ListTests.C(1));
            _o41.add(new Bridge.ClientTest.Batch4.Collections.Generic.ListTests.C(2));
            _o41.add(new Bridge.ClientTest.Batch4.Collections.Generic.ListTests.C(3));
            _o41.add(new Bridge.ClientTest.Batch4.Collections.Generic.ListTests.C(2));
            return _o41;
        },
        f19: function (_o42) {
            _o42.add("x");
            _o42.add("y");
            return _o42;
        },
        f20: function (_o43) {
            _o43.add("x");
            _o43.add("y");
            return _o43;
        },
        f21: function (_o44) {
            _o44.add("a");
            _o44.add("b");
            _o44.add("c");
            _o44.add("b");
            return _o44;
        },
        f22: function (_o45) {
            _o45.add("a");
            _o45.add("b");
            _o45.add("c");
            _o45.add("b");
            return _o45;
        },
        f23: function (_o46) {
            _o46.add("a");
            _o46.add("b");
            _o46.add("c");
            _o46.add("a");
            return _o46;
        },
        f24: function (_o47) {
            _o47.add("a");
            _o47.add("b");
            _o47.add("c");
            _o47.add("a");
            return _o47;
        },
        f25: function (_o48) {
            _o48.add("a");
            _o48.add(null);
            _o48.add("c");
            _o48.add(null);
            return _o48;
        },
        f26: function (_o49) {
            _o49.add(new Bridge.ClientTest.Batch4.Collections.Generic.ListTests.C(1));
            _o49.add(new Bridge.ClientTest.Batch4.Collections.Generic.ListTests.C(2));
            _o49.add(new Bridge.ClientTest.Batch4.Collections.Generic.ListTests.C(3));
            return _o49;
        },
        f27: function (_o50) {
            _o50.add("a");
            _o50.add("b");
            _o50.add("c");
            _o50.add("a");
            return _o50;
        },
        f28: function (_o51) {
            _o51.add("a");
            _o51.add("b");
            _o51.add("c");
            _o51.add("d");
            return _o51;
        },
        f29: function (_o52) {
            _o52.add(1);
            _o52.add(3);
            _o52.add(4);
            _o52.add(1);
            _o52.add(3);
            _o52.add(2);
            return _o52;
        },
        f30: function (_o53) {
            _o53.add(1);
            _o53.add(6);
            _o53.add(6);
            _o53.add(4);
            _o53.add(2);
            return _o53;
        },
        f31: function (_o54) {
            _o54.add(1);
            _o54.add(6);
            _o54.add(6);
            _o54.add(4);
            _o54.add(2);
            return _o54;
        },
        f32: function (x, y) {
            return ((y - x) | 0);
        },
        f33: function (_o55) {
            _o55.add(1);
            _o55.add(6);
            _o55.add(6);
            _o55.add(4);
            _o55.add(2);
            return _o55;
        },
        f34: function (_o56) {
            _o56.add("x");
            _o56.add("y");
            return _o56;
        },
        f35: function (_o57) {
            _o57.add("x");
            _o57.add("y");
            return _o57;
        },
        f36: function (_o58) {
            _o58.add("x");
            _o58.add("y");
            _o58.add("z");
            return _o58;
        },
        f37: function (_o59) {
            _o59.add("x");
            _o59.add("y");
            _o59.add("z");
            return _o59;
        },
        f38: function (_o60) {
            _o60.add("x");
            _o60.add("y");
            _o60.add("z");
            return _o60;
        },
        f39: function (_o61) {
            _o61.add("x");
            _o61.add("y");
            _o61.add("z");
            return _o61;
        },
        f40: function (_o62) {
            _o62.add(new Bridge.ClientTest.Batch4.Collections.Generic.ListTests.C(1));
            _o62.add(new Bridge.ClientTest.Batch4.Collections.Generic.ListTests.C(2));
            _o62.add(new Bridge.ClientTest.Batch4.Collections.Generic.ListTests.C(3));
            return _o62;
        },
        f41: function (_o63) {
            _o63.add("x");
            _o63.add("y");
            _o63.add("z");
            return _o63;
        },
        f42: function (_o64) {
            _o64.add("a");
            _o64.add(null);
            _o64.add("c");
            _o64.add(null);
            return _o64;
        },
        f43: function (_o65) {
            _o65.add(new Bridge.ClientTest.Batch4.Collections.Generic.ListTests.C(1));
            _o65.add(new Bridge.ClientTest.Batch4.Collections.Generic.ListTests.C(2));
            _o65.add(new Bridge.ClientTest.Batch4.Collections.Generic.ListTests.C(3));
            return _o65;
        },
        f44: function (_o66) {
            _o66.add("x");
            _o66.add("y");
            _o66.add("z");
            return _o66;
        },
        f45: function (_o67) {
            _o67.add("x");
            _o67.add("y");
            _o67.add("z");
            return _o67;
        },
        f46: function (_o68) {
            _o68.add(new Bridge.ClientTest.Batch4.Collections.Generic.ListTests.C(1));
            _o68.add(new Bridge.ClientTest.Batch4.Collections.Generic.ListTests.C(2));
            _o68.add(new Bridge.ClientTest.Batch4.Collections.Generic.ListTests.C(3));
            return _o68;
        },
        f47: function (_o69) {
            _o69.add("x");
            _o69.add("y");
            _o69.add("z");
            return _o69;
        },
        f48: function (_o70) {
            _o70.add("x");
            _o70.add("y");
            _o70.add("z");
            return _o70;
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.Collections.Generic.ListTests.C", {
        i: 0,
        ctor: function (i) {
            this.$initialize();
            this.i = i;
        },
        equals: function (o) {
            return Bridge.is(o, Bridge.ClientTest.Batch4.Collections.Generic.ListTests.C) && this.i === Bridge.cast(o, Bridge.ClientTest.Batch4.Collections.Generic.ListTests.C).i;
        },
        getHashCode: function () {
            return this.i;
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.Collections.Generic.ListTests.TestReverseComparer", {
        inherits: [System.Collections.Generic.IComparer$1(System.Int32)],
        config: {
            alias: [
            "compare", "System$Collections$Generic$IComparer$1$System$Int32$compare"
            ]
        },
        compare: function (x, y) {
            Bridge.Test.NUnit.Assert.true(Bridge.hasValue(this));
            return x === y ? 0 : (x > y ? -1 : 1);
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.Collections.ObjectModel.ReadOnlyCollectionTests", {
        typePropertiesAreCorrect: function () {
            Bridge.Test.NUnit.Assert.areEqual$1("System.Collections.ObjectModel.ReadOnlyCollection`1[[System.Int32, mscorlib]]", Bridge.Reflection.getTypeFullName(System.Collections.ObjectModel.ReadOnlyCollection$1(System.Int32)), "FullName should be Array");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.isClass(System.Collections.ObjectModel.ReadOnlyCollection$1(System.Int32)), "IsClass should be true");
            var list = new (System.Collections.ObjectModel.ReadOnlyCollection$1(System.Int32))(System.Array.init(0, 0, System.Int32));
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(list, System.Collections.ObjectModel.ReadOnlyCollection$1(System.Int32)), "is ReadOnlyCollection<int> should be true");
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(list, System.Collections.Generic.IList$1(System.Int32)), "is IList<int> should be true");
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(list, System.Collections.Generic.ICollection$1(System.Int32)), "is ICollection<int> should be true");
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(list, System.Collections.Generic.IEnumerable$1(System.Int32)), "is IEnumerable<int> should be true");
        },
        constructorWorks: function () {
            var l = new (System.Collections.ObjectModel.ReadOnlyCollection$1(System.Int32))(System.Array.init([41, 42, 43], System.Int32));
            Bridge.Test.NUnit.Assert.areEqual(3, l.Count);
            Bridge.Test.NUnit.Assert.areEqual(41, l.get(0));
            Bridge.Test.NUnit.Assert.areEqual(42, l.get(1));
            Bridge.Test.NUnit.Assert.areEqual(43, l.get(2));
        },
        countWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual(0, new (System.Collections.ObjectModel.ReadOnlyCollection$1(System.String))(System.Array.init(0, null, System.String)).Count);
            Bridge.Test.NUnit.Assert.areEqual(1, new (System.Collections.ObjectModel.ReadOnlyCollection$1(System.String))(System.Array.init(1, null, System.String)).Count);
            Bridge.Test.NUnit.Assert.areEqual(2, new (System.Collections.ObjectModel.ReadOnlyCollection$1(System.String))(System.Array.init(2, null, System.String)).Count);
        },
        indexingWorks: function () {
            var l = new (System.Collections.ObjectModel.ReadOnlyCollection$1(System.String))(System.Array.init(["x", "y"], System.String));
            Bridge.Test.NUnit.Assert.areEqual("x", l.get(0));
            Bridge.Test.NUnit.Assert.areEqual("y", l.get(1));
        },
        foreachWorks: function () {
            var $t;
            var result = "";
            $t = Bridge.getEnumerator(new (System.Collections.ObjectModel.ReadOnlyCollection$1(System.String))(System.Array.init(["x", "y"], System.String)));
            try {
                while ($t.moveNext()) {
                    var s = $t.Current;
                    result = System.String.concat(result, s);
                }
            }finally {
                if (Bridge.is($t, System.IDisposable)) {
                    $t.System$IDisposable$dispose();
                }
            }Bridge.Test.NUnit.Assert.areEqual("xy", result);
        },
        getEnumeratorWorks: function () {
            var e = new (System.Collections.ObjectModel.ReadOnlyCollection$1(System.String))(System.Array.init(["x", "y"], System.String)).getEnumerator();
            Bridge.Test.NUnit.Assert.true(e.System$Collections$IEnumerator$moveNext());
            Bridge.Test.NUnit.Assert.areEqual("x", e[Bridge.geti(e, "System$Collections$Generic$IEnumerator$1$System$String$Current$1", "Current$1")]);
            Bridge.Test.NUnit.Assert.true(e.System$Collections$IEnumerator$moveNext());
            Bridge.Test.NUnit.Assert.areEqual("y", e[Bridge.geti(e, "System$Collections$Generic$IEnumerator$1$System$String$Current$1", "Current$1")]);
            Bridge.Test.NUnit.Assert.false(e.System$Collections$IEnumerator$moveNext());
        },
        containsWorks: function () {
            var l = new (System.Collections.ObjectModel.ReadOnlyCollection$1(System.String))(System.Array.init(["x", "y"], System.String));
            Bridge.Test.NUnit.Assert.true(l.contains("x"));
            Bridge.Test.NUnit.Assert.false(l.contains("z"));
        },
        containsUsesEqualsMethod: function () {
            var l = new (System.Collections.ObjectModel.ReadOnlyCollection$1(Bridge.ClientTest.Batch4.Collections.ObjectModel.ReadOnlyCollectionTests.C))(System.Array.init([new Bridge.ClientTest.Batch4.Collections.ObjectModel.ReadOnlyCollectionTests.C(1), new Bridge.ClientTest.Batch4.Collections.ObjectModel.ReadOnlyCollectionTests.C(2), new Bridge.ClientTest.Batch4.Collections.ObjectModel.ReadOnlyCollectionTests.C(3)], Bridge.ClientTest.Batch4.Collections.ObjectModel.ReadOnlyCollectionTests.C));
            Bridge.Test.NUnit.Assert.true(l.contains(new Bridge.ClientTest.Batch4.Collections.ObjectModel.ReadOnlyCollectionTests.C(2)));
            Bridge.Test.NUnit.Assert.false(l.contains(new Bridge.ClientTest.Batch4.Collections.ObjectModel.ReadOnlyCollectionTests.C(4)));
        },
        indexOfWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual(1, new (System.Collections.ObjectModel.ReadOnlyCollection$1(System.String))(System.Array.init(["a", "b", "c", "b"], System.String)).indexOf("b"));
            Bridge.Test.NUnit.Assert.areEqual(1, new (System.Collections.ObjectModel.ReadOnlyCollection$1(Bridge.ClientTest.Batch4.Collections.ObjectModel.ReadOnlyCollectionTests.C))(System.Array.init([new Bridge.ClientTest.Batch4.Collections.ObjectModel.ReadOnlyCollectionTests.C(1), new Bridge.ClientTest.Batch4.Collections.ObjectModel.ReadOnlyCollectionTests.C(2), new Bridge.ClientTest.Batch4.Collections.ObjectModel.ReadOnlyCollectionTests.C(3), new Bridge.ClientTest.Batch4.Collections.ObjectModel.ReadOnlyCollectionTests.C(2)], Bridge.ClientTest.Batch4.Collections.ObjectModel.ReadOnlyCollectionTests.C)).indexOf(new Bridge.ClientTest.Batch4.Collections.ObjectModel.ReadOnlyCollectionTests.C(2)));
        },
        foreachWhenCastToIEnumerableWorks: function () {
            var $t;
            var list = new (System.Collections.ObjectModel.ReadOnlyCollection$1(System.String))(System.Array.init(["x", "y"], System.String));
            var result = "";
            $t = Bridge.getEnumerator(list, System.String);
            try {
                while ($t.moveNext()) {
                    var s = $t.Current;
                    result = System.String.concat(result, s);
                }
            }finally {
                if (Bridge.is($t, System.IDisposable)) {
                    $t.System$IDisposable$dispose();
                }
            }Bridge.Test.NUnit.Assert.areEqual("xy", result);
        },
        iEnumerableGetEnumeratorWorks: function () {
            var l = Bridge.cast(new (System.Collections.ObjectModel.ReadOnlyCollection$1(System.String))(System.Array.init(["x", "y"], System.String)), System.Collections.Generic.IEnumerable$1(System.String));
            var e = Bridge.getEnumerator(l, System.String);
            Bridge.Test.NUnit.Assert.true(e.System$Collections$IEnumerator$moveNext());
            Bridge.Test.NUnit.Assert.areEqual("x", e[Bridge.geti(e, "System$Collections$Generic$IEnumerator$1$System$String$Current$1", "Current$1")]);
            Bridge.Test.NUnit.Assert.true(e.System$Collections$IEnumerator$moveNext());
            Bridge.Test.NUnit.Assert.areEqual("y", e[Bridge.geti(e, "System$Collections$Generic$IEnumerator$1$System$String$Current$1", "Current$1")]);
            Bridge.Test.NUnit.Assert.false(e.System$Collections$IEnumerator$moveNext());
        },
        iCollectionCountWorks: function () {
            var l = new (System.Collections.ObjectModel.ReadOnlyCollection$1(System.String))(System.Array.init(["x", "y", "z"], System.String));
            Bridge.Test.NUnit.Assert.areEqual(3, System.Array.getCount(l, System.String));
        },
        iCollectionContainsWorks: function () {
            var l = new (System.Collections.ObjectModel.ReadOnlyCollection$1(System.String))(System.Array.init(["x", "y", "z"], System.String));
            Bridge.Test.NUnit.Assert.true(System.Array.contains(l, "y", System.String));
            Bridge.Test.NUnit.Assert.false(System.Array.contains(l, "a", System.String));
        },
        iCollectionContainsUsesEqualsMethod: function () {
            var l = new (System.Collections.ObjectModel.ReadOnlyCollection$1(Bridge.ClientTest.Batch4.Collections.ObjectModel.ReadOnlyCollectionTests.C))(System.Array.init([new Bridge.ClientTest.Batch4.Collections.ObjectModel.ReadOnlyCollectionTests.C(1), new Bridge.ClientTest.Batch4.Collections.ObjectModel.ReadOnlyCollectionTests.C(2), new Bridge.ClientTest.Batch4.Collections.ObjectModel.ReadOnlyCollectionTests.C(3)], Bridge.ClientTest.Batch4.Collections.ObjectModel.ReadOnlyCollectionTests.C));
            Bridge.Test.NUnit.Assert.true(System.Array.contains(l, new Bridge.ClientTest.Batch4.Collections.ObjectModel.ReadOnlyCollectionTests.C(2), Bridge.ClientTest.Batch4.Collections.ObjectModel.ReadOnlyCollectionTests.C));
            Bridge.Test.NUnit.Assert.false(System.Array.contains(l, new Bridge.ClientTest.Batch4.Collections.ObjectModel.ReadOnlyCollectionTests.C(4), Bridge.ClientTest.Batch4.Collections.ObjectModel.ReadOnlyCollectionTests.C));
        },
        iListIndexingWorks: function () {
            var l = new (System.Collections.ObjectModel.ReadOnlyCollection$1(System.String))(System.Array.init(["x", "y", "z"], System.String));
            Bridge.Test.NUnit.Assert.areEqual("y", System.Array.getItem(l, 1, System.String));
        },
        iListIndexOfWorks: function () {
            var l = new (System.Collections.ObjectModel.ReadOnlyCollection$1(System.String))(System.Array.init(["x", "y", "z"], System.String));
            Bridge.Test.NUnit.Assert.areEqual(1, System.Array.indexOf(l, "y", 0, null, System.String));
            Bridge.Test.NUnit.Assert.areEqual(-1, System.Array.indexOf(l, "a", 0, null, System.String));
        },
        iListIndexOfUsesEqualsMethod: function () {
            var l = new (System.Collections.ObjectModel.ReadOnlyCollection$1(Bridge.ClientTest.Batch4.Collections.ObjectModel.ReadOnlyCollectionTests.C))(System.Array.init([new Bridge.ClientTest.Batch4.Collections.ObjectModel.ReadOnlyCollectionTests.C(1), new Bridge.ClientTest.Batch4.Collections.ObjectModel.ReadOnlyCollectionTests.C(2), new Bridge.ClientTest.Batch4.Collections.ObjectModel.ReadOnlyCollectionTests.C(3)], Bridge.ClientTest.Batch4.Collections.ObjectModel.ReadOnlyCollectionTests.C));
            Bridge.Test.NUnit.Assert.areEqual(1, System.Array.indexOf(l, new Bridge.ClientTest.Batch4.Collections.ObjectModel.ReadOnlyCollectionTests.C(2), 0, null, Bridge.ClientTest.Batch4.Collections.ObjectModel.ReadOnlyCollectionTests.C));
            Bridge.Test.NUnit.Assert.areEqual(-1, System.Array.indexOf(l, new Bridge.ClientTest.Batch4.Collections.ObjectModel.ReadOnlyCollectionTests.C(4), 0, null, Bridge.ClientTest.Batch4.Collections.ObjectModel.ReadOnlyCollectionTests.C));
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.Collections.ObjectModel.ReadOnlyCollectionTests.C", {
        i: 0,
        ctor: function (i) {
            this.$initialize();
            this.i = i;
        },
        equals: function (o) {
            return Bridge.is(o, Bridge.ClientTest.Batch4.Collections.ObjectModel.ReadOnlyCollectionTests.C) && this.i === Bridge.cast(o, Bridge.ClientTest.Batch4.Collections.ObjectModel.ReadOnlyCollectionTests.C).i;
        },
        getHashCode: function () {
            return this.i;
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.Collections.TypedArrays.ArrayBufferTests", {
        getArray: function (b) {
            var result = System.Array.init(b.byteLength, 0, System.Byte);
            var a = new Uint8Array(b);
            for (var i = 0; i < result.length; i = (i + 1) | 0) {
                result[System.Array.index(i, result)] = a[System.Array.index(i, a)];
            }
            return result;
        },
        typePropertiesAreCorrect: function () {
            Bridge.Test.NUnit.Assert.areEqual$1("ArrayBuffer", Bridge.Reflection.getTypeFullName(ArrayBuffer), "FullName");

            var interfaces = Bridge.Reflection.getInterfaces(DataView);
            Bridge.Test.NUnit.Assert.areEqual$1(0, interfaces.length, "Interface count should be empty");
        },
        constructorWorks: function () {
            var buf = new ArrayBuffer(14);
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(buf, ArrayBuffer), "is ArrayBuffer");
            Bridge.Test.NUnit.Assert.areEqual$1(14, buf.byteLength, "ByteLength");
        },
        byteLengthPropertyWorks: function () {
            var buf = new ArrayBuffer(10);
            Bridge.Test.NUnit.Assert.areEqual$1(10, buf.byteLength, "ByteLength");
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.Collections.TypedArrays.DataViewTests", {
        getView: function (content) {
            var result = new Uint8Array(content.length);
            for (var i = 0; i < content.length; i = (i + 1) | 0) {
                result[System.Array.index(i, result)] = content[System.Array.index(i, content)];
            }
            return new DataView(result.buffer);
        },
        typePropertiesAreCorrect: function () {
            Bridge.Test.NUnit.Assert.areEqual$1("DataView", Bridge.Reflection.getTypeFullName(DataView), "FullName");

            var interfaces = Bridge.Reflection.getInterfaces(DataView);
            Bridge.Test.NUnit.Assert.areEqual$1(0, interfaces.length, "Interface count should be empty");
        },
        arrayBufferOnlyConstructorWorks: function () {
            var b = new Uint8Array(System.Array.init([2, 3, 5], System.Byte)).buffer;
            var view = new DataView(b);
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(view, DataView), "Should be DataView");
            Bridge.Test.NUnit.Assert.areEqual$1(3, view.getInt8(1), "StartIndex should be correct");
        },
        arrayBufferAndByteOffsetConstructorWorks: function () {
            var b = new Uint8Array(System.Array.init([2, 3, 5], System.Byte)).buffer;
            var view = new DataView(b, 1);
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(view, DataView), "Should be DataView");
            Bridge.Test.NUnit.Assert.areEqual$1(5, view.getInt8(1), "StartIndex should be correct");
        },
        arrayBufferAndByteOffsetAndByteLengthConstructorWorks: function () {
            var b = new Uint8Array(System.Array.init([2, 3, 5, 7, 2, 0], System.Byte)).buffer;
            var view = new DataView(b, 1, 3);
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(view, DataView), "Should be DataView");
            Bridge.Test.NUnit.Assert.areEqual$1(5, view.getInt8(1), "StartIndex should be correct");
            Bridge.Test.NUnit.Assert.throws$5(function () {
                view.getInt8(4);
            }, "Length should be correct");
        },
        getInt8Works: function () {
            var b = this.getView(System.Array.init([3, 253], System.Byte));
            Bridge.Test.NUnit.Assert.areEqual$1(3, b.getInt8(0), "0");
            Bridge.Test.NUnit.Assert.areEqual$1(-3, b.getInt8(1), "1");
        },
        getUint8Works: function () {
            var b = this.getView(System.Array.init([3, 253], System.Byte));
            Bridge.Test.NUnit.Assert.areEqual$1(3, b.getUint8(0), "0");
            Bridge.Test.NUnit.Assert.areEqual$1(253, b.getUint8(1), "1");
        },
        getInt16Works: function () {
            var b = this.getView(System.Array.init([3, 253, 3, 4, 253, 3], System.Byte));
            Bridge.Test.NUnit.Assert.areEqual$1(-765, b.getInt16(0, true), "0, true");
            Bridge.Test.NUnit.Assert.areEqual$1(1027, b.getInt16(2, true), "2, true");
            Bridge.Test.NUnit.Assert.areEqual$1(1021, b.getInt16(4, true), "4, true");
            Bridge.Test.NUnit.Assert.areEqual$1(1021, b.getInt16(0, false), "0, false");
            Bridge.Test.NUnit.Assert.areEqual$1(772, b.getInt16(2, false), "2, false");
            Bridge.Test.NUnit.Assert.areEqual$1(-765, b.getInt16(4, false), "4, false");
            Bridge.Test.NUnit.Assert.areEqual$1(1021, b.getInt16(0), "0, default");
            Bridge.Test.NUnit.Assert.areEqual$1(772, b.getInt16(2), "2, default");
            Bridge.Test.NUnit.Assert.areEqual$1(-765, b.getInt16(4), "4, default");
        },
        getUint16Works: function () {
            var b = this.getView(System.Array.init([3, 253, 3, 4, 253, 3], System.Byte));
            Bridge.Test.NUnit.Assert.areEqual$1(64771, b.getUint16(0, true), "0, true");
            Bridge.Test.NUnit.Assert.areEqual$1(1027, b.getUint16(2, true), "2, true");
            Bridge.Test.NUnit.Assert.areEqual$1(1021, b.getUint16(4, true), "4, true");
            Bridge.Test.NUnit.Assert.areEqual$1(1021, b.getUint16(0, false), "0, false");
            Bridge.Test.NUnit.Assert.areEqual$1(772, b.getUint16(2, false), "2, false");
            Bridge.Test.NUnit.Assert.areEqual$1(64771, b.getUint16(4, false), "4, false");
            Bridge.Test.NUnit.Assert.areEqual$1(1021, b.getUint16(0), "0, default");
            Bridge.Test.NUnit.Assert.areEqual$1(772, b.getUint16(2), "2, default");
            Bridge.Test.NUnit.Assert.areEqual$1(64771, b.getUint16(4), "4, default");
        },
        getInt32Works: function () {
            var b = this.getView(System.Array.init([3, 0, 0, 253, 3, 0, 0, 4, 253, 0, 0, 3], System.Byte));
            Bridge.Test.NUnit.Assert.areEqual$1(-50331645, b.getInt32(0, true), "0, true");
            Bridge.Test.NUnit.Assert.areEqual$1(67108867, b.getInt32(4, true), "4, true");
            Bridge.Test.NUnit.Assert.areEqual$1(50331901, b.getInt32(8, true), "8, true");
            Bridge.Test.NUnit.Assert.areEqual$1(50331901, b.getInt32(0, false), "0, false");
            Bridge.Test.NUnit.Assert.areEqual$1(50331652, b.getInt32(4, false), "4, false");
            Bridge.Test.NUnit.Assert.areEqual$1(-50331645, b.getInt32(8, false), "8, false");
            Bridge.Test.NUnit.Assert.areEqual$1(50331901, b.getInt32(0), "0, default");
            Bridge.Test.NUnit.Assert.areEqual$1(50331652, b.getInt32(4), "4, default");
            Bridge.Test.NUnit.Assert.areEqual$1(-50331645, b.getInt32(8), "8, default");
        },
        getUint32Works: function () {
            var b = this.getView(System.Array.init([3, 0, 0, 253, 3, 0, 0, 4, 253, 0, 0, 3], System.Byte));
            Bridge.Test.NUnit.Assert.areEqual$1(4244635651, b.getUint32(0, true), "0, true");
            Bridge.Test.NUnit.Assert.areEqual$1(67108867, b.getUint32(4, true), "4, true");
            Bridge.Test.NUnit.Assert.areEqual$1(50331901, b.getUint32(8, true), "8, true");
            Bridge.Test.NUnit.Assert.areEqual$1(50331901, b.getUint32(0, false), "0, false");
            Bridge.Test.NUnit.Assert.areEqual$1(50331652, b.getUint32(4, false), "4, false");
            Bridge.Test.NUnit.Assert.areEqual$1(4244635651, b.getUint32(8, false), "8, false");
            Bridge.Test.NUnit.Assert.areEqual$1(50331901, b.getUint32(0), "0, default");
            Bridge.Test.NUnit.Assert.areEqual$1(50331652, b.getUint32(4), "4, default");
            Bridge.Test.NUnit.Assert.areEqual$1(4244635651, b.getUint32(8), "8, default");
        },
        getFloat32Works: function () {
            var b = this.getView(System.Array.init([255, 255, 255, 255, 0, 0, 192, 63, 63, 192, 0, 0], System.Byte));
            Bridge.Test.NUnit.Assert.areEqual$1(1.5, b.getFloat32(4, true), "4, true");
            Bridge.Test.NUnit.Assert.areEqual$1(1.5, b.getFloat32(8, false), "8, false");
            Bridge.Test.NUnit.Assert.areEqual$1(1.5, b.getFloat32(8), "8, default");
        },
        getFloat64Works: function () {
            var b = this.getView(System.Array.init([255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 248, 63, 63, 248, 0, 0, 0, 0, 0, 0], System.Byte));
            Bridge.Test.NUnit.Assert.areEqual$1(1.5, b.getFloat64(8, true), "8, true");
            Bridge.Test.NUnit.Assert.areEqual$1(1.5, b.getFloat64(16, false), "16, false");
            Bridge.Test.NUnit.Assert.areEqual$1(1.5, b.getFloat64(16), "16, default");
        },
        setTest: function (populator, expected) {
            var b = new ArrayBuffer(expected.length);
            var v = new DataView(b);
            populator(v);
            var actual = new (System.Collections.Generic.List$1(System.Byte))();
            var ub = new Uint8Array(b);
            for (var i = 0; i < ub.length; i = (i + 1) | 0) {
                actual.add(ub[System.Array.index(i, ub)]);
            }

            Bridge.Test.NUnit.Assert.areEqual(expected, actual.toArray());
        },
        setInt8Works: function () {
            this.setTest($asm.$.Bridge.ClientTest.Batch4.Collections.TypedArrays.DataViewTests.f1, System.Array.init([0, 14, 242], System.Byte));
        },
        setUint8Works: function () {
            this.setTest($asm.$.Bridge.ClientTest.Batch4.Collections.TypedArrays.DataViewTests.f2, System.Array.init([0, 14, 242], System.Byte));
        },
        setInt16Works: function () {
            this.setTest($asm.$.Bridge.ClientTest.Batch4.Collections.TypedArrays.DataViewTests.f3, System.Array.init([0, 0, 255, 252, 252, 255, 255, 252, 0, 14, 14, 0, 0, 14, 0], System.Byte));
        },
        setUint16Works: function () {
            this.setTest($asm.$.Bridge.ClientTest.Batch4.Collections.TypedArrays.DataViewTests.f4, System.Array.init([0, 0, 140, 35, 35, 140, 140, 35, 0, 14, 14, 0, 0, 14, 0], System.Byte));
        },
        setInt32Works: function () {
            this.setTest($asm.$.Bridge.ClientTest.Batch4.Collections.TypedArrays.DataViewTests.f5, System.Array.init([0, 0, 0, 0, 255, 255, 255, 252, 252, 255, 255, 255, 255, 255, 255, 252, 0, 0, 0, 14, 14, 0, 0, 0, 0, 0, 0, 14, 0, 0], System.Byte));
        },
        setUint32Works: function () {
            this.setTest($asm.$.Bridge.ClientTest.Batch4.Collections.TypedArrays.DataViewTests.f6, System.Array.init([0, 0, 0, 0, 207, 224, 18, 143, 143, 18, 224, 207, 207, 224, 18, 143, 0, 0, 0, 14, 14, 0, 0, 0, 0, 0, 0, 14, 0, 0], System.Byte));
        },
        setFloat32Works: function () {
            this.setTest($asm.$.Bridge.ClientTest.Batch4.Collections.TypedArrays.DataViewTests.f7, System.Array.init([0, 0, 0, 0, 63, 192, 0, 0, 0, 0, 192, 63, 63, 192, 0, 0], System.Byte));
        },
        setFloat64Works: function () {
            this.setTest($asm.$.Bridge.ClientTest.Batch4.Collections.TypedArrays.DataViewTests.f8, System.Array.init([0, 0, 0, 0, 0, 0, 0, 0, 63, 248, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 248, 63, 63, 248, 0, 0, 0, 0, 0, 0], System.Byte));
        }
    });

    Bridge.ns("Bridge.ClientTest.Batch4.Collections.TypedArrays.DataViewTests", $asm.$);

    Bridge.apply($asm.$.Bridge.ClientTest.Batch4.Collections.TypedArrays.DataViewTests, {
        f1: function (v) {
            v.setInt8(1, 14);
            v.setInt8(2, -14);
        },
        f2: function (v) {
            v.setUint8(1, 14);
            v.setUint8(2, 242);
        },
        f3: function (v) {
            v.setInt16(2, -4, false);
            v.setInt16(4, -4, true);
            v.setInt16(6, -4);
            v.setInt16(8, 14, false);
            v.setInt16(10, 14, true);
            v.setInt16(12, 14);
        },
        f4: function (v) {
            v.setUint16(2, 35875, false);
            v.setUint16(4, 35875, true);
            v.setUint16(6, 35875);
            v.setUint16(8, 14, false);
            v.setUint16(10, 14, true);
            v.setUint16(12, 14);
        },
        f5: function (v) {
            v.setInt32(4, -4, false);
            v.setInt32(8, -4, true);
            v.setInt32(12, -4);
            v.setInt32(16, 14, false);
            v.setInt32(20, 14, true);
            v.setInt32(24, 14);
        },
        f6: function (v) {
            v.setUint32(4, 3487568527, false);
            v.setUint32(8, 3487568527, true);
            v.setUint32(12, 3487568527);
            v.setUint32(16, 14, false);
            v.setUint32(20, 14, true);
            v.setUint32(24, 14);
        },
        f7: function (v) {
            v.setFloat32(4, 1.5, false);
            v.setFloat32(8, 1.5, true);
            v.setFloat32(12, 1.5);
        },
        f8: function (v) {
            v.setFloat64(8, 1.5, false);
            v.setFloat64(16, 1.5, true);
            v.setFloat64(24, 1.5);
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.Collections.TypedArrays.Float32ArrayTests", {
        assertContent: function (actual, expected, message) {
            if (actual.length !== expected.length) {
                Bridge.Test.NUnit.Assert.fail$1(System.String.concat(message, ": Expected length ", expected.length, ", actual: ", actual.length));
                return;
            }
            for (var i = 0; i < expected.length; i = (i + 1) | 0) {
                if (actual[System.Array.index(i, actual)] !== expected[System.Array.index(i, expected)]) {
                    Bridge.Test.NUnit.Assert.fail$1(System.String.concat(message, ": Position ", i, ": expected ", expected[System.Array.index(i, expected)], ", actual: ", System.Single.format(actual[System.Array.index(i, actual)], 'G')));
                    return;
                }
            }
            Bridge.Test.NUnit.Assert.true$1(true, message);
        },
        typePropertiesAreCorrect_SPI_1559: function () {
            Bridge.Test.NUnit.Assert.areEqual$1("Float32Array", Bridge.Reflection.getTypeFullName(Float32Array), "FullName");

            var interfaces = Bridge.Reflection.getInterfaces(Float32Array);
            Bridge.Test.NUnit.Assert.areEqual$1(7, interfaces.length, "Interface count should be 7");
            // #1559
            Bridge.Test.NUnit.Assert.true$1(System.Array.contains(interfaces, System.Collections.Generic.IEnumerable$1(System.Single), Function), "Interfaces should contain IEnumerable<float>");
            Bridge.Test.NUnit.Assert.true$1(System.Array.contains(interfaces, System.Collections.Generic.ICollection$1(System.Single), Function), "Interfaces should contain ICollection<float>");
            Bridge.Test.NUnit.Assert.true$1(System.Array.contains(interfaces, System.Collections.Generic.IList$1(System.Single), Function), "Interfaces should contain IList<float>");
            // Not JS API
            //Assert.False(interfaces.Contains(typeof(IReadOnlyCollection<float>)), "Interfaces should contain IReadOnlyCollection<float>");
            //Assert.False(interfaces.Contains(typeof(IReadOnlyList<float>)), "Interfaces should contain IReadOnlyList<float>");

            var arr = new Float32Array(0);
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(arr, Float32Array), "Is Float32Array");
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(arr, System.Collections.Generic.IEnumerable$1(System.Single)), "Is IEnumerable<float>");
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(arr, System.Collections.Generic.ICollection$1(System.Single)), "Is ICollection<float>");
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(arr, System.Collections.Generic.IList$1(System.Single)), "Is IList<float>");
            // Not JS API
            //Assert.False(arr is IReadOnlyCollection<float>, "Is IReadOnlyCollection<float>");
            //Assert.False(arr is IReadOnlyList<float>, "Is IReadOnlyList<float>");
        },
        lengthConstructorWorks: function () {
            var arr = new Float32Array(13);
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(arr, Float32Array), "is Float32Array");
            Bridge.Test.NUnit.Assert.areEqual$1(13, arr.length, "Length");
        },
        constructorFromIntWorks: function () {
            var source = System.Array.init([3, 8, 4], System.Single);
            var arr = new Float32Array(source);
            Bridge.Test.NUnit.Assert.true$1(!Bridge.referenceEquals(arr, source), "New object");
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(arr, Float32Array), "is Float32Array");
            this.assertContent(arr, System.Array.init([3, 8, 4], System.Int32), "content");
        },
        copyConstructorWorks: function () {
            var source = new Float32Array(System.Array.init([3, 8, 4], System.Single));
            var arr = new Float32Array(source);
            Bridge.Test.NUnit.Assert.true$1(!Bridge.referenceEquals(arr, source), "New object");
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(arr, Float32Array), "is Float32Array");
            this.assertContent(arr, System.Array.init([3, 8, 4], System.Int32), "content");
        },
        arrayBufferConstructorWorks: function () {
            var buf = new ArrayBuffer(80);
            var arr = new Float32Array(buf);
            Bridge.Test.NUnit.Assert.true(Bridge.is(arr, Float32Array));
            Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(arr.buffer, buf), "buffer");
            Bridge.Test.NUnit.Assert.areEqual$1(20, arr.length, "length");
        },
        arrayBufferWithOffsetConstructorWorks: function () {
            var buf = new ArrayBuffer(80);
            var arr = new Float32Array(buf, 16);
            Bridge.Test.NUnit.Assert.true(Bridge.is(arr, Float32Array));
            Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(arr.buffer, buf), "buffer");
            Bridge.Test.NUnit.Assert.areEqual$1(16, arr.length, "length");
        },
        arrayBufferWithOffsetAndLengthConstructorWorks: function () {
            var buf = new ArrayBuffer(80);
            var arr = new Float32Array(buf, 16, 12);
            Bridge.Test.NUnit.Assert.true(Bridge.is(arr, Float32Array));
            Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(arr.buffer, buf), "buffer");
            Bridge.Test.NUnit.Assert.areEqual$1(12, arr.length, "length");
        },
        staticBytesPerElementWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual(4, Float32Array.BYTES_PER_ELEMENT);
        },
        lengthWorks: function () {
            var arr = new Float32Array(13);
            Bridge.Test.NUnit.Assert.areEqual$1(13, arr.length, "Length");
        },
        indexingWorks: function () {
            var arr = new Float32Array(3);
            arr[System.Array.index(1, arr)] = 42;
            this.assertContent(arr, System.Array.init([0, 42, 0], System.Int32), "Content");
            Bridge.Test.NUnit.Assert.areEqual$1(42, arr[System.Array.index(1, arr)], "[1]");
        },
        setFloat32ArrayWorks: function () {
            var arr = new Float32Array(4);
            arr.set(new Float32Array(System.Array.init([3, 6, 7], System.Single)));
            this.assertContent(arr, System.Array.init([3, 6, 7, 0], System.Int32), "Content");
        },
        setFloat32ArrayWithOffsetWorks: function () {
            var arr = new Float32Array(6);
            arr.set(new Float32Array(System.Array.init([3, 6, 7], System.Single)), 2);
            this.assertContent(arr, System.Array.init([0, 0, 3, 6, 7, 0], System.Int32), "Content");
        },
        setNormalArrayWorks: function () {
            var arr = new Float32Array(4);
            arr.set(System.Array.init([3, 6, 7], System.Single));
            this.assertContent(arr, System.Array.init([3, 6, 7, 0], System.Int32), "Content");
        },
        setNormalArrayWithOffsetWorks: function () {
            var arr = new Float32Array(6);
            arr.set(System.Array.init([3, 6, 7], System.Single), 2);
            this.assertContent(arr, System.Array.init([0, 0, 3, 6, 7, 0], System.Int32), "Content");
        },
        subarrayWithBeginWorks: function () {
            var source = new Float32Array(10);
            var arr = source.subarray(3);
            Bridge.Test.NUnit.Assert.false$1(Bridge.referenceEquals(arr, source), "Should be a new array");
            Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(arr.buffer, source.buffer), "Should be the same buffer");
            Bridge.Test.NUnit.Assert.areEqual$1(12, arr.byteOffset, "ByteOffset should be correct");
        },
        subarrayWithBeginAndEndWorks: function () {
            var source = new Float32Array(10);
            var arr = source.subarray(3, 7);
            Bridge.Test.NUnit.Assert.false$1(Bridge.referenceEquals(arr, source), "Should be a new array");
            Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(arr.buffer, source.buffer), "Should be the same buffer");
            Bridge.Test.NUnit.Assert.areEqual$1(12, arr.byteOffset, "ByteOffset should be correct");
            Bridge.Test.NUnit.Assert.areEqual$1(4, arr.length, "Length should be correct");
        },
        bufferPropertyWorks: function () {
            var buf = new ArrayBuffer(100);
            var arr = new Float32Array(buf);
            Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(arr.buffer, buf), "Should be correct");
        },
        byteOffsetPropertyWorks: function () {
            var buf = new ArrayBuffer(100);
            var arr = new Float32Array(buf, 32);
            Bridge.Test.NUnit.Assert.areEqual$1(32, arr.byteOffset, "Should be correct");
        },
        byteLengthPropertyWorks: function () {
            var arr = new Float32Array(23);
            Bridge.Test.NUnit.Assert.areEqual$1(92, arr.byteLength, "Should be correct");
        },
        indexOfWorks: function () {
            var arr = new Float32Array(System.Array.init([3, 6, 2, 9, 5], System.Single));
            Bridge.Test.NUnit.Assert.areEqual$1(3, System.Array.indexOf(arr, 9), "9");
            Bridge.Test.NUnit.Assert.areEqual$1(-1, System.Array.indexOf(arr, 1), "1");
        },
        containsWorks: function () {
            var arr = new Float32Array(System.Array.init([3, 6, 2, 9, 5], System.Single));
            Bridge.Test.NUnit.Assert.true$1(System.Array.contains(arr, 9), "9");
            Bridge.Test.NUnit.Assert.false$1(System.Array.contains(arr, 1), "1");
        },
        foreachWorks_SPI_1401: function () {
            var $t;
            var arr = new Float32Array(System.Array.init([3, 6, 2, 9, 5], System.Single));
            var l = new (System.Collections.Generic.List$1(System.Single))();
            // #1401
            $t = Bridge.getEnumerator(arr);
            try {
                while ($t.moveNext()) {
                    var i = $t.Current;
                    l.add(i);
                }
            }finally {
                if (Bridge.is($t, System.IDisposable)) {
                    $t.System$IDisposable$dispose();
                }
            }Bridge.Test.NUnit.Assert.areEqual(l.toArray(), System.Array.init([3, 6, 2, 9, 5], System.Int32));
        },
        getEnumeratorWorks_SPI_1401: function () {
            var arr = new Float32Array(System.Array.init([3, 6, 2, 9, 5], System.Single));
            var l = new (System.Collections.Generic.List$1(System.Single))();
            // #1401
            var enm = Bridge.getEnumerator(arr);
            while (enm.System$Collections$IEnumerator$moveNext()) {
                l.add(enm[Bridge.geti(enm, "System$Collections$Generic$IEnumerator$1$System$Single$Current$1", "Current$1")]);
            }
            Bridge.Test.NUnit.Assert.areEqual(l.toArray(), System.Array.init([3, 6, 2, 9, 5], System.Int32));
        },
        iEnumerableGetEnumeratorWorks: function () {
            var arr = Bridge.cast(new Float32Array(System.Array.init([3, 6, 2, 9, 5], System.Single)), System.Collections.Generic.IEnumerable$1(System.Single));
            var l = new (System.Collections.Generic.List$1(System.Single))();
            var enm = Bridge.getEnumerator(arr, System.Single);
            while (enm.System$Collections$IEnumerator$moveNext()) {
                l.add(enm[Bridge.geti(enm, "System$Collections$Generic$IEnumerator$1$System$Single$Current$1", "Current$1")]);
            }
            Bridge.Test.NUnit.Assert.areEqual(System.Array.init([3, 6, 2, 9, 5], System.Int32), l.toArray());
        },
        iCollectionMethodsWork_SPI_1559: function () {
            // #1559
            var coll = Bridge.cast(new Float32Array(System.Array.init([3, 6, 2, 9, 5], System.Single)), System.Collections.Generic.ICollection$1(System.Single));
            Bridge.Test.NUnit.Assert.areEqual$1(5, System.Array.getCount(coll, System.Single), "Count");
            Bridge.Test.NUnit.Assert.true$1(System.Array.contains(coll, 6, System.Single), "Contains(6)");
            Bridge.Test.NUnit.Assert.false$1(System.Array.contains(coll, 1, System.Single), "Contains(1)");
            Bridge.Test.NUnit.Assert.throws$7(System.NotSupportedException, function () {
                System.Array.add(coll, 2, System.Single);
            }, "Add");
            Bridge.Test.NUnit.Assert.throws$7(System.NotSupportedException, function () {
                System.Array.clear(coll, System.Single);
            }, "Clear");
            Bridge.Test.NUnit.Assert.throws$7(System.NotSupportedException, function () {
                System.Array.remove(coll, 2, System.Single);
            }, "Remove");
        },
        iListMethodsWork_SPI_1559: function () {
            // #1559
            var list = Bridge.cast(new Float32Array(System.Array.init([3, 6, 2, 9, 5], System.Single)), System.Collections.Generic.IList$1(System.Single));
            Bridge.Test.NUnit.Assert.areEqual$1(1, System.Array.indexOf(list, 6, 0, null, System.Single), "IndexOf(6)");
            Bridge.Test.NUnit.Assert.areEqual$1(-1, System.Array.indexOf(list, 1, 0, null, System.Single), "IndexOf(1)");
            Bridge.Test.NUnit.Assert.areEqual$1(9, System.Array.getItem(list, 3, System.Single), "Get item");
            System.Array.setItem(list, 3, 4, System.Single);
            Bridge.Test.NUnit.Assert.areEqual$1(4, System.Array.getItem(list, 3, System.Single), "Set item");

            Bridge.Test.NUnit.Assert.throws$7(System.NotSupportedException, function () {
                System.Array.insert(list, 2, 2, System.Single);
            }, "Insert");
            Bridge.Test.NUnit.Assert.throws$7(System.NotSupportedException, function () {
                System.Array.removeAt(list, 2, System.Single);
            }, "RemoveAt");
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.Collections.TypedArrays.Float64ArrayTests", {
        assertContent: function (actual, expected, message) {
            if (actual.length !== expected.length) {
                Bridge.Test.NUnit.Assert.fail$1(System.String.concat(message, ": Expected length ", expected.length, ", actual: ", actual.length));
                return;
            }
            for (var i = 0; i < expected.length; i = (i + 1) | 0) {
                if (actual[System.Array.index(i, actual)] !== expected[System.Array.index(i, expected)]) {
                    Bridge.Test.NUnit.Assert.fail$1(System.String.concat(message, ": Position ", i, ": expected ", expected[System.Array.index(i, expected)], ", actual: ", System.Double.format(actual[System.Array.index(i, actual)], 'G')));
                    return;
                }
            }
            Bridge.Test.NUnit.Assert.true$1(true, message);
        },
        typePropertiesAreCorrect_SPI_1559: function () {
            Bridge.Test.NUnit.Assert.areEqual$1("Float64Array", Bridge.Reflection.getTypeFullName(Float64Array), "FullName");

            var interfaces = Bridge.Reflection.getInterfaces(Float64Array);
            Bridge.Test.NUnit.Assert.areEqual$1(7, interfaces.length, "Interface count should be 7");
            Bridge.Test.NUnit.Assert.true$1(System.Array.contains(interfaces, System.Collections.Generic.IEnumerable$1(System.Double), Function), "Interfaces should contain IEnumerable<double>");
            Bridge.Test.NUnit.Assert.true$1(System.Array.contains(interfaces, System.Collections.Generic.ICollection$1(System.Double), Function), "Interfaces should contain ICollection<double>");
            Bridge.Test.NUnit.Assert.true$1(System.Array.contains(interfaces, System.Collections.Generic.IList$1(System.Double), Function), "Interfaces should contain IList<double>");

            // Not JS API
            //Assert.True(interfaces.Contains(typeof(IReadOnlyCollection<double>)), "Interfaces should contain IReadOnlyCollection<double>");
            //Assert.True(interfaces.Contains(typeof(IReadOnlyList<double>)), "Interfaces should contain IReadOnlyList<double>");

            var arr = new Float64Array(0);
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(arr, Float64Array), "Is Float64Array");
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(arr, System.Collections.Generic.IEnumerable$1(System.Double)), "Is IEnumerable<double>");
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(arr, System.Collections.Generic.ICollection$1(System.Double)), "Is ICollection<double>");
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(arr, System.Collections.Generic.IList$1(System.Double)), "Is IList<double>");

            // Not JS API
            //Assert.True(arr is IReadOnlyCollection<double>, "Is IReadOnlyCollection<double>");
            //Assert.True(arr is IReadOnlyList<double>, "Is IReadOnlyList<double>");
        },
        lengthConstructorWorks: function () {
            var arr = new Float64Array(13);
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(arr, Float64Array), "is Float64Array");
            Bridge.Test.NUnit.Assert.areEqual$1(13, arr.length, "Length");
        },
        constructorFromIntWorks: function () {
            var source = System.Array.init([3, 8, 4], System.Double);
            var arr = new Float64Array(source);
            Bridge.Test.NUnit.Assert.true$1(!Bridge.referenceEquals(arr, source), "New object");
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(arr, Float64Array), "is Float64Array");
            this.assertContent(arr, System.Array.init([3, 8, 4], System.Int32), "content");
        },
        copyConstructorWorks: function () {
            var source = new Float64Array(System.Array.init([3, 8, 4], System.Double));
            var arr = new Float64Array(source);
            Bridge.Test.NUnit.Assert.true$1(!Bridge.referenceEquals(arr, source), "New object");
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(arr, Float64Array), "is Float64Array");
            this.assertContent(arr, System.Array.init([3, 8, 4], System.Int32), "content");
        },
        arrayBufferConstructorWorks: function () {
            var buf = new ArrayBuffer(80);
            var arr = new Float64Array(buf);
            Bridge.Test.NUnit.Assert.true(Bridge.is(arr, Float64Array));
            Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(arr.buffer, buf), "buffer");
            Bridge.Test.NUnit.Assert.areEqual$1(10, arr.length, "length");
        },
        arrayBufferWithOffsetConstructorWorks: function () {
            var buf = new ArrayBuffer(80);
            var arr = new Float64Array(buf, 8);
            Bridge.Test.NUnit.Assert.true(Bridge.is(arr, Float64Array));
            Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(arr.buffer, buf), "buffer");
            Bridge.Test.NUnit.Assert.areEqual$1(9, arr.length, "length");
        },
        arrayBufferWithOffsetAndLengthConstructorWorks: function () {
            var buf = new ArrayBuffer(80);
            var arr = new Float64Array(buf, 16, 6);
            Bridge.Test.NUnit.Assert.true(Bridge.is(arr, Float64Array));
            Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(arr.buffer, buf), "buffer");
            Bridge.Test.NUnit.Assert.areEqual$1(6, arr.length, "length");
        },
        staticBytesPerElementWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual(8, Float64Array.BYTES_PER_ELEMENT);
        },
        lengthWorks: function () {
            var arr = new Float64Array(13);
            Bridge.Test.NUnit.Assert.areEqual$1(13, arr.length, "Length");
        },
        indexingWorks: function () {
            var arr = new Float64Array(3);
            arr[System.Array.index(1, arr)] = 42;
            this.assertContent(arr, System.Array.init([0, 42, 0], System.Int32), "Content");
            Bridge.Test.NUnit.Assert.areEqual$1(42, arr[System.Array.index(1, arr)], "[1]");
        },
        setFloat64ArrayWorks: function () {
            var arr = new Float64Array(4);
            arr.set(new Float64Array(System.Array.init([3, 6, 7], System.Double)));
            this.assertContent(arr, System.Array.init([3, 6, 7, 0], System.Int32), "Content");
        },
        setFloat64ArrayWithOffsetWorks: function () {
            var arr = new Float64Array(6);
            arr.set(new Float64Array(System.Array.init([3, 6, 7], System.Double)), 2);
            this.assertContent(arr, System.Array.init([0, 0, 3, 6, 7, 0], System.Int32), "Content");
        },
        setNormalArrayWorks: function () {
            var arr = new Float64Array(4);
            arr.set(System.Array.init([3, 6, 7], System.Double));
            this.assertContent(arr, System.Array.init([3, 6, 7, 0], System.Int32), "Content");
        },
        setNormalArrayWithOffsetWorks: function () {
            var arr = new Float64Array(6);
            arr.set(System.Array.init([3, 6, 7], System.Double), 2);
            this.assertContent(arr, System.Array.init([0, 0, 3, 6, 7, 0], System.Int32), "Content");
        },
        subarrayWithBeginWorks: function () {
            var source = new Float64Array(10);
            var arr = source.subarray(3);
            Bridge.Test.NUnit.Assert.false$1(Bridge.referenceEquals(arr, source), "Should be a new array");
            Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(arr.buffer, source.buffer), "Should be the same buffer");
            Bridge.Test.NUnit.Assert.areEqual$1(24, arr.byteOffset, "ByteOffset should be correct");
        },
        subarrayWithBeginAndEndWorks: function () {
            var source = new Float64Array(10);
            var arr = source.subarray(3, 7);
            Bridge.Test.NUnit.Assert.false$1(Bridge.referenceEquals(arr, source), "Should be a new array");
            Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(arr.buffer, source.buffer), "Should be the same buffer");
            Bridge.Test.NUnit.Assert.areEqual$1(24, arr.byteOffset, "ByteOffset should be correct");
            Bridge.Test.NUnit.Assert.areEqual$1(4, arr.length, "Length should be correct");
        },
        bufferPropertyWorks: function () {
            var buf = new ArrayBuffer(104);
            var arr = new Float64Array(buf);
            Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(arr.buffer, buf), "Should be correct");
        },
        byteOffsetPropertyWorks: function () {
            var buf = new ArrayBuffer(104);
            var arr = new Float64Array(buf, 56);
            Bridge.Test.NUnit.Assert.areEqual$1(56, arr.byteOffset, "Should be correct");
        },
        byteLengthPropertyWorks: function () {
            var arr = new Float64Array(23);
            Bridge.Test.NUnit.Assert.areEqual$1(184, arr.byteLength, "Should be correct");
        },
        indexOfWorks: function () {
            var arr = new Float64Array(System.Array.init([3, 6, 2, 9, 5], System.Double));
            Bridge.Test.NUnit.Assert.areEqual$1(3, System.Array.indexOf(arr, 9), "9");
            Bridge.Test.NUnit.Assert.areEqual$1(-1, System.Array.indexOf(arr, 1), "1");
        },
        containsWorks: function () {
            var arr = new Float64Array(System.Array.init([3, 6, 2, 9, 5], System.Double));
            Bridge.Test.NUnit.Assert.true$1(System.Array.contains(arr, 9), "9");
            Bridge.Test.NUnit.Assert.false$1(System.Array.contains(arr, 1), "1");
        },
        foreachWorks_SPI_1401: function () {
            var $t;
            var arr = new Float64Array(System.Array.init([3, 6, 2, 9, 5], System.Double));
            var l = new (System.Collections.Generic.List$1(System.Double))();
            // #1401
            $t = Bridge.getEnumerator(arr);
            try {
                while ($t.moveNext()) {
                    var i = $t.Current;
                    l.add(i);
                }
            }finally {
                if (Bridge.is($t, System.IDisposable)) {
                    $t.System$IDisposable$dispose();
                }
            }Bridge.Test.NUnit.Assert.areEqual(l.toArray(), System.Array.init([3, 6, 2, 9, 5], System.Int32));
        },
        getEnumeratorWorks_SPI_1401: function () {
            var arr = new Float64Array(System.Array.init([3, 6, 2, 9, 5], System.Double));
            var l = new (System.Collections.Generic.List$1(System.Double))();
            // #1401
            var enm = Bridge.getEnumerator(arr);
            while (enm.System$Collections$IEnumerator$moveNext()) {
                l.add(enm[Bridge.geti(enm, "System$Collections$Generic$IEnumerator$1$System$Double$Current$1", "Current$1")]);
            }
            Bridge.Test.NUnit.Assert.areEqual(l.toArray(), System.Array.init([3, 6, 2, 9, 5], System.Int32));
        },
        iEnumerableGetEnumeratorWorks: function () {
            var arr = Bridge.cast(new Float64Array(System.Array.init([3, 6, 2, 9, 5], System.Double)), System.Collections.Generic.IEnumerable$1(System.Double));
            var l = new (System.Collections.Generic.List$1(System.Double))();
            var enm = Bridge.getEnumerator(arr, System.Double);
            while (enm.System$Collections$IEnumerator$moveNext()) {
                l.add(enm[Bridge.geti(enm, "System$Collections$Generic$IEnumerator$1$System$Double$Current$1", "Current$1")]);
            }
            Bridge.Test.NUnit.Assert.areEqual(System.Array.init([3, 6, 2, 9, 5], System.Int32), l.toArray());
        },
        iCollectionMethodsWork_SPI_1559: function () {
            // #1559
            var coll = Bridge.cast(new Float64Array(System.Array.init([3, 6, 2, 9, 5], System.Double)), System.Collections.Generic.ICollection$1(System.Double));
            Bridge.Test.NUnit.Assert.areEqual$1(5, System.Array.getCount(coll, System.Double), "Count");
            Bridge.Test.NUnit.Assert.true$1(System.Array.contains(coll, 6, System.Double), "Contains(6)");
            Bridge.Test.NUnit.Assert.false$1(System.Array.contains(coll, 1, System.Double), "Contains(1)");
            Bridge.Test.NUnit.Assert.throws$7(System.NotSupportedException, function () {
                System.Array.add(coll, 2, System.Double);
            }, "Add");
            Bridge.Test.NUnit.Assert.throws$7(System.NotSupportedException, function () {
                System.Array.clear(coll, System.Double);
            }, "Clear");
            Bridge.Test.NUnit.Assert.throws$7(System.NotSupportedException, function () {
                System.Array.remove(coll, 2, System.Double);
            }, "Remove");
        },
        iListMethodsWork_SPI_1559: function () {
            // #1559
            var list = Bridge.cast(new Float64Array(System.Array.init([3, 6, 2, 9, 5], System.Double)), System.Collections.Generic.IList$1(System.Double));
            Bridge.Test.NUnit.Assert.areEqual$1(1, System.Array.indexOf(list, 6, 0, null, System.Double), "IndexOf(6)");
            Bridge.Test.NUnit.Assert.areEqual$1(-1, System.Array.indexOf(list, 1, 0, null, System.Double), "IndexOf(1)");
            Bridge.Test.NUnit.Assert.areEqual$1(9, System.Array.getItem(list, 3, System.Double), "Get item");
            System.Array.setItem(list, 3, 4, System.Double);
            Bridge.Test.NUnit.Assert.areEqual$1(4, System.Array.getItem(list, 3, System.Double), "Set item");

            Bridge.Test.NUnit.Assert.throws$7(System.NotSupportedException, function () {
                System.Array.insert(list, 2, 2, System.Double);
            }, "Insert");
            Bridge.Test.NUnit.Assert.throws$7(System.NotSupportedException, function () {
                System.Array.removeAt(list, 2, System.Double);
            }, "RemoveAt");
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.Collections.TypedArrays.Int16ArrayTests", {
        assertContent: function (actual, expected, message) {
            if (actual.length !== expected.length) {
                Bridge.Test.NUnit.Assert.fail$1(System.String.concat(message, ": Expected length ", expected.length, ", actual: ", actual.length));
                return;
            }
            for (var i = 0; i < expected.length; i = (i + 1) | 0) {
                if (actual[System.Array.index(i, actual)] !== expected[System.Array.index(i, expected)]) {
                    Bridge.Test.NUnit.Assert.fail$1(System.String.concat(message, ": Position ", i, ": expected ", expected[System.Array.index(i, expected)], ", actual: ", actual[System.Array.index(i, actual)]));
                    return;
                }
            }
            Bridge.Test.NUnit.Assert.true$1(true, message);
        },
        typePropertiesAreCorrect_SPI_1559: function () {
            Bridge.Test.NUnit.Assert.areEqual$1("Int16Array", Bridge.Reflection.getTypeFullName(Int16Array), "FullName");

            var interfaces = Bridge.Reflection.getInterfaces(Int16Array);
            Bridge.Test.NUnit.Assert.areEqual$1(7, interfaces.length, "Interface count should be 7");
            Bridge.Test.NUnit.Assert.true$1(System.Array.contains(interfaces, System.Collections.Generic.IEnumerable$1(System.Int16), Function), "Interfaces should contain IEnumerable<short>");
            Bridge.Test.NUnit.Assert.true$1(System.Array.contains(interfaces, System.Collections.Generic.ICollection$1(System.Int16), Function), "Interfaces should contain ICollection<short>");
            Bridge.Test.NUnit.Assert.true$1(System.Array.contains(interfaces, System.Collections.Generic.IList$1(System.Int16), Function), "Interfaces should contain IList<short>");
            // Not JS API
            //Assert.True(interfaces.Contains(typeof(IReadOnlyCollection<short>)), "Interfaces should contain IReadOnlyCollection<short>");
            //Assert.True(interfaces.Contains(typeof(IReadOnlyList<short>)), "Interfaces should contain IReadOnlyList<short>");

            var arr = new Int16Array(0);
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(arr, Int16Array), "Is Int16Array");
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(arr, System.Collections.Generic.IEnumerable$1(System.Int16)), "Is IEnumerable<short>");
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(arr, System.Collections.Generic.ICollection$1(System.Int16)), "Is ICollection<short>");
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(arr, System.Collections.Generic.IList$1(System.Int16)), "Is IList<short>");

            // Not JS API
            //Assert.True(arr is IReadOnlyCollection<short>, "Is IReadOnlyCollection<short>");
            //Assert.True(arr is IReadOnlyList<short>, "Is IReadOnlyList<short>");
        },
        lengthConstructorWorks: function () {
            var arr = new Int16Array(13);
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(arr, Int16Array), "is Int16Array");
            Bridge.Test.NUnit.Assert.areEqual$1(13, arr.length, "Length");
        },
        constructorFromIntWorks: function () {
            var source = System.Array.init([3, 8, 4], System.Int16);
            var arr = new Int16Array(source);
            Bridge.Test.NUnit.Assert.true$1(!Bridge.referenceEquals(arr, source), "New object");
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(arr, Int16Array), "is Int16Array");
            this.assertContent(arr, System.Array.init([3, 8, 4], System.Int32), "content");
        },
        copyConstructorWorks: function () {
            var source = new Int16Array(System.Array.init([3, 8, 4], System.Int16));
            var arr = new Int16Array(source);
            Bridge.Test.NUnit.Assert.true$1(!Bridge.referenceEquals(arr, source), "New object");
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(arr, Int16Array), "is Int16Array");
            this.assertContent(arr, System.Array.init([3, 8, 4], System.Int32), "content");
        },
        arrayBufferConstructorWorks: function () {
            var buf = new ArrayBuffer(80);
            var arr = new Int16Array(buf);
            Bridge.Test.NUnit.Assert.true(Bridge.is(arr, Int16Array));
            Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(arr.buffer, buf), "buffer");
            Bridge.Test.NUnit.Assert.areEqual$1(40, arr.length, "length");
        },
        arrayBufferWithOffsetConstructorWorks: function () {
            var buf = new ArrayBuffer(80);
            var arr = new Int16Array(buf, 16);
            Bridge.Test.NUnit.Assert.true(Bridge.is(arr, Int16Array));
            Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(arr.buffer, buf), "buffer");
            Bridge.Test.NUnit.Assert.areEqual$1(32, arr.length, "length");
        },
        arrayBufferWithOffsetAndLengthConstructorWorks: function () {
            var buf = new ArrayBuffer(80);
            var arr = new Int16Array(buf, 16, 12);
            Bridge.Test.NUnit.Assert.true(Bridge.is(arr, Int16Array));
            Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(arr.buffer, buf), "buffer");
            Bridge.Test.NUnit.Assert.areEqual$1(12, arr.length, "length");
        },
        staticBytesPerElementWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual(2, Int16Array.BYTES_PER_ELEMENT);
        },
        lengthWorks: function () {
            var arr = new Int16Array(13);
            Bridge.Test.NUnit.Assert.areEqual$1(13, arr.length, "Length");
        },
        indexingWorks: function () {
            var arr = new Int16Array(3);
            arr[System.Array.index(1, arr)] = 42;
            this.assertContent(arr, System.Array.init([0, 42, 0], System.Int32), "Content");
            Bridge.Test.NUnit.Assert.areEqual$1(42, arr[System.Array.index(1, arr)], "[1]");
        },
        setInt16ArrayWorks: function () {
            var arr = new Int16Array(4);
            arr.set(new Int16Array(System.Array.init([3, 6, 7], System.Int16)));
            this.assertContent(arr, System.Array.init([3, 6, 7, 0], System.Int32), "Content");
        },
        setInt16ArrayWithOffsetWorks: function () {
            var arr = new Int16Array(6);
            arr.set(new Int16Array(System.Array.init([3, 6, 7], System.Int16)), 2);
            this.assertContent(arr, System.Array.init([0, 0, 3, 6, 7, 0], System.Int32), "Content");
        },
        setNormalArrayWorks: function () {
            var arr = new Int16Array(4);
            arr.set(System.Array.init([3, 6, 7], System.Int16));
            this.assertContent(arr, System.Array.init([3, 6, 7, 0], System.Int32), "Content");
        },
        setNormalArrayWithOffsetWorks: function () {
            var arr = new Int16Array(6);
            arr.set(System.Array.init([3, 6, 7], System.Int16), 2);
            this.assertContent(arr, System.Array.init([0, 0, 3, 6, 7, 0], System.Int32), "Content");
        },
        subarrayWithBeginWorks: function () {
            var source = new Int16Array(10);
            var arr = source.subarray(3);
            Bridge.Test.NUnit.Assert.false$1(Bridge.referenceEquals(arr, source), "Should be a new array");
            Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(arr.buffer, source.buffer), "Should be the same buffer");
            Bridge.Test.NUnit.Assert.areEqual$1(6, arr.byteOffset, "ByteOffset should be correct");
        },
        subarrayWithBeginAndEndWorks: function () {
            var source = new Int16Array(10);
            var arr = source.subarray(3, 7);
            Bridge.Test.NUnit.Assert.false$1(Bridge.referenceEquals(arr, source), "Should be a new array");
            Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(arr.buffer, source.buffer), "Should be the same buffer");
            Bridge.Test.NUnit.Assert.areEqual$1(6, arr.byteOffset, "ByteOffset should be correct");
            Bridge.Test.NUnit.Assert.areEqual$1(4, arr.length, "Length should be correct");
        },
        bufferPropertyWorks: function () {
            var buf = new ArrayBuffer(100);
            var arr = new Int16Array(buf);
            Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(arr.buffer, buf), "Should be correct");
        },
        byteOffsetPropertyWorks: function () {
            var buf = new ArrayBuffer(100);
            var arr = new Int16Array(buf, 32);
            Bridge.Test.NUnit.Assert.areEqual$1(32, arr.byteOffset, "Should be correct");
        },
        byteLengthPropertyWorks: function () {
            var arr = new Int16Array(23);
            Bridge.Test.NUnit.Assert.areEqual$1(46, arr.byteLength, "Should be correct");
        },
        indexOfWorks: function () {
            var arr = new Int16Array(System.Array.init([3, 6, 2, 9, 5], System.Int16));
            Bridge.Test.NUnit.Assert.areEqual$1(3, System.Array.indexOf(arr, 9), "9");
            Bridge.Test.NUnit.Assert.areEqual$1(-1, System.Array.indexOf(arr, 1), "1");
        },
        containsWorks: function () {
            var arr = new Int16Array(System.Array.init([3, 6, 2, 9, 5], System.Int16));
            Bridge.Test.NUnit.Assert.true$1(System.Array.contains(arr, 9), "9");
            Bridge.Test.NUnit.Assert.false$1(System.Array.contains(arr, 1), "1");
        },
        foreachWorks_SPI_1401: function () {
            var $t;
            var arr = new Int16Array(System.Array.init([3, 6, 2, 9, 5], System.Int16));
            var l = new (System.Collections.Generic.List$1(System.Int32))();
            // #1401
            $t = Bridge.getEnumerator(arr);
            try {
                while ($t.moveNext()) {
                    var i = $t.Current;
                    l.add(i);
                }
            }finally {
                if (Bridge.is($t, System.IDisposable)) {
                    $t.System$IDisposable$dispose();
                }
            }Bridge.Test.NUnit.Assert.areEqual(l.toArray(), System.Array.init([3, 6, 2, 9, 5], System.Int32));
        },
        getEnumeratorWorks_SPI_1401: function () {
            var arr = new Int16Array(System.Array.init([3, 6, 2, 9, 5], System.Int16));
            var l = new (System.Collections.Generic.List$1(System.Int32))();
            // #1401
            var enm = Bridge.getEnumerator(arr);
            while (enm.System$Collections$IEnumerator$moveNext()) {
                l.add(enm[Bridge.geti(enm, "System$Collections$Generic$IEnumerator$1$System$Int16$Current$1", "Current$1")]);
            }
            Bridge.Test.NUnit.Assert.areEqual(l.toArray(), System.Array.init([3, 6, 2, 9, 5], System.Int32));
        },
        iEnumerableGetEnumeratorWorks: function () {
            var arr = Bridge.cast(new Int16Array(System.Array.init([3, 6, 2, 9, 5], System.Int16)), System.Collections.Generic.IEnumerable$1(System.Int16));
            var l = new (System.Collections.Generic.List$1(System.Int32))();
            var enm = Bridge.getEnumerator(arr, System.Int16);
            while (enm.System$Collections$IEnumerator$moveNext()) {
                l.add(enm[Bridge.geti(enm, "System$Collections$Generic$IEnumerator$1$System$Int16$Current$1", "Current$1")]);
            }
            Bridge.Test.NUnit.Assert.areEqual(System.Array.init([3, 6, 2, 9, 5], System.Int32), l.toArray());
        },
        iCollectionMethodsWork_SPI_1559: function () {
            // #1559
            var coll = Bridge.cast(new Int16Array(System.Array.init([3, 6, 2, 9, 5], System.Int16)), System.Collections.Generic.ICollection$1(System.Int16));
            Bridge.Test.NUnit.Assert.areEqual$1(5, System.Array.getCount(coll, System.Int16), "Count");
            Bridge.Test.NUnit.Assert.true$1(System.Array.contains(coll, 6, System.Int16), "Contains(6)");
            Bridge.Test.NUnit.Assert.false$1(System.Array.contains(coll, 1, System.Int16), "Contains(1)");
            Bridge.Test.NUnit.Assert.throws$7(System.NotSupportedException, function () {
                System.Array.add(coll, 2, System.Int16);
            }, "Add");
            Bridge.Test.NUnit.Assert.throws$7(System.NotSupportedException, function () {
                System.Array.clear(coll, System.Int16);
            }, "Clear");
            Bridge.Test.NUnit.Assert.throws$7(System.NotSupportedException, function () {
                System.Array.remove(coll, 2, System.Int16);
            }, "Remove");
        },
        iListMethodsWork_SPI_1559: function () {
            // #1559
            var list = Bridge.cast(new Int16Array(System.Array.init([3, 6, 2, 9, 5], System.Int16)), System.Collections.Generic.IList$1(System.Int16));
            Bridge.Test.NUnit.Assert.areEqual$1(1, System.Array.indexOf(list, 6, 0, null, System.Int16), "IndexOf(6)");
            Bridge.Test.NUnit.Assert.areEqual$1(-1, System.Array.indexOf(list, 1, 0, null, System.Int16), "IndexOf(1)");
            Bridge.Test.NUnit.Assert.areEqual$1(9, System.Array.getItem(list, 3, System.Int16), "Get item");
            System.Array.setItem(list, 3, 4, System.Int16);
            Bridge.Test.NUnit.Assert.areEqual$1(4, System.Array.getItem(list, 3, System.Int16), "Set item");

            Bridge.Test.NUnit.Assert.throws$7(System.NotSupportedException, function () {
                System.Array.insert(list, 2, 2, System.Int16);
            }, "Insert");
            Bridge.Test.NUnit.Assert.throws$7(System.NotSupportedException, function () {
                System.Array.removeAt(list, 2, System.Int16);
            }, "RemoveAt");
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.Collections.TypedArrays.Int32ArrayTests", {
        assertContent: function (actual, expected, message) {
            if (actual.length !== expected.length) {
                Bridge.Test.NUnit.Assert.fail$1(System.String.concat(message, ": Expected length ", expected.length, ", actual: ", actual.length));
                return;
            }
            for (var i = 0; i < expected.length; i = (i + 1) | 0) {
                if (actual[System.Array.index(i, actual)] !== expected[System.Array.index(i, expected)]) {
                    Bridge.Test.NUnit.Assert.fail$1(System.String.concat(message, ": Position ", i, ": expected ", expected[System.Array.index(i, expected)], ", actual: ", actual[System.Array.index(i, actual)]));
                    return;
                }
            }
            Bridge.Test.NUnit.Assert.true$1(true, message);
        },
        typePropertiesAreCorrect_SPI_1559: function () {
            Bridge.Test.NUnit.Assert.areEqual$1("Int32Array", Bridge.Reflection.getTypeFullName(Int32Array), "FullName");

            var interfaces = Bridge.Reflection.getInterfaces(Int32Array);
            Bridge.Test.NUnit.Assert.areEqual$1(7, interfaces.length, "Interface count should be 7");
            Bridge.Test.NUnit.Assert.true$1(System.Array.contains(interfaces, System.Collections.Generic.IEnumerable$1(System.Int32), Function), "Interfaces should contain IEnumerable<int>");
            Bridge.Test.NUnit.Assert.true$1(System.Array.contains(interfaces, System.Collections.Generic.ICollection$1(System.Int32), Function), "Interfaces should contain ICollection<int>");
            Bridge.Test.NUnit.Assert.true$1(System.Array.contains(interfaces, System.Collections.Generic.IList$1(System.Int32), Function), "Interfaces should contain IList<int>");
            // Not JS API
            //Assert.True(interfaces.Contains(typeof(IReadOnlyCollection<int>)), "Interfaces should contain IReadOnlyCollection<int>");
            //Assert.True(interfaces.Contains(typeof(IReadOnlyList<int>)), "Interfaces should contain IReadOnlyList<int>");

            var arr = new Int32Array(0);
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(arr, Int32Array), "Is Int32Array");
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(arr, System.Collections.Generic.IEnumerable$1(System.Int32)), "Is IEnumerable<int>");
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(arr, System.Collections.Generic.ICollection$1(System.Int32)), "Is ICollection<int>");
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(arr, System.Collections.Generic.IList$1(System.Int32)), "Is IList<int>");
            // Not JS API
            //Assert.True(arr is IReadOnlyCollection<int>, "Is IReadOnlyCollection<int>");
            //Assert.True(arr is IReadOnlyList<int>, "Is IReadOnlyList<int>");
        },
        lengthConstructorWorks: function () {
            var arr = new Int32Array(13);
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(arr, Int32Array), "is Int32Array");
            Bridge.Test.NUnit.Assert.areEqual$1(13, arr.length, "Length");
        },
        constructorFromIntWorks: function () {
            var source = System.Array.init([3, 8, 4], System.Int32);
            var arr = new Int32Array(source);
            Bridge.Test.NUnit.Assert.true$1(!Bridge.referenceEquals(arr, source), "New object");
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(arr, Int32Array), "is Int32Array");
            this.assertContent(arr, System.Array.init([3, 8, 4], System.Int32), "content");
        },
        copyConstructorWorks: function () {
            var source = new Int32Array(System.Array.init([3, 8, 4], System.Int32));
            var arr = new Int32Array(source);
            Bridge.Test.NUnit.Assert.true$1(!Bridge.referenceEquals(arr, source), "New object");
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(arr, Int32Array), "is Int32Array");
            this.assertContent(arr, System.Array.init([3, 8, 4], System.Int32), "content");
        },
        arrayBufferConstructorWorks: function () {
            var buf = new ArrayBuffer(80);
            var arr = new Int32Array(buf);
            Bridge.Test.NUnit.Assert.true(Bridge.is(arr, Int32Array));
            Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(arr.buffer, buf), "buffer");
            Bridge.Test.NUnit.Assert.areEqual$1(20, arr.length, "length");
        },
        arrayBufferWithOffsetConstructorWorks: function () {
            var buf = new ArrayBuffer(80);
            var arr = new Int32Array(buf, 16);
            Bridge.Test.NUnit.Assert.true(Bridge.is(arr, Int32Array));
            Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(arr.buffer, buf), "buffer");
            Bridge.Test.NUnit.Assert.areEqual$1(16, arr.length, "length");
        },
        arrayBufferWithOffsetAndLengthConstructorWorks: function () {
            var buf = new ArrayBuffer(80);
            var arr = new Int32Array(buf, 16, 12);
            Bridge.Test.NUnit.Assert.true(Bridge.is(arr, Int32Array));
            Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(arr.buffer, buf), "buffer");
            Bridge.Test.NUnit.Assert.areEqual$1(12, arr.length, "length");
        },
        staticBytesPerElementWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual(4, Int32Array.BYTES_PER_ELEMENT);
        },
        lengthWorks: function () {
            var arr = new Int32Array(13);
            Bridge.Test.NUnit.Assert.areEqual$1(13, arr.length, "Length");
        },
        indexingWorks: function () {
            var arr = new Int32Array(3);
            arr[System.Array.index(1, arr)] = 42;
            this.assertContent(arr, System.Array.init([0, 42, 0], System.Int32), "Content");
            Bridge.Test.NUnit.Assert.areEqual$1(42, arr[System.Array.index(1, arr)], "[1]");
        },
        setInt32ArrayWorks: function () {
            var arr = new Int32Array(4);
            arr.set(new Int32Array(System.Array.init([3, 6, 7], System.Int32)));
            this.assertContent(arr, System.Array.init([3, 6, 7, 0], System.Int32), "Content");
        },
        setInt32ArrayWithOffsetWorks: function () {
            var arr = new Int32Array(6);
            arr.set(new Int32Array(System.Array.init([3, 6, 7], System.Int32)), 2);
            this.assertContent(arr, System.Array.init([0, 0, 3, 6, 7, 0], System.Int32), "Content");
        },
        setNormalArrayWorks: function () {
            var arr = new Int32Array(4);
            arr.set(System.Array.init([3, 6, 7], System.Int32));
            this.assertContent(arr, System.Array.init([3, 6, 7, 0], System.Int32), "Content");
        },
        setNormalArrayWithOffsetWorks: function () {
            var arr = new Int32Array(6);
            arr.set(System.Array.init([3, 6, 7], System.Int32), 2);
            this.assertContent(arr, System.Array.init([0, 0, 3, 6, 7, 0], System.Int32), "Content");
        },
        subarrayWithBeginWorks: function () {
            var source = new Int32Array(10);
            var arr = source.subarray(3);
            Bridge.Test.NUnit.Assert.false$1(Bridge.referenceEquals(arr, source), "Should be a new array");
            Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(arr.buffer, source.buffer), "Should be the same buffer");
            Bridge.Test.NUnit.Assert.areEqual$1(12, arr.byteOffset, "ByteOffset should be correct");
        },
        subarrayWithBeginAndEndWorks: function () {
            var source = new Int32Array(10);
            var arr = source.subarray(3, 7);
            Bridge.Test.NUnit.Assert.false$1(Bridge.referenceEquals(arr, source), "Should be a new array");
            Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(arr.buffer, source.buffer), "Should be the same buffer");
            Bridge.Test.NUnit.Assert.areEqual$1(12, arr.byteOffset, "ByteOffset should be correct");
            Bridge.Test.NUnit.Assert.areEqual$1(4, arr.length, "Length should be correct");
        },
        bufferPropertyWorks: function () {
            var buf = new ArrayBuffer(100);
            var arr = new Int32Array(buf);
            Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(arr.buffer, buf), "Should be correct");
        },
        byteOffsetPropertyWorks: function () {
            var buf = new ArrayBuffer(100);
            var arr = new Int32Array(buf, 32);
            Bridge.Test.NUnit.Assert.areEqual$1(32, arr.byteOffset, "Should be correct");
        },
        byteLengthPropertyWorks: function () {
            var arr = new Int32Array(23);
            Bridge.Test.NUnit.Assert.areEqual$1(92, arr.byteLength, "Should be correct");
        },
        indexOfWorks: function () {
            var arr = new Int32Array(System.Array.init([3, 6, 2, 9, 5], System.Int32));
            Bridge.Test.NUnit.Assert.areEqual$1(3, System.Array.indexOf(arr, 9), "9");
            Bridge.Test.NUnit.Assert.areEqual$1(-1, System.Array.indexOf(arr, 1), "1");
        },
        containsWorks: function () {
            var arr = new Int32Array(System.Array.init([3, 6, 2, 9, 5], System.Int32));
            Bridge.Test.NUnit.Assert.true$1(System.Array.contains(arr, 9), "9");
            Bridge.Test.NUnit.Assert.false$1(System.Array.contains(arr, 1), "1");
        },
        foreachWorks_SPI_1401: function () {
            var $t;
            var arr = new Int32Array(System.Array.init([3, 6, 2, 9, 5], System.Int32));
            var l = new (System.Collections.Generic.List$1(System.Int32))();
            // #1401
            $t = Bridge.getEnumerator(arr);
            try {
                while ($t.moveNext()) {
                    var i = $t.Current;
                    l.add(i);
                }
            }finally {
                if (Bridge.is($t, System.IDisposable)) {
                    $t.System$IDisposable$dispose();
                }
            }Bridge.Test.NUnit.Assert.areEqual(l.toArray(), System.Array.init([3, 6, 2, 9, 5], System.Int32));
        },
        getEnumeratorWorks_SPI_1401: function () {
            var arr = new Int32Array(System.Array.init([3, 6, 2, 9, 5], System.Int32));
            var l = new (System.Collections.Generic.List$1(System.Int32))();
            // #1401
            var enm = Bridge.getEnumerator(arr);
            while (enm.System$Collections$IEnumerator$moveNext()) {
                l.add(enm[Bridge.geti(enm, "System$Collections$Generic$IEnumerator$1$System$Int32$Current$1", "Current$1")]);
            }
            Bridge.Test.NUnit.Assert.areEqual(l.toArray(), System.Array.init([3, 6, 2, 9, 5], System.Int32));
        },
        iEnumerableGetEnumeratorWorks: function () {
            var arr = Bridge.cast(new Int32Array(System.Array.init([3, 6, 2, 9, 5], System.Int32)), System.Collections.Generic.IEnumerable$1(System.Int32));
            var l = new (System.Collections.Generic.List$1(System.Int32))();
            var enm = Bridge.getEnumerator(arr, System.Int32);
            while (enm.System$Collections$IEnumerator$moveNext()) {
                l.add(enm[Bridge.geti(enm, "System$Collections$Generic$IEnumerator$1$System$Int32$Current$1", "Current$1")]);
            }
            Bridge.Test.NUnit.Assert.areEqual(System.Array.init([3, 6, 2, 9, 5], System.Int32), l.toArray());
        },
        iCollectionMethodsWork_SPI_1559: function () {
            // #1559
            var coll = Bridge.cast(new Int32Array(System.Array.init([3, 6, 2, 9, 5], System.Int32)), System.Collections.Generic.ICollection$1(System.Int32));
            Bridge.Test.NUnit.Assert.areEqual$1(5, System.Array.getCount(coll, System.Int32), "Count");
            Bridge.Test.NUnit.Assert.true$1(System.Array.contains(coll, 6, System.Int32), "Contains(6)");
            Bridge.Test.NUnit.Assert.false$1(System.Array.contains(coll, 1, System.Int32), "Contains(1)");
            Bridge.Test.NUnit.Assert.throws$7(System.NotSupportedException, function () {
                System.Array.add(coll, 2, System.Int32);
            }, "Add");
            Bridge.Test.NUnit.Assert.throws$7(System.NotSupportedException, function () {
                System.Array.clear(coll, System.Int32);
            }, "Clear");
            Bridge.Test.NUnit.Assert.throws$7(System.NotSupportedException, function () {
                System.Array.remove(coll, 2, System.Int32);
            }, "Remove");
        },
        iListMethodsWork_SPI_1559: function () {
            // #1559
            var list = Bridge.cast(new Int32Array(System.Array.init([3, 6, 2, 9, 5], System.Int32)), System.Collections.Generic.IList$1(System.Int32));
            Bridge.Test.NUnit.Assert.areEqual$1(1, System.Array.indexOf(list, 6, 0, null, System.Int32), "IndexOf(6)");
            Bridge.Test.NUnit.Assert.areEqual$1(-1, System.Array.indexOf(list, 1, 0, null, System.Int32), "IndexOf(1)");
            Bridge.Test.NUnit.Assert.areEqual$1(9, System.Array.getItem(list, 3, System.Int32), "Get item");
            System.Array.setItem(list, 3, 4, System.Int32);
            Bridge.Test.NUnit.Assert.areEqual$1(4, System.Array.getItem(list, 3, System.Int32), "Set item");

            Bridge.Test.NUnit.Assert.throws$7(System.NotSupportedException, function () {
                System.Array.insert(list, 2, 2, System.Int32);
            }, "Insert");
            Bridge.Test.NUnit.Assert.throws$7(System.NotSupportedException, function () {
                System.Array.removeAt(list, 2, System.Int32);
            }, "RemoveAt");
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.Collections.TypedArrays.Int8ArrayTests", {
        assertContent: function (actual, expected, message) {
            if (actual.length !== expected.length) {
                Bridge.Test.NUnit.Assert.fail$1(System.String.concat(message, ": Expected length ", expected.length, ", actual: ", actual.length));
                return;
            }
            for (var i = 0; i < expected.length; i = (i + 1) | 0) {
                if (actual[System.Array.index(i, actual)] !== expected[System.Array.index(i, expected)]) {
                    Bridge.Test.NUnit.Assert.fail$1(System.String.concat(message, ": Position ", i, ": expected ", expected[System.Array.index(i, expected)], ", actual: ", actual[System.Array.index(i, actual)]));
                    return;
                }
            }
            Bridge.Test.NUnit.Assert.true$1(true, message);
        },
        typePropertiesAreCorrect_SPI_1559: function () {
            Bridge.Test.NUnit.Assert.areEqual$1("Int8Array", Bridge.Reflection.getTypeFullName(Int8Array), "FullName");

            var interfaces = Bridge.Reflection.getInterfaces(Int8Array);
            Bridge.Test.NUnit.Assert.areEqual$1(7, interfaces.length, "Interface count should be 7");
            Bridge.Test.NUnit.Assert.true$1(System.Array.contains(interfaces, System.Collections.Generic.IEnumerable$1(System.SByte), Function), "Interfaces should contain IEnumerable<sbyte>");
            Bridge.Test.NUnit.Assert.true$1(System.Array.contains(interfaces, System.Collections.Generic.ICollection$1(System.SByte), Function), "Interfaces should contain ICollection<sbyte>");
            Bridge.Test.NUnit.Assert.true$1(System.Array.contains(interfaces, System.Collections.Generic.IList$1(System.SByte), Function), "Interfaces should contain IList<sbyte>");
            // Not JS API
            //Assert.True(interfaces.Contains(typeof(IReadOnlyCollection<sbyte>)), "Interfaces should contain IReadOnlyCollection<sbyte>");
            //Assert.True(interfaces.Contains(typeof(IReadOnlyList<sbyte>)), "Interfaces should contain IReadOnlyList<sbyte>");

            var arr = new Int8Array(0);
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(arr, Int8Array), "Is Int8Array");
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(arr, System.Collections.Generic.IEnumerable$1(System.SByte)), "Is IEnumerable<sbyte>");
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(arr, System.Collections.Generic.ICollection$1(System.SByte)), "Is ICollection<sbyte>");
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(arr, System.Collections.Generic.IList$1(System.SByte)), "Is IList<sbyte>");
            // Not JS API
            //Assert.True(arr is IReadOnlyCollection<sbyte>, "Is IReadOnlyCollection<sbyte>");
            //Assert.True(arr is IReadOnlyList<sbyte>, "Is IReadOnlyList<sbyte>");
        },
        lengthConstructorWorks: function () {
            var arr = new Int8Array(13);
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(arr, Int8Array), "is Int8Array");
            Bridge.Test.NUnit.Assert.areEqual$1(13, arr.length, "Length");
        },
        constructorFromIntWorks: function () {
            var source = System.Array.init([3, 8, 4], System.SByte);
            var arr = new Int8Array(source);
            Bridge.Test.NUnit.Assert.true$1(!Bridge.referenceEquals(arr, source), "New object");
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(arr, Int8Array), "is Int8Array");
            this.assertContent(arr, System.Array.init([3, 8, 4], System.Int32), "content");
        },
        copyConstructorWorks: function () {
            var source = new Int8Array(System.Array.init([3, 8, 4], System.SByte));
            var arr = new Int8Array(source);
            Bridge.Test.NUnit.Assert.true$1(!Bridge.referenceEquals(arr, source), "New object");
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(arr, Int8Array), "is Int8Array");
            this.assertContent(arr, System.Array.init([3, 8, 4], System.Int32), "content");
        },
        arrayBufferConstructorWorks: function () {
            var buf = new ArrayBuffer(80);
            var arr = new Int8Array(buf);
            Bridge.Test.NUnit.Assert.true(Bridge.is(arr, Int8Array));
            Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(arr.buffer, buf), "buffer");
            Bridge.Test.NUnit.Assert.areEqual$1(80, arr.length, "length");
        },
        arrayBufferWithOffsetConstructorWorks: function () {
            var buf = new ArrayBuffer(80);
            var arr = new Int8Array(buf, 16);
            Bridge.Test.NUnit.Assert.true(Bridge.is(arr, Int8Array));
            Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(arr.buffer, buf), "buffer");
            Bridge.Test.NUnit.Assert.areEqual$1(64, arr.length, "length");
        },
        arrayBufferWithOffsetAndLengthConstructorWorks: function () {
            var buf = new ArrayBuffer(80);
            var arr = new Int8Array(buf, 16, 12);
            Bridge.Test.NUnit.Assert.true(Bridge.is(arr, Int8Array));
            Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(arr.buffer, buf), "buffer");
            Bridge.Test.NUnit.Assert.areEqual$1(12, arr.length, "length");
        },
        staticBytesPerElementWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual(1, Int8Array.BYTES_PER_ELEMENT);
        },
        lengthWorks: function () {
            var arr = new Int8Array(13);
            Bridge.Test.NUnit.Assert.areEqual$1(13, arr.length, "Length");
        },
        indexingWorks: function () {
            var arr = new Int8Array(3);
            arr[System.Array.index(1, arr)] = 42;
            this.assertContent(arr, System.Array.init([0, 42, 0], System.Int32), "Content");
            Bridge.Test.NUnit.Assert.areEqual$1(42, arr[System.Array.index(1, arr)], "[1]");
        },
        setInt8ArrayWorks: function () {
            var arr = new Int8Array(4);
            arr.set(new Int8Array(System.Array.init([3, 6, 7], System.SByte)));
            this.assertContent(arr, System.Array.init([3, 6, 7, 0], System.Int32), "Content");
        },
        setInt8ArrayWithOffsetWorks: function () {
            var arr = new Int8Array(6);
            arr.set(new Int8Array(System.Array.init([3, 6, 7], System.SByte)), 2);
            this.assertContent(arr, System.Array.init([0, 0, 3, 6, 7, 0], System.Int32), "Content");
        },
        setNormalArrayWorks: function () {
            var arr = new Int8Array(4);
            arr.set(System.Array.init([3, 6, 7], System.SByte));
            this.assertContent(arr, System.Array.init([3, 6, 7, 0], System.Int32), "Content");
        },
        setNormalArrayWithOffsetWorks: function () {
            var arr = new Int8Array(6);
            arr.set(System.Array.init([3, 6, 7], System.SByte), 2);
            this.assertContent(arr, System.Array.init([0, 0, 3, 6, 7, 0], System.Int32), "Content");
        },
        subarrayWithBeginWorks: function () {
            var source = new Int8Array(10);
            var arr = source.subarray(3);
            Bridge.Test.NUnit.Assert.false$1(Bridge.referenceEquals(arr, source), "Should be a new array");
            Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(arr.buffer, source.buffer), "Should be the same buffer");
            Bridge.Test.NUnit.Assert.areEqual$1(3, arr.byteOffset, "ByteOffset should be correct");
        },
        subarrayWithBeginAndEndWorks: function () {
            var source = new Int8Array(10);
            var arr = source.subarray(3, 7);
            Bridge.Test.NUnit.Assert.false$1(Bridge.referenceEquals(arr, source), "Should be a new array");
            Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(arr.buffer, source.buffer), "Should be the same buffer");
            Bridge.Test.NUnit.Assert.areEqual$1(3, arr.byteOffset, "ByteOffset should be correct");
            Bridge.Test.NUnit.Assert.areEqual$1(4, arr.length, "Length should be correct");
        },
        bufferPropertyWorks: function () {
            var buf = new ArrayBuffer(100);
            var arr = new Int8Array(buf);
            Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(arr.buffer, buf), "Should be correct");
        },
        byteOffsetPropertyWorks: function () {
            var buf = new ArrayBuffer(100);
            var arr = new Int8Array(buf, 32);
            Bridge.Test.NUnit.Assert.areEqual$1(32, arr.byteOffset, "Should be correct");
        },
        byteLengthPropertyWorks: function () {
            var arr = new Int8Array(23);
            Bridge.Test.NUnit.Assert.areEqual$1(23, arr.byteLength, "Should be correct");
        },
        indexOfWorks: function () {
            var arr = new Int8Array(System.Array.init([3, 6, 2, 9, 5], System.SByte));
            Bridge.Test.NUnit.Assert.areEqual$1(3, System.Array.indexOf(arr, 9), "9");
            Bridge.Test.NUnit.Assert.areEqual$1(-1, System.Array.indexOf(arr, 1), "1");
        },
        containsWorks: function () {
            var arr = new Int8Array(System.Array.init([3, 6, 2, 9, 5], System.SByte));
            Bridge.Test.NUnit.Assert.true$1(System.Array.contains(arr, 9), "9");
            Bridge.Test.NUnit.Assert.false$1(System.Array.contains(arr, 1), "1");
        },
        foreachWorks_SPI_1401: function () {
            var $t;
            var arr = new Int8Array(System.Array.init([3, 6, 2, 9, 5], System.SByte));
            var l = new (System.Collections.Generic.List$1(System.Int32))();
            // #1401
            $t = Bridge.getEnumerator(arr);
            try {
                while ($t.moveNext()) {
                    var i = $t.Current;
                    l.add(i);
                }
            }finally {
                if (Bridge.is($t, System.IDisposable)) {
                    $t.System$IDisposable$dispose();
                }
            }Bridge.Test.NUnit.Assert.areEqual(l.toArray(), System.Array.init([3, 6, 2, 9, 5], System.Int32));
        },
        getEnumeratorWorks_SPI_1401: function () {
            var arr = new Int8Array(System.Array.init([3, 6, 2, 9, 5], System.SByte));
            var l = new (System.Collections.Generic.List$1(System.Int32))();
            // #1401
            var enm = Bridge.getEnumerator(arr);
            while (enm.System$Collections$IEnumerator$moveNext()) {
                l.add(enm[Bridge.geti(enm, "System$Collections$Generic$IEnumerator$1$System$SByte$Current$1", "Current$1")]);
            }
            Bridge.Test.NUnit.Assert.areEqual(l.toArray(), System.Array.init([3, 6, 2, 9, 5], System.Int32));
        },
        iEnumerableGetEnumeratorWorks: function () {
            var arr = Bridge.cast(new Int8Array(System.Array.init([3, 6, 2, 9, 5], System.SByte)), System.Collections.Generic.IEnumerable$1(System.SByte));
            var l = new (System.Collections.Generic.List$1(System.Int32))();
            var enm = Bridge.getEnumerator(arr, System.SByte);
            while (enm.System$Collections$IEnumerator$moveNext()) {
                l.add(enm[Bridge.geti(enm, "System$Collections$Generic$IEnumerator$1$System$SByte$Current$1", "Current$1")]);
            }
            Bridge.Test.NUnit.Assert.areEqual(System.Array.init([3, 6, 2, 9, 5], System.Int32), l.toArray());
        },
        iCollectionMethodsWork_SPI_1559: function () {
            // #1559
            var coll = Bridge.cast(new Int8Array(System.Array.init([3, 6, 2, 9, 5], System.SByte)), System.Collections.Generic.ICollection$1(System.SByte));
            Bridge.Test.NUnit.Assert.areEqual$1(5, System.Array.getCount(coll, System.SByte), "Count");
            Bridge.Test.NUnit.Assert.true$1(System.Array.contains(coll, 6, System.SByte), "Contains(6)");
            Bridge.Test.NUnit.Assert.false$1(System.Array.contains(coll, 1, System.SByte), "Contains(1)");
            Bridge.Test.NUnit.Assert.throws$7(System.NotSupportedException, function () {
                System.Array.add(coll, 2, System.SByte);
            }, "Add");
            Bridge.Test.NUnit.Assert.throws$7(System.NotSupportedException, function () {
                System.Array.clear(coll, System.SByte);
            }, "Clear");
            Bridge.Test.NUnit.Assert.throws$7(System.NotSupportedException, function () {
                System.Array.remove(coll, 2, System.SByte);
            }, "Remove");
        },
        iListMethodsWork_SPI_1559: function () {
            // #1559
            var list = Bridge.cast(new Int8Array(System.Array.init([3, 6, 2, 9, 5], System.SByte)), System.Collections.Generic.IList$1(System.SByte));
            Bridge.Test.NUnit.Assert.areEqual$1(1, System.Array.indexOf(list, 6, 0, null, System.SByte), "IndexOf(6)");
            Bridge.Test.NUnit.Assert.areEqual$1(-1, System.Array.indexOf(list, 1, 0, null, System.SByte), "IndexOf(1)");
            Bridge.Test.NUnit.Assert.areEqual$1(9, System.Array.getItem(list, 3, System.SByte), "Get item");
            System.Array.setItem(list, 3, 4, System.SByte);
            Bridge.Test.NUnit.Assert.areEqual$1(4, System.Array.getItem(list, 3, System.SByte), "Set item");

            Bridge.Test.NUnit.Assert.throws$7(System.NotSupportedException, function () {
                System.Array.insert(list, 2, 2, System.SByte);
            }, "Insert");
            Bridge.Test.NUnit.Assert.throws$7(System.NotSupportedException, function () {
                System.Array.removeAt(list, 2, System.SByte);
            }, "RemoveAt");
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint16ArrayTests", {
        assertContent: function (actual, expected, message) {
            if (actual.length !== expected.length) {
                Bridge.Test.NUnit.Assert.fail$1(System.String.concat(message, ": Expected length ", expected.length, ", actual: ", actual.length));
                return;
            }
            for (var i = 0; i < expected.length; i = (i + 1) | 0) {
                if (actual[System.Array.index(i, actual)] !== expected[System.Array.index(i, expected)]) {
                    Bridge.Test.NUnit.Assert.fail$1(System.String.concat(message, ": Position ", i, ": expected ", expected[System.Array.index(i, expected)], ", actual: ", actual[System.Array.index(i, actual)]));
                    return;
                }
            }
            Bridge.Test.NUnit.Assert.true$1(true, message);
        },
        typePropertiesAreCorrect_SPI_1559: function () {
            Bridge.Test.NUnit.Assert.areEqual$1("Uint16Array", Bridge.Reflection.getTypeFullName(Uint16Array), "FullName");

            var interfaces = Bridge.Reflection.getInterfaces(Uint16Array);
            Bridge.Test.NUnit.Assert.areEqual$1(7, interfaces.length, "Interface count should be 7");
            Bridge.Test.NUnit.Assert.true$1(System.Array.contains(interfaces, System.Collections.Generic.IEnumerable$1(System.UInt16), Function), "Interfaces should contain IEnumerable<ushort>");
            Bridge.Test.NUnit.Assert.true$1(System.Array.contains(interfaces, System.Collections.Generic.ICollection$1(System.UInt16), Function), "Interfaces should contain ICollection<ushort>");
            Bridge.Test.NUnit.Assert.true$1(System.Array.contains(interfaces, System.Collections.Generic.IList$1(System.UInt16), Function), "Interfaces should contain IList<ushort>");
            // Not JS API
            //Assert.True(interfaces.Contains(typeof(IReadOnlyCollection<ushort>)), "Interfaces should contain IReadOnlyCollection<ushort>");
            //Assert.True(interfaces.Contains(typeof(IReadOnlyList<ushort>)), "Interfaces should contain IReadOnlyList<ushort>");

            var arr = new Uint16Array(0);
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(arr, Uint16Array), "Is Uint16Array");
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(arr, System.Collections.Generic.IEnumerable$1(System.UInt16)), "Is IEnumerable<ushort>");
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(arr, System.Collections.Generic.ICollection$1(System.UInt16)), "Is ICollection<ushort>");
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(arr, System.Collections.Generic.IList$1(System.UInt16)), "Is IList<ushort>");
            // Not JS API
            //Assert.True(arr is IReadOnlyCollection<short>, "Is IReadOnlyCollection<ushort>");
            //Assert.True(arr is IReadOnlyList<ushort>, "Is IReadOnlyList<ushort>");
        },
        lengthConstructorWorks: function () {
            var arr = new Uint16Array(13);
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(arr, Uint16Array), "is Uint16Array");
            Bridge.Test.NUnit.Assert.areEqual$1(13, arr.length, "Length");
        },
        constructorFromIntWorks: function () {
            var source = System.Array.init([3, 8, 4], System.UInt16);
            var arr = new Uint16Array(source);
            Bridge.Test.NUnit.Assert.true$1(!Bridge.referenceEquals(arr, source), "New object");
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(arr, Uint16Array), "is Uint16Array");
            this.assertContent(arr, System.Array.init([3, 8, 4], System.Int32), "content");
        },
        copyConstructorWorks: function () {
            var source = new Uint16Array(System.Array.init([3, 8, 4], System.UInt16));
            var arr = new Uint16Array(source);
            Bridge.Test.NUnit.Assert.true$1(!Bridge.referenceEquals(arr, source), "New object");
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(arr, Uint16Array), "is Uint16Array");
            this.assertContent(arr, System.Array.init([3, 8, 4], System.Int32), "content");
        },
        arrayBufferConstructorWorks: function () {
            var buf = new ArrayBuffer(80);
            var arr = new Uint16Array(buf);
            Bridge.Test.NUnit.Assert.true(Bridge.is(arr, Uint16Array));
            Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(arr.buffer, buf), "buffer");
            Bridge.Test.NUnit.Assert.areEqual$1(40, arr.length, "length");
        },
        arrayBufferWithOffsetConstructorWorks: function () {
            var buf = new ArrayBuffer(80);
            var arr = new Uint16Array(buf, 16);
            Bridge.Test.NUnit.Assert.true(Bridge.is(arr, Uint16Array));
            Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(arr.buffer, buf), "buffer");
            Bridge.Test.NUnit.Assert.areEqual$1(32, arr.length, "length");
        },
        arrayBufferWithOffsetAndLengthConstructorWorks: function () {
            var buf = new ArrayBuffer(80);
            var arr = new Uint16Array(buf, 16, 12);
            Bridge.Test.NUnit.Assert.true(Bridge.is(arr, Uint16Array));
            Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(arr.buffer, buf), "buffer");
            Bridge.Test.NUnit.Assert.areEqual$1(12, arr.length, "length");
        },
        staticBytesPerElementWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual(2, Uint16Array.BYTES_PER_ELEMENT);
        },
        lengthWorks: function () {
            var arr = new Uint16Array(13);
            Bridge.Test.NUnit.Assert.areEqual$1(13, arr.length, "Length");
        },
        indexingWorks: function () {
            var arr = new Uint16Array(3);
            arr[System.Array.index(1, arr)] = 42;
            this.assertContent(arr, System.Array.init([0, 42, 0], System.Int32), "Content");
            Bridge.Test.NUnit.Assert.areEqual$1(42, arr[System.Array.index(1, arr)], "[1]");
        },
        setUint16ArrayWorks: function () {
            var arr = new Uint16Array(4);
            arr.set(new Uint16Array(System.Array.init([3, 6, 7], System.UInt16)));
            this.assertContent(arr, System.Array.init([3, 6, 7, 0], System.Int32), "Content");
        },
        setUint16ArrayWithOffsetWorks: function () {
            var arr = new Uint16Array(6);
            arr.set(new Uint16Array(System.Array.init([3, 6, 7], System.UInt16)), 2);
            this.assertContent(arr, System.Array.init([0, 0, 3, 6, 7, 0], System.Int32), "Content");
        },
        setNormalArrayWorks: function () {
            var arr = new Uint16Array(4);
            arr.set(System.Array.init([3, 6, 7], System.UInt16));
            this.assertContent(arr, System.Array.init([3, 6, 7, 0], System.Int32), "Content");
        },
        setNormalArrayWithOffsetWorks: function () {
            var arr = new Uint16Array(6);
            arr.set(System.Array.init([3, 6, 7], System.UInt16), 2);
            this.assertContent(arr, System.Array.init([0, 0, 3, 6, 7, 0], System.Int32), "Content");
        },
        subarrayWithBeginWorks: function () {
            var source = new Uint16Array(10);
            var arr = source.subarray(3);
            Bridge.Test.NUnit.Assert.false$1(Bridge.referenceEquals(arr, source), "Should be a new array");
            Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(arr.buffer, source.buffer), "Should be the same buffer");
            Bridge.Test.NUnit.Assert.areEqual$1(6, arr.byteOffset, "ByteOffset should be correct");
        },
        subarrayWithBeginAndEndWorks: function () {
            var source = new Uint16Array(10);
            var arr = source.subarray(3, 7);
            Bridge.Test.NUnit.Assert.false$1(Bridge.referenceEquals(arr, source), "Should be a new array");
            Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(arr.buffer, source.buffer), "Should be the same buffer");
            Bridge.Test.NUnit.Assert.areEqual$1(6, arr.byteOffset, "ByteOffset should be correct");
            Bridge.Test.NUnit.Assert.areEqual$1(4, arr.length, "Length should be correct");
        },
        bufferPropertyWorks: function () {
            var buf = new ArrayBuffer(100);
            var arr = new Uint16Array(buf);
            Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(arr.buffer, buf), "Should be correct");
        },
        byteOffsetPropertyWorks: function () {
            var buf = new ArrayBuffer(100);
            var arr = new Uint16Array(buf, 32);
            Bridge.Test.NUnit.Assert.areEqual$1(32, arr.byteOffset, "Should be correct");
        },
        byteLengthPropertyWorks: function () {
            var arr = new Uint16Array(23);
            Bridge.Test.NUnit.Assert.areEqual$1(46, arr.byteLength, "Should be correct");
        },
        indexOfWorks: function () {
            var arr = new Uint16Array(System.Array.init([3, 6, 2, 9, 5], System.UInt16));
            Bridge.Test.NUnit.Assert.areEqual$1(3, System.Array.indexOf(arr, 9), "9");
            Bridge.Test.NUnit.Assert.areEqual$1(-1, System.Array.indexOf(arr, 1), "1");
        },
        containsWorks: function () {
            var arr = new Uint16Array(System.Array.init([3, 6, 2, 9, 5], System.UInt16));
            Bridge.Test.NUnit.Assert.true$1(System.Array.contains(arr, 9), "9");
            Bridge.Test.NUnit.Assert.false$1(System.Array.contains(arr, 1), "1");
        },
        foreachWorks_SPI_1401: function () {
            var $t;
            var arr = new Uint16Array(System.Array.init([3, 6, 2, 9, 5], System.UInt16));
            var l = new (System.Collections.Generic.List$1(System.Int32))();
            // #1401
            $t = Bridge.getEnumerator(arr);
            try {
                while ($t.moveNext()) {
                    var i = $t.Current;
                    l.add(i);
                }
            }finally {
                if (Bridge.is($t, System.IDisposable)) {
                    $t.System$IDisposable$dispose();
                }
            }Bridge.Test.NUnit.Assert.areEqual(l.toArray(), System.Array.init([3, 6, 2, 9, 5], System.Int32));
        },
        getEnumeratorWorks_SPI_1401: function () {
            var arr = new Uint16Array(System.Array.init([3, 6, 2, 9, 5], System.UInt16));
            var l = new (System.Collections.Generic.List$1(System.Int32))();
            // #1401
            var enm = Bridge.getEnumerator(arr);
            while (enm.System$Collections$IEnumerator$moveNext()) {
                l.add(enm[Bridge.geti(enm, "System$Collections$Generic$IEnumerator$1$System$UInt16$Current$1", "Current$1")]);
            }
            Bridge.Test.NUnit.Assert.areEqual(l.toArray(), System.Array.init([3, 6, 2, 9, 5], System.Int32));
        },
        iEnumerableGetEnumeratorWorks: function () {
            var arr = Bridge.cast(new Uint16Array(System.Array.init([3, 6, 2, 9, 5], System.UInt16)), System.Collections.Generic.IEnumerable$1(System.UInt16));
            var l = new (System.Collections.Generic.List$1(System.Int32))();
            var enm = Bridge.getEnumerator(arr, System.UInt16);
            while (enm.System$Collections$IEnumerator$moveNext()) {
                l.add(enm[Bridge.geti(enm, "System$Collections$Generic$IEnumerator$1$System$UInt16$Current$1", "Current$1")]);
            }
            Bridge.Test.NUnit.Assert.areEqual(System.Array.init([3, 6, 2, 9, 5], System.Int32), l.toArray());
        },
        iCollectionMethodsWork_SPI_1559: function () {
            // #1559
            var coll = Bridge.cast(new Uint16Array(System.Array.init([3, 6, 2, 9, 5], System.UInt16)), System.Collections.Generic.ICollection$1(System.UInt16));
            Bridge.Test.NUnit.Assert.areEqual$1(5, System.Array.getCount(coll, System.UInt16), "Count");
            Bridge.Test.NUnit.Assert.true$1(System.Array.contains(coll, 6, System.UInt16), "Contains(6)");
            Bridge.Test.NUnit.Assert.false$1(System.Array.contains(coll, 1, System.UInt16), "Contains(1)");
            Bridge.Test.NUnit.Assert.throws$7(System.NotSupportedException, function () {
                System.Array.add(coll, 2, System.UInt16);
            }, "Add");
            Bridge.Test.NUnit.Assert.throws$5(function () {
                System.Array.clear(coll, System.UInt16);
            }, "Clear");
            Bridge.Test.NUnit.Assert.throws$5(function () {
                System.Array.remove(coll, 2, System.UInt16);
            }, "Remove");
        },
        iListMethodsWork_SPI_1559: function () {
            // #1559
            var list = Bridge.cast(new Uint16Array(System.Array.init([3, 6, 2, 9, 5], System.UInt16)), System.Collections.Generic.IList$1(System.UInt16));
            Bridge.Test.NUnit.Assert.areEqual$1(1, System.Array.indexOf(list, 6, 0, null, System.UInt16), "IndexOf(6)");
            Bridge.Test.NUnit.Assert.areEqual$1(-1, System.Array.indexOf(list, 1, 0, null, System.UInt16), "IndexOf(1)");
            Bridge.Test.NUnit.Assert.areEqual$1(9, System.Array.getItem(list, 3, System.UInt16), "Get item");
            System.Array.setItem(list, 3, 4, System.UInt16);
            Bridge.Test.NUnit.Assert.areEqual$1(4, System.Array.getItem(list, 3, System.UInt16), "Set item");

            Bridge.Test.NUnit.Assert.throws$7(System.NotSupportedException, function () {
                System.Array.insert(list, 2, 2, System.UInt16);
            }, "Insert");
            Bridge.Test.NUnit.Assert.throws$5(function () {
                System.Array.removeAt(list, 2, System.UInt16);
            }, "RemoveAt");
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint32ArrayTests", {
        assertContent: function (actual, expected, message) {
            if (actual.length !== expected.length) {
                Bridge.Test.NUnit.Assert.fail$1(System.String.concat(message, ": Expected length ", expected.length, ", actual: ", actual.length));
                return;
            }
            for (var i = 0; i < expected.length; i = (i + 1) | 0) {
                if (System.Int64(actual[System.Array.index(i, actual)]).ne(System.Int64(expected[System.Array.index(i, expected)]))) {
                    Bridge.Test.NUnit.Assert.fail$1(System.String.concat(message, ": Position ", i, ": expected ", expected[System.Array.index(i, expected)], ", actual: ", actual[System.Array.index(i, actual)]));
                    return;
                }
            }
            Bridge.Test.NUnit.Assert.true$1(true, message);
        },
        typePropertiesAreCorrect_SPI_1559: function () {
            Bridge.Test.NUnit.Assert.areEqual$1("Uint32Array", Bridge.Reflection.getTypeFullName(Uint32Array), "FullName");

            var interfaces = Bridge.Reflection.getInterfaces(Uint32Array);
            Bridge.Test.NUnit.Assert.areEqual$1(7, interfaces.length, "Interface count should be 7");
            Bridge.Test.NUnit.Assert.true$1(System.Array.contains(interfaces, System.Collections.Generic.IEnumerable$1(System.UInt32), Function), "Interfaces should contain IEnumerable<uint>");
            Bridge.Test.NUnit.Assert.true$1(System.Array.contains(interfaces, System.Collections.Generic.ICollection$1(System.UInt32), Function), "Interfaces should contain ICollection<uint>");
            Bridge.Test.NUnit.Assert.true$1(System.Array.contains(interfaces, System.Collections.Generic.IList$1(System.UInt32), Function), "Interfaces should contain IList<uint>");
            // Not JS API
            //Assert.True(interfaces.Contains(typeof(IReadOnlyCollection<uint>)), "Interfaces should contain IReadOnlyCollection<uint>");
            //Assert.True(interfaces.Contains(typeof(IReadOnlyList<uint>)), "Interfaces should contain IReadOnlyList<uint>");

            var arr = new Uint32Array(0);
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(arr, Uint32Array), "Is Uint32Array");
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(arr, System.Collections.Generic.IEnumerable$1(System.UInt32)), "Is IEnumerable<uint>");
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(arr, System.Collections.Generic.ICollection$1(System.UInt32)), "Is ICollection<uint>");
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(arr, System.Collections.Generic.IList$1(System.UInt32)), "Is IList<uint>");
            // Not JS API
            //Assert.True(arr is IReadOnlyCollection<uint>, "Is IReadOnlyCollection<uint>");
            //Assert.True(arr is IReadOnlyList<uint>, "Is IReadOnlyList<uint>");
        },
        lengthConstructorWorks: function () {
            var arr = new Uint32Array(13);
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(arr, Uint32Array), "is Uint32Array");
            Bridge.Test.NUnit.Assert.areEqual$1(13, arr.length, "Length");
        },
        constructorFromIntWorks: function () {
            var source = System.Array.init([3, 8, 4], System.UInt32);
            var arr = new Uint32Array(source);
            Bridge.Test.NUnit.Assert.true$1(!Bridge.referenceEquals(arr, source), "New object");
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(arr, Uint32Array), "is Uint32Array");
            this.assertContent(arr, System.Array.init([3, 8, 4], System.Int32), "content");
        },
        copyConstructorWorks: function () {
            var source = new Uint32Array(System.Array.init([3, 8, 4], System.UInt32));
            var arr = new Uint32Array(source);
            Bridge.Test.NUnit.Assert.true$1(!Bridge.referenceEquals(arr, source), "New object");
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(arr, Uint32Array), "is Uint32Array");
            this.assertContent(arr, System.Array.init([3, 8, 4], System.Int32), "content");
        },
        arrayBufferConstructorWorks: function () {
            var buf = new ArrayBuffer(80);
            var arr = new Uint32Array(buf);
            Bridge.Test.NUnit.Assert.true(Bridge.is(arr, Uint32Array));
            Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(arr.buffer, buf), "buffer");
            Bridge.Test.NUnit.Assert.areEqual$1(20, arr.length, "length");
        },
        arrayBufferWithOffsetConstructorWorks: function () {
            var buf = new ArrayBuffer(80);
            var arr = new Uint32Array(buf, 16);
            Bridge.Test.NUnit.Assert.true(Bridge.is(arr, Uint32Array));
            Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(arr.buffer, buf), "buffer");
            Bridge.Test.NUnit.Assert.areEqual$1(16, arr.length, "length");
        },
        arrayBufferWithOffsetAndLengthConstructorWorks: function () {
            var buf = new ArrayBuffer(80);
            var arr = new Uint32Array(buf, 16, 12);
            Bridge.Test.NUnit.Assert.true(Bridge.is(arr, Uint32Array));
            Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(arr.buffer, buf), "buffer");
            Bridge.Test.NUnit.Assert.areEqual$1(12, arr.length, "length");
        },
        staticBytesPerElementWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual(4, Uint32Array.BYTES_PER_ELEMENT);
        },
        lengthWorks: function () {
            var arr = new Uint32Array(13);
            Bridge.Test.NUnit.Assert.areEqual$1(13, arr.length, "Length");
        },
        indexingWorks: function () {
            var arr = new Uint32Array(3);
            arr[System.Array.index(1, arr)] = 42;
            this.assertContent(arr, System.Array.init([0, 42, 0], System.Int32), "Content");
            Bridge.Test.NUnit.Assert.areEqual$1(42, arr[System.Array.index(1, arr)], "[1]");
        },
        setUint32ArrayWorks: function () {
            var arr = new Uint32Array(4);
            arr.set(new Uint32Array(System.Array.init([3, 6, 7], System.UInt32)));
            this.assertContent(arr, System.Array.init([3, 6, 7, 0], System.Int32), "Content");
        },
        setUint32ArrayWithOffsetWorks: function () {
            var arr = new Uint32Array(6);
            arr.set(new Uint32Array(System.Array.init([3, 6, 7], System.UInt32)), 2);
            this.assertContent(arr, System.Array.init([0, 0, 3, 6, 7, 0], System.Int32), "Content");
        },
        setNormalArrayWorks: function () {
            var arr = new Uint32Array(4);
            arr.set(System.Array.init([3, 6, 7], System.UInt32));
            this.assertContent(arr, System.Array.init([3, 6, 7, 0], System.Int32), "Content");
        },
        setNormalArrayWithOffsetWorks: function () {
            var arr = new Uint32Array(6);
            arr.set(System.Array.init([3, 6, 7], System.UInt32), 2);
            this.assertContent(arr, System.Array.init([0, 0, 3, 6, 7, 0], System.Int32), "Content");
        },
        subarrayWithBeginWorks: function () {
            var source = new Uint32Array(10);
            var arr = source.subarray(3);
            Bridge.Test.NUnit.Assert.false$1(Bridge.referenceEquals(arr, source), "Should be a new array");
            Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(arr.buffer, source.buffer), "Should be the same buffer");
            Bridge.Test.NUnit.Assert.areEqual$1(12, arr.byteOffset, "ByteOffset should be correct");
        },
        subarrayWithBeginAndEndWorks: function () {
            var source = new Uint32Array(10);
            var arr = source.subarray(3, 7);
            Bridge.Test.NUnit.Assert.false$1(Bridge.referenceEquals(arr, source), "Should be a new array");
            Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(arr.buffer, source.buffer), "Should be the same buffer");
            Bridge.Test.NUnit.Assert.areEqual$1(12, arr.byteOffset, "ByteOffset should be correct");
            Bridge.Test.NUnit.Assert.areEqual$1(4, arr.length, "Length should be correct");
        },
        bufferPropertyWorks: function () {
            var buf = new ArrayBuffer(100);
            var arr = new Uint32Array(buf);
            Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(arr.buffer, buf), "Should be correct");
        },
        byteOffsetPropertyWorks: function () {
            var buf = new ArrayBuffer(100);
            var arr = new Uint32Array(buf, 32);
            Bridge.Test.NUnit.Assert.areEqual$1(32, arr.byteOffset, "Should be correct");
        },
        byteLengthPropertyWorks: function () {
            var arr = new Uint32Array(23);
            Bridge.Test.NUnit.Assert.areEqual$1(92, arr.byteLength, "Should be correct");
        },
        indexOfWorks: function () {
            var arr = new Uint32Array(System.Array.init([3, 6, 2, 9, 5], System.UInt32));
            Bridge.Test.NUnit.Assert.areEqual$1(3, System.Array.indexOf(arr, 9), "9");
            Bridge.Test.NUnit.Assert.areEqual$1(-1, System.Array.indexOf(arr, 1), "1");
        },
        containsWorks: function () {
            var arr = new Uint32Array(System.Array.init([3, 6, 2, 9, 5], System.UInt32));
            Bridge.Test.NUnit.Assert.true$1(System.Array.contains(arr, 9), "9");
            Bridge.Test.NUnit.Assert.false$1(System.Array.contains(arr, 1), "1");
        },
        foreachWorks_SPI_1401: function () {
            var $t;
            var arr = new Uint32Array(System.Array.init([3, 6, 2, 9, 5], System.UInt32));
            var l = new (System.Collections.Generic.List$1(System.UInt32))();
            // #1401
            $t = Bridge.getEnumerator(arr);
            try {
                while ($t.moveNext()) {
                    var i = $t.Current;
                    l.add(i);
                }
            }finally {
                if (Bridge.is($t, System.IDisposable)) {
                    $t.System$IDisposable$dispose();
                }
            }Bridge.Test.NUnit.Assert.areEqual(l.toArray(), System.Array.init([3, 6, 2, 9, 5], System.Int32));
        },
        getEnumeratorWorks_SPI_1401: function () {
            var arr = new Uint32Array(System.Array.init([3, 6, 2, 9, 5], System.UInt32));
            var l = new (System.Collections.Generic.List$1(System.UInt32))();
            // #1401
            var enm = Bridge.getEnumerator(arr);
            while (enm.System$Collections$IEnumerator$moveNext()) {
                l.add(enm[Bridge.geti(enm, "System$Collections$Generic$IEnumerator$1$System$UInt32$Current$1", "Current$1")]);
            }
            Bridge.Test.NUnit.Assert.areEqual(l.toArray(), System.Array.init([3, 6, 2, 9, 5], System.Int32));
        },
        iEnumerableGetEnumeratorWorks: function () {
            var arr = Bridge.cast(new Uint32Array(System.Array.init([3, 6, 2, 9, 5], System.UInt32)), System.Collections.Generic.IEnumerable$1(System.UInt32));
            var l = new (System.Collections.Generic.List$1(System.UInt32))();
            var enm = Bridge.getEnumerator(arr, System.UInt32);
            while (enm.System$Collections$IEnumerator$moveNext()) {
                l.add(enm[Bridge.geti(enm, "System$Collections$Generic$IEnumerator$1$System$UInt32$Current$1", "Current$1")]);
            }
            Bridge.Test.NUnit.Assert.areEqual(System.Array.init([3, 6, 2, 9, 5], System.Int32), l.toArray());
        },
        iCollectionMethodsWork_SPI_1559: function () {
            // #1559
            var coll = Bridge.cast(new Uint32Array(System.Array.init([3, 6, 2, 9, 5], System.UInt32)), System.Collections.Generic.ICollection$1(System.UInt32));
            Bridge.Test.NUnit.Assert.areEqual$1(5, System.Array.getCount(coll, System.UInt32), "Count");
            Bridge.Test.NUnit.Assert.true$1(System.Array.contains(coll, 6, System.UInt32), "Contains(6)");
            Bridge.Test.NUnit.Assert.false$1(System.Array.contains(coll, 1, System.UInt32), "Contains(1)");
            Bridge.Test.NUnit.Assert.throws$7(System.NotSupportedException, function () {
                System.Array.add(coll, 2, System.UInt32);
            }, "Add");
            Bridge.Test.NUnit.Assert.throws$7(System.NotSupportedException, function () {
                System.Array.clear(coll, System.UInt32);
            }, "Clear");
            Bridge.Test.NUnit.Assert.throws$7(System.NotSupportedException, function () {
                System.Array.remove(coll, 2, System.UInt32);
            }, "Remove");
        },
        iListMethodsWork_SPI_1559: function () {
            // #1559
            var list = Bridge.cast(new Uint32Array(System.Array.init([3, 6, 2, 9, 5], System.UInt32)), System.Collections.Generic.IList$1(System.UInt32));
            Bridge.Test.NUnit.Assert.areEqual$1(1, System.Array.indexOf(list, 6, 0, null, System.UInt32), "IndexOf(6)");
            Bridge.Test.NUnit.Assert.areEqual$1(-1, System.Array.indexOf(list, 1, 0, null, System.UInt32), "IndexOf(1)");
            Bridge.Test.NUnit.Assert.areEqual$1(9, System.Array.getItem(list, 3, System.UInt32), "Get item");
            System.Array.setItem(list, 3, 4, System.UInt32);
            Bridge.Test.NUnit.Assert.areEqual$1(4, System.Array.getItem(list, 3, System.UInt32), "Set item");

            Bridge.Test.NUnit.Assert.throws$7(System.NotSupportedException, function () {
                System.Array.insert(list, 2, 2, System.UInt32);
            }, "Insert");
            Bridge.Test.NUnit.Assert.throws$7(System.NotSupportedException, function () {
                System.Array.removeAt(list, 2, System.UInt32);
            }, "RemoveAt");
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint8ArrayTests", {
        assertContent: function (actual, expected, message) {
            if (actual.length !== expected.length) {
                Bridge.Test.NUnit.Assert.fail$1(System.String.concat(message, ": Expected length ", expected.length, ", actual: ", actual.length));
                return;
            }
            for (var i = 0; i < expected.length; i = (i + 1) | 0) {
                if (actual[System.Array.index(i, actual)] !== expected[System.Array.index(i, expected)]) {
                    Bridge.Test.NUnit.Assert.fail$1(System.String.concat(message, ": Position ", i, ": expected ", expected[System.Array.index(i, expected)], ", actual: ", actual[System.Array.index(i, actual)]));
                    return;
                }
            }
            Bridge.Test.NUnit.Assert.true$1(true, message);
        },
        typePropertiesAreCorrect_SPI_1559: function () {
            Bridge.Test.NUnit.Assert.areEqual$1("Uint8Array", Bridge.Reflection.getTypeFullName(Uint8Array), "FullName");

            var interfaces = Bridge.Reflection.getInterfaces(Uint8Array);
            Bridge.Test.NUnit.Assert.areEqual$1(7, interfaces.length, "Interface count should be 7");
            Bridge.Test.NUnit.Assert.true$1(System.Array.contains(interfaces, System.Collections.Generic.IEnumerable$1(System.Byte), Function), "Interfaces should contain IEnumerable<byte>");
            Bridge.Test.NUnit.Assert.true$1(System.Array.contains(interfaces, System.Collections.Generic.ICollection$1(System.Byte), Function), "Interfaces should contain ICollection<byte>");
            Bridge.Test.NUnit.Assert.true$1(System.Array.contains(interfaces, System.Collections.Generic.IList$1(System.Byte), Function), "Interfaces should contain IList<byte>");
            // Not JS API
            //Assert.True(interfaces.Contains(typeof(IReadOnlyCollection<byte>)), "Interfaces should contain IReadOnlyCollection<byte>");
            //Assert.True(interfaces.Contains(typeof(IReadOnlyList<byte>)), "Interfaces should contain IReadOnlyList<byte>");

            var arr = new Uint8Array(0);
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(arr, Uint8Array), "Is Uint8Array");
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(arr, System.Collections.Generic.IEnumerable$1(System.Byte)), "Is IEnumerable<byte>");
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(arr, System.Collections.Generic.ICollection$1(System.Byte)), "Is ICollection<byte>");
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(arr, System.Collections.Generic.IList$1(System.Byte)), "Is IList<byte>");
            // Not JS API
            //Assert.True(arr is IReadOnlyCollection<byte>, "Is IReadOnlyCollection<byte>");
            //Assert.True(arr is IReadOnlyList<byte>, "Is IReadOnlyList<byte>");
        },
        lengthConstructorWorks: function () {
            var arr = new Uint8Array(13);
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(arr, Uint8Array), "is Uint8Array");
            Bridge.Test.NUnit.Assert.areEqual$1(13, arr.length, "Length");
        },
        constructorFromIntWorks: function () {
            var source = System.Array.init([3, 8, 4], System.Byte);
            var arr = new Uint8Array(source);
            Bridge.Test.NUnit.Assert.true$1(!Bridge.referenceEquals(arr, source), "New object");
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(arr, Uint8Array), "is Uint8Array");
            this.assertContent(arr, System.Array.init([3, 8, 4], System.Int32), "content");
        },
        copyConstructorWorks: function () {
            var source = new Uint8Array(System.Array.init([3, 8, 4], System.Byte));
            var arr = new Uint8Array(source);
            Bridge.Test.NUnit.Assert.true$1(!Bridge.referenceEquals(arr, source), "New object");
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(arr, Uint8Array), "is Uint8Array");
            this.assertContent(arr, System.Array.init([3, 8, 4], System.Int32), "content");
        },
        arrayBufferConstructorWorks: function () {
            var buf = new ArrayBuffer(80);
            var arr = new Uint8Array(buf);
            Bridge.Test.NUnit.Assert.true(Bridge.is(arr, Uint8Array));
            Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(arr.buffer, buf), "buffer");
            Bridge.Test.NUnit.Assert.areEqual$1(80, arr.length, "length");
        },
        arrayBufferWithOffsetConstructorWorks: function () {
            var buf = new ArrayBuffer(80);
            var arr = new Uint8Array(buf, 16);
            Bridge.Test.NUnit.Assert.true(Bridge.is(arr, Uint8Array));
            Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(arr.buffer, buf), "buffer");
            Bridge.Test.NUnit.Assert.areEqual$1(64, arr.length, "length");
        },
        arrayBufferWithOffsetAndLengthConstructorWorks: function () {
            var buf = new ArrayBuffer(80);
            var arr = new Uint8Array(buf, 16, 12);
            Bridge.Test.NUnit.Assert.true(Bridge.is(arr, Uint8Array));
            Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(arr.buffer, buf), "buffer");
            Bridge.Test.NUnit.Assert.areEqual$1(12, arr.length, "length");
        },
        staticBytesPerElementWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual(1, Uint8Array.BYTES_PER_ELEMENT);
        },
        lengthWorks: function () {
            var arr = new Uint8Array(13);
            Bridge.Test.NUnit.Assert.areEqual$1(13, arr.length, "Length");
        },
        indexingWorks: function () {
            var arr = new Uint8Array(3);
            arr[System.Array.index(1, arr)] = 42;
            this.assertContent(arr, System.Array.init([0, 42, 0], System.Int32), "Content");
            Bridge.Test.NUnit.Assert.areEqual$1(42, arr[System.Array.index(1, arr)], "[1]");
        },
        setUint8ArrayWorks: function () {
            var arr = new Uint8Array(4);
            arr.set(new Uint8Array(System.Array.init([3, 6, 7], System.Byte)));
            this.assertContent(arr, System.Array.init([3, 6, 7, 0], System.Int32), "Content");
        },
        setUint8ArrayWithOffsetWorks: function () {
            var arr = new Uint8Array(6);
            arr.set(new Uint8Array(System.Array.init([3, 6, 7], System.Byte)), 2);
            this.assertContent(arr, System.Array.init([0, 0, 3, 6, 7, 0], System.Int32), "Content");
        },
        setNormalArrayWorks: function () {
            var arr = new Uint8Array(4);
            arr.set(System.Array.init([3, 6, 7], System.Byte));
            this.assertContent(arr, System.Array.init([3, 6, 7, 0], System.Int32), "Content");
        },
        setNormalArrayWithOffsetWorks: function () {
            var arr = new Uint8Array(6);
            arr.set(System.Array.init([3, 6, 7], System.Byte), 2);
            this.assertContent(arr, System.Array.init([0, 0, 3, 6, 7, 0], System.Int32), "Content");
        },
        subarrayWithBeginWorks: function () {
            var source = new Uint8Array(10);
            var arr = source.subarray(3);
            Bridge.Test.NUnit.Assert.false$1(Bridge.referenceEquals(arr, source), "Should be a new array");
            Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(arr.buffer, source.buffer), "Should be the same buffer");
            Bridge.Test.NUnit.Assert.areEqual$1(3, arr.byteOffset, "ByteOffset should be correct");
        },
        subarrayWithBeginAndEndWorks: function () {
            var source = new Uint8Array(10);
            var arr = source.subarray(3, 7);
            Bridge.Test.NUnit.Assert.false$1(Bridge.referenceEquals(arr, source), "Should be a new array");
            Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(arr.buffer, source.buffer), "Should be the same buffer");
            Bridge.Test.NUnit.Assert.areEqual$1(3, arr.byteOffset, "ByteOffset should be correct");
            Bridge.Test.NUnit.Assert.areEqual$1(4, arr.length, "Length should be correct");
        },
        bufferPropertyWorks: function () {
            var buf = new ArrayBuffer(100);
            var arr = new Uint8Array(buf);
            Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(arr.buffer, buf), "Should be correct");
        },
        byteOffsetPropertyWorks: function () {
            var buf = new ArrayBuffer(100);
            var arr = new Uint8Array(buf, 32);
            Bridge.Test.NUnit.Assert.areEqual$1(32, arr.byteOffset, "Should be correct");
        },
        byteLengthPropertyWorks: function () {
            var arr = new Uint8Array(23);
            Bridge.Test.NUnit.Assert.areEqual$1(23, arr.byteLength, "Should be correct");
        },
        indexOfWorks: function () {
            var arr = new Uint8Array(System.Array.init([3, 6, 2, 9, 5], System.Byte));
            Bridge.Test.NUnit.Assert.areEqual$1(3, System.Array.indexOf(arr, 9), "9");
            Bridge.Test.NUnit.Assert.areEqual$1(-1, System.Array.indexOf(arr, 1), "1");
        },
        containsWorks: function () {
            var arr = new Uint8Array(System.Array.init([3, 6, 2, 9, 5], System.Byte));
            Bridge.Test.NUnit.Assert.true$1(System.Array.contains(arr, 9), "9");
            Bridge.Test.NUnit.Assert.false$1(System.Array.contains(arr, 1), "1");
        },
        foreachWorks_SPI_1401: function () {
            var $t;
            var arr = new Uint8Array(System.Array.init([3, 6, 2, 9, 5], System.Byte));
            var l = new (System.Collections.Generic.List$1(System.Int32))();
            // #1401
            $t = Bridge.getEnumerator(arr);
            try {
                while ($t.moveNext()) {
                    var i = $t.Current;
                    l.add(i);
                }
            }finally {
                if (Bridge.is($t, System.IDisposable)) {
                    $t.System$IDisposable$dispose();
                }
            }Bridge.Test.NUnit.Assert.areEqual(l.toArray(), System.Array.init([3, 6, 2, 9, 5], System.Int32));
        },
        getEnumeratorWorks_SPI_1401: function () {
            var arr = new Uint8Array(System.Array.init([3, 6, 2, 9, 5], System.Byte));
            var l = new (System.Collections.Generic.List$1(System.Int32))();
            // #1401
            var enm = Bridge.getEnumerator(arr);
            while (enm.System$Collections$IEnumerator$moveNext()) {
                l.add(enm[Bridge.geti(enm, "System$Collections$Generic$IEnumerator$1$System$Byte$Current$1", "Current$1")]);
            }
            Bridge.Test.NUnit.Assert.areEqual(l.toArray(), System.Array.init([3, 6, 2, 9, 5], System.Int32));
        },
        iEnumerableGetEnumeratorWorks: function () {
            var arr = Bridge.cast(new Uint8Array(System.Array.init([3, 6, 2, 9, 5], System.Byte)), System.Collections.Generic.IEnumerable$1(System.Byte));
            var l = new (System.Collections.Generic.List$1(System.Int32))();
            var enm = Bridge.getEnumerator(arr, System.Byte);
            while (enm.System$Collections$IEnumerator$moveNext()) {
                l.add(enm[Bridge.geti(enm, "System$Collections$Generic$IEnumerator$1$System$Byte$Current$1", "Current$1")]);
            }
            Bridge.Test.NUnit.Assert.areEqual(System.Array.init([3, 6, 2, 9, 5], System.Int32), l.toArray());
        },
        iCollectionMethodsWork_SPI_1559: function () {
            // #1559
            var coll = Bridge.cast(new Uint8Array(System.Array.init([3, 6, 2, 9, 5], System.Byte)), System.Collections.Generic.ICollection$1(System.SByte));
            Bridge.Test.NUnit.Assert.areEqual$1(5, System.Array.getCount(coll, System.SByte), "Count");
            Bridge.Test.NUnit.Assert.true$1(System.Array.contains(coll, 6, System.SByte), "Contains(6)");
            Bridge.Test.NUnit.Assert.false$1(System.Array.contains(coll, 1, System.SByte), "Contains(1)");
            Bridge.Test.NUnit.Assert.throws$7(System.NotSupportedException, function () {
                System.Array.add(coll, 2, System.SByte);
            }, "Add");
            Bridge.Test.NUnit.Assert.throws$5(function () {
                System.Array.clear(coll, System.SByte);
            }, "Clear");
            Bridge.Test.NUnit.Assert.throws$5(function () {
                System.Array.remove(coll, 2, System.SByte);
            }, "Remove");
        },
        iListMethodsWork_SPI_1559: function () {
            // #1559
            var list = Bridge.cast(new Uint8Array(System.Array.init([3, 6, 2, 9, 5], System.Byte)), System.Collections.Generic.IList$1(System.SByte));
            Bridge.Test.NUnit.Assert.areEqual$1(1, System.Array.indexOf(list, 6, 0, null, System.SByte), "IndexOf(6)");
            Bridge.Test.NUnit.Assert.areEqual$1(-1, System.Array.indexOf(list, 1, 0, null, System.SByte), "IndexOf(1)");
            Bridge.Test.NUnit.Assert.areEqual$1(9, System.Array.getItem(list, 3, System.SByte), "Get item");
            System.Array.setItem(list, 3, 4, System.SByte);
            Bridge.Test.NUnit.Assert.areEqual$1(4, System.Array.getItem(list, 3, System.SByte), "Set item");

            Bridge.Test.NUnit.Assert.throws$7(System.NotSupportedException, function () {
                System.Array.insert(list, 2, 2, System.SByte);
            }, "Insert");
            Bridge.Test.NUnit.Assert.throws$5(function () {
                System.Array.removeAt(list, 2, System.SByte);
            }, "RemoveAt");
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint8ClampedArrayTests", {
        assertContent: function (actual, expected, message) {
            if (actual.length !== expected.length) {
                Bridge.Test.NUnit.Assert.fail$1(System.String.concat(message, ": Expected length ", expected.length, ", actual: ", actual.length));
                return;
            }
            for (var i = 0; i < expected.length; i = (i + 1) | 0) {
                if (actual[System.Array.index(i, actual)] !== expected[System.Array.index(i, expected)]) {
                    Bridge.Test.NUnit.Assert.fail$1(System.String.concat(message, ": Position ", i, ": expected ", expected[System.Array.index(i, expected)], ", actual: ", actual[System.Array.index(i, actual)]));
                    return;
                }
            }
            Bridge.Test.NUnit.Assert.true$1(true, message);
        },
        typePropertiesAreCorrect_SPI_1560: function () {
            var arr = new Uint8ClampedArray(0);
            // #1560
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(arr, System.Collections.Generic.IEnumerable$1(System.Byte)), "Is IEnumerable<byte>");
        },
        typePropertiesAreCorrect_SPI_1559: function () {
            Bridge.Test.NUnit.Assert.areEqual$1("Uint8ClampedArray", Bridge.Reflection.getTypeFullName(Uint8ClampedArray), "FullName");

            var interfaces = Bridge.Reflection.getInterfaces(Uint8ClampedArray);
            Bridge.Test.NUnit.Assert.areEqual$1(7, interfaces.length, "Interface count should be 7");
            Bridge.Test.NUnit.Assert.true$1(System.Array.contains(interfaces, System.Collections.Generic.IEnumerable$1(System.Byte), Function), "Interfaces should contain IEnumerable<byte>");
            Bridge.Test.NUnit.Assert.true$1(System.Array.contains(interfaces, System.Collections.Generic.ICollection$1(System.Byte), Function), "Interfaces should contain ICollection<byte>");
            Bridge.Test.NUnit.Assert.true$1(System.Array.contains(interfaces, System.Collections.Generic.IList$1(System.Byte), Function), "Interfaces should contain IList<byte>");
            // Not JS API
            //Assert.True(interfaces.Contains(typeof(IReadOnlyCollection<byte>)), "Interfaces should contain IReadOnlyCollection<byte>");
            //Assert.True(interfaces.Contains(typeof(IReadOnlyList<byte>)), "Interfaces should contain IReadOnlyList<byte>");

            var arr = new Uint8ClampedArray(0);
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(arr, Uint8ClampedArray), "Is Uint8ClampedArray");
            // #1560
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(arr, System.Collections.Generic.IEnumerable$1(System.Byte)), "Is IEnumerable<byte>");
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(arr, System.Collections.Generic.ICollection$1(System.Byte)), "Is ICollection<byte>");
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(arr, System.Collections.Generic.IList$1(System.Byte)), "Is IList<byte>");
            // Not JS API
            //Assert.True(arr is IReadOnlyCollection<byte>, "Is IReadOnlyCollection<byte>");
            //Assert.True(arr is IReadOnlyList<byte>, "Is IReadOnlyList<byte>");
        },
        lengthConstructorWorks: function () {
            var arr = new Uint8ClampedArray(13);
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(arr, Uint8ClampedArray), "is Uint8ClampedArray");
            Bridge.Test.NUnit.Assert.areEqual$1(13, arr.length, "Length");
        },
        constructorFromIntWorks: function () {
            var source = System.Array.init([3, 8, 4], System.Byte);
            var arr = new Uint8ClampedArray(source);
            Bridge.Test.NUnit.Assert.true$1(!Bridge.referenceEquals(arr, source), "New object");
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(arr, Uint8ClampedArray), "is Uint8ClampedArray");
            this.assertContent(arr, System.Array.init([3, 8, 4], System.Int32), "content");
        },
        constructorFromUint8ArrayWorks_SPI_TODO: function () {
            var source = new Uint8Array(System.Array.init([3, 8, 4], System.Byte));
            var arr = new Uint8ClampedArray(source);
            //Assert.True(arr != source, "New object");
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(arr, Uint8ClampedArray), "is Uint8ClampedArray");
            this.assertContent(arr, System.Array.init([3, 8, 4], System.Int32), "content");
        },
        copyConstructorWorks: function () {
            var source = new Uint8ClampedArray(System.Array.init([3, 8, 4], System.Byte));
            var arr = new Uint8ClampedArray(source);
            Bridge.Test.NUnit.Assert.true$1(!Bridge.referenceEquals(arr, source), "New object");
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(arr, Uint8ClampedArray), "is Uint8ClampedArray");
            this.assertContent(arr, System.Array.init([3, 8, 4], System.Int32), "content");
        },
        arrayBufferConstructorWorks: function () {
            var buf = new ArrayBuffer(80);
            var arr = new Uint8ClampedArray(buf);
            Bridge.Test.NUnit.Assert.true(Bridge.is(arr, Uint8ClampedArray));
            Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(arr.buffer, buf), "buffer");
            Bridge.Test.NUnit.Assert.areEqual$1(80, arr.length, "length");
        },
        arrayBufferWithOffsetConstructorWorks: function () {
            var buf = new ArrayBuffer(80);
            var arr = new Uint8ClampedArray(buf, 16);
            Bridge.Test.NUnit.Assert.true(Bridge.is(arr, Uint8ClampedArray));
            Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(arr.buffer, buf), "buffer");
            Bridge.Test.NUnit.Assert.areEqual$1(64, arr.length, "length");
        },
        arrayBufferWithOffsetAndLengthConstructorWorks: function () {
            var buf = new ArrayBuffer(80);
            var arr = new Uint8ClampedArray(buf, 16, 12);
            Bridge.Test.NUnit.Assert.true(Bridge.is(arr, Uint8ClampedArray));
            Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(arr.buffer, buf), "buffer");
            Bridge.Test.NUnit.Assert.areEqual$1(12, arr.length, "length");
        },
        staticBytesPerElementWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual(1, Uint8ClampedArray.BYTES_PER_ELEMENT);
        },
        lengthWorks: function () {
            var arr = new Uint8ClampedArray(13);
            Bridge.Test.NUnit.Assert.areEqual$1(13, arr.length, "Length");
        },
        indexingWorks: function () {
            var arr = new Uint8ClampedArray(3);
            arr[System.Array.index(1, arr)] = 42;
            this.assertContent(arr, System.Array.init([0, 42, 0], System.Int32), "Content");
            Bridge.Test.NUnit.Assert.areEqual$1(42, arr[System.Array.index(1, arr)], "[1]");
        },
        setUint8ClampedArrayWorks: function () {
            var arr = new Uint8ClampedArray(4);
            arr.set(new Uint8ClampedArray(System.Array.init([3, 6, 7], System.Byte)));
            this.assertContent(arr, System.Array.init([3, 6, 7, 0], System.Int32), "Content");
        },
        setUint8ClampedArrayWithOffsetWorks: function () {
            var arr = new Uint8ClampedArray(6);
            arr.set(new Uint8ClampedArray(System.Array.init([3, 6, 7], System.Byte)), 2);
            this.assertContent(arr, System.Array.init([0, 0, 3, 6, 7, 0], System.Int32), "Content");
        },
        setNormalArrayWorks: function () {
            var arr = new Uint8ClampedArray(4);
            arr.set(System.Array.init([3, 6, 7], System.Byte));
            this.assertContent(arr, System.Array.init([3, 6, 7, 0], System.Int32), "Content");
        },
        setNormalArrayWithOffsetWorks: function () {
            var arr = new Uint8ClampedArray(6);
            arr.set(System.Array.init([3, 6, 7], System.Byte), 2);
            this.assertContent(arr, System.Array.init([0, 0, 3, 6, 7, 0], System.Int32), "Content");
        },
        subarrayWithBeginWorks: function () {
            var source = new Uint8ClampedArray(10);
            var arr = source.subarray(3);
            Bridge.Test.NUnit.Assert.false$1(Bridge.referenceEquals(arr, source), "Should be a new array");
            Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(arr.buffer, source.buffer), "Should be the same buffer");
            Bridge.Test.NUnit.Assert.areEqual$1(3, arr.byteOffset, "ByteOffset should be correct");
        },
        subarrayWithBeginAndEndWorks: function () {
            var source = new Uint8ClampedArray(10);
            var arr = source.subarray(3, 7);
            Bridge.Test.NUnit.Assert.false$1(Bridge.referenceEquals(arr, source), "Should be a new array");
            Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(arr.buffer, source.buffer), "Should be the same buffer");
            Bridge.Test.NUnit.Assert.areEqual$1(3, arr.byteOffset, "ByteOffset should be correct");
            Bridge.Test.NUnit.Assert.areEqual$1(4, arr.length, "Length should be correct");
        },
        bufferPropertyWorks: function () {
            var buf = new ArrayBuffer(100);
            var arr = new Uint8ClampedArray(buf);
            Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(arr.buffer, buf), "Should be correct");
        },
        byteOffsetPropertyWorks: function () {
            var buf = new ArrayBuffer(100);
            var arr = new Uint8ClampedArray(buf, 32);
            Bridge.Test.NUnit.Assert.areEqual$1(32, arr.byteOffset, "Should be correct");
        },
        byteLengthPropertyWorks: function () {
            var arr = new Uint8ClampedArray(23);
            Bridge.Test.NUnit.Assert.areEqual$1(23, arr.byteLength, "Should be correct");
        },
        indexOfWorks: function () {
            var arr = new Uint8ClampedArray(System.Array.init([3, 6, 2, 9, 5], System.Byte));
            Bridge.Test.NUnit.Assert.areEqual$1(3, System.Array.indexOf(arr, 9), "9");
            Bridge.Test.NUnit.Assert.areEqual$1(-1, System.Array.indexOf(arr, 1), "1");
        },
        containsWorks: function () {
            var arr = new Uint8ClampedArray(System.Array.init([3, 6, 2, 9, 5], System.Byte));
            Bridge.Test.NUnit.Assert.true$1(System.Array.contains(arr, 9), "9");
            Bridge.Test.NUnit.Assert.false$1(System.Array.contains(arr, 1), "1");
        },
        foreachWorks_SPI_1401: function () {
            var $t;
            var arr = new Uint8ClampedArray(System.Array.init([3, 6, 2, 9, 5], System.Byte));
            var l = new (System.Collections.Generic.List$1(System.Int32))();
            // #1401
            $t = Bridge.getEnumerator(arr);
            try {
                while ($t.moveNext()) {
                    var i = $t.Current;
                    l.add(i);
                }
            }finally {
                if (Bridge.is($t, System.IDisposable)) {
                    $t.System$IDisposable$dispose();
                }
            }Bridge.Test.NUnit.Assert.areEqual(l.toArray(), System.Array.init([3, 6, 2, 9, 5], System.Int32));
        },
        getEnumeratorWorks_SPI_1401: function () {
            var arr = new Uint8ClampedArray(System.Array.init([3, 6, 2, 9, 5], System.Byte));
            var l = new (System.Collections.Generic.List$1(System.Int32))();
            // #1401
            var enm = Bridge.getEnumerator(arr);
            while (enm.System$Collections$IEnumerator$moveNext()) {
                l.add(enm[Bridge.geti(enm, "System$Collections$Generic$IEnumerator$1$System$Byte$Current$1", "Current$1")]);
            }
            Bridge.Test.NUnit.Assert.areEqual(l.toArray(), System.Array.init([3, 6, 2, 9, 5], System.Int32));
        },
        iEnumerableGetEnumeratorWorks_SPI_1560: function () {
            // #1560
            var l = new (System.Collections.Generic.List$1(System.Int32))();
            Bridge.ClientTest.Batch4.TestHelper.safe(function () {
                var arr = Bridge.cast(new Uint8ClampedArray(System.Array.init([3, 6, 2, 9, 5], System.Byte)), System.Collections.Generic.IEnumerable$1(System.Byte));

                var enm = Bridge.getEnumerator(arr, System.Byte);
                while (enm.System$Collections$IEnumerator$moveNext()) {
                    l.add(enm[Bridge.geti(enm, "System$Collections$Generic$IEnumerator$1$System$Byte$Current$1", "Current$1")]);
                }
            });
            Bridge.Test.NUnit.Assert.areEqual(System.Array.init([3, 6, 2, 9, 5], System.Int32), l.toArray());
        },
        iCollectionMethodsWork_SPI_1559_1560: function () {
            // #1559 #1560
            var coll = Bridge.cast(new Uint8ClampedArray(System.Array.init([3, 6, 2, 9, 5], System.Byte)), System.Collections.Generic.ICollection$1(System.SByte));
            Bridge.Test.NUnit.Assert.areEqual$1(5, System.Array.getCount(coll, System.SByte), "Count");
            Bridge.Test.NUnit.Assert.true$1(System.Array.contains(coll, 6, System.SByte), "Contains(6)");
            Bridge.Test.NUnit.Assert.false$1(System.Array.contains(coll, 1, System.SByte), "Contains(1)");
            Bridge.Test.NUnit.Assert.throws$7(System.NotSupportedException, function () {
                System.Array.add(coll, 2, System.SByte);
            }, "Add");
            Bridge.Test.NUnit.Assert.throws$7(System.NotSupportedException, function () {
                System.Array.clear(coll, System.SByte);
            }, "Clear");
            Bridge.Test.NUnit.Assert.throws$7(System.NotSupportedException, function () {
                System.Array.remove(coll, 2, System.SByte);
            }, "Remove");
        },
        iListMethodsWork_SPI_1559_1560: function () {
            // #1559 #1560
            var list = Bridge.cast(new Uint8ClampedArray(System.Array.init([3, 6, 2, 9, 5], System.Byte)), System.Collections.Generic.IList$1(System.SByte));
            Bridge.Test.NUnit.Assert.areEqual$1(1, System.Array.indexOf(list, 6, 0, null, System.SByte), "IndexOf(6)");
            Bridge.Test.NUnit.Assert.areEqual$1(-1, System.Array.indexOf(list, 1, 0, null, System.SByte), "IndexOf(1)");
            Bridge.Test.NUnit.Assert.areEqual$1(9, System.Array.getItem(list, 3, System.SByte), "Get item");
            System.Array.setItem(list, 3, 4, System.SByte);
            Bridge.Test.NUnit.Assert.areEqual$1(4, System.Array.getItem(list, 3, System.SByte), "Set item");

            Bridge.Test.NUnit.Assert.throws$7(System.NotSupportedException, function () {
                System.Array.insert(list, 2, 2, System.SByte);
            }, "Insert");
            Bridge.Test.NUnit.Assert.throws$7(System.NotSupportedException, function () {
                System.Array.removeAt(list, 2, System.SByte);
            }, "RemoveAt");
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.ConvertTests", {
        getTestArr: function () {
            var result = System.Array.init(192, 0, System.Byte);
            for (var i = 0; i < 64; i = (i + 1) | 0) {
                result[System.Array.index(((i * 3) | 0), result)] = (i << 2) & 255;
                result[System.Array.index(((((i * 3) | 0) + 1) | 0), result)] = 0;
                result[System.Array.index(((((i * 3) | 0) + 2) | 0), result)] = 0;
            }
            return result;
        },
        toBase64StringWithOnlyArrayWorks: function () {
            var testArr = this.getTestArr();

            Bridge.Test.NUnit.Assert.areEqual("AAAABAAACAAADAAAEAAAFAAAGAAAHAAAIAAAJAAAKAAALAAAMAAANAAAOAAAPAAAQAAARAAASAAATAAAUAAAVAAAWAAAXAAAYAAAZAAAaAAAbAAAcAAAdAAAeAAAfAAAgAAAhAAAiAAAjAAAkAAAlAAAmAAAnAAAoAAApAAAqAAArAAAsAAAtAAAuAAAvAAAwAAAxAAAyAAAzAAA0AAA1AAA2AAA3AAA4AAA5AAA6AAA7AAA8AAA9AAA+AAA/AAA", System.Convert.toBase64String(testArr, null, null, null));
            Bridge.Test.NUnit.Assert.areEqual("AQID", System.Convert.toBase64String(System.Array.init([1, 2, 3], System.Byte), null, null, null));
            Bridge.Test.NUnit.Assert.areEqual("AQIDBA==", System.Convert.toBase64String(System.Array.init([1, 2, 3, 4], System.Byte), null, null, null));
            Bridge.Test.NUnit.Assert.areEqual("AQIDBAU=", System.Convert.toBase64String(System.Array.init([1, 2, 3, 4, 5], System.Byte), null, null, null));
            Bridge.Test.NUnit.Assert.areEqual("AQIDBAUG", System.Convert.toBase64String(System.Array.init([1, 2, 3, 4, 5, 6], System.Byte), null, null, null));
            Bridge.Test.NUnit.Assert.areEqual("", System.Convert.toBase64String(System.Array.init(0, 0, System.Byte), null, null, null));
        },
        toBase64StringWithArrayAndFormattingOptionsWorks: function () {
            var testArr = this.getTestArr();
            Bridge.Test.NUnit.Assert.areEqual("AAAABAAACAAADAAAEAAAFAAAGAAAHAAAIAAAJAAAKAAALAAAMAAANAAAOAAAPAAAQAAARAAASAAATAAAUAAAVAAAWAAAXAAAYAAAZAAAaAAAbAAAcAAAdAAAeAAAfAAAgAAAhAAAiAAAjAAAkAAAlAAAmAAAnAAAoAAApAAAqAAArAAAsAAAtAAAuAAAvAAAwAAAxAAAyAAAzAAA0AAA1AAA2AAA3AAA4AAA5AAA6AAA7AAA8AAA9AAA+AAA/AAA", System.Convert.toBase64String(testArr, null, null, 0));
            Bridge.Test.NUnit.Assert.areEqual("AAAABAAACAAADAAAEAAAFAAAGAAAHAAAIAAAJAAAKAAALAAAMAAANAAAOAAAPAAAQAAARAAASAAA\r\nTAAAUAAAVAAAWAAAXAAAYAAAZAAAaAAAbAAAcAAAdAAAeAAAfAAAgAAAhAAAiAAAjAAAkAAAlAAA\r\nmAAAnAAAoAAApAAAqAAArAAAsAAAtAAAuAAAvAAAwAAAxAAAyAAAzAAA0AAA1AAA2AAA3AAA4AAA\r\n5AAA6AAA7AAA8AAA9AAA+AAA/AAA", System.Convert.toBase64String(testArr, null, null, 1));
        },
        toBase64StringWithArrayAndOffsetAndLengthWorks: function () {
            var arr = this.getTestArr();
            Bridge.Test.NUnit.Assert.areEqual("AACIAACMAACQAACUAACYAACcAACgAACkAACoAACsAACwAAC0AAC4AAC8AADAAADEAADIAADMAADQAADUAADYAADcAADgAADkAADoAADsAADwAAD0AAD4AAD8", System.Convert.toBase64String(arr, 100, 90, null));
        },
        toBase64StringWithArrayAndOffsetAndLengthAndFormattingOptionsWorks: function () {
            var arr = this.getTestArr();
            Bridge.Test.NUnit.Assert.areEqual("AACIAACMAACQAACUAACYAACcAACgAACkAACoAACsAACwAAC0AAC4AAC8AADAAADEAADIAADMAADQAADUAADYAADcAADgAADkAADoAADsAADwAAD0AAD4AAD8", System.Convert.toBase64String(arr, 100, 90, 0));
            Bridge.Test.NUnit.Assert.areEqual("AACIAACMAACQAACUAACYAACcAACgAACkAACoAACsAACwAAC0AAC4AAC8AADAAADEAADIAADMAADQ\r\nAADUAADYAADcAADgAADkAADoAADsAADwAAD0AAD4AAD8", System.Convert.toBase64String(arr, 100, 90, 1));
            Bridge.Test.NUnit.Assert.areEqual("AABgAABkAABoAABsAABwAAB0AAB4AAB8AACAAACEAACIAACMAACQAACUAACYAACcAACgAACkAACo\r\nAACsAACwAAC0AAC4AAC8AADAAADEAADIAADMAADQAADUAADYAADcAADgAADkAADoAADsAADwAAD0", System.Convert.toBase64String(arr, 70, 114, 1));
        },
        fromBase64StringWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual(this.getTestArr(), System.Convert.fromBase64String("AAAABAAACAAADAAAEAAAFAAAGAAAHAAAIAAAJAAAKAAALAAAMAAANAAAOAAAPAAAQAAARAAASAAATAAAUAAAVAAAWAAAXAAAYAAAZAAAaAAAbAAAcAAAdAAAeAAAfAAAgAAAhAAAiAAAjAAAkAAAlAAAmAAAnAAAoAAApAAAqAAArAAAsAAAtAAAuAAAvAAAwAAAxAAAyAAAzAAA0AAA1AAA2AAA3AAA4AAA5AAA6AAA7AAA8AAA9AAA+AAA/AAA"));
            Bridge.Test.NUnit.Assert.areEqual(System.Array.init([1, 2, 3], System.Byte), System.Convert.fromBase64String("AQID"));
            Bridge.Test.NUnit.Assert.areEqual(System.Array.init([1, 2, 3, 4], System.Byte), System.Convert.fromBase64String("AQIDBA=="));
            Bridge.Test.NUnit.Assert.areEqual(System.Array.init([1, 2, 3, 4, 5], System.Byte), System.Convert.fromBase64String("AQIDBAU="));
            Bridge.Test.NUnit.Assert.areEqual(System.Array.init([1, 2, 3, 4, 5, 6], System.Byte), System.Convert.fromBase64String("AQIDBAUG"));
            Bridge.Test.NUnit.Assert.areEqual(System.Array.init([1, 2, 3, 4, 5], System.Byte), System.Convert.fromBase64String("AQIDBAU="));
            Bridge.Test.NUnit.Assert.areEqual(System.Array.init([1, 2, 3], System.Byte), System.Convert.fromBase64String("A Q\nI\tD"));
            Bridge.Test.NUnit.Assert.areEqual(System.Array.init(0, 0, System.Byte), System.Convert.fromBase64String(""));
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.CultureInfoTests", {
        typePropertiesAreCorrect: function () {
            var culture = System.Globalization.CultureInfo.invariantCulture;
            Bridge.Test.NUnit.Assert.areEqual("System.Globalization.CultureInfo", Bridge.Reflection.getTypeFullName(System.Globalization.CultureInfo));
            Bridge.Test.NUnit.Assert.true(Bridge.Reflection.isClass(System.Globalization.CultureInfo));
            Bridge.Test.NUnit.Assert.areEqual(System.Array.init([System.IFormatProvider, System.ICloneable], Function), Bridge.Reflection.getInterfaces(System.Globalization.CultureInfo));
            Bridge.Test.NUnit.Assert.true(Bridge.hasValue(culture));
        },
        getFormatWorks: function () {
            var culture = System.Globalization.CultureInfo.invariantCulture;
            Bridge.Test.NUnit.Assert.areEqual(null, Bridge.unbox(culture.getFormat(System.Int32)));
            Bridge.Test.NUnit.Assert.areEqual(culture.numberFormat, Bridge.unbox(culture.getFormat(System.Globalization.NumberFormatInfo)));
            Bridge.Test.NUnit.Assert.areEqual(culture.dateTimeFormat, Bridge.unbox(culture.getFormat(System.Globalization.DateTimeFormatInfo)));
        },
        invariantWorks: function () {
            var culture = System.Globalization.CultureInfo.invariantCulture;
            Bridge.Test.NUnit.Assert.areEqual("iv", culture.name);
            Bridge.Test.NUnit.Assert.areEqual(System.Globalization.DateTimeFormatInfo.invariantInfo, culture.dateTimeFormat);
            Bridge.Test.NUnit.Assert.areEqual(System.Globalization.NumberFormatInfo.invariantInfo, culture.numberFormat);
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.DateTimeFormatInfoTests", {
        typePropertiesAreCorrect: function () {
            var format = System.Globalization.DateTimeFormatInfo.invariantInfo;
            Bridge.Test.NUnit.Assert.areEqual("System.Globalization.DateTimeFormatInfo", Bridge.Reflection.getTypeFullName(System.Globalization.DateTimeFormatInfo));
            Bridge.Test.NUnit.Assert.true(Bridge.Reflection.isClass(System.Globalization.DateTimeFormatInfo));
            Bridge.Test.NUnit.Assert.areEqual(System.Array.init([System.IFormatProvider, System.ICloneable], Function), Bridge.Reflection.getInterfaces(System.Globalization.DateTimeFormatInfo));
            Bridge.Test.NUnit.Assert.true(Bridge.hasValue(format));
        },
        getFormatWorks: function () {
            var format = System.Globalization.DateTimeFormatInfo.invariantInfo;
            Bridge.Test.NUnit.Assert.areEqual(null, Bridge.unbox(format.getFormat(System.Int32)));
            Bridge.Test.NUnit.Assert.areEqual(format, Bridge.unbox(format.getFormat(System.Globalization.DateTimeFormatInfo)));
        },
        invariantWorks_SPI_1562: function () {
            var format = System.Globalization.DateTimeFormatInfo.invariantInfo;
            Bridge.Test.NUnit.Assert.areEqual("AM", format.amDesignator);
            Bridge.Test.NUnit.Assert.areEqual("PM", format.pmDesignator);

            Bridge.Test.NUnit.Assert.areEqual("/", format.dateSeparator);
            Bridge.Test.NUnit.Assert.areEqual(":", format.timeSeparator);

            // Not C# API
            //Assert.AreEqual(format.GMTDateTimePattern, "ddd, dd MMM yyyy HH:mm:Bridge 'GMT'");
            // #1562
            Bridge.Test.NUnit.Assert.areEqual("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", format.universalSortableDateTimePattern);
            Bridge.Test.NUnit.Assert.areEqual("yyyy'-'MM'-'dd'T'HH':'mm':'ss", format.sortableDateTimePattern);
            Bridge.Test.NUnit.Assert.areEqual("dddd, dd MMMM yyyy HH:mm:ss", format.fullDateTimePattern);

            Bridge.Test.NUnit.Assert.areEqual("dddd, dd MMMM yyyy", format.longDatePattern);
            Bridge.Test.NUnit.Assert.areEqual("MM/dd/yyyy", format.shortDatePattern);

            Bridge.Test.NUnit.Assert.areEqual("HH:mm:ss", format.longTimePattern);
            Bridge.Test.NUnit.Assert.areEqual("HH:mm", format.shortTimePattern);

            Bridge.Test.NUnit.Assert.areEqual(0, format.firstDayOfWeek);
            Bridge.Test.NUnit.Assert.areEqual(System.Array.init(["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"], System.String), format.dayNames);
            // Not C# API
            //Assert.AreEqual(format.ShortDayNames, new[] { "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat" });
            Bridge.Test.NUnit.Assert.areEqual(System.Array.init(["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"], System.String), format.shortestDayNames);

            Bridge.Test.NUnit.Assert.areEqual(System.Array.init(["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""], System.String), format.monthNames);
            Bridge.Test.NUnit.Assert.areEqual(System.Array.init(["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""], System.String), format.abbreviatedMonthNames);
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.DelegateTests", {
        testField: 12,
        typePropertiesAreCorrect: function () {
            Bridge.Test.NUnit.Assert.areEqual("Function", Bridge.Reflection.getTypeFullName(Function));
            Bridge.Test.NUnit.Assert.true(Bridge.Reflection.isClass(Function));
            Bridge.Test.NUnit.Assert.areEqual("Function", Bridge.Reflection.getTypeFullName(Function));
            Bridge.Test.NUnit.Assert.areEqual("Function", Bridge.Reflection.getTypeFullName(Function));
            Bridge.Test.NUnit.Assert.true(Bridge.is($asm.$.Bridge.ClientTest.Batch4.DelegateTests.f1, Function));

            var interfaces = Bridge.Reflection.getInterfaces(Function);
            Bridge.Test.NUnit.Assert.areEqual(0, interfaces.length);
        },
        creatingAndInvokingADelegateWorks: function () {
            var d = Bridge.fn.bind(this, $asm.$.Bridge.ClientTest.Batch4.DelegateTests.f2);
            Bridge.Test.NUnit.Assert.areEqual(25, d(13));
        },
        addForCreateWorks: function (x) {
            return ((x + this.testField) | 0);
        },
        createWorks: function () {
            // Not C# API
            //var d = (Func<int, int>)Delegate.CreateDelegate(this, new Function("x", "{ return x + this.testField; }"));
            // The call above replace with the call below
            var d = Bridge.Reflection.midel(Bridge.Reflection.getMembers(Bridge.getType(this), 8, 284, "AddForCreateWorks"), this);
            Bridge.Test.NUnit.Assert.areEqual(25, d(13));
        },
        combineWorks: function () {
            var sb = new System.Text.StringBuilder();
            var d = Bridge.fn.combine(function () {
                    sb.append("1");
                }, function () {
                    sb.append("2");
                });
            d();
            Bridge.Test.NUnit.Assert.areEqual("12", sb.toString());
        },
        combineDoesAddsDuplicateDelegates: function () {
            var c1 = new Bridge.ClientTest.Batch4.DelegateTests.C(), c2 = new Bridge.ClientTest.Batch4.DelegateTests.C();
            var a = Bridge.fn.cacheBind(c1, c1.F1);
            a = Bridge.fn.combine(a, Bridge.fn.cacheBind(c1, c1.F2));
            Bridge.Test.NUnit.Assert.areEqual(2, a.$invocationList.length);
            a = Bridge.fn.combine(a, Bridge.fn.cacheBind(c2, c2.F1));
            Bridge.Test.NUnit.Assert.areEqual(3, a.$invocationList.length);
            a = Bridge.fn.combine(a, Bridge.fn.cacheBind(c1, c1.F1));
            Bridge.Test.NUnit.Assert.areEqual(4, a.$invocationList.length);
        },
        combineDoesNotAffectOriginal_SPI_1563: function () {
            // #1563
            var c = new Bridge.ClientTest.Batch4.DelegateTests.C();
            var a = Bridge.fn.cacheBind(c, c.F1);
            var a2 = a + Bridge.fn.cacheBind(c, c.F2);
            // Test restructure to keep assertion count correct (prevent uncaught test exception)
            var l = 0;
            Bridge.ClientTest.Batch4.TestHelper.safe(function () {
                l = a.$invocationList.length;
            });
            Bridge.Test.NUnit.Assert.areEqual(1, l);

            var l2 = 0;
            Bridge.ClientTest.Batch4.TestHelper.safe(function () {
                l2 = a2.$invocationList.length;
            });
            Bridge.Test.NUnit.Assert.areEqual(2, l2);
        },
        addWorks: function () {
            var sb = new System.Text.StringBuilder();
            var d = Bridge.fn.combine(function () {
                sb.append("1");
            }, function () {
                sb.append("2");
            });
            d();
            Bridge.Test.NUnit.Assert.areEqual("12", sb.toString());
        },
        addAssignWorks: function () {
            var sb = new System.Text.StringBuilder();
            var d = function () {
                sb.append("1");
            };
            d = Bridge.fn.combine(d, function () {
                sb.append("2");
            });
            d();
            Bridge.Test.NUnit.Assert.areEqual("12", sb.toString());
        },
        removeWorks: function () {
            var sb = new System.Text.StringBuilder();
            var d2 = function () {
                sb.append("2");
            };
            var d = Bridge.fn.combine(Bridge.fn.combine(function () {
                        sb.append("1");
                    }, d2), function () {
                    sb.append("3");
                });
            var d3 = Bridge.fn.remove(d, d2);
            d3();
            Bridge.Test.NUnit.Assert.areEqual("13", sb.toString());
        },
        removeDoesNotAffectOriginal_SPI_1563: function () {
            // #1563
            var c = new Bridge.ClientTest.Batch4.DelegateTests.C();
            var a = Bridge.fn.cacheBind(c, c.F1);
            var a2 = a + Bridge.fn.cacheBind(c, c.F2);
            var a3 = Bridge.fn.remove(a2, a);
            // Test restructure to keep assertion count correct (prevent uncaught test exception)
            var l = 0;
            Bridge.ClientTest.Batch4.TestHelper.safe(function () {
                l = a.$invocationList.length;
            });
            Bridge.Test.NUnit.Assert.areEqual(1, l);

            var l2 = 0;
            Bridge.ClientTest.Batch4.TestHelper.safe(function () {
                l2 = a2.$invocationList.length;
            });
            Bridge.Test.NUnit.Assert.areEqual(2, l2);

            var l3 = 0;
            Bridge.ClientTest.Batch4.TestHelper.safe(function () {
                l3 = a3.$invocationList.length;
            });
            Bridge.Test.NUnit.Assert.areEqual(1, l3);
        },
        subtractingDelegateFromItselfReturnsNull: function () {
            var a = $asm.$.Bridge.ClientTest.Batch4.DelegateTests.f1;
            var a2 = Bridge.fn.remove(a, a);
            Bridge.Test.NUnit.Assert.true(Bridge.staticEquals(a2, null));
        },
        a: function () {
        },
        removeWorksWithMethodGroupConversion_SPI_1563: function () {
            // #1563

            var a = $asm.$.Bridge.ClientTest.Batch4.DelegateTests.f1;

            var a2 = a + Bridge.fn.cacheBind(this, this.a);
            var a3 = a2 - Bridge.fn.cacheBind(this, this.a);

            Bridge.Test.NUnit.Assert.false(Bridge.equals(a, a2));
            Bridge.Test.NUnit.Assert.true(Bridge.equals(a, a3));
        },
        subtractWorks: function () {
            var sb = new System.Text.StringBuilder();
            var d2 = function () {
                sb.append("2");
            };
            var d = Bridge.fn.combine(Bridge.fn.combine(function () {
                        sb.append("1");
                    }, d2), function () {
                    sb.append("3");
                });
            var d3 = Bridge.fn.remove(d, d2);
            d3();
            Bridge.Test.NUnit.Assert.areEqual("13", sb.toString());
        },
        subtractAssignWorks: function () {
            var sb = new System.Text.StringBuilder();
            var d2 = function () {
                sb.append("2");
            };
            var d = Bridge.fn.combine(Bridge.fn.combine(function () {
                        sb.append("1");
                    }, d2), function () {
                    sb.append("3");
                });
            d = Bridge.fn.remove(d, d2);
            d();
            Bridge.Test.NUnit.Assert.areEqual("13", sb.toString());
        },
        cloneWorks_SPI_1563: function () {
            var sb = new System.Text.StringBuilder();
            var d1 = function () {
                sb.append("1");
            };
            // #1563 Clone not implemented
            // The original call
            // Action d2 = (Action)d1.Clone();
            // The temp call
            var d2 = d1;
            Bridge.Test.NUnit.Assert.false$1(Bridge.referenceEquals(d1, d2), "Should not be same");
            d2();
            Bridge.Test.NUnit.Assert.areEqual("1", sb.toString());
        },
        cloningDelegateToADifferentTypeIsANoOp: function () {
            var d1 = $asm.$.Bridge.ClientTest.Batch4.DelegateTests.f1;
            var d2 = d1;
            Bridge.Test.NUnit.Assert.true(Bridge.referenceEquals(d1, d2));
        },
        cloningDelegateToTheSameTypeCreatesANewClone_SPI_1563: function () {
            // #1563
            var x = 0;
            var d1 = function () {
                Bridge.identity(x, (x = (x + 1) | 0));
            };
            var d2 = d1;
            d1();
            d2();

            Bridge.Test.NUnit.Assert.false(Bridge.staticEquals(d1, d2));
            Bridge.Test.NUnit.Assert.areEqual(2, x);
        },
        equalityAndInequalityOperatorsAndEqualsMethod_SPI_1563: function () {
            var c1 = new Bridge.ClientTest.Batch4.DelegateTests.C(), c2 = new Bridge.ClientTest.Batch4.DelegateTests.C();
            var n = null;
            var f11 = Bridge.fn.cacheBind(c1, c1.F1), f11_2 = Bridge.fn.cacheBind(c1, c1.F1), f12 = Bridge.fn.cacheBind(c1, c1.F2), f21 = Bridge.fn.cacheBind(c2, c2.F1);

            Bridge.Test.NUnit.Assert.false$1(Bridge.staticEquals(n, f11), "n == f11");
            Bridge.Test.NUnit.Assert.true$1(!Bridge.staticEquals(n, f11), "n != f11");
            Bridge.Test.NUnit.Assert.false$1(Bridge.staticEquals(f11, n), "f11 == n");
            Bridge.Test.NUnit.Assert.false$1(Bridge.equals(f11, n), "f11.Equals(n)");
            Bridge.Test.NUnit.Assert.true$1(!Bridge.staticEquals(f11, n), "f11 != n");
            Bridge.Test.NUnit.Assert.true$1(Bridge.staticEquals(n, n), "n == n");
            Bridge.Test.NUnit.Assert.false$1(!Bridge.staticEquals(n, n), "n != n");

            Bridge.Test.NUnit.Assert.true$1(Bridge.staticEquals(f11, f11), "f11 == f11");
            Bridge.Test.NUnit.Assert.true$1(Bridge.equals(f11, f11), "f11.Equals(f11)");
            Bridge.Test.NUnit.Assert.false$1(!Bridge.staticEquals(f11, f11), "f11 != f11");

            Bridge.Test.NUnit.Assert.true$1(Bridge.staticEquals(f11, f11_2), "f11 == f11_2");
            Bridge.Test.NUnit.Assert.true$1(Bridge.equals(f11, f11_2), "f11.Equals(f11_2)");
            Bridge.Test.NUnit.Assert.false$1(!Bridge.staticEquals(f11, f11_2), "f11 != f11_2");

            Bridge.Test.NUnit.Assert.false$1(Bridge.staticEquals(f11, f12), "f11 == f12");
            Bridge.Test.NUnit.Assert.false$1(Bridge.equals(f11, f12), "f11.Equals(f12)");
            Bridge.Test.NUnit.Assert.true$1(!Bridge.staticEquals(f11, f12), "f11 != f12");

            Bridge.Test.NUnit.Assert.false$1(Bridge.staticEquals(f11, f21), "f11 == f21");
            Bridge.Test.NUnit.Assert.false$1(Bridge.equals(f11, f21), "f11.Equals(f21)");
            Bridge.Test.NUnit.Assert.true$1(!Bridge.staticEquals(f11, f21), "f11 != f21");

            var m1 = Bridge.fn.combine(f11, f21), m2 = Bridge.fn.combine(f11, f21), m3 = Bridge.fn.combine(f21, f11);

            // #1563
            Bridge.Test.NUnit.Assert.true$1(Bridge.staticEquals(m1, m2), "m1 == m2");
            Bridge.Test.NUnit.Assert.true$1(Bridge.equals(m1, m2), "m1.Equals(m2)");
            Bridge.Test.NUnit.Assert.false$1(!Bridge.staticEquals(m1, m2), "m1 != m2");

            Bridge.Test.NUnit.Assert.false$1(Bridge.staticEquals(m1, m3), "m1 == m3");
            Bridge.Test.NUnit.Assert.false$1(Bridge.equals(m1, m3), "m1.Equals(m3)");
            Bridge.Test.NUnit.Assert.true$1(!Bridge.staticEquals(m1, m3), "m1 != m3");

            Bridge.Test.NUnit.Assert.false$1(Bridge.staticEquals(m1, f11), "m1 == f11");
            Bridge.Test.NUnit.Assert.false$1(Bridge.equals(m1, f11), "m1.Equals(f11)");
            Bridge.Test.NUnit.Assert.true$1(!Bridge.staticEquals(m1, f11), "m1 != f11");
        },
        getInvocationListWorksForImportedFunction_SPI_1563: function () {
            var f = new Function("");
            // #1563
            var l = f.$invocationList;
            // Test restructure to keep assertion count correct (prevent uncaught test exception)
            var c = 0;
            Bridge.ClientTest.Batch4.TestHelper.safe(function () {
                c = l.length;
            });
            Bridge.Test.NUnit.Assert.areEqual(1, c);
            Bridge.Test.NUnit.Assert.true(Bridge.referenceEquals(f, l[System.Array.index(0, l)]));
        },
        getInvocationListWorksForMulticastDelegate: function () {
            var c1 = new Bridge.ClientTest.Batch4.DelegateTests.C(), c2 = new Bridge.ClientTest.Batch4.DelegateTests.C();
            var f11 = Bridge.fn.cacheBind(c1, c1.F1), f11_2 = Bridge.fn.cacheBind(c1, c1.F1), f12 = Bridge.fn.cacheBind(c1, c1.F2), f21 = Bridge.fn.cacheBind(c2, c2.F1);
            var combined = Bridge.fn.combine(Bridge.fn.combine(Bridge.fn.combine(f11, f21), f12), f11_2);
            var l = combined.$invocationList;
            Bridge.Test.NUnit.Assert.true(l.length === 4);
            Bridge.Test.NUnit.Assert.true(Bridge.staticEquals(l[System.Array.index(0, l)], f11));
            Bridge.Test.NUnit.Assert.true(Bridge.staticEquals(l[System.Array.index(1, l)], f21));
            Bridge.Test.NUnit.Assert.true(Bridge.staticEquals(l[System.Array.index(2, l)], f12));
            Bridge.Test.NUnit.Assert.true(Bridge.staticEquals(l[System.Array.index(3, l)], f11_2));
        }
    });

    Bridge.ns("Bridge.ClientTest.Batch4.DelegateTests", $asm.$);

    Bridge.apply($asm.$.Bridge.ClientTest.Batch4.DelegateTests, {
        f1: function () {
        },
        f2: function (x) {
            return ((this.testField + x) | 0);
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.DelegateTests.C", {
        F1: function () {
        },
        F2: function () {
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.Diagnostics.Contracts.ContractTests", {
        assertNoExceptions: function (block) {
            try {
                block();
                Bridge.Test.NUnit.Assert.true$1(true, "No Exception thrown.");
            }
            catch (ex) {
                ex = System.Exception.create(ex);
                Bridge.Test.NUnit.Assert.fail$1(System.String.concat("Unexpected Exception ", ex));
            }
        },
        assertException: function (block, expectedKind, expectedMessage, expectedUserMessage, expectedInnerException) {
            try {
                block();
            }
            catch (ex) {
                ex = System.Exception.create(ex);
                var cex = Bridge.as(ex, System.Diagnostics.Contracts.ContractException);
                if (cex == null) {
                    Bridge.Test.NUnit.Assert.fail$1("Unexpected Exception");
                }

                Bridge.Test.NUnit.Assert.true$1(cex.Kind === expectedKind, "Kind");
                Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(cex.Message, expectedMessage), "Message");
                Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(cex.UserMessage, expectedUserMessage), "UserMessage");
                if (cex.InnerException != null) {
                    Bridge.Test.NUnit.Assert.true$1(Bridge.equals(cex.InnerException, expectedInnerException), "InnerException");
                } else {
                    if (cex.InnerException == null && expectedInnerException != null) {
                        Bridge.Test.NUnit.Assert.fail$1("InnerException");
                    }
                }
            }
        },
        assume: function () {
            var a = 0;
            Bridge.Test.NUnit.Assert.throws$7(System.Diagnostics.Contracts.ContractException, function () {
                System.Diagnostics.Contracts.Contract.assert(5, function () { return a !== 0; });
            }, "ContractException");
            this.assertNoExceptions(function () {
                System.Diagnostics.Contracts.Contract.assert(5, function () { return a === 0; });
            });
            this.assertException(function () {
                System.Diagnostics.Contracts.Contract.assert(5, function () { return a === 99; });
            }, System.Diagnostics.Contracts.ContractFailureKind.assume, "Contract 'a === 99' failed", null, null);
        },
        assumeWithUserMessage: function () {
            var a = 0;
            Bridge.Test.NUnit.Assert.throws$7(System.Diagnostics.Contracts.ContractException, function () {
                System.Diagnostics.Contracts.Contract.assert(5, function () { return a !== 0; }, "is not zero");
            }, "ContractException");
            this.assertNoExceptions(function () {
                System.Diagnostics.Contracts.Contract.assert(5, function () { return a === 0; }, "is zero");
            });
            this.assertException(function () {
                System.Diagnostics.Contracts.Contract.assert(5, function () { return a === 99; }, "is 99");
            }, System.Diagnostics.Contracts.ContractFailureKind.assume, "Contract 'a === 99' failed: is 99", "is 99", null);
        },
        assert: function () {
            var a = 0;
            Bridge.Test.NUnit.Assert.throws$7(System.Diagnostics.Contracts.ContractException, function () {
                System.Diagnostics.Contracts.Contract.assert(4, function () { return a !== 0; });
            }, "ContractException");
            this.assertNoExceptions(function () {
                System.Diagnostics.Contracts.Contract.assert(4, function () { return a === 0; });
            });
            this.assertException(function () {
                System.Diagnostics.Contracts.Contract.assert(4, function () { return a === 99; });
            }, System.Diagnostics.Contracts.ContractFailureKind.assert, "Contract 'a === 99' failed", null, null);
        },
        assertWithUserMessage: function () {
            var a = 0;
            Bridge.Test.NUnit.Assert.throws$7(System.Diagnostics.Contracts.ContractException, function () {
                System.Diagnostics.Contracts.Contract.assert(4, function () { return a !== 0; }, "is not zero");
            }, "ContractException");
            this.assertNoExceptions(function () {
                System.Diagnostics.Contracts.Contract.assert(4, function () { return a === 0; }, "is zero");
            });
            this.assertException(function () {
                System.Diagnostics.Contracts.Contract.assert(4, function () { return a === 99; }, "is 99");
            }, System.Diagnostics.Contracts.ContractFailureKind.assert, "Contract 'a === 99' failed: is 99", "is 99", null);
        },
        requires: function () {
            var a = 0;
            Bridge.Test.NUnit.Assert.throws$7(System.Diagnostics.Contracts.ContractException, function () {
                System.Diagnostics.Contracts.Contract.assert(0, function () { return a !== 0; });
            }, "ContractException");
            this.assertNoExceptions(function () {
                System.Diagnostics.Contracts.Contract.assert(0, function () { return a === 0; });
            });
            this.assertException(function () {
                System.Diagnostics.Contracts.Contract.assert(0, function () { return a === 99; });
            }, System.Diagnostics.Contracts.ContractFailureKind.precondition, "Contract 'a === 99' failed", null, null);
        },
        requiresWithUserMessage: function () {
            var a = 0;
            Bridge.Test.NUnit.Assert.throws$7(System.Diagnostics.Contracts.ContractException, function () {
                System.Diagnostics.Contracts.Contract.assert(0, function () { return a !== 0; }, "must not be zero");
            }, "ContractException");
            this.assertNoExceptions(function () {
                System.Diagnostics.Contracts.Contract.assert(0, function () { return a === 0; }, "can only be zero");
            });
            this.assertException(function () {
                System.Diagnostics.Contracts.Contract.assert(0, function () { return a === 99; }, "can only be 99");
            }, System.Diagnostics.Contracts.ContractFailureKind.precondition, "Contract 'a === 99' failed: can only be 99", "can only be 99", null);
        },
        requiresWithTypeException: function () {
            var a = 0;
            Bridge.Test.NUnit.Assert.throws$7(System.Exception, function () {
                System.Diagnostics.Contracts.Contract.requires(System.Exception, function () { return a !== 0; });
            }, "Exception");
            this.assertNoExceptions(function () {
                System.Diagnostics.Contracts.Contract.requires(System.Exception, function () { return a === 0; });
            });
        },
        requiredWithTypeExceptionAndUserMessage: function () {
            var a = 0;
            Bridge.Test.NUnit.Assert.throws$7(System.Exception, function () {
                System.Diagnostics.Contracts.Contract.requires(System.Exception, function () { return a !== 0; }, "must not be zero");
            }, "Exception");
            this.assertNoExceptions(function () {
                System.Diagnostics.Contracts.Contract.requires(System.Exception, function () { return a === 0; }, "can only be zero");
            });
        },
        forAll: function () {
            Bridge.Test.NUnit.Assert.throws$7(System.ArgumentNullException, $asm.$.Bridge.ClientTest.Batch4.Diagnostics.Contracts.ContractTests.f1, "ArgumentNullException");
            this.assertNoExceptions($asm.$.Bridge.ClientTest.Batch4.Diagnostics.Contracts.ContractTests.f3);
            Bridge.Test.NUnit.Assert.false(System.Diagnostics.Contracts.Contract.forAll(2, 5, $asm.$.Bridge.ClientTest.Batch4.Diagnostics.Contracts.ContractTests.f2));
            Bridge.Test.NUnit.Assert.true(System.Diagnostics.Contracts.Contract.forAll(2, 5, $asm.$.Bridge.ClientTest.Batch4.Diagnostics.Contracts.ContractTests.f4));
        },
        forAllWithCollection: function () {
            Bridge.Test.NUnit.Assert.throws$7(System.ArgumentNullException, $asm.$.Bridge.ClientTest.Batch4.Diagnostics.Contracts.ContractTests.f5, "ArgumentNullException");
            this.assertNoExceptions($asm.$.Bridge.ClientTest.Batch4.Diagnostics.Contracts.ContractTests.f6);
            Bridge.Test.NUnit.Assert.false(System.Diagnostics.Contracts.Contract.forAll$1(System.Array.init([1, 2, 3], System.Int32), $asm.$.Bridge.ClientTest.Batch4.Diagnostics.Contracts.ContractTests.f2));
            Bridge.Test.NUnit.Assert.true(System.Diagnostics.Contracts.Contract.forAll$1(System.Array.init([1, 2, 3], System.Int32), $asm.$.Bridge.ClientTest.Batch4.Diagnostics.Contracts.ContractTests.f4));
        },
        exists: function () {
            Bridge.Test.NUnit.Assert.throws$7(System.ArgumentNullException, $asm.$.Bridge.ClientTest.Batch4.Diagnostics.Contracts.ContractTests.f7, "ArgumentNullException");
            this.assertNoExceptions($asm.$.Bridge.ClientTest.Batch4.Diagnostics.Contracts.ContractTests.f9);
            Bridge.Test.NUnit.Assert.true(System.Diagnostics.Contracts.Contract.exists(1, 5, $asm.$.Bridge.ClientTest.Batch4.Diagnostics.Contracts.ContractTests.f8));
            Bridge.Test.NUnit.Assert.false(System.Diagnostics.Contracts.Contract.exists(1, 5, $asm.$.Bridge.ClientTest.Batch4.Diagnostics.Contracts.ContractTests.f10));
        },
        existsWithCollection: function () {
            Bridge.Test.NUnit.Assert.throws$7(System.ArgumentNullException, $asm.$.Bridge.ClientTest.Batch4.Diagnostics.Contracts.ContractTests.f11, "ArgumentNullException");
            this.assertNoExceptions($asm.$.Bridge.ClientTest.Batch4.Diagnostics.Contracts.ContractTests.f12);
            Bridge.Test.NUnit.Assert.true(System.Diagnostics.Contracts.Contract.exists$1(System.Array.init([1, 2, 3], System.Int32), $asm.$.Bridge.ClientTest.Batch4.Diagnostics.Contracts.ContractTests.f8));
            Bridge.Test.NUnit.Assert.false(System.Diagnostics.Contracts.Contract.exists$1(System.Array.init([1, 2, 3], System.Int32), $asm.$.Bridge.ClientTest.Batch4.Diagnostics.Contracts.ContractTests.f10));
        }
    });

    Bridge.ns("Bridge.ClientTest.Batch4.Diagnostics.Contracts.ContractTests", $asm.$);

    Bridge.apply($asm.$.Bridge.ClientTest.Batch4.Diagnostics.Contracts.ContractTests, {
        f1: function () {
            System.Diagnostics.Contracts.Contract.forAll(2, 5, null);
        },
        f2: function (s) {
            return s !== 3;
        },
        f3: function () {
            System.Diagnostics.Contracts.Contract.forAll(2, 5, $asm.$.Bridge.ClientTest.Batch4.Diagnostics.Contracts.ContractTests.f2);
        },
        f4: function (s) {
            return s !== 6;
        },
        f5: function () {
            System.Diagnostics.Contracts.Contract.forAll$1(System.Array.init([1, 2, 3], System.Int32), null);
        },
        f6: function () {
            System.Diagnostics.Contracts.Contract.forAll$1(System.Array.init([1, 2, 3], System.Int32), $asm.$.Bridge.ClientTest.Batch4.Diagnostics.Contracts.ContractTests.f2);
        },
        f7: function () {
            System.Diagnostics.Contracts.Contract.exists(1, 5, null);
        },
        f8: function (s) {
            return s === 3;
        },
        f9: function () {
            System.Diagnostics.Contracts.Contract.exists(1, 5, $asm.$.Bridge.ClientTest.Batch4.Diagnostics.Contracts.ContractTests.f8);
        },
        f10: function (s) {
            return s === 6;
        },
        f11: function () {
            System.Diagnostics.Contracts.Contract.exists$1(System.Array.init([1, 2, 3], System.Int32), null);
        },
        f12: function () {
            System.Diagnostics.Contracts.Contract.exists$1(System.Array.init([1, 2, 3], System.Int32), $asm.$.Bridge.ClientTest.Batch4.Diagnostics.Contracts.ContractTests.f8);
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.EnvironmentTests", {
        newLineIsAStringContainingOnlyTheNewLineChar: function () {
            Bridge.Test.NUnit.Assert.areEqual("\n", '\n');
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.Exceptions.AggregateExceptionTests", {
        statics: {
            DefaultMessage: "One or more errors occurred."
        },
        makeEnumerable: function (T, arr) {
            return new (Bridge.GeneratorEnumerable$1(T))(Bridge.fn.bind(this, function (T, arr) {
                var $step = 0,
                    $jumpFromFinally,
                    $returnValue,
                    $t,
                    x,
                    $async_e;

                var $enumerator = new (Bridge.GeneratorEnumerator$1(T))(Bridge.fn.bind(this, function () {
                    try {
                        for (;;) {
                            switch ($step) {
                                case 0: {
                                    if (arr === void 0) { arr = []; }
                                        $t = Bridge.getEnumerator(arr);
                                        $step = 1;
                                        continue;
                                }
                                case 1: {
                                    if ($t.moveNext()) {
                                            x = $t.Current;
                                            $step = 2;
                                            continue;
                                        }
                                    $step = 4;
                                    continue;
                                }
                                case 2: {
                                    $enumerator.current = x;
                                        $step = 3;
                                        return true;
                                }
                                case 3: {
                                    $step = 1;
                                    continue;
                                }
                                case 4: {

                                }
                                default: {
                                    return false;
                                }
                            }
                        }
                    } catch($async_e1) {
                        $async_e = System.Exception.create($async_e1);
                        throw $async_e;
                    }
                }));
                return $enumerator;
            }, arguments));
        },
        typePropertiesAreCorrect: function () {
            Bridge.Test.NUnit.Assert.areEqual$1("System.AggregateException", Bridge.Reflection.getTypeFullName(System.AggregateException), "Name");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.isClass(System.AggregateException), "IsClass");
            Bridge.Test.NUnit.Assert.areEqual$1(System.Exception, Bridge.Reflection.getBaseType(System.AggregateException), "BaseType");
            var d = new System.AggregateException();
            Bridge.Test.NUnit.Assert.true(Bridge.is(d, System.AggregateException));
            Bridge.Test.NUnit.Assert.true(Bridge.is(d, System.Exception));

            var interfaces = Bridge.Reflection.getInterfaces(System.AggregateException);
            Bridge.Test.NUnit.Assert.areEqual(0, interfaces.length);
        },
        defaultConstructorWorks: function () {
            var ex = new System.AggregateException();
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(ex, System.AggregateException), "is AggregateException");
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(ex.innerExceptions, System.Collections.ObjectModel.ReadOnlyCollection$1(System.Exception)), "InnerExceptions is ReadOnlyCollection");
            Bridge.Test.NUnit.Assert.areEqual$1(0, ex.innerExceptions.Count, "InnerExceptions.Length");
            Bridge.Test.NUnit.Assert.true$1(ex.InnerException == null, "InnerException");
            Bridge.Test.NUnit.Assert.areEqual$1(Bridge.ClientTest.Batch4.Exceptions.AggregateExceptionTests.DefaultMessage, ex.Message, "Message");
        },
        constructorWithIEnumerableInnerExceptionsWorks: function () {
            var inner1 = new System.Exception("a");
            var inner2 = new System.Exception("b");

            var ex1 = new System.AggregateException(null, this.makeEnumerable(System.Exception));
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(ex1, System.AggregateException), "ex1 is AggregateException");
            Bridge.Test.NUnit.Assert.true$1(ex1.InnerException == null, "ex1 InnerException");
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(ex1.innerExceptions, System.Collections.ObjectModel.ReadOnlyCollection$1(System.Exception)), "ex1 InnerExceptions is ReadOnlyCollection");
            Bridge.Test.NUnit.Assert.areEqual$1(0, ex1.innerExceptions.Count, "ex1 InnerExceptions.Length");
            Bridge.Test.NUnit.Assert.areEqual$1(Bridge.ClientTest.Batch4.Exceptions.AggregateExceptionTests.DefaultMessage, ex1.Message, "ex1 Message");

            var ex2 = new System.AggregateException(null, this.makeEnumerable(System.Exception, [inner1]));
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(ex2, System.AggregateException), "ex2 is AggregateException");
            Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(ex2.InnerException, inner1), "ex2 InnerException");
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(ex2.innerExceptions, System.Collections.ObjectModel.ReadOnlyCollection$1(System.Exception)), "ex2 InnerExceptions is ReadOnlyCollection");
            Bridge.Test.NUnit.Assert.areEqual$1(1, ex2.innerExceptions.Count, "ex2 InnerExceptions.Length");
            Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(ex2.innerExceptions.get(0), inner1), "ex2 InnerExceptions[0]");
            Bridge.Test.NUnit.Assert.areEqual$1(Bridge.ClientTest.Batch4.Exceptions.AggregateExceptionTests.DefaultMessage, ex2.Message, "ex2 Message");

            var ex3 = new System.AggregateException(null, this.makeEnumerable(System.Exception, [inner1, inner2]));
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(ex3, System.AggregateException), "ex3 is AggregateException");
            Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(ex3.InnerException, inner1), "ex3 InnerException");
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(ex3.innerExceptions, System.Collections.ObjectModel.ReadOnlyCollection$1(System.Exception)), "ex3 InnerExceptions is ReadOnlyCollection");
            Bridge.Test.NUnit.Assert.areEqual$1(2, ex3.innerExceptions.Count, "ex3 InnerExceptions.Length");
            Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(ex3.innerExceptions.get(0), inner1), "ex3 InnerExceptions[0]");
            Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(ex3.innerExceptions.get(1), inner2), "ex3 InnerExceptions[1]");
            Bridge.Test.NUnit.Assert.areEqual$1(Bridge.ClientTest.Batch4.Exceptions.AggregateExceptionTests.DefaultMessage, ex3.Message, "ex3 Message");
        },
        constructorWithInnerExceptionArrayWorks: function () {
            var inner1 = new System.Exception("a");
            var inner2 = new System.Exception("b");

            var ex1 = new System.AggregateException(null, System.Array.init(0, null, System.Exception));
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(ex1, System.AggregateException), "ex1 is AggregateException");
            Bridge.Test.NUnit.Assert.true$1(ex1.InnerException == null, "ex1 InnerException");
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(ex1.innerExceptions, System.Collections.ObjectModel.ReadOnlyCollection$1(System.Exception)), "ex1 InnerExceptions is ReadOnlyCollection");
            Bridge.Test.NUnit.Assert.areEqual$1(0, ex1.innerExceptions.Count, "ex1 InnerExceptions.Length");
            Bridge.Test.NUnit.Assert.areEqual$1(Bridge.ClientTest.Batch4.Exceptions.AggregateExceptionTests.DefaultMessage, ex1.Message, "ex1 Message");

            var ex2 = new System.AggregateException(null, [inner1]);
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(ex2, System.AggregateException), "ex2 is AggregateException");
            Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(ex2.InnerException, inner1), "ex2 InnerException");
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(ex2.innerExceptions, System.Collections.ObjectModel.ReadOnlyCollection$1(System.Exception)), "ex2 InnerExceptions is ReadOnlyCollection");
            Bridge.Test.NUnit.Assert.areEqual$1(1, ex2.innerExceptions.Count, "ex2 InnerExceptions.Length");
            Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(ex2.innerExceptions.get(0), inner1), "ex2 InnerExceptions[0]");
            Bridge.Test.NUnit.Assert.areEqual$1(Bridge.ClientTest.Batch4.Exceptions.AggregateExceptionTests.DefaultMessage, ex2.Message, "ex2 Message");

            var ex3 = new System.AggregateException(null, [inner1, inner2]);
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(ex3, System.AggregateException), "ex3 is AggregateException");
            Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(ex3.InnerException, inner1), "ex3 InnerException");
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(ex3.innerExceptions, System.Collections.ObjectModel.ReadOnlyCollection$1(System.Exception)), "ex3 InnerExceptions is ReadOnlyCollection");
            Bridge.Test.NUnit.Assert.areEqual$1(2, ex3.innerExceptions.Count, "ex3 InnerExceptions.Length");
            Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(ex3.innerExceptions.get(0), inner1), "ex3 InnerExceptions[0]");
            Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(ex3.innerExceptions.get(1), inner2), "ex3 InnerExceptions[1]");
            Bridge.Test.NUnit.Assert.areEqual$1(Bridge.ClientTest.Batch4.Exceptions.AggregateExceptionTests.DefaultMessage, ex3.Message, "ex3 Message");
        },
        constructorWithMessageWorks: function () {
            var ex = new System.AggregateException("Some message");
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(ex, System.AggregateException), "is AggregateException");
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(ex.innerExceptions, System.Collections.ObjectModel.ReadOnlyCollection$1(System.Exception)), "ex1 InnerExceptions is ReadOnlyCollection");
            Bridge.Test.NUnit.Assert.areEqual$1(0, ex.innerExceptions.Count, "InnerExceptions.Length");
            Bridge.Test.NUnit.Assert.true$1(ex.InnerException == null, "InnerException");
            Bridge.Test.NUnit.Assert.areEqual$1("Some message", ex.Message, "Message");
        },
        constructorWithMessageAndIEnumerableInnerExceptionsWorks: function () {
            var inner1 = new System.Exception("a");
            var inner2 = new System.Exception("b");

            var ex1 = new System.AggregateException("Message #1", this.makeEnumerable(System.Exception));
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(ex1, System.AggregateException), "ex1 is AggregateException");
            Bridge.Test.NUnit.Assert.true$1(ex1.InnerException == null, "ex1 InnerException");
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(ex1.innerExceptions, System.Collections.ObjectModel.ReadOnlyCollection$1(System.Exception)), "ex1 InnerExceptions is ReadOnlyCollection");
            Bridge.Test.NUnit.Assert.areEqual$1(0, ex1.innerExceptions.Count, "ex1 InnerExceptions.Length");
            Bridge.Test.NUnit.Assert.areEqual$1("Message #1", ex1.Message, "ex1 Message");

            var ex2 = new System.AggregateException("Message #2", this.makeEnumerable(System.Exception, [inner1]));
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(ex2, System.AggregateException), "ex2 is AggregateException");
            Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(ex2.InnerException, inner1), "ex2 InnerException");
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(ex2.innerExceptions, System.Collections.ObjectModel.ReadOnlyCollection$1(System.Exception)), "ex2 InnerExceptions is ReadOnlyCollection");
            Bridge.Test.NUnit.Assert.areEqual$1(1, ex2.innerExceptions.Count, "ex2 InnerExceptions.Length");
            Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(ex2.innerExceptions.get(0), inner1), "ex2 InnerExceptions[0]");
            Bridge.Test.NUnit.Assert.areEqual$1("Message #2", ex2.Message, "ex2 Message");

            var ex3 = new System.AggregateException("Message #3", this.makeEnumerable(System.Exception, [inner1, inner2]));
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(ex3, System.AggregateException), "ex3 is AggregateException");
            Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(ex3.InnerException, inner1), "ex3 InnerException");
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(ex3.innerExceptions, System.Collections.ObjectModel.ReadOnlyCollection$1(System.Exception)), "ex3 InnerExceptions is ReadOnlyCollection");
            Bridge.Test.NUnit.Assert.areEqual$1(2, ex3.innerExceptions.Count, "ex3 InnerExceptions.Length");
            Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(ex3.innerExceptions.get(0), inner1), "ex3 InnerExceptions[0]");
            Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(ex3.innerExceptions.get(1), inner2), "ex3 InnerExceptions[1]");
            Bridge.Test.NUnit.Assert.areEqual$1("Message #3", ex3.Message, "ex3 Message");
        },
        constructorWithMessageAndInnerExceptionArrayWorks: function () {
            var inner1 = new System.Exception("a");
            var inner2 = new System.Exception("b");

            var ex1 = new System.AggregateException("Message #1", System.Array.init(0, null, System.Exception));
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(ex1, System.AggregateException), "ex1 is AggregateException");
            Bridge.Test.NUnit.Assert.true$1(ex1.InnerException == null, "ex1 InnerException");
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(ex1.innerExceptions, System.Collections.ObjectModel.ReadOnlyCollection$1(System.Exception)), "ex1 InnerExceptions is ReadOnlyCollection");
            Bridge.Test.NUnit.Assert.areEqual$1(0, ex1.innerExceptions.Count, "ex1 InnerExceptions.Length");
            Bridge.Test.NUnit.Assert.areEqual$1("Message #1", ex1.Message, "ex1 Message");

            var ex2 = new System.AggregateException("Message #2", [inner1]);
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(ex2, System.AggregateException), "ex2 is AggregateException");
            Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(ex2.InnerException, inner1), "ex2 InnerException");
            Bridge.Test.NUnit.Assert.areEqual$1(1, ex2.innerExceptions.Count, "ex2 InnerExceptions.Length");
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(ex2.innerExceptions, System.Collections.ObjectModel.ReadOnlyCollection$1(System.Exception)), "ex2 InnerExceptions is ReadOnlyCollection");
            Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(ex2.innerExceptions.get(0), inner1), "ex2 InnerExceptions[0]");
            Bridge.Test.NUnit.Assert.areEqual$1("Message #2", ex2.Message, "ex2 Message");

            var ex3 = new System.AggregateException("Message #3", [inner1, inner2]);
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(ex3, System.AggregateException), "ex3 is AggregateException");
            Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(ex3.InnerException, inner1), "ex3 InnerException");
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(ex3.innerExceptions, System.Collections.ObjectModel.ReadOnlyCollection$1(System.Exception)), "ex3 InnerExceptions is ReadOnlyCollection");
            Bridge.Test.NUnit.Assert.areEqual$1(2, ex3.innerExceptions.Count, "ex3 InnerExceptions.Length");
            Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(ex3.innerExceptions.get(0), inner1), "ex3 InnerExceptions[0]");
            Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(ex3.innerExceptions.get(1), inner2), "ex3 InnerExceptions[1]");
            Bridge.Test.NUnit.Assert.areEqual$1("Message #3", ex3.Message, "ex3 Message");
        },
        flattenWorks: function () {
            var ex0 = new System.Exception(), ex1 = new System.Exception(), ex2 = new System.Exception(), ex3 = new System.Exception(), ex4 = new System.Exception(), ex5 = new System.Exception(), ex6 = new System.Exception();
            var ae = new System.AggregateException("The message", [ex0, ex1, new System.AggregateException(null, [ex2, new System.AggregateException(null, [new System.AggregateException("X"), new System.AggregateException(null, [ex3, ex4])])]), new System.AggregateException(null, [ex5, ex6])]);
            var actual = ae.flatten();

            Bridge.Test.NUnit.Assert.true$1(Bridge.is(actual, System.AggregateException), "is AggregateException");
            Bridge.Test.NUnit.Assert.areEqual$1("The message", actual.Message, "message");
            Bridge.Test.NUnit.Assert.areEqual$1(7, actual.innerExceptions.Count, "Count");
            Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(actual.innerExceptions.get(0), ex0), "0");
            Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(actual.innerExceptions.get(1), ex1), "1");
            Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(actual.innerExceptions.get(2), ex2), "2");
            Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(actual.innerExceptions.get(3), ex5), "5");
            Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(actual.innerExceptions.get(4), ex6), "6");
            Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(actual.innerExceptions.get(5), ex3), "3");
            Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(actual.innerExceptions.get(6), ex4), "4");
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.Exceptions.AmbiguousMatchExceptionTests", {
        typePropertiesAreCorrect: function () {
            Bridge.Test.NUnit.Assert.areEqual$1("System.Reflection.AmbiguousMatchException", Bridge.Reflection.getTypeFullName(System.Reflection.AmbiguousMatchException), "Name");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.isClass(System.Reflection.AmbiguousMatchException), "IsClass");
            Bridge.Test.NUnit.Assert.areEqual$1(System.Exception, Bridge.Reflection.getBaseType(System.Reflection.AmbiguousMatchException), "BaseType");
            var d = new System.Reflection.AmbiguousMatchException();
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(d, System.Reflection.AmbiguousMatchException), "is AmbiguousMatchException");
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(d, System.Exception), "is Exception");

            var interfaces = Bridge.Reflection.getInterfaces(System.Reflection.AmbiguousMatchException);
            Bridge.Test.NUnit.Assert.areEqual$1(0, interfaces.length, "Interfaces length");
        },
        defaultConstructorWorks: function () {
            var ex = new System.Reflection.AmbiguousMatchException();
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(ex, System.Reflection.AmbiguousMatchException), "is AmbiguousMatchException");
            Bridge.Test.NUnit.Assert.true$1(ex.InnerException == null, "InnerException");
            Bridge.Test.NUnit.Assert.areEqual("Ambiguous match.", ex.Message);
        },
        constructorWithMessageWorks: function () {
            var ex = new System.Reflection.AmbiguousMatchException("The message");
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(ex, System.Reflection.AmbiguousMatchException), "is AmbiguousMatchException");
            Bridge.Test.NUnit.Assert.true$1(ex.InnerException == null, "InnerException");
            Bridge.Test.NUnit.Assert.areEqual("The message", ex.Message);
        },
        constructorWithMessageAndInnerExceptionWorks: function () {
            var inner = new System.Exception("a");
            var ex = new System.Reflection.AmbiguousMatchException("The message", inner);
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(ex, System.Reflection.AmbiguousMatchException), "is AmbiguousMatchException");
            Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(ex.InnerException, inner), "InnerException");
            Bridge.Test.NUnit.Assert.areEqual("The message", ex.Message);
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.Exceptions.ArgumentExceptionTests", {
        statics: {
            DefaultMessage: "Value does not fall within the expected range."
        },
        typePropertiesAreCorrect: function () {
            Bridge.Test.NUnit.Assert.areEqual$1("System.ArgumentException", Bridge.Reflection.getTypeFullName(System.ArgumentException), "Name");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.isClass(System.ArgumentException), "IsClass");
            Bridge.Test.NUnit.Assert.areEqual$1(System.Exception, Bridge.Reflection.getBaseType(System.ArgumentException), "BaseType");
            var d = new System.ArgumentException();
            Bridge.Test.NUnit.Assert.true(Bridge.is(d, System.ArgumentException));
            Bridge.Test.NUnit.Assert.true(Bridge.is(d, System.Exception));

            var interfaces = Bridge.Reflection.getInterfaces(System.ArgumentException);
            Bridge.Test.NUnit.Assert.areEqual(0, interfaces.length);
        },
        defaultConstructorWorks: function () {
            var ex = new System.ArgumentException();
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(ex, System.ArgumentException), "is ArgumentException");
            Bridge.Test.NUnit.Assert.true$1(ex.ParamName == null, "ParamName");
            Bridge.Test.NUnit.Assert.true$1(ex.InnerException == null, "InnerException");
            Bridge.Test.NUnit.Assert.areEqual(Bridge.ClientTest.Batch4.Exceptions.ArgumentExceptionTests.DefaultMessage, ex.Message);
        },
        constructorWithMessageWorks: function () {
            var ex = new System.ArgumentException("The message");
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(ex, System.ArgumentException), "is ArgumentException");
            Bridge.Test.NUnit.Assert.true$1(ex.ParamName == null, "ParamName");
            Bridge.Test.NUnit.Assert.true$1(ex.InnerException == null, "InnerException");
            Bridge.Test.NUnit.Assert.areEqual("The message", ex.Message);
        },
        constructorWithMessageAndInnerExceptionWorks: function () {
            var inner = new System.Exception("a");
            var ex = new System.ArgumentException("The message", null, inner);
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(ex, System.ArgumentException), "is ArgumentException");
            Bridge.Test.NUnit.Assert.true$1(ex.ParamName == null, "ParamName");
            Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(ex.InnerException, inner), "InnerException");
            Bridge.Test.NUnit.Assert.areEqual("The message", ex.Message);
        },
        constructorWithMessageAndParamNameWorks: function () {
            var ex = new System.ArgumentException("The message", "someParam");
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(ex, System.ArgumentException), "is ArgumentException");
            Bridge.Test.NUnit.Assert.areEqual$1("someParam", ex.ParamName, "ParamName");
            Bridge.Test.NUnit.Assert.true$1(ex.InnerException == null, "InnerException");
            Bridge.Test.NUnit.Assert.areEqual("The message", ex.Message);
        },
        constructorWithMessageAndParamNameAndInnerExceptionWorks: function () {
            var inner = new System.Exception("a");
            var ex = new System.ArgumentException("The message", "someParam", inner);
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(ex, System.ArgumentException), "is ArgumentException");
            Bridge.Test.NUnit.Assert.areEqual$1("someParam", ex.ParamName, "ParamName");
            Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(ex.InnerException, inner), "InnerException");
            Bridge.Test.NUnit.Assert.areEqual("The message", ex.Message);
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.Exceptions.ArgumentNullExceptionTests", {
        typePropertiesAreCorrect: function () {
            Bridge.Test.NUnit.Assert.areEqual$1("System.ArgumentNullException", Bridge.Reflection.getTypeFullName(System.ArgumentNullException), "Name");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.isClass(System.ArgumentNullException), "IsClass");
            Bridge.Test.NUnit.Assert.areEqual$1(System.ArgumentException, Bridge.Reflection.getBaseType(System.ArgumentNullException), "BaseType");
            var d = new System.ArgumentNullException();
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(d, System.ArgumentNullException), "is ArgumentNullException");
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(d, System.ArgumentException), "is ArgumentException");
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(d, System.Exception), "is Exception");

            var interfaces = Bridge.Reflection.getInterfaces(System.ArgumentNullException);
            Bridge.Test.NUnit.Assert.areEqual$1(0, interfaces.length, "Interfaces length");
        },
        defaultConstructorWorks: function () {
            var ex = new System.ArgumentNullException();
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(ex, System.ArgumentNullException), "is ArgumentNullException");
            Bridge.Test.NUnit.Assert.true$1(ex.ParamName == null, "ParamName");
            Bridge.Test.NUnit.Assert.true$1(ex.InnerException == null, "InnerException");
            Bridge.Test.NUnit.Assert.areEqual("Value cannot be null.", ex.Message);
        },
        constructorWithParamNameWorks: function () {
            var ex = new System.ArgumentNullException("someParam");
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(ex, System.ArgumentNullException), "is ArgumentNullException");
            Bridge.Test.NUnit.Assert.areEqual$1("someParam", ex.ParamName, "ParamName");
            Bridge.Test.NUnit.Assert.true$1(ex.InnerException == null, "InnerException");
            Bridge.Test.NUnit.Assert.areEqual("Value cannot be null.\nParameter name: someParam", ex.Message);
        },
        constructorWithParamNameAndMessageWorks: function () {
            var ex = new System.ArgumentNullException("someParam", "The message");
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(ex, System.ArgumentNullException), "is ArgumentNullException");
            Bridge.Test.NUnit.Assert.areEqual$1("someParam", ex.ParamName, "ParamName");
            Bridge.Test.NUnit.Assert.true$1(ex.InnerException == null, "InnerException");
            Bridge.Test.NUnit.Assert.areEqual("The message", ex.Message);
        },
        constructorWithMessageAndInnerExceptionWorks: function () {
            var inner = new System.Exception("a");
            var ex = new System.ArgumentNullException(null, "The message", inner);
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(ex, System.ArgumentNullException), "is ArgumentException");
            Bridge.Test.NUnit.Assert.true$1(ex.ParamName == null, "ParamName");
            Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(ex.InnerException, inner), "InnerException");
            Bridge.Test.NUnit.Assert.areEqual("The message", ex.Message);
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.Exceptions.ArgumentOutOfRangeExceptionTests", {
        typePropertiesAreCorrect: function () {
            Bridge.Test.NUnit.Assert.areEqual$1("System.ArgumentOutOfRangeException", Bridge.Reflection.getTypeFullName(System.ArgumentOutOfRangeException), "Name");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.isClass(System.ArgumentOutOfRangeException), "IsClass");
            Bridge.Test.NUnit.Assert.areEqual$1(System.ArgumentException, Bridge.Reflection.getBaseType(System.ArgumentOutOfRangeException), "BaseType");
            var d = new System.ArgumentOutOfRangeException();
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(d, System.ArgumentOutOfRangeException), "is ArgumentOutOfRangeException");
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(d, System.ArgumentException), "is ArgumentException");
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(d, System.Exception), "is Exception");

            var interfaces = Bridge.Reflection.getInterfaces(System.ArgumentOutOfRangeException);
            Bridge.Test.NUnit.Assert.areEqual$1(0, interfaces.length, "Interfaces length");
        },
        defaultConstructorWorks: function () {
            var ex = new System.ArgumentOutOfRangeException();
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(ex, System.ArgumentOutOfRangeException), "is ArgumentOutOfRangeException");
            Bridge.Test.NUnit.Assert.true$1(ex.ParamName == null, "ParamName");
            Bridge.Test.NUnit.Assert.true$1(ex.InnerException == null, "InnerException");
            Bridge.Test.NUnit.Assert.true$1(ex.ActualValue == null, "ActualValue");
            Bridge.Test.NUnit.Assert.areEqual("Value is out of range.", ex.Message);
        },
        constructorWithParamNameWorks: function () {
            var ex = new System.ArgumentOutOfRangeException("someParam");
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(ex, System.ArgumentOutOfRangeException), "is ArgumentOutOfRangeException");
            Bridge.Test.NUnit.Assert.areEqual$1("someParam", ex.ParamName, "ParamName");
            Bridge.Test.NUnit.Assert.true$1(ex.InnerException == null, "InnerException");
            Bridge.Test.NUnit.Assert.true$1(ex.ActualValue == null, "ActualValue");
            Bridge.Test.NUnit.Assert.areEqual("Value is out of range.\nParameter name: someParam", ex.Message);
        },
        constructorWithParamNameAndMessageWorks: function () {
            var ex = new System.ArgumentOutOfRangeException("someParam", "The message");
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(ex, System.ArgumentOutOfRangeException), "is ArgumentOutOfRangeException");
            Bridge.Test.NUnit.Assert.areEqual$1("someParam", ex.ParamName, "ParamName");
            Bridge.Test.NUnit.Assert.true$1(ex.InnerException == null, "InnerException");
            Bridge.Test.NUnit.Assert.true$1(ex.ActualValue == null, "ActualValue");
            Bridge.Test.NUnit.Assert.areEqual("The message", ex.Message);
        },
        constructorWithMessageAndInnerExceptionWorks: function () {
            var inner = new System.Exception("a");
            var ex = new System.ArgumentOutOfRangeException(null, "The message", inner);
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(ex, System.ArgumentOutOfRangeException), "is ArgumentOutOfRangeException");
            Bridge.Test.NUnit.Assert.true$1(ex.ParamName == null, "ParamName");
            Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(ex.InnerException, inner), "InnerException");
            Bridge.Test.NUnit.Assert.true$1(ex.ActualValue == null, "ActualValue");
            Bridge.Test.NUnit.Assert.areEqual("The message", ex.Message);
        },
        constructorWithParamNameAndActualValueAndMessageWorks: function () {
            var ex = new System.ArgumentOutOfRangeException("someParam", "The message", null, Bridge.box(42, System.Int32));
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(ex, System.ArgumentOutOfRangeException), "is ArgumentOutOfRangeException");
            Bridge.Test.NUnit.Assert.areEqual$1("someParam", ex.ParamName, "ParamName");
            Bridge.Test.NUnit.Assert.true$1(ex.InnerException == null, "InnerException");
            Bridge.Test.NUnit.Assert.areEqual$1(42, Bridge.unbox(ex.ActualValue), "ActualValue");
            Bridge.Test.NUnit.Assert.areEqual("The message", ex.Message);
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.Exceptions.ArithmeticExceptionTests", {
        typePropertiesAreCorrect: function () {
            Bridge.Test.NUnit.Assert.areEqual$1("System.ArithmeticException", Bridge.Reflection.getTypeFullName(System.ArithmeticException), "Name");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.isClass(System.ArithmeticException), "IsClass");
            Bridge.Test.NUnit.Assert.areEqual$1(System.Exception, Bridge.Reflection.getBaseType(System.ArithmeticException), "BaseType");
            var d = new System.ArithmeticException();
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(d, System.ArithmeticException), "is DivideByZeroException");
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(d, System.Exception), "is Exception");

            var interfaces = Bridge.Reflection.getInterfaces(System.ArithmeticException);
            Bridge.Test.NUnit.Assert.areEqual$1(0, interfaces.length, "Interfaces length");
        },
        defaultConstructorWorks: function () {
            var ex = new System.ArithmeticException();
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(ex, System.ArithmeticException), "is ArithmeticException");
            Bridge.Test.NUnit.Assert.true$1(ex.InnerException == null, "InnerException");
            Bridge.Test.NUnit.Assert.areEqual("Overflow or underflow in the arithmetic operation.", ex.Message);
        },
        constructorWithMessageWorks: function () {
            var ex = new System.ArithmeticException("The message");
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(ex, System.ArithmeticException), "is OverflowException");
            Bridge.Test.NUnit.Assert.true$1(ex.InnerException == null, "InnerException");
            Bridge.Test.NUnit.Assert.areEqual("The message", ex.Message);
        },
        constructorWithMessageAndInnerExceptionWorks: function () {
            var inner = new System.Exception("a");
            var ex = new System.ArithmeticException("The message", inner);
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(ex, System.ArithmeticException), "is OverflowException");
            Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(ex.InnerException, inner), "InnerException");
            Bridge.Test.NUnit.Assert.areEqual("The message", ex.Message);
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.Exceptions.ContractExceptionTests", {
        typePropertiesAreCorrect: function () {
            Bridge.Test.NUnit.Assert.areEqual$1("System.Diagnostics.Contracts.ContractException", Bridge.Reflection.getTypeFullName(System.Diagnostics.Contracts.ContractException), "Name");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.isClass(System.Diagnostics.Contracts.ContractException), "IsClass");
            Bridge.Test.NUnit.Assert.areEqual$1(System.Exception, Bridge.Reflection.getBaseType(System.Diagnostics.Contracts.ContractException), "BaseType");
            var d = new System.Diagnostics.Contracts.ContractException(System.Diagnostics.Contracts.ContractFailureKind.assert, "Contract failed", null, null, null);
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(d, System.Diagnostics.Contracts.ContractException), "is ContractException");
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(d, System.Exception), "is Exception");

            var interfaces = Bridge.Reflection.getInterfaces(System.Diagnostics.Contracts.ContractException);
            Bridge.Test.NUnit.Assert.areEqual$1(0, interfaces.length, "Interfaces length");
        },
        defaultConstructorWorks: function () {
            var ex = new System.Diagnostics.Contracts.ContractException(System.Diagnostics.Contracts.ContractFailureKind.assert, "Contract failed", null, null, null);
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(ex, System.Diagnostics.Contracts.ContractException), "is ContractException");
            Bridge.Test.NUnit.Assert.true$1(ex.Kind === System.Diagnostics.Contracts.ContractFailureKind.assert, "ContractFailureKind");
            Bridge.Test.NUnit.Assert.true$1(ex.InnerException == null, "InnerException");
            Bridge.Test.NUnit.Assert.true$1(ex.Condition == null, "Condition");
            Bridge.Test.NUnit.Assert.true$1(ex.UserMessage == null, "UserMessage");
            Bridge.Test.NUnit.Assert.areEqual("Contract failed", ex.Message);
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.Exceptions.DivideByZeroExceptionTests", {
        typePropertiesAreCorrect: function () {
            Bridge.Test.NUnit.Assert.areEqual$1("System.DivideByZeroException", Bridge.Reflection.getTypeFullName(System.DivideByZeroException), "Name");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.isClass(System.DivideByZeroException), "IsClass");
            Bridge.Test.NUnit.Assert.areEqual$1(System.ArithmeticException, Bridge.Reflection.getBaseType(System.DivideByZeroException), "BaseType");
            var d = new System.DivideByZeroException();
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(d, System.DivideByZeroException), "is DivideByZeroException");
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(d, System.Exception), "is Exception");

            var interfaces = Bridge.Reflection.getInterfaces(System.DivideByZeroException);
            Bridge.Test.NUnit.Assert.areEqual$1(0, interfaces.length, "Interfaces length");
        },
        defaultConstructorWorks: function () {
            var ex = new System.DivideByZeroException();
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(ex, System.DivideByZeroException), "is DivideByZeroException");
            Bridge.Test.NUnit.Assert.true$1(ex.InnerException == null, "InnerException");
            Bridge.Test.NUnit.Assert.areEqual("Attempted to divide by zero.", ex.Message);
        },
        constructorWithMessageWorks: function () {
            var ex = new System.DivideByZeroException("The message");
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(ex, System.DivideByZeroException), "is DivideByZeroException");
            Bridge.Test.NUnit.Assert.true$1(ex.InnerException == null, "InnerException");
            Bridge.Test.NUnit.Assert.areEqual("The message", ex.Message);
        },
        constructorWithMessageAndInnerExceptionWorks: function () {
            var inner = new System.Exception("a");
            var ex = new System.DivideByZeroException("The message", inner);
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(ex, System.DivideByZeroException), "is DivideByZeroException");
            Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(ex.InnerException, inner), "InnerException");
            Bridge.Test.NUnit.Assert.areEqual("The message", ex.Message);
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.Exceptions.ErrorExceptionTests", {
        typePropertiesAreCorrect_SPI_1564: function () {
            Bridge.Test.NUnit.Assert.areEqual$1("Bridge.ErrorException", Bridge.Reflection.getTypeFullName(Bridge.ErrorException), "Name");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.isClass(Bridge.ErrorException), "IsClass");
            Bridge.Test.NUnit.Assert.areEqual$1(System.Exception, Bridge.Reflection.getBaseType(Bridge.ErrorException), "BaseType");
            // #1564
            var d = null;
            Bridge.ClientTest.Batch4.TestHelper.safe(function () {
                d = new Bridge.ErrorException();
            });
            // Test restructure to keep assertion count correct (prevent uncaught test exception)
            var b1 = false;
            Bridge.ClientTest.Batch4.TestHelper.safe(function () {
                b1 = Bridge.is(d, Bridge.ErrorException);
            });
            Bridge.Test.NUnit.Assert.true$1(b1, "is InvalidOperationException");
            var b2 = false;
            Bridge.ClientTest.Batch4.TestHelper.safe(function () {
                b2 = Bridge.is(d, System.Exception);
            });
            Bridge.Test.NUnit.Assert.true$1(b2, "is Exception");

            var interfaces = Bridge.Reflection.getInterfaces(Bridge.ErrorException);
            Bridge.Test.NUnit.Assert.areEqual$1(0, interfaces.length, "Interfaces length");
        },
        errorOnlyConstructorWorks_SPI_1564: function () {
            //var err = new Error
            //{
            //    Message = "Some message"
            //};
            var err = null;
            var ex = new Bridge.ErrorException("Some message");
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(ex, Bridge.ErrorException), "is ErrorException");
            Bridge.Test.NUnit.Assert.true$1(ex.InnerException == null, "InnerException");
            // #1564
            Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(ex.Error, err), "Error");
            Bridge.Test.NUnit.Assert.areEqual$1("Some message", ex.Message, "Message");
            Bridge.Test.NUnit.Assert.areEqual$1(err.stack, ex.StackTrace, "Stack");
        },
        errorAndMessageAndInnerExceptionConstructorWorks_SPI_1564: function () {
            var inner = new System.Exception("a");
            //var err = new Error
            //{
            //    Message = "Some message"
            //};
            var err = null;
            var ex = new Bridge.ErrorException("Overridden message", inner);
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(ex, Bridge.ErrorException), "is ErrorException");
            // #1564
            Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(ex.InnerException, inner), "InnerException");
            Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(ex.Error, err), "Error");
            Bridge.Test.NUnit.Assert.areEqual$1("Overridden message", ex.Message, "Message");
            Bridge.Test.NUnit.Assert.areEqual$1(err.stack, ex.StackTrace, "Stack");
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.Exceptions.ExceptionTests", {
        typePropertiesAreCorrect: function () {
            Bridge.Test.NUnit.Assert.areEqual$1("System.Exception", Bridge.Reflection.getTypeFullName(System.Exception), "Name");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.isClass(System.Exception), "IsClass");
            Bridge.Test.NUnit.Assert.areEqual$1(System.Object, Bridge.Reflection.getBaseType(System.Exception), "BaseType");
            var d = new System.Exception();
            Bridge.Test.NUnit.Assert.true(Bridge.is(d, System.Exception));

            var interfaces = Bridge.Reflection.getInterfaces(System.Exception);
            Bridge.Test.NUnit.Assert.areEqual(0, interfaces.length);
        },
        defaultConstructorWorks_SPI_1669: function () {
            var ex = new System.Exception();
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(ex, System.Exception), "is Exception");
            Bridge.Test.NUnit.Assert.true$1(ex.InnerException == null, "InnerException");
            // #1669
            Bridge.Test.NUnit.Assert.areEqual("Exception of type 'System.Exception' was thrown.", ex.Message);
            Bridge.Test.NUnit.Assert.false$1(System.String.isNullOrEmpty(ex.StackTrace), "Stack available");
        },
        constructorWithMessageWorks: function () {
            var ex = new System.Exception("The message");
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(ex, System.Exception), "is Exception");
            Bridge.Test.NUnit.Assert.true$1(ex.InnerException == null, "InnerException");
            Bridge.Test.NUnit.Assert.areEqual("The message", ex.Message);
            Bridge.Test.NUnit.Assert.false$1(System.String.isNullOrEmpty(ex.StackTrace), "Stack available");
        },
        constructorWithMessageAndInnerExceptionWorks: function () {
            var inner = new System.Exception("a");
            var ex = new System.Exception("The message", inner);
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(ex, System.Exception), "is Exception");
            Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(ex.InnerException, inner), "InnerException");
            Bridge.Test.NUnit.Assert.areEqual("The message", ex.Message);
            Bridge.Test.NUnit.Assert.false$1(System.String.isNullOrEmpty(ex.StackTrace), "Stack available");
        },
        messagePropertyCanBeOverridden: function () {
            var ex = Bridge.cast(new Bridge.ClientTest.Batch4.Exceptions.ExceptionTests.MyException("Test message", null), System.Exception);
            Bridge.Test.NUnit.Assert.areEqual("Test message", ex.Message);
        },
        innerExceptionPropertyCanBeOverridden: function () {
            var inner = new System.Exception("a");
            var ex = Bridge.cast(new Bridge.ClientTest.Batch4.Exceptions.ExceptionTests.MyException("Test message", inner), System.Exception);
            Bridge.Test.NUnit.Assert.true(Bridge.referenceEquals(ex.InnerException, inner));
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.Exceptions.ExceptionTests.MyException", {
        inherits: [System.Exception],
        _message: null,
        _innerException: null,
        config: {
            properties: {
                Message: {
                    get: function () {
                        return this._message;
                    }
                },
                InnerException: {
                    get: function () {
                        return this._innerException;
                    }
                }
            }
        },
        ctor: function (message, innerException) {
            this.$initialize();
            System.Exception.ctor.call(this);
            this._message = message;
            this._innerException = innerException;
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.Exceptions.FormatExceptionTests", {
        typePropertiesAreCorrect: function () {
            Bridge.Test.NUnit.Assert.areEqual$1("System.FormatException", Bridge.Reflection.getTypeFullName(System.FormatException), "Name");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.isClass(System.FormatException), "IsClass");
            Bridge.Test.NUnit.Assert.areEqual$1(System.Exception, Bridge.Reflection.getBaseType(System.FormatException), "BaseType");
            var d = new System.FormatException();
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(d, System.FormatException), "is FormatException");
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(d, System.Exception), "is Exception");

            var interfaces = Bridge.Reflection.getInterfaces(System.FormatException);
            Bridge.Test.NUnit.Assert.areEqual$1(0, interfaces.length, "Interfaces length");
        },
        defaultConstructorWorks: function () {
            var ex = new System.FormatException();
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(ex, System.FormatException), "is FormatException");
            Bridge.Test.NUnit.Assert.true$1(ex.InnerException == null, "InnerException");
            Bridge.Test.NUnit.Assert.areEqual("Invalid format.", ex.Message);
        },
        constructorWithMessageWorks: function () {
            var ex = new System.FormatException("The message");
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(ex, System.FormatException), "is FormatException");
            Bridge.Test.NUnit.Assert.true$1(ex.InnerException == null, "InnerException");
            Bridge.Test.NUnit.Assert.areEqual("The message", ex.Message);
        },
        constructorWithMessageAndInnerExceptionWorks: function () {
            var inner = new System.Exception("a");
            var ex = new System.FormatException("The message", inner);
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(ex, System.FormatException), "is FormatException");
            Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(ex.InnerException, inner), "InnerException");
            Bridge.Test.NUnit.Assert.areEqual("The message", ex.Message);
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.Exceptions.InvalidCastExceptionTests", {
        typePropertiesAreCorrect: function () {
            Bridge.Test.NUnit.Assert.areEqual$1("System.InvalidCastException", Bridge.Reflection.getTypeFullName(System.InvalidCastException), "Name");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.isClass(System.InvalidCastException), "IsClass");
            Bridge.Test.NUnit.Assert.areEqual$1(System.Exception, Bridge.Reflection.getBaseType(System.InvalidCastException), "BaseType");
            var d = new System.InvalidCastException();
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(d, System.InvalidCastException), "is InvalidCastException");
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(d, System.Exception), "is Exception");

            var interfaces = Bridge.Reflection.getInterfaces(System.InvalidCastException);
            Bridge.Test.NUnit.Assert.areEqual$1(0, interfaces.length, "Interfaces length");
        },
        defaultConstructorWorks: function () {
            var ex = new System.InvalidCastException();
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(ex, System.InvalidCastException), "is InvalidCastException");
            Bridge.Test.NUnit.Assert.true$1(ex.InnerException == null, "InnerException");
            Bridge.Test.NUnit.Assert.areEqual("The cast is not valid.", ex.Message);
        },
        constructorWithMessageWorks: function () {
            var ex = new System.InvalidCastException("The message");
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(ex, System.InvalidCastException), "is InvalidCastException");
            Bridge.Test.NUnit.Assert.true$1(ex.InnerException == null, "InnerException");
            Bridge.Test.NUnit.Assert.areEqual("The message", ex.Message);
        },
        constructorWithMessageAndInnerExceptionWorks: function () {
            var inner = new System.Exception("a");
            var ex = new System.InvalidCastException("The message", inner);
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(ex, System.InvalidCastException), "is InvalidCastException");
            Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(ex.InnerException, inner), "InnerException");
            Bridge.Test.NUnit.Assert.areEqual("The message", ex.Message);
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.Exceptions.InvalidOperationExceptionTests", {
        typePropertiesAreCorrect: function () {
            Bridge.Test.NUnit.Assert.areEqual$1("System.InvalidOperationException", Bridge.Reflection.getTypeFullName(System.InvalidOperationException), "Name");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.isClass(System.InvalidOperationException), "IsClass");
            Bridge.Test.NUnit.Assert.areEqual$1(System.Exception, Bridge.Reflection.getBaseType(System.InvalidOperationException), "BaseType");
            var d = new System.InvalidOperationException();
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(d, System.InvalidOperationException), "is InvalidOperationException");
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(d, System.Exception), "is Exception");

            var interfaces = Bridge.Reflection.getInterfaces(System.InvalidOperationException);
            Bridge.Test.NUnit.Assert.areEqual$1(0, interfaces.length, "Interfaces length");
        },
        defaultConstructorWorks: function () {
            var ex = new System.InvalidOperationException();
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(ex, System.InvalidOperationException), "is InvalidOperationException");
            Bridge.Test.NUnit.Assert.true$1(ex.InnerException == null, "InnerException");
            Bridge.Test.NUnit.Assert.areEqual("Operation is not valid due to the current state of the object.", ex.Message);
        },
        constructorWithMessageWorks: function () {
            var ex = new System.InvalidOperationException("The message");
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(ex, System.InvalidOperationException), "is InvalidOperationException");
            Bridge.Test.NUnit.Assert.true$1(ex.InnerException == null, "InnerException");
            Bridge.Test.NUnit.Assert.areEqual("The message", ex.Message);
        },
        constructorWithMessageAndInnerExceptionWorks: function () {
            var inner = new System.Exception("a");
            var ex = new System.InvalidOperationException("The message", inner);
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(ex, System.InvalidOperationException), "is InvalidOperationException");
            Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(ex.InnerException, inner), "InnerException");
            Bridge.Test.NUnit.Assert.areEqual("The message", ex.Message);
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.Exceptions.KeyNotFoundExceptionTests", {
        typePropertiesAreCorrect: function () {
            Bridge.Test.NUnit.Assert.areEqual$1("System.Collections.Generic.KeyNotFoundException", Bridge.Reflection.getTypeFullName(System.Collections.Generic.KeyNotFoundException), "Name");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.isClass(System.Collections.Generic.KeyNotFoundException), "IsClass");
            Bridge.Test.NUnit.Assert.areEqual$1(System.Exception, Bridge.Reflection.getBaseType(System.Collections.Generic.KeyNotFoundException), "BaseType");
            var d = new System.Collections.Generic.KeyNotFoundException();
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(d, System.Collections.Generic.KeyNotFoundException), "is KeyNotFoundException");
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(d, System.Exception), "is Exception");

            var interfaces = Bridge.Reflection.getInterfaces(System.Collections.Generic.KeyNotFoundException);
            Bridge.Test.NUnit.Assert.areEqual$1(0, interfaces.length, "Interfaces length");
        },
        defaultConstructorWorks: function () {
            var ex = new System.Collections.Generic.KeyNotFoundException();
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(ex, System.Collections.Generic.KeyNotFoundException), "is KeyNotFoundException");
            Bridge.Test.NUnit.Assert.true$1(ex.InnerException == null, "InnerException");
            Bridge.Test.NUnit.Assert.areEqual("Key not found.", ex.Message);
        },
        constructorWithMessageWorks: function () {
            var ex = new System.Collections.Generic.KeyNotFoundException("The message");
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(ex, System.Collections.Generic.KeyNotFoundException), "is KeyNotFoundException");
            Bridge.Test.NUnit.Assert.true$1(ex.InnerException == null, "InnerException");
            Bridge.Test.NUnit.Assert.areEqual("The message", ex.Message);
        },
        constructorWithMessageAndInnerExceptionWorks: function () {
            var inner = new System.Exception("a");
            var ex = new System.Collections.Generic.KeyNotFoundException("The message", inner);
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(ex, System.Collections.Generic.KeyNotFoundException), "is KeyNotFoundException");
            Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(ex.InnerException, inner), "InnerException");
            Bridge.Test.NUnit.Assert.areEqual("The message", ex.Message);
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.Exceptions.NotImplementedExceptionTests", {
        typePropertiesAreCorrect: function () {
            Bridge.Test.NUnit.Assert.areEqual$1("System.NotImplementedException", Bridge.Reflection.getTypeFullName(System.NotImplementedException), "Name");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.isClass(System.NotImplementedException), "IsClass");
            Bridge.Test.NUnit.Assert.areEqual$1(System.Exception, Bridge.Reflection.getBaseType(System.NotImplementedException), "BaseType");
            var d = new System.NotImplementedException();
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(d, System.NotImplementedException), "is NotImplementedException");
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(d, System.Exception), "is Exception");

            var interfaces = Bridge.Reflection.getInterfaces(System.NotImplementedException);
            Bridge.Test.NUnit.Assert.areEqual$1(0, interfaces.length, "Interfaces length");
        },
        defaultConstructorWorks: function () {
            var ex = new System.NotImplementedException();
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(ex, System.NotImplementedException), "is NotImplementedException");
            Bridge.Test.NUnit.Assert.true$1(ex.InnerException == null, "InnerException");
            Bridge.Test.NUnit.Assert.areEqual("The method or operation is not implemented.", ex.Message);
        },
        constructorWithMessageWorks: function () {
            var ex = new System.NotImplementedException("The message");
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(ex, System.NotImplementedException), "is NotImplementedException");
            Bridge.Test.NUnit.Assert.true$1(ex.InnerException == null, "InnerException");
            Bridge.Test.NUnit.Assert.areEqual("The message", ex.Message);
        },
        constructorWithMessageAndInnerExceptionWorks: function () {
            var inner = new System.Exception("a");
            var ex = new System.NotImplementedException("The message", inner);
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(ex, System.NotImplementedException), "is NotImplementedException");
            Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(ex.InnerException, inner), "InnerException");
            Bridge.Test.NUnit.Assert.areEqual("The message", ex.Message);
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.Exceptions.NotSupportedExceptionTests", {
        typePropertiesAreCorrect: function () {
            Bridge.Test.NUnit.Assert.areEqual$1("System.NotSupportedException", Bridge.Reflection.getTypeFullName(System.NotSupportedException), "Name");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.isClass(System.NotSupportedException), "IsClass");
            Bridge.Test.NUnit.Assert.areEqual$1(System.Exception, Bridge.Reflection.getBaseType(System.NotSupportedException), "BaseType");
            var d = new System.NotSupportedException();
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(d, System.NotSupportedException), "is NotSupportedException");
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(d, System.Exception), "is Exception");

            var interfaces = Bridge.Reflection.getInterfaces(System.NotSupportedException);
            Bridge.Test.NUnit.Assert.areEqual$1(0, interfaces.length, "Interfaces length");
        },
        defaultConstructorWorks: function () {
            var ex = new System.NotSupportedException();
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(ex, System.NotSupportedException), "is NotSupportedException");
            Bridge.Test.NUnit.Assert.true$1(ex.InnerException == null, "InnerException");
            Bridge.Test.NUnit.Assert.areEqual("Specified method is not supported.", ex.Message);
        },
        constructorWithMessageWorks: function () {
            var ex = new System.NotSupportedException("The message");
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(ex, System.NotSupportedException), "is NotSupportedException");
            Bridge.Test.NUnit.Assert.true$1(ex.InnerException == null, "InnerException");
            Bridge.Test.NUnit.Assert.areEqual("The message", ex.Message);
        },
        constructorWithMessageAndInnerExceptionWorks: function () {
            var inner = new System.Exception("a");
            var ex = new System.NotSupportedException("The message", inner);
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(ex, System.NotSupportedException), "is NotSupportedException");
            Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(ex.InnerException, inner), "InnerException");
            Bridge.Test.NUnit.Assert.areEqual("The message", ex.Message);
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.Exceptions.NullReferenceExceptionTests", {
        typePropertiesAreCorrect: function () {
            Bridge.Test.NUnit.Assert.areEqual$1("System.NullReferenceException", Bridge.Reflection.getTypeFullName(System.NullReferenceException), "Name");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.isClass(System.NullReferenceException), "IsClass");
            Bridge.Test.NUnit.Assert.areEqual$1(System.Exception, Bridge.Reflection.getBaseType(System.NullReferenceException), "BaseType");
            var d = new System.NullReferenceException();
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(d, System.NullReferenceException), "is NullReferenceException");
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(d, System.Exception), "is Exception");

            var interfaces = Bridge.Reflection.getInterfaces(System.NullReferenceException);
            Bridge.Test.NUnit.Assert.areEqual$1(0, interfaces.length, "Interfaces length");
        },
        defaultConstructorWorks: function () {
            var ex = new System.NullReferenceException();
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(ex, System.NullReferenceException), "is NullReferenceException");
            Bridge.Test.NUnit.Assert.true$1(ex.InnerException == null, "InnerException");
            Bridge.Test.NUnit.Assert.areEqual("Object is null.", ex.Message);
        },
        constructorWithMessageWorks: function () {
            var ex = new System.NullReferenceException("The message");
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(ex, System.NullReferenceException), "is NullReferenceException");
            Bridge.Test.NUnit.Assert.true$1(ex.InnerException == null, "InnerException");
            Bridge.Test.NUnit.Assert.areEqual("The message", ex.Message);
        },
        constructorWithMessageAndInnerExceptionWorks: function () {
            var inner = new System.Exception("a");
            var ex = new System.NullReferenceException("The message", inner);
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(ex, System.NullReferenceException), "is NullReferenceException");
            Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(ex.InnerException, inner), "InnerException");
            Bridge.Test.NUnit.Assert.areEqual("The message", ex.Message);
        },
        accessingAFieldOnANullObjectCausesANullReferenceException: function () {
            try {
                var d = null;
                var x = d.someField;
                Bridge.Test.NUnit.Assert.fail$1("A NullReferenceException should have been thrown");
            }
            catch ($e1) {
                $e1 = System.Exception.create($e1);
                var ex;
                if (Bridge.is($e1, System.NullReferenceException)) {
                    ex = $e1;
                    var inner = ex.InnerException;
                    Bridge.Test.NUnit.Assert.notNull$1(inner, "Inner Exception");
                    Bridge.Test.NUnit.Assert.true$1(Bridge.is(inner, Bridge.ErrorException), "Inner is ErrorException");
                } else {
                    ex = $e1;
                    Bridge.Test.NUnit.Assert.fail$1(System.String.concat("Expected NullReferenceException, got type ", Bridge.getType(ex)));
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.Exceptions.OperationCanceledExceptionTests", {
        typePropertiesAreCorrect: function () {
            Bridge.Test.NUnit.Assert.areEqual$1("System.OperationCanceledException", Bridge.Reflection.getTypeFullName(System.OperationCanceledException), "Name");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.isClass(System.OperationCanceledException), "IsClass");
            Bridge.Test.NUnit.Assert.areEqual$1(System.Exception, Bridge.Reflection.getBaseType(System.OperationCanceledException), "BaseType");
            var d = new System.OperationCanceledException();
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(d, System.OperationCanceledException), "is OperationCanceledException");
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(d, System.Exception), "is Exception");

            var interfaces = Bridge.Reflection.getInterfaces(System.OperationCanceledException);
            Bridge.Test.NUnit.Assert.areEqual$1(0, interfaces.length, "Interfaces length");
        },
        defaultConstructorWorks: function () {
            var ex = new System.OperationCanceledException();
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(ex, System.OperationCanceledException), "is OperationCanceledException");
            Bridge.Test.NUnit.Assert.areEqual$1("Operation was canceled.", ex.Message, "Message");
            Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(ex.cancellationToken, System.Threading.CancellationToken.none), "CancellationToken");
            Bridge.Test.NUnit.Assert.null$1(ex.InnerException, "InnerException");
        },
        cancellationTokenOnlyConstructorWorks: function () {
            var ct = new System.Threading.CancellationToken();
            var ex = new System.OperationCanceledException(null, ct);
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(ex, System.OperationCanceledException), "is OperationCanceledException");
            Bridge.Test.NUnit.Assert.areEqual$1("Operation was canceled.", ex.Message, "Message");
            Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(ex.cancellationToken, ct), "CancellationToken");
            Bridge.Test.NUnit.Assert.null$1(ex.InnerException, "InnerException");
        },
        messageOnlyConstructorWorks: function () {
            var ex = new System.OperationCanceledException("Some message", System.Threading.CancellationToken.none);
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(ex, System.OperationCanceledException), "is OperationCanceledException");
            Bridge.Test.NUnit.Assert.areEqual$1("Some message", ex.Message, "Message");
            Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(ex.cancellationToken, System.Threading.CancellationToken.none), "CancellationToken");
            Bridge.Test.NUnit.Assert.null$1(ex.InnerException, "InnerException");
        },
        messageAndInnerExceptionConstructorWorks: function () {
            var innerException = new System.Exception();
            var ex = new System.OperationCanceledException("Some message", System.Threading.CancellationToken.none, innerException);
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(ex, System.OperationCanceledException), "is OperationCanceledException");
            Bridge.Test.NUnit.Assert.areEqual$1("Some message", ex.Message, "Message");
            Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(ex.cancellationToken, System.Threading.CancellationToken.none), "CancellationToken");
            Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(ex.InnerException, innerException), "InnerException");
        },
        messageAndCancellationTokenConstructorWorks: function () {
            var ct = new System.Threading.CancellationToken();
            var ex = new System.OperationCanceledException("Some message", ct);
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(ex, System.OperationCanceledException), "is OperationCanceledException");
            Bridge.Test.NUnit.Assert.areEqual$1("Some message", ex.Message, "Message");
            Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(ex.cancellationToken, ct), "CancellationToken");
            Bridge.Test.NUnit.Assert.null$1(ex.InnerException, "InnerException");
        },
        messageAndInnerExceptionAndCancellationTokenConstructorWorks: function () {
            var ct = new System.Threading.CancellationToken();
            var innerException = new System.Exception();
            var ex = new System.OperationCanceledException("Some message", ct, innerException);
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(ex, System.OperationCanceledException), "is OperationCanceledException");
            Bridge.Test.NUnit.Assert.areEqual$1("Some message", ex.Message, "Message");
            Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(ex.cancellationToken, ct), "CancellationToken");
            Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(ex.InnerException, innerException), "InnerException");
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.Exceptions.OverflowExceptionTests", {
        typePropertiesAreCorrect: function () {
            Bridge.Test.NUnit.Assert.areEqual$1("System.OverflowException", Bridge.Reflection.getTypeFullName(System.OverflowException), "Name");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.isClass(System.OverflowException), "IsClass");
            Bridge.Test.NUnit.Assert.areEqual$1(System.ArithmeticException, Bridge.Reflection.getBaseType(System.OverflowException), "BaseType");
            var d = new System.OverflowException();
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(d, System.OverflowException), "is OverflowException");
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(d, System.Exception), "is Exception");

            var interfaces = Bridge.Reflection.getInterfaces(System.OverflowException);
            Bridge.Test.NUnit.Assert.areEqual$1(0, interfaces.length, "Interfaces length");
        },
        defaultConstructorWorks: function () {
            var ex = new System.OverflowException();
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(ex, System.OverflowException), "is OverflowException");
            Bridge.Test.NUnit.Assert.true$1(ex.InnerException == null, "InnerException");
            Bridge.Test.NUnit.Assert.areEqual("Arithmetic operation resulted in an overflow.", ex.Message);
        },
        constructorWithMessageWorks: function () {
            var ex = new System.OverflowException("The message");
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(ex, System.OverflowException), "is OverflowException");
            Bridge.Test.NUnit.Assert.true$1(ex.InnerException == null, "InnerException");
            Bridge.Test.NUnit.Assert.areEqual("The message", ex.Message);
        },
        constructorWithMessageAndInnerExceptionWorks: function () {
            var inner = new System.Exception("a");
            var ex = new System.OverflowException("The message", inner);
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(ex, System.OverflowException), "is OverflowException");
            Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(ex.InnerException, inner), "InnerException");
            Bridge.Test.NUnit.Assert.areEqual("The message", ex.Message);
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.Exceptions.PromiseExceptionTests", {
        typePropertiesAreCorrect: function () {
            Bridge.Test.NUnit.Assert.areEqual$1("Bridge.PromiseException", Bridge.Reflection.getTypeFullName(Bridge.PromiseException), "Name");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.isClass(Bridge.PromiseException), "IsClass");
            Bridge.Test.NUnit.Assert.areEqual$1(System.Exception, Bridge.Reflection.getBaseType(Bridge.PromiseException), "BaseType");
            var d = new Bridge.PromiseException(System.Array.init(0, null, System.Object));
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(d, Bridge.PromiseException), "is PromiseException");
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(d, System.Exception), "is Exception");

            var interfaces = Bridge.Reflection.getInterfaces(Bridge.PromiseException);
            Bridge.Test.NUnit.Assert.areEqual$1(0, interfaces.length, "Interfaces length");
        },
        argumentsOnlyConstructorWorks: function () {
            var args = System.Array.init(["a", Bridge.box(1, System.Int32)], System.Object);
            var ex = new Bridge.PromiseException(args);
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(ex, Bridge.PromiseException), "is PromiseException");
            Bridge.Test.NUnit.Assert.areEqual$1(Bridge.unbox(args), Bridge.unbox(ex.arguments), "Arguments");
            Bridge.Test.NUnit.Assert.true$1(ex.InnerException == null, "InnerException");
            //#1528
            Bridge.Test.NUnit.Assert.areEqual$1("Promise exception: [a, 1]", ex.Message, "Message");
        },
        argumentsAndMessageConstructorWorks: function () {
            var args = System.Array.init(["a", Bridge.box(1, System.Int32)], System.Object);
            var ex = new Bridge.PromiseException(args, "Some message");
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(ex, Bridge.PromiseException), "is PromiseException");
            Bridge.Test.NUnit.Assert.true$1(ex.InnerException == null, "InnerException");
            Bridge.Test.NUnit.Assert.areEqual$1(Bridge.unbox(args), Bridge.unbox(ex.arguments), "Arguments");
            Bridge.Test.NUnit.Assert.areEqual$1("Some message", ex.Message, "Message");
        },
        argumentsAndMessageAndInnerExceptionConstructorWorks: function () {
            var inner = new System.Exception("a");
            var args = System.Array.init(["a", Bridge.box(1, System.Int32)], System.Object);
            var ex = new Bridge.PromiseException(args, "Some message", inner);
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(ex, Bridge.PromiseException), "is PromiseException");
            Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(ex.InnerException, inner), "InnerException");
            Bridge.Test.NUnit.Assert.areEqual$1(Bridge.unbox(args), Bridge.unbox(ex.arguments), "Arguments");
            Bridge.Test.NUnit.Assert.areEqual$1("Some message", ex.Message, "Message");
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.Exceptions.TaskCanceledExceptionTests", {
        typePropertiesAreCorrect: function () {
            Bridge.Test.NUnit.Assert.areEqual$1("System.Threading.Tasks.TaskCanceledException", Bridge.Reflection.getTypeFullName(System.Threading.Tasks.TaskCanceledException), "Name");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.isClass(System.Threading.Tasks.TaskCanceledException), "IsClass");
            Bridge.Test.NUnit.Assert.areEqual$1(System.OperationCanceledException, Bridge.Reflection.getBaseType(System.Threading.Tasks.TaskCanceledException), "BaseType");
            var d = new System.Threading.Tasks.TaskCanceledException();
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(d, System.Threading.Tasks.TaskCanceledException), "is TaskCanceledException");
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(d, System.OperationCanceledException), "is OperationCanceledException");
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(d, System.Exception), "is Exception");

            var interfaces = Bridge.Reflection.getInterfaces(System.Threading.Tasks.TaskCanceledException);
            Bridge.Test.NUnit.Assert.areEqual$1(0, interfaces.length, "Interfaces length");
        },
        defaultConstructorWorks: function () {
            var ex = new System.Threading.Tasks.TaskCanceledException();
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(ex, System.Threading.Tasks.TaskCanceledException), "is TaskCanceledException");
            Bridge.Test.NUnit.Assert.areEqual$1("A task was canceled.", ex.Message, "Message");
            Bridge.Test.NUnit.Assert.null$1(ex.task, "Task");
            Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(ex.cancellationToken, System.Threading.CancellationToken.none), "CancellationToken");
            Bridge.Test.NUnit.Assert.null$1(ex.InnerException, "InnerException");
        },
        messageOnlyConstructorWorks: function () {
            var ex = new System.Threading.Tasks.TaskCanceledException("Some message");
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(ex, System.Threading.Tasks.TaskCanceledException), "is TaskCanceledException");
            Bridge.Test.NUnit.Assert.areEqual$1("Some message", ex.Message, "Message");
            Bridge.Test.NUnit.Assert.null$1(ex.task, "Task");
            Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(ex.cancellationToken, System.Threading.CancellationToken.none), "CancellationToken");
            Bridge.Test.NUnit.Assert.null$1(ex.InnerException, "InnerException");
        },
        taskOnlyConstructorWorks: function () {
            var task = new System.Threading.Tasks.TaskCompletionSource().task;
            var ex = new System.Threading.Tasks.TaskCanceledException(null, task);
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(ex, System.Threading.Tasks.TaskCanceledException), "is TaskCanceledException");
            Bridge.Test.NUnit.Assert.areEqual$1("A task was canceled.", ex.Message, "Message");
            Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(ex.task, task), "Task");
            Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(ex.cancellationToken, System.Threading.CancellationToken.none), "CancellationToken");
            Bridge.Test.NUnit.Assert.null$1(ex.InnerException, "InnerException");
        },
        messageAndInnerExceptionConstructorWorks: function () {
            var innerException = new System.Exception();
            var ex = new System.Threading.Tasks.TaskCanceledException("Some message", null, innerException);
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(ex, System.Threading.Tasks.TaskCanceledException), "is TaskCanceledException");
            Bridge.Test.NUnit.Assert.areEqual$1("Some message", ex.Message, "Message");
            Bridge.Test.NUnit.Assert.null$1(ex.task, "Task");
            Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(ex.cancellationToken, System.Threading.CancellationToken.none), "CancellationToken");
            Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(ex.InnerException, innerException), "InnerException");
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.ExceptionTests", {
        throwingAndCatchingExceptionsWorks: function () {
            try {
                throw new Bridge.ClientTest.Batch4.ExceptionTests.E2("The message");
            }
            catch ($e1) {
                $e1 = System.Exception.create($e1);
                var e;
                if (Bridge.is($e1, Bridge.ClientTest.Batch4.ExceptionTests.E2)) {
                    e = $e1;
                    Bridge.Test.NUnit.Assert.areEqual("The message", e.Message);
                    return;
                } else {
                    throw $e1;
                }
            }
        },
        exceptionOfWrongTypeIsNotCaught: function () {
            try {
                throw new Bridge.ClientTest.Batch4.ExceptionTests.E1("The message");
            }
            catch ($e1) {
                $e1 = System.Exception.create($e1);
                var e;
                if (Bridge.is($e1, Bridge.ClientTest.Batch4.ExceptionTests.E2)) {
                    Bridge.Test.NUnit.Assert.fail$1("Should not catch E2");
                } else if (Bridge.is($e1, Bridge.ClientTest.Batch4.ExceptionTests.E1)) {
                    e = $e1;
                    Bridge.Test.NUnit.Assert.areEqual("The message", e.Message);
                    return;
                } else {
                    throw $e1;
                }
            }
            Bridge.Test.NUnit.Assert.fail$1("Should not get to statement after catch");
        },
        canCatchExceptionAsBaseType: function () {
            try {
                throw new Bridge.ClientTest.Batch4.ExceptionTests.E2("The message");
            }
            catch ($e1) {
                $e1 = System.Exception.create($e1);
                var e;
                if (Bridge.is($e1, Bridge.ClientTest.Batch4.ExceptionTests.E1)) {
                    e = $e1;
                    Bridge.Test.NUnit.Assert.areEqual("The message", e.Message);
                    return;
                } else {
                    throw $e1;
                }
            }
        },
        canCatchStringAsException: function () {
            try {
                (function() {{ throw 'The message'; }})();
                Bridge.Test.NUnit.Assert.fail$1("Should not get to statement after throw");
            }
            catch ($e1) {
                $e1 = System.Exception.create($e1);
                var e;
                if (Bridge.is($e1, Bridge.ClientTest.Batch4.ExceptionTests.E1)) {
                    Bridge.Test.NUnit.Assert.fail$1("Should not catch E1");
                } else {
                    e = $e1;
                    Bridge.Test.NUnit.Assert.areEqual("The message", e.Message);
                    return;
                }
            }
            Bridge.Test.NUnit.Assert.fail$1("Should not get to statement after catch");
        },
        canCatchStringAsCatchAll: function () {
            try {
                (function() {{ throw 'The message'; }})();
                Bridge.Test.NUnit.Assert.fail$1("Should not get to statement after throw");
            }
            catch ($e1) {
                $e1 = System.Exception.create($e1);
                if (Bridge.is($e1, Bridge.ClientTest.Batch4.ExceptionTests.E1)) {
                    Bridge.Test.NUnit.Assert.fail$1("Should not catch E1");
                } else {
                    return;
                }
            }
            Bridge.Test.NUnit.Assert.fail$1("Should not get to statement after catch");
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.ExceptionTests.E1", {
        inherits: [System.Exception],
        ctor: function (message) {
            this.$initialize();
            System.Exception.ctor.call(this, message);
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.FormattableStringTests", {
        typePropertiesAreCorrect: function () {
            var s = System.Runtime.CompilerServices.FormattableStringFactory.create("s");
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(s, System.FormattableString), "is FormattableString");
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(s, System.IFormattable), "is IFormattable");

            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.isClass(System.FormattableString), "IsClass");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.isAssignableFrom(System.IFormattable, System.FormattableString), "IFormattable.IsAssignableFrom");
            var interfaces = Bridge.Reflection.getInterfaces(System.FormattableString);
            Bridge.Test.NUnit.Assert.areEqual$1(1, interfaces.length, "interfaces length");
            Bridge.Test.NUnit.Assert.true$1(System.Array.contains(interfaces, System.IFormattable, Function), "interfaces contains IFormattable");
        },
        argumentCountWorks: function () {
            var s1 = System.Runtime.CompilerServices.FormattableStringFactory.create("{0}", ["x"]);
            Bridge.Test.NUnit.Assert.areEqual$1(1, s1.ArgumentCount, "#1");
            var s2 = System.Runtime.CompilerServices.FormattableStringFactory.create("{0}, {1}", ["x", "y"]);
            Bridge.Test.NUnit.Assert.areEqual$1(2, s2.ArgumentCount, "#2");
        },
        formatWorks: function () {
            var s = System.Runtime.CompilerServices.FormattableStringFactory.create("x = {0}, y = {1}", ["x", "y"]);
            Bridge.Test.NUnit.Assert.areEqual("x = {0}, y = {1}", s.Format);
        },
        getArgumentWorks: function () {
            var s = System.Runtime.CompilerServices.FormattableStringFactory.create("x = {0}, y = {1}", ["x", "y"]);
            Bridge.Test.NUnit.Assert.areEqual$1("x", Bridge.unbox(s.getArgument(0)), "0");
            Bridge.Test.NUnit.Assert.areEqual$1("y", Bridge.unbox(s.getArgument(1)), "1");
        },
        getArgumentsWorks: function () {
            var s = System.Runtime.CompilerServices.FormattableStringFactory.create("x = {0}, y = {1}", ["x", "y"]);
            var args = s.getArguments();
            Bridge.Test.NUnit.Assert.areEqual$1("x", Bridge.unbox(args[System.Array.index(0, args)]), "0");
            Bridge.Test.NUnit.Assert.areEqual$1("y", Bridge.unbox(args[System.Array.index(1, args)]), "1");
        },
        arrayReturnedByGetArgumentsCanBeModified: function () {
            var s = System.Runtime.CompilerServices.FormattableStringFactory.create("x = {0}, y = {1}", ["x", "y"]);
            var args = s.getArguments();
            Bridge.Test.NUnit.Assert.areEqual$1("x", Bridge.unbox(args[System.Array.index(0, args)]), "#1");
            args[System.Array.index(0, args)] = "z";
            var args2 = s.getArguments();
            Bridge.Test.NUnit.Assert.areEqual$1("z", Bridge.unbox(args2[System.Array.index(0, args2)]), "#2");
            Bridge.Test.NUnit.Assert.areEqual$1("x = z, y = y", s.toString(), "#3");
        },
        toStringWorks: function () {
            var s = System.Runtime.CompilerServices.FormattableStringFactory.create("x = {0}, y = {1:x}", ["x", Bridge.box(291, System.Int32)]);
            Bridge.Test.NUnit.Assert.areEqual("x = x, y = 123", s.toString());
        },
        toStringWithFormatProviderWorks_SPI_1651: function () {
            var s = System.Runtime.CompilerServices.FormattableStringFactory.create("x = {0}, y = {0:FMT}", [new Bridge.ClientTest.Batch4.FormattableStringTests.MyFormattable()]);
            // #1651
            Bridge.Test.NUnit.Assert.areEqual("x = Formatted: MyFormatProvider, y = Formatted: FMT, MyFormatProvider", s.toString$1(new Bridge.ClientTest.Batch4.FormattableStringTests.MyFormatProvider()));
        },
        iFormattableToStringWorks_SPI_1633_1651: function () {
            var s = System.Runtime.CompilerServices.FormattableStringFactory.create("x = {0}, y = {0:FMT}", [new Bridge.ClientTest.Batch4.FormattableStringTests.MyFormattable()]);
            // #1633
            // #1651
            Bridge.Test.NUnit.Assert.areEqual("x = Formatted: MyFormatProvider, y = Formatted: FMT, MyFormatProvider", Bridge.format(s, null, new Bridge.ClientTest.Batch4.FormattableStringTests.MyFormatProvider()));
        },
        invariantWorks: function () {
            var s = System.Runtime.CompilerServices.FormattableStringFactory.create("x = {0}, y = {1:x}", ["x", Bridge.box(291, System.Int32)]);
            Bridge.Test.NUnit.Assert.areEqual("x = x, y = 123", System.FormattableString.invariant(s));
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.FormattableStringTests.MyFormatProvider", {
        inherits: [System.IFormatProvider],
        config: {
            alias: [
            "getFormat", "System$IFormatProvider$getFormat"
            ]
        },
        getFormat: function (type) {
            return System.Globalization.CultureInfo.invariantCulture.getFormat(type);
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.FormattableStringTests.MyFormattable", {
        inherits: [System.IFormattable],
        config: {
            alias: [
            "format", "System$IFormattable$format"
            ]
        },
        format: function (format, formatProvider) {
            return System.String.concat("Formatted: ", (!System.String.isNullOrEmpty(format) ? System.String.concat(format, ", ") : ""), Bridge.Reflection.getTypeName(Bridge.getType(formatProvider)));
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.GuidTests", {
        typePropertiesAreCorrect: function () {
            Bridge.Test.NUnit.Assert.areEqual("System.Guid", Bridge.Reflection.getTypeFullName(System.Guid));
            Bridge.Test.NUnit.Assert.false(Bridge.Reflection.isClass(System.Guid));
            Bridge.Test.NUnit.Assert.true(Bridge.Reflection.isAssignableFrom(System.IComparable$1(System.Guid), System.Guid));
            Bridge.Test.NUnit.Assert.true(Bridge.Reflection.isAssignableFrom(System.IEquatable$1(System.Guid), System.Guid));
            var o = new System.Guid.ctor();
            Bridge.Test.NUnit.Assert.true(Bridge.is(o, System.Guid));
            Bridge.Test.NUnit.Assert.true(Bridge.is(o, System.IComparable$1(System.Guid)));
            Bridge.Test.NUnit.Assert.true(Bridge.is(o, System.IEquatable$1(System.Guid)));

            var interfaces = Bridge.Reflection.getInterfaces(System.Guid);
            Bridge.Test.NUnit.Assert.areEqual(3, interfaces.length);
            Bridge.Test.NUnit.Assert.true(System.Array.contains(interfaces, System.IComparable$1(System.Guid), Function));
            Bridge.Test.NUnit.Assert.true(System.Array.contains(interfaces, System.IEquatable$1(System.Guid), Function));

            Bridge.Test.NUnit.Assert.false(Bridge.is(Bridge.box(1, System.Int32), System.Guid));
            Bridge.Test.NUnit.Assert.false(Bridge.is("abcd", System.Guid));
            Bridge.Test.NUnit.Assert.false(Bridge.is("{00000000-0000-0000-0000-000000000000}", System.Guid));
        },
        defaultValueWorks: function () {
            var result = Bridge.getDefaultValue(System.Guid);
            Bridge.Test.NUnit.Assert.true(Bridge.is(result, System.Guid));
            Bridge.Test.NUnit.Assert.areEqual("00000000-0000-0000-0000-000000000000", result.toString());
        },
        createInstanceWorks: function () {
            var result = Bridge.createInstance(System.Guid);
            Bridge.Test.NUnit.Assert.true(Bridge.is(result, System.Guid));
            Bridge.Test.NUnit.Assert.areEqual("00000000-0000-0000-0000-000000000000", result.toString());
        },
        defaultConstructorWorks: function () {
            var result = new System.Guid.ctor();
            Bridge.Test.NUnit.Assert.true(Bridge.is(result, System.Guid));
            Bridge.Test.NUnit.Assert.areEqual("00000000-0000-0000-0000-000000000000", result.toString());
        },
        emptyWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual("00000000-0000-0000-0000-000000000000", System.Guid.empty.toString());
        },
        toStringWithoutArgumentsWorks: function () {
            var guid = new System.Guid.$ctor4("223310CC-1F48-4489-B87E-88C779C77CB3");
            Bridge.Test.NUnit.Assert.areEqual("223310cc-1f48-4489-b87e-88c779c77cb3", guid.toString());
        },
        byteArrayConstructorWorks: function () {
            var g = new System.Guid.$ctor1(System.Array.init([120, 149, 98, 168, 38, 122, 69, 97, 144, 50, 217, 26, 61, 84, 189, 104], System.Byte));
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(g, System.Guid), "Should be Guid");
            Bridge.Test.NUnit.Assert.areEqual$1("a8629578-7a26-6145-9032-d91a3d54bd68", g.toString(), "value");
            Bridge.Test.NUnit.Assert.throws$4($asm.$.Bridge.ClientTest.Batch4.GuidTests.f1, System.ArgumentException, "Invalid array should throw");
        },
        int32Int16Int16ByteArrayConstructorWorks: function () {
            var g = new System.Guid.$ctor3(2023056040, 9850, 17761, System.Array.init([144, 50, 217, 26, 61, 84, 189, 104], System.Byte));
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(g, System.Guid), "Should be Guid");
            Bridge.Test.NUnit.Assert.areEqual$1("789562a8-267a-4561-9032-d91a3d54bd68", g.toString(), "value");
        },
        int32Int16Int16BytesConstructorWorks: function () {
            var g = new System.Guid.$ctor2(2023056040, 9850, 17761, 144, 50, 217, 26, 61, 84, 189, 104);
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(g, System.Guid), "Should be Guid");
            Bridge.Test.NUnit.Assert.areEqual$1("789562a8-267a-4561-9032-d91a3d54bd68", g.toString(), "value");
        },
        uInt32UInt16UInt16BytesConstructorWorks: function () {
            var g = new System.Guid.$ctor5(2023056040, 9850, 17761, 144, 50, 217, 26, 61, 84, 189, 104);
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(g, System.Guid), "Should be Guid");
            Bridge.Test.NUnit.Assert.areEqual$1("789562a8-267a-4561-9032-d91a3d54bd68", g.toString(), "value");
        },
        stringConstructorWorks: function () {
            var g1 = new System.Guid.$ctor4("A6993C0A-A8CB-45D9-994B-90E7203E4FC6");
            var g2 = new System.Guid.$ctor4("{A6993C0A-A8CB-45D9-994B-90E7203E4FC6}");
            var g3 = new System.Guid.$ctor4("(A6993C0A-A8CB-45D9-994B-90E7203E4FC6)");
            var g4 = new System.Guid.$ctor4("A6993C0AA8CB45D9994B90E7203E4FC6");
            Bridge.Test.NUnit.Assert.true(Bridge.is(g1, System.Guid));
            Bridge.Test.NUnit.Assert.true(Bridge.is(g2, System.Guid));
            Bridge.Test.NUnit.Assert.true(Bridge.is(g3, System.Guid));
            Bridge.Test.NUnit.Assert.true(Bridge.is(g4, System.Guid));
            Bridge.Test.NUnit.Assert.areEqual$1("a6993c0a-a8cb-45d9-994b-90e7203e4fc6", g1.toString(), "g1");
            Bridge.Test.NUnit.Assert.areEqual$1("a6993c0a-a8cb-45d9-994b-90e7203e4fc6", g2.toString(), "g2");
            Bridge.Test.NUnit.Assert.areEqual$1("a6993c0a-a8cb-45d9-994b-90e7203e4fc6", g3.toString(), "g3");
            Bridge.Test.NUnit.Assert.areEqual$1("a6993c0a-a8cb-45d9-994b-90e7203e4fc6", g4.toString(), "g4");
            Bridge.Test.NUnit.Assert.throws$4($asm.$.Bridge.ClientTest.Batch4.GuidTests.f2, System.FormatException, "Invalid should throw");
        },
        parseWorks: function () {
            var g1 = System.Guid.parse("A6993C0A-A8CB-45D9-994B-90E7203E4FC6");
            var g2 = System.Guid.parse("{A6993C0A-A8CB-45D9-994B-90E7203E4FC6}");
            var g3 = System.Guid.parse("(A6993C0A-A8CB-45D9-994B-90E7203E4FC6)");
            var g4 = System.Guid.parse("A6993C0AA8CB45D9994B90E7203E4FC6");
            Bridge.Test.NUnit.Assert.true(Bridge.is(g1, System.Guid));
            Bridge.Test.NUnit.Assert.true(Bridge.is(g2, System.Guid));
            Bridge.Test.NUnit.Assert.true(Bridge.is(g3, System.Guid));
            Bridge.Test.NUnit.Assert.true(Bridge.is(g4, System.Guid));
            Bridge.Test.NUnit.Assert.areEqual$1("a6993c0a-a8cb-45d9-994b-90e7203e4fc6", g1.toString(), "g1");
            Bridge.Test.NUnit.Assert.areEqual$1("a6993c0a-a8cb-45d9-994b-90e7203e4fc6", g2.toString(), "g2");
            Bridge.Test.NUnit.Assert.areEqual$1("a6993c0a-a8cb-45d9-994b-90e7203e4fc6", g3.toString(), "g3");
            Bridge.Test.NUnit.Assert.areEqual$1("a6993c0a-a8cb-45d9-994b-90e7203e4fc6", g4.toString(), "g4");
            Bridge.Test.NUnit.Assert.throws$4($asm.$.Bridge.ClientTest.Batch4.GuidTests.f3, System.FormatException, "Invalid should throw");
        },
        parseExactWorks: function () {
            var g1 = System.Guid.parseExact("A6993C0A-A8CB-45D9-994B-90E7203E4FC6", "D");
            var g2 = System.Guid.parseExact("{A6993C0A-A8CB-45D9-994B-90E7203E4FC6}", "B");
            var g3 = System.Guid.parseExact("(A6993C0A-A8CB-45D9-994B-90E7203E4FC6)", "P");
            var g4 = System.Guid.parseExact("A6993C0AA8CB45D9994B90E7203E4FC6", "N");
            Bridge.Test.NUnit.Assert.true(Bridge.is(g1, System.Guid));
            Bridge.Test.NUnit.Assert.true(Bridge.is(g2, System.Guid));
            Bridge.Test.NUnit.Assert.true(Bridge.is(g3, System.Guid));
            Bridge.Test.NUnit.Assert.true(Bridge.is(g4, System.Guid));
            Bridge.Test.NUnit.Assert.areEqual$1("a6993c0a-a8cb-45d9-994b-90e7203e4fc6", g1.toString(), "g1");
            Bridge.Test.NUnit.Assert.areEqual$1("a6993c0a-a8cb-45d9-994b-90e7203e4fc6", g2.toString(), "g2");
            Bridge.Test.NUnit.Assert.areEqual$1("a6993c0a-a8cb-45d9-994b-90e7203e4fc6", g3.toString(), "g3");
            Bridge.Test.NUnit.Assert.areEqual$1("a6993c0a-a8cb-45d9-994b-90e7203e4fc6", g4.toString(), "g4");
            Bridge.Test.NUnit.Assert.throws$4($asm.$.Bridge.ClientTest.Batch4.GuidTests.f4, System.FormatException, "Invalid B should throw");
            Bridge.Test.NUnit.Assert.throws$4($asm.$.Bridge.ClientTest.Batch4.GuidTests.f5, System.FormatException, "Invalid P should throw");
            Bridge.Test.NUnit.Assert.throws$4($asm.$.Bridge.ClientTest.Batch4.GuidTests.f6, System.FormatException, "Invalid N should throw");
            Bridge.Test.NUnit.Assert.throws$4($asm.$.Bridge.ClientTest.Batch4.GuidTests.f7, System.FormatException, "Invalid D should throw");
        },
        tryParseWorks: function () {
            var g1 = { v : new System.Guid() }, g2 = { v : new System.Guid() }, g3 = { v : new System.Guid() }, g4 = { v : new System.Guid() }, g5 = { v : new System.Guid() };
            Bridge.Test.NUnit.Assert.true$1(System.Guid.tryParse("A6993C0A-A8CB-45D9-994B-90E7203E4FC6", g1), "g1 result");
            Bridge.Test.NUnit.Assert.true$1(System.Guid.tryParse("{A6993C0A-A8CB-45D9-994B-90E7203E4FC6}", g2), "g2 result");
            Bridge.Test.NUnit.Assert.true$1(System.Guid.tryParse("(A6993C0A-A8CB-45D9-994B-90E7203E4FC6)", g3), "g3 result");
            Bridge.Test.NUnit.Assert.true$1(System.Guid.tryParse("A6993C0AA8CB45D9994B90E7203E4FC6", g4), "g4 result");
            Bridge.Test.NUnit.Assert.false$1(System.Guid.tryParse("x", g5), "Invalid should throw");
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(g1.v, System.Guid), "g1 is Guid");
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(g2.v, System.Guid), "g2 is Guid");
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(g3.v, System.Guid), "g3 is Guid");
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(g4.v, System.Guid), "g4 is Guid");
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(g5.v, System.Guid), "g5 is Guid");
            Bridge.Test.NUnit.Assert.areEqual$1("a6993c0a-a8cb-45d9-994b-90e7203e4fc6", g1.v.toString(), "g1");
            Bridge.Test.NUnit.Assert.areEqual$1("a6993c0a-a8cb-45d9-994b-90e7203e4fc6", g2.v.toString(), "g2");
            Bridge.Test.NUnit.Assert.areEqual$1("a6993c0a-a8cb-45d9-994b-90e7203e4fc6", g3.v.toString(), "g3");
            Bridge.Test.NUnit.Assert.areEqual$1("a6993c0a-a8cb-45d9-994b-90e7203e4fc6", g4.v.toString(), "g4");
            Bridge.Test.NUnit.Assert.areEqual$1("00000000-0000-0000-0000-000000000000", g5.v.toString(), "g5");
        },
        tryParseExactWorks: function () {
            var g1 = { v : new System.Guid() }, g2 = { v : new System.Guid() }, g3 = { v : new System.Guid() }, g4 = { v : new System.Guid() }, g5 = { v : new System.Guid() }, g6 = { v : new System.Guid() }, g7 = { v : new System.Guid() }, g8 = { v : new System.Guid() };
            Bridge.Test.NUnit.Assert.true$1(System.Guid.tryParseExact("A6993C0A-A8CB-45D9-994B-90E7203E4FC6", "D", g1), "g1 result");
            Bridge.Test.NUnit.Assert.true$1(System.Guid.tryParseExact("{A6993C0A-A8CB-45D9-994B-90E7203E4FC6}", "B", g2), "g2 result");
            Bridge.Test.NUnit.Assert.true$1(System.Guid.tryParseExact("(A6993C0A-A8CB-45D9-994B-90E7203E4FC6)", "P", g3), "g3 result");
            Bridge.Test.NUnit.Assert.true$1(System.Guid.tryParseExact("A6993C0AA8CB45D9994B90E7203E4FC6", "N", g4), "g4 result");
            Bridge.Test.NUnit.Assert.false$1(System.Guid.tryParseExact("A6993C0A-A8CB-45D9-994B-90E7203E4FC6", "B", g5), "g5 result");
            Bridge.Test.NUnit.Assert.false$1(System.Guid.tryParseExact("A6993C0A-A8CB-45D9-994B-90E7203E4FC6", "P", g6), "g6 result");
            Bridge.Test.NUnit.Assert.false$1(System.Guid.tryParseExact("A6993C0A-A8CB-45D9-994B-90E7203E4FC6", "N", g7), "g7 result");
            Bridge.Test.NUnit.Assert.false$1(System.Guid.tryParseExact("A6993C0AA8CB45D9994B90E7203E4FC6", "D", g8), "g8 result");
            Bridge.Test.NUnit.Assert.true(Bridge.is(g1.v, System.Guid));
            Bridge.Test.NUnit.Assert.true(Bridge.is(g2.v, System.Guid));
            Bridge.Test.NUnit.Assert.true(Bridge.is(g3.v, System.Guid));
            Bridge.Test.NUnit.Assert.true(Bridge.is(g4.v, System.Guid));
            Bridge.Test.NUnit.Assert.true(Bridge.is(g5.v, System.Guid));
            Bridge.Test.NUnit.Assert.true(Bridge.is(g6.v, System.Guid));
            Bridge.Test.NUnit.Assert.true(Bridge.is(g7.v, System.Guid));
            Bridge.Test.NUnit.Assert.true(Bridge.is(g8.v, System.Guid));
            Bridge.Test.NUnit.Assert.areEqual$1("a6993c0a-a8cb-45d9-994b-90e7203e4fc6", g1.v.toString(), "g1");
            Bridge.Test.NUnit.Assert.areEqual$1("a6993c0a-a8cb-45d9-994b-90e7203e4fc6", g2.v.toString(), "g2");
            Bridge.Test.NUnit.Assert.areEqual$1("a6993c0a-a8cb-45d9-994b-90e7203e4fc6", g3.v.toString(), "g3");
            Bridge.Test.NUnit.Assert.areEqual$1("a6993c0a-a8cb-45d9-994b-90e7203e4fc6", g4.v.toString(), "g4");
            Bridge.Test.NUnit.Assert.areEqual$1("00000000-0000-0000-0000-000000000000", g5.v.toString(), "g5");
            Bridge.Test.NUnit.Assert.areEqual$1("00000000-0000-0000-0000-000000000000", g6.v.toString(), "g6");
            Bridge.Test.NUnit.Assert.areEqual$1("00000000-0000-0000-0000-000000000000", g7.v.toString(), "g7");
            Bridge.Test.NUnit.Assert.areEqual$1("00000000-0000-0000-0000-000000000000", g8.v.toString(), "g8");
        },
        compareToWorks: function () {
            var g = new System.Guid.$ctor4("F3D8B3C0-88F0-4148-844C-232ED03C153C");
            Bridge.Test.NUnit.Assert.areEqual$1(0, g.compareTo(new System.Guid.$ctor4("F3D8B3C0-88F0-4148-844C-232ED03C153C")), "equal");
            Bridge.Test.NUnit.Assert.areNotEqual$1(0, g.compareTo(new System.Guid.$ctor4("E4C221BE-9B39-4398-B82A-48BA4648CAE0")), "not equal");
        },
        iComparableCompareToWorks: function () {
            var g = Bridge.cast(new System.Guid.$ctor4("F3D8B3C0-88F0-4148-844C-232ED03C153C"), System.IComparable$1(System.Guid));
            Bridge.Test.NUnit.Assert.areEqual$1(0, Bridge.compare(g, new System.Guid.$ctor4("F3D8B3C0-88F0-4148-844C-232ED03C153C"), false, System.Guid), "Equal");
            Bridge.Test.NUnit.Assert.areNotEqual$1(0, Bridge.compare(g, new System.Guid.$ctor4("E4C221BE-9B39-4398-B82A-48BA4648CAE0"), false, System.Guid), "Not equal");
        },
        equalsObjectWorks: function () {
            var g = new System.Guid.$ctor4("F3D8B3C0-88F0-4148-844C-232ED03C153C");
            Bridge.Test.NUnit.Assert.true$1(g.equals(new System.Guid.$ctor4("F3D8B3C0-88F0-4148-844C-232ED03C153C")), "Equal");
            Bridge.Test.NUnit.Assert.false$1(g.equals(new System.Guid.$ctor4("E4C221BE-9B39-4398-B82A-48BA4648CAE0")), "Not equal");
            Bridge.Test.NUnit.Assert.false$1(g.equals("X"), "Not equal");
        },
        equalsGuidWorks: function () {
            var g = new System.Guid.$ctor4("F3D8B3C0-88F0-4148-844C-232ED03C153C");
            Bridge.Test.NUnit.Assert.true$1(g.equalsT(new System.Guid.$ctor4("F3D8B3C0-88F0-4148-844C-232ED03C153C")), "Equal");
            Bridge.Test.NUnit.Assert.false$1(g.equalsT(new System.Guid.$ctor4("E4C221BE-9B39-4398-B82A-48BA4648CAE0")), "Not equal");
        },
        iEquatableEqualsWorks: function () {
            var g = Bridge.cast(new System.Guid.$ctor4("F3D8B3C0-88F0-4148-844C-232ED03C153C"), System.IEquatable$1(System.Guid));
            Bridge.Test.NUnit.Assert.true$1(Bridge.equalsT(g, new System.Guid.$ctor4("F3D8B3C0-88F0-4148-844C-232ED03C153C"), System.Guid), "Equal");
            Bridge.Test.NUnit.Assert.false$1(Bridge.equalsT(g, new System.Guid.$ctor4("E4C221BE-9B39-4398-B82A-48BA4648CAE0"), System.Guid), "Not equal");
        },
        getHashCodeWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual(new System.Guid.$ctor4("f3d8b3c0-88f0-4148-844c-232ed03c153c").getHashCode(), new System.Guid.$ctor4("F3D8B3C0-88F0-4148-844C-232ED03C153C").getHashCode());
            Bridge.Test.NUnit.Assert.areNotEqual(new System.Guid.$ctor4("F3D8B3C0-88F0-4148-844C-232ED03C153D").getHashCode(), new System.Guid.$ctor4("F3D8B3C0-88F0-4148-844C-232ED03C153C").getHashCode());
        },
        equalityOperatorWorks: function () {
            Bridge.Test.NUnit.Assert.true$1(System.Guid.op_Equality(new System.Guid.$ctor4("D311FC20-D7B6-40B6-88DB-9CD92AED6628"), new System.Guid.$ctor4("D311FC20-D7B6-40B6-88DB-9CD92AED6628")), "Equal");
            Bridge.Test.NUnit.Assert.false$1(System.Guid.op_Equality(new System.Guid.$ctor4("D311FC20-D7B6-40B6-88DB-9CD92AED6628"), new System.Guid.$ctor4("A317804C-A583-4857-804F-A0D276008C82")), "Not equal");
        },
        inequalityOperatorWorks: function () {
            Bridge.Test.NUnit.Assert.false$1(System.Guid.op_Inequality(new System.Guid.$ctor4("D311FC20-D7B6-40B6-88DB-9CD92AED6628"), new System.Guid.$ctor4("D311FC20-D7B6-40B6-88DB-9CD92AED6628")), "Equal");
            Bridge.Test.NUnit.Assert.true$1(System.Guid.op_Inequality(new System.Guid.$ctor4("D311FC20-D7B6-40B6-88DB-9CD92AED6628"), new System.Guid.$ctor4("A317804C-A583-4857-804F-A0D276008C82")), "Not equal");
        },
        toStringWithFormatWorks: function () {
            var g = new System.Guid.$ctor4("DE33AC65-09CB-465C-AD7E-53124B2104E8");
            Bridge.Test.NUnit.Assert.areEqual$1("de33ac6509cb465cad7e53124b2104e8", g.toString$1("N"), "N");
            Bridge.Test.NUnit.Assert.areEqual$1("de33ac65-09cb-465c-ad7e-53124b2104e8", g.toString$1("D"), "D");
            Bridge.Test.NUnit.Assert.areEqual$1("{de33ac65-09cb-465c-ad7e-53124b2104e8}", g.toString$1("B"), "B");
            Bridge.Test.NUnit.Assert.areEqual$1("(de33ac65-09cb-465c-ad7e-53124b2104e8)", g.toString$1("P"), "P");
            Bridge.Test.NUnit.Assert.areEqual$1("de33ac65-09cb-465c-ad7e-53124b2104e8", g.toString$1(""), "empty");
            Bridge.Test.NUnit.Assert.areEqual$1("de33ac65-09cb-465c-ad7e-53124b2104e8", g.toString$1(null), "null");
        },
        newGuidWorks: function () {
            var d = new (System.Collections.Generic.Dictionary$2(System.String,System.Object))();
            for (var i = 0; i < 1000; i = (i + 1) | 0) {
                var g = System.Guid.newGuid();
                Bridge.Test.NUnit.Assert.true$1(Bridge.is(g, System.Guid), "Generated Guid should be Guid");
                var s = g.toString$1("N");
                Bridge.Test.NUnit.Assert.true$1(s.charCodeAt(16) === 56 || s.charCodeAt(16) === 57 || s.charCodeAt(16) === 97 || s.charCodeAt(16) === 98, "Should be standard guid");
                Bridge.Test.NUnit.Assert.true$1(s.charCodeAt(12) === 52, "Should be type 4 guid");
                d.set(s, null);
            }
            Bridge.Test.NUnit.Assert.areEqual$1(1000, d.count, "No duplicates should have been generated");
        },
        toByteArrayWorks: function () {
            var g = new System.Guid.$ctor4("8440F854-0C0B-4355-9722-1608D62E8F87");
            Bridge.Test.NUnit.Assert.areEqual(g.toByteArray(), System.Array.init([84, 248, 64, 132, 11, 12, 85, 67, 151, 34, 22, 8, 214, 46, 143, 135], System.Byte));
        }
    });

    Bridge.ns("Bridge.ClientTest.Batch4.GuidTests", $asm.$);

    Bridge.apply($asm.$.Bridge.ClientTest.Batch4.GuidTests, {
        f1: function () {
            new System.Guid.$ctor1(System.Array.init([120, 149, 98, 168, 38, 122], System.Byte));
        },
        f2: function () {
            new System.Guid.$ctor4("x");
        },
        f3: function () {
            System.Guid.parse("x");
        },
        f4: function () {
            System.Guid.parseExact("A6993C0A-A8CB-45D9-994B-90E7203E4FC6", "B");
        },
        f5: function () {
            System.Guid.parseExact("A6993C0A-A8CB-45D9-994B-90E7203E4FC6", "P");
        },
        f6: function () {
            System.Guid.parseExact("A6993C0A-A8CB-45D9-994B-90E7203E4FC6", "N");
        },
        f7: function () {
            System.Guid.parseExact("A6993C0AA8CB45D9994B90E7203E4FC6", "D");
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.IComparableTests", {
        callingMethodThroughIComparableInterfaceInvokesImplementingMethod: function () {
            var a = new Bridge.ClientTest.Batch4.IComparableTests.MyComparable(), b = new Bridge.ClientTest.Batch4.IComparableTests.MyComparable();
            a.result = 534;
            Bridge.Test.NUnit.Assert.areEqual(534, Bridge.compare(Bridge.cast(a, System.IComparable$1(Bridge.ClientTest.Batch4.IComparableTests.MyComparable)), b, false, Bridge.ClientTest.Batch4.IComparableTests.MyComparable));
            Bridge.Test.NUnit.Assert.areStrictEqual(b, a.other);

            a.result = -42;
            Bridge.Test.NUnit.Assert.areEqual(-42, Bridge.compare(Bridge.cast(a, System.IComparable$1(Bridge.ClientTest.Batch4.IComparableTests.MyComparable)), null, false, Bridge.ClientTest.Batch4.IComparableTests.MyComparable));
            Bridge.Test.NUnit.Assert.areStrictEqual(null, a.other);

            a.result = -534;
            Bridge.Test.NUnit.Assert.areEqual(-534, a.compareTo(b));
            Bridge.Test.NUnit.Assert.areStrictEqual(b, a.other);

            a.result = 42;
            Bridge.Test.NUnit.Assert.areEqual(42, a.compareTo(null));
            Bridge.Test.NUnit.Assert.areStrictEqual(null, a.other);
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.IComparableTests.MyComparable", {
        inherits: function () { return [System.IComparable$1(Bridge.ClientTest.Batch4.IComparableTests.MyComparable)]; },
        result: 0,
        other: null,
        config: {
            alias: [
            "compareTo", "System$IComparable$1$Bridge$ClientTest$Batch4$IComparableTests$MyComparable$compareTo"
            ]
        },
        compareTo: function (other) {
            this.other = other;
            return this.result;
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.IEquatableTests", {
        callingMethodThroughIComparableInterfaceInvokesImplementingMethod: function () {
            var a = new Bridge.ClientTest.Batch4.IEquatableTests.MyEquatable(), b = new Bridge.ClientTest.Batch4.IEquatableTests.MyEquatable();
            a.result = true;
            Bridge.Test.NUnit.Assert.true(Bridge.equalsT(Bridge.cast(a, System.IEquatable$1(Bridge.ClientTest.Batch4.IEquatableTests.MyEquatable)), b, Bridge.ClientTest.Batch4.IEquatableTests.MyEquatable));
            Bridge.Test.NUnit.Assert.areStrictEqual(b, a.other);
            a.result = false;
            Bridge.Test.NUnit.Assert.false(Bridge.equalsT(Bridge.cast(a, System.IEquatable$1(Bridge.ClientTest.Batch4.IEquatableTests.MyEquatable)), b, Bridge.ClientTest.Batch4.IEquatableTests.MyEquatable));

            a.result = true;
            Bridge.Test.NUnit.Assert.true(Bridge.equalsT(Bridge.cast(a, System.IEquatable$1(Bridge.ClientTest.Batch4.IEquatableTests.MyEquatable)), null, Bridge.ClientTest.Batch4.IEquatableTests.MyEquatable));
            Bridge.Test.NUnit.Assert.areStrictEqual(null, a.other);
            a.result = false;
            Bridge.Test.NUnit.Assert.false(Bridge.equalsT(Bridge.cast(a, System.IEquatable$1(Bridge.ClientTest.Batch4.IEquatableTests.MyEquatable)), null, Bridge.ClientTest.Batch4.IEquatableTests.MyEquatable));

            a.result = true;
            Bridge.Test.NUnit.Assert.true(a.equalsT(b));
            Bridge.Test.NUnit.Assert.areStrictEqual(b, a.other);
            a.result = false;
            Bridge.Test.NUnit.Assert.false(a.equalsT(b));

            a.result = true;
            Bridge.Test.NUnit.Assert.true(a.equalsT(null));
            Bridge.Test.NUnit.Assert.areStrictEqual(null, a.other);
            a.result = false;
            Bridge.Test.NUnit.Assert.false(a.equalsT(null));
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.IEquatableTests.MyEquatable", {
        inherits: function () { return [System.IEquatable$1(Bridge.ClientTest.Batch4.IEquatableTests.MyEquatable)]; },
        result: false,
        other: null,
        config: {
            alias: [
            "equalsT", "System$IEquatable$1$Bridge$ClientTest$Batch4$IEquatableTests$MyEquatable$equalsT"
            ]
        },
        equalsT: function (other) {
            this.other = other;
            return this.result;
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.IFormattableTests", {
        iFormattableIsRecordedInInterfaceList: function () {
            Bridge.Test.NUnit.Assert.true(Bridge.Reflection.isAssignableFrom(System.IFormattable, Bridge.ClientTest.Batch4.IFormattableTests.MyFormattable));
            Bridge.Test.NUnit.Assert.true(Bridge.is(new Bridge.ClientTest.Batch4.IFormattableTests.MyFormattable(), System.IFormattable));
        },
        callingMethodThroughIFormattableInterfaceInvokesImplementingMethod_SPI_1565_1633: function () {
            // #1633
            Bridge.Test.NUnit.Assert.areEqual$1("real success, The provider", new Bridge.ClientTest.Batch4.IFormattableTests.MyFormattable().format("real", new Bridge.ClientTest.Batch4.IFormattableTests.MyFormatProvider()), "Non-interface call should succeed");
            // #1565
            Bridge.Test.NUnit.Assert.areEqual$1("real success, The provider", Bridge.format(Bridge.cast(new Bridge.ClientTest.Batch4.IFormattableTests.MyFormattable(), System.IFormattable), "real", new Bridge.ClientTest.Batch4.IFormattableTests.MyFormatProvider()), "Interface call should succeed");
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.IFormattableTests.MyFormatProvider", {
        inherits: [System.IFormatProvider],
        config: {
            alias: [
            "getFormat", "System$IFormatProvider$getFormat"
            ]
        },
        getFormat: function (formatType) {
            return "The provider";
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.IFormattableTests.MyFormattable", {
        inherits: [System.IFormattable],
        config: {
            alias: [
            "format", "System$IFormattable$format"
            ]
        },
        format: function (format, provider) {
            return System.String.concat(format, " success, ", provider.System$IFormatProvider$getFormat(System.Object));
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests", {
        statics: {
            f: function (f) {
                return 0;
            }
        },
        expressionProtectedConstructorWorks: function () {
            var expr = new Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.MyExpression();
            Bridge.Test.NUnit.Assert.areEqual$1(9999, expr.ntype, "NodeType");
            Bridge.Test.NUnit.Assert.areEqual$1(System.String, expr.t, "Type");
        },
        simpleExpressionTreeWorks: function () {
            var $t, $t1;
            var f = ($t = { ntype: 9, t: System.Int32, value: 42 }, { ntype: 18, t: Function, rt: $t.t, body: $t, p: Bridge.toList([]) });
            Bridge.Test.NUnit.Assert.areEqual(18, f.ntype);
            Bridge.Test.NUnit.Assert.areEqual(Function, f.t);
            Bridge.Test.NUnit.Assert.areEqual(System.Int32, f.rt);
            Bridge.Test.NUnit.Assert.areEqual(9, f.body.ntype);
            Bridge.Test.NUnit.Assert.areEqual(System.Int32, f.body.t);
            Bridge.Test.NUnit.Assert.areEqual(42, Bridge.unbox(($t1 = f.body, Bridge.cast($t1, Bridge.hasValue($t1) && ($t1.ntype === 9))).value));
        },
        lambdaWorks: function () {
            var $t, $t1, $t2, $t3, $t4, $t5, $t6, $t7, $t8, $t9;
            var asserter = $asm.$.Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.f1;

            var f1 = ($t = { ntype: 9, t: System.Int32, value: 42 }, { ntype: 18, t: Function, rt: $t.t, body: $t, p: Bridge.toList([]) });
            var f2 = ($t1 = { ntype: 38, t: System.Int32, n: "a" }, ($t2 = { ntype: 9, t: System.String, value: "X" }, { ntype: 18, t: Function, rt: $t2.t, body: $t2, p: Bridge.toList([$t1]) }));
            var f3 = ($t3 = { ntype: 38, t: System.Int32, n: "x" }, $t4 = { ntype: 38, t: System.String, n: "y" }, ($t5 = { ntype: 9, t: System.Double, value: 42.0 }, { ntype: 18, t: Function, rt: $t5.t, body: $t5, p: Bridge.toList([$t3,$t4]) }));
            var f4 = ($t6 = { ntype: 9, t: System.Double, value: Bridge.box(42, System.Int32) }, { ntype: 18, t: Function, rt: $t6.t, body: $t6, p: Bridge.toList(System.Array.init([{ ntype: 38, t: System.Int32, n: "x1" }, { ntype: 38, t: System.String, n: "x2" }], System.Object)) });
            var f5 = ($t7 = { ntype: 9, t: System.Double, value: Bridge.box(42, System.Int32) }, { ntype: 18, t: Function, rt: $t7.t, body: $t7, p: Bridge.toList(new (Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.MyEnumerable$1(System.Object))(System.Array.init([{ ntype: 38, t: System.Int32, n: "x1" }, { ntype: 38, t: System.String, n: "x2" }], System.Object))) });
            var f6 = ($t8 = { ntype: 9, t: System.Double, value: Bridge.box(42, System.Int32) }, { ntype: 18, t: Function, rt: $t8.t, body: $t8, p: Bridge.toList(System.Array.init([{ ntype: 38, t: System.Int32, n: "x1" }, { ntype: 38, t: System.String, n: "x2" }], System.Object)) });
            var f7 = ($t9 = { ntype: 9, t: System.Double, value: Bridge.box(42, System.Int32) }, { ntype: 18, t: Function, rt: $t9.t, body: $t9, p: Bridge.toList(new (Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.MyEnumerable$1(System.Object))(System.Array.init([{ ntype: 38, t: System.Int32, n: "x1" }, { ntype: 38, t: System.String, n: "x2" }], System.Object))) });

            asserter(f1, System.Int32, System.Array.init(0, null, System.String), System.Array.init(0, null, Function), "f1");
            asserter(f2, System.String, System.Array.init(["a"], System.String), System.Array.init([System.Int32], Function), "f2");
            asserter(f3, System.Double, System.Array.init(["x", "y"], System.String), System.Array.init([System.Int32, System.String], Function), "f3");
            asserter(f4, System.Double, System.Array.init(["x1", "x2"], System.String), System.Array.init([System.Int32, System.String], Function), "f4");
            asserter(f5, System.Double, System.Array.init(["x1", "x2"], System.String), System.Array.init([System.Int32, System.String], Function), "f5");
            asserter(f6, System.Double, System.Array.init(["x1", "x2"], System.String), System.Array.init([System.Int32, System.String], Function), "f6");
            asserter(f7, System.Double, System.Array.init(["x1", "x2"], System.String), System.Array.init([System.Int32, System.String], Function), "f7");
        },
        parameterAndVariableWork: function () {
            var $t;
            var p1 = { ntype: 38, t: System.Int32 };
            var p2 = { ntype: 38, t: System.String, n: "par" };
            var p3 = { ntype: 38, t: System.Int32 };
            var p4 = { ntype: 38, t: System.String, n: "var" };
            Bridge.Test.NUnit.Assert.true$1(($t = p1, Bridge.is($t, Bridge.hasValue($t) && ($t.ntype === 38))), "p1 is ParameterExpression");
            Bridge.Test.NUnit.Assert.true$1(($t = p2, Bridge.is($t, Bridge.hasValue($t) && ($t.ntype === 38))), "p2 is ParameterExpression");
            Bridge.Test.NUnit.Assert.true$1(($t = p3, Bridge.is($t, Bridge.hasValue($t) && ($t.ntype === 38))), "p3 is ParameterExpression");
            Bridge.Test.NUnit.Assert.true$1(($t = p4, Bridge.is($t, Bridge.hasValue($t) && ($t.ntype === 38))), "p4 is ParameterExpression");
            Bridge.Test.NUnit.Assert.areEqual$1(38, p1.ntype, "p1.NodeType");
            Bridge.Test.NUnit.Assert.areEqual$1(38, p2.ntype, "p2.NodeType");
            Bridge.Test.NUnit.Assert.areEqual$1(38, p3.ntype, "p3.NodeType");
            Bridge.Test.NUnit.Assert.areEqual$1(38, p4.ntype, "p4.NodeType");
            Bridge.Test.NUnit.Assert.areEqual$1(System.Int32, p1.t, "p1.Type");
            Bridge.Test.NUnit.Assert.areEqual$1(System.String, p2.t, "p2.Type");
            Bridge.Test.NUnit.Assert.areEqual$1(System.Int32, p3.t, "p3.Type");
            Bridge.Test.NUnit.Assert.areEqual$1(System.String, p4.t, "p4.Type");
            Bridge.Test.NUnit.Assert.true$1(p1.n == null, "p1.Name");
            Bridge.Test.NUnit.Assert.areEqual$1("par", p2.n, "p2.Name");
            Bridge.Test.NUnit.Assert.true$1(p3.n == null, "p3.Name");
            Bridge.Test.NUnit.Assert.areEqual$1("var", p4.n, "p4.Name");

            Bridge.Test.NUnit.Assert.false$1(($t = { ntype: 9, t: System.Int32, value: Bridge.box(0, System.Int32) }, Bridge.is($t, Bridge.hasValue($t) && ($t.ntype === 38))), "Constant is ParameterExpression");
        },
        constantWorks: function () {
            var $t;
            var c1 = { ntype: 9, t: System.Int32, value: Bridge.box(42, System.Int32) };
            var c2 = { ntype: 9, t: System.String, value: "Hello, world" };
            var c3 = { ntype: 9, t: System.Int32, value: 17 };

            Bridge.Test.NUnit.Assert.true$1(($t = c1, Bridge.is($t, Bridge.hasValue($t) && ($t.ntype === 9))), "c1 is ConstantExpression");
            Bridge.Test.NUnit.Assert.true$1(($t = c2, Bridge.is($t, Bridge.hasValue($t) && ($t.ntype === 9))), "c2 is ConstantExpression");
            Bridge.Test.NUnit.Assert.true$1(($t = c3, Bridge.is($t, Bridge.hasValue($t) && ($t.ntype === 9))), "c3 is ConstantExpression");
            Bridge.Test.NUnit.Assert.areEqual$1(9, c1.ntype, "c1.NodeType");
            Bridge.Test.NUnit.Assert.areEqual$1(9, c2.ntype, "c2.NodeType");
            Bridge.Test.NUnit.Assert.areEqual$1(9, c3.ntype, "c3.NodeType");
            Bridge.Test.NUnit.Assert.areEqual$1(System.Int32, c1.t, "c1.Type");
            Bridge.Test.NUnit.Assert.areEqual$1(System.String, c2.t, "c2.Type");
            Bridge.Test.NUnit.Assert.areEqual$1(System.Int32, c3.t, "c3.Type");
            Bridge.Test.NUnit.Assert.areEqual$1(42, Bridge.unbox(c1.value), "c1.Value");
            Bridge.Test.NUnit.Assert.areEqual$1("Hello, world", Bridge.unbox(c2.value), "c2.Value");
            Bridge.Test.NUnit.Assert.areEqual$1(17, Bridge.unbox(c3.value), "c3.Value");

            Bridge.Test.NUnit.Assert.false$1(($t = { ntype: 38, t: System.Int32 }, Bridge.is($t, Bridge.hasValue($t) && ($t.ntype === 9))), "Parameter is ConstantExpression");
        },
        binaryExpressionsWork: function () {
            var $t, $t1, $t2, $t3, $t4, $t5, $t6, $t7, $t8, $t9, $t10, $t11, $t12, $t13, $t14, $t15, $t16, $t17, $t18, $t19, $t20, $t21, $t22, $t23, $t24, $t25, $t26, $t27, $t28, $t29, $t30, $t31, $t32, $t33, $t34, $t35, $t36, $t37, $t38, $t39, $t40, $t41, $t42, $t43, $t44, $t45, $t46, $t47, $t48, $t49, $t50, $t51, $t52, $t53, $t54, $t55, $t56, $t57, $t58, $t59, $t60, $t61, $t62, $t63, $t64, $t65, $t66, $t67, $t68, $t69, $t70, $t71, $t72, $t73, $t74, $t75, $t76, $t77, $t78, $t79, $t80, $t81, $t82, $t83, $t84, $t85, $t86, $t87, $t88, $t89, $t90, $t91, $t92, $t93, $t94, $t95, $t96, $t97, $t98, $t99, $t100, $t101, $t102, $t103, $t104, $t105, $t106, $t107, $t108, $t109, $t110, $t111, $t112, $t113, $t114, $t115, $t116, $t117, $t118, $t119, $t120, $t121, $t122, $t123, $t124, $t125, $t126, $t127, $t128, $t129, $t130, $t131, $t132, $t133, $t134, $t135, $t136, $t137, $t138, $t139, $t140, $t141, $t142, $t143, $t144, $t145, $t146, $t147, $t148, $t149, $t150, $t151, $t152, $t153, $t154, $t155, $t156, $t157, $t158, $t159, $t160, $t161, $t162, $t163, $t164, $t165, $t166, $t167, $t168, $t169, $t170, $t171, $t172, $t173, $t174, $t175, $t176, $t177;
            var asserter = $asm.$.Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.f2;

            var e1 = ($t = { ntype: 38, t: System.Int32, n: "a" }, $t1 = { ntype: 38, t: System.Int32, n: "b" }, ($t2 = { ntype: 26, t: System.Int32, left: $t, right: $t1 }, { ntype: 18, t: Function, rt: $t2.t, body: $t2, p: Bridge.toList([$t,$t1]) }));
            var e2 = ($t3 = { ntype: 38, t: System.Int32, n: "a" }, $t4 = { ntype: 38, t: System.Int32, n: "b" }, ($t5 = { ntype: 25, t: System.Int32, left: $t3, right: $t4 }, { ntype: 18, t: Function, rt: $t5.t, body: $t5, p: Bridge.toList([$t3,$t4]) }));
            var e3 = ($t6 = { ntype: 38, t: System.Int32, n: "a" }, $t7 = { ntype: 38, t: System.Int32, n: "b" }, ($t8 = { ntype: 12, t: System.Int32, left: $t6, right: $t7 }, { ntype: 18, t: Function, rt: $t8.t, body: $t8, p: Bridge.toList([$t6,$t7]) }));
            var e4 = ($t9 = { ntype: 38, t: System.Int32, n: "a" }, $t10 = { ntype: 38, t: System.Int32, n: "b" }, ($t11 = { ntype: 0, t: System.Int32, left: $t9, right: $t10 }, { ntype: 18, t: Function, rt: $t11.t, body: $t11, p: Bridge.toList([$t9,$t10]) }));
            var e5 = ($t12 = { ntype: 38, t: System.Int32, n: "a" }, $t13 = { ntype: 38, t: System.Int32, n: "b" }, ($t14 = { ntype: 42, t: System.Int32, left: $t12, right: $t13 }, { ntype: 18, t: Function, rt: $t14.t, body: $t14, p: Bridge.toList([$t12,$t13]) }));
            var e6 = ($t15 = { ntype: 38, t: System.Int32, n: "a" }, $t16 = { ntype: 38, t: System.Int32, n: "b" }, ($t17 = { ntype: 19, t: System.Int32, left: $t15, right: $t16 }, { ntype: 18, t: Function, rt: $t17.t, body: $t17, p: Bridge.toList([$t15,$t16]) }));
            var e7 = ($t18 = { ntype: 38, t: System.Int32, n: "a" }, $t19 = { ntype: 38, t: System.Int32, n: "b" }, ($t20 = { ntype: 41, t: System.Int32, left: $t18, right: $t19 }, { ntype: 18, t: Function, rt: $t20.t, body: $t20, p: Bridge.toList([$t18,$t19]) }));
            var e8 = ($t21 = { ntype: 38, t: System.Int32, n: "a" }, $t22 = { ntype: 38, t: System.Int32, n: "b" }, ($t23 = { ntype: 20, t: System.Boolean, left: $t21, right: $t22 }, { ntype: 18, t: Function, rt: $t23.t, body: $t23, p: Bridge.toList([$t21,$t22]) }));
            var e9 = ($t24 = { ntype: 38, t: System.Int32, n: "a" }, $t25 = { ntype: 38, t: System.Int32, n: "b" }, ($t26 = { ntype: 15, t: System.Boolean, left: $t24, right: $t25 }, { ntype: 18, t: Function, rt: $t26.t, body: $t26, p: Bridge.toList([$t24,$t25]) }));
            var e10 = ($t27 = { ntype: 38, t: System.Int32, n: "a" }, $t28 = { ntype: 38, t: System.Int32, n: "b" }, ($t29 = { ntype: 21, t: System.Boolean, left: $t27, right: $t28 }, { ntype: 18, t: Function, rt: $t29.t, body: $t29, p: Bridge.toList([$t27,$t28]) }));
            var e11 = ($t30 = { ntype: 38, t: System.Int32, n: "a" }, $t31 = { ntype: 38, t: System.Int32, n: "b" }, ($t32 = { ntype: 16, t: System.Boolean, left: $t30, right: $t31 }, { ntype: 18, t: Function, rt: $t32.t, body: $t32, p: Bridge.toList([$t30,$t31]) }));
            var e12 = ($t33 = { ntype: 38, t: System.Int32, n: "a" }, $t34 = { ntype: 38, t: System.Int32, n: "b" }, ($t35 = { ntype: 13, t: System.Boolean, left: $t33, right: $t34 }, { ntype: 18, t: Function, rt: $t35.t, body: $t35, p: Bridge.toList([$t33,$t34]) }));
            var e13 = ($t36 = { ntype: 38, t: System.Int32, n: "a" }, $t37 = { ntype: 38, t: System.Int32, n: "b" }, ($t38 = { ntype: 35, t: System.Boolean, left: $t36, right: $t37 }, { ntype: 18, t: Function, rt: $t38.t, body: $t38, p: Bridge.toList([$t36,$t37]) }));
            var e14 = ($t39 = { ntype: 38, t: System.Int32, n: "a" }, $t40 = { ntype: 38, t: System.Int32, n: "b" }, ($t41 = { ntype: 2, t: System.Int32, left: $t39, right: $t40 }, { ntype: 18, t: Function, rt: $t41.t, body: $t41, p: Bridge.toList([$t39,$t40]) }));
            var e15 = ($t42 = { ntype: 38, t: System.Int32, n: "a" }, $t43 = { ntype: 38, t: System.Int32, n: "b" }, ($t44 = { ntype: 14, t: System.Int32, left: $t42, right: $t43 }, { ntype: 18, t: Function, rt: $t44.t, body: $t44, p: Bridge.toList([$t42,$t43]) }));
            var e16 = ($t45 = { ntype: 38, t: System.Int32, n: "a" }, $t46 = { ntype: 38, t: System.Int32, n: "b" }, ($t47 = { ntype: 36, t: System.Int32, left: $t45, right: $t46 }, { ntype: 18, t: Function, rt: $t47.t, body: $t47, p: Bridge.toList([$t45,$t46]) }));
            var e17 = ($t48 = { ntype: 38, t: System.Boolean, n: "a" }, $t49 = { ntype: 38, t: System.Boolean, n: "b" }, ($t50 = { ntype: 3, t: System.Boolean, left: $t48, right: $t49 }, { ntype: 18, t: Function, rt: $t50.t, body: $t50, p: Bridge.toList([$t48,$t49]) }));
            var e18 = ($t51 = { ntype: 38, t: System.Boolean, n: "a" }, $t52 = { ntype: 38, t: System.Boolean, n: "b" }, ($t53 = { ntype: 37, t: System.Boolean, left: $t51, right: $t52 }, { ntype: 18, t: Function, rt: $t53.t, body: $t53, p: Bridge.toList([$t51,$t52]) }));
            var e19 = ($t54 = { ntype: 38, t: System.Int32, n: "a" }, $t55 = { ntype: 38, t: System.Int32, n: "b" }, ($t56 = { ntype: 27, t: System.Int32, left: $t54, right: $t55 }, { ntype: 18, t: Function, rt: $t56.t, body: $t56, p: Bridge.toList([$t54,$t55]) }));
            var e20 = ($t57 = { ntype: 38, t: System.Int32, n: "a" }, $t58 = { ntype: 38, t: System.Int32, n: "b" }, ($t59 = { ntype: 1, t: System.Int32, left: $t57, right: $t58 }, { ntype: 18, t: Function, rt: $t59.t, body: $t59, p: Bridge.toList([$t57,$t58]) }));
            var e21 = ($t60 = { ntype: 38, t: System.Int32, n: "a" }, $t61 = { ntype: 38, t: System.Int32, n: "b" }, ($t62 = { ntype: 43, t: System.Int32, left: $t60, right: $t61 }, { ntype: 18, t: Function, rt: $t62.t, body: $t62, p: Bridge.toList([$t60,$t61]) }));
            var e22 = ($t63 = { ntype: 38, t: System.Nullable$1(System.Int32), n: "a" }, $t64 = { ntype: 38, t: System.Int32, n: "b" }, ($t65 = { ntype: 7, t: System.Int32, left: $t63, right: $t64 }, { ntype: 18, t: Function, rt: $t65.t, body: $t65, p: Bridge.toList([$t63,$t64]) }));

            var pa = { ntype: 38, t: System.Int32, n: "a" };
            var pb = { ntype: 38, t: System.Int32, n: "b" };
            var e31 = { ntype: 26, t: System.Int32, left: pa, right: pb };
            var e32 = { ntype: 25, t: System.Int32, left: pa, right: pb };
            var e33 = { ntype: 12, t: System.Int32, left: pa, right: pb };
            var e34 = { ntype: 0, t: System.Int32, left: pa, right: pb };
            var e35 = { ntype: 42, t: System.Int32, left: pa, right: pb };
            var e36 = { ntype: 19, t: System.Int32, left: pa, right: pb };
            var e37 = { ntype: 41, t: System.Int32, left: pa, right: pb };
            var e38 = { ntype: 20, t: System.Boolean, left: pa, right: pb };
            var e39 = { ntype: 15, t: System.Boolean, left: pa, right: pb };
            var e40 = { ntype: 21, t: System.Boolean, left: pa, right: pb };
            var e41 = { ntype: 16, t: System.Boolean, left: pa, right: pb };
            var e42 = { ntype: 13, t: System.Boolean, left: pa, right: pb };
            var e43 = { ntype: 35, t: System.Boolean, left: pa, right: pb };
            var e44 = { ntype: 2, t: System.Int32, left: pa, right: pb };
            var e45 = { ntype: 14, t: System.Int32, left: pa, right: pb };
            var e46 = { ntype: 36, t: System.Int32, left: pa, right: pb };
            var e47 = { ntype: 3, t: System.Boolean, left: { ntype: 38, t: System.Boolean, n: "a" }, right: { ntype: 38, t: System.Boolean, n: "b" } };
            var e48 = { ntype: 37, t: System.Boolean, left: { ntype: 38, t: System.Boolean, n: "a" }, right: { ntype: 38, t: System.Boolean, n: "b" } };
            var e49 = { ntype: 27, t: System.Int32, left: pa, right: pb };
            var e50 = { ntype: 1, t: System.Int32, left: pa, right: pb };
            var e51 = { ntype: 43, t: System.Int32, left: pa, right: pb };
            var e52 = { ntype: 7, t: System.Int32, left: { ntype: 38, t: System.Nullable$1(System.Int32), n: "a" }, right: pb };
            var e53 = { ntype: 39, t: System.Int32, left: pa, right: pb };

            var e61 = ($t66 = { ntype: 38, t: Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, n: "a" }, $t67 = { ntype: 38, t: Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, n: "b" }, ($t69 = ($t68 = Bridge.getMetadata(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C).m[23], { ntype: 26, t: $t68.rt, left: $t66, right: $t67, method: $t68 }), { ntype: 18, t: Function, rt: $t69.t, body: $t69, p: Bridge.toList([$t66,$t67]) }));
            var e62 = ($t70 = { ntype: 38, t: Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, n: "a" }, $t71 = { ntype: 38, t: Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, n: "b" }, ($t73 = ($t72 = Bridge.getMetadata(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C).m[22], { ntype: 25, t: $t72.rt, left: $t70, right: $t71, method: $t72 }), { ntype: 18, t: Function, rt: $t73.t, body: $t73, p: Bridge.toList([$t70,$t71]) }));
            var e63 = ($t74 = { ntype: 38, t: Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, n: "a" }, $t75 = { ntype: 38, t: Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, n: "b" }, ($t77 = ($t76 = Bridge.getMetadata(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C).m[9], { ntype: 12, t: $t76.rt, left: $t74, right: $t75, method: $t76 }), { ntype: 18, t: Function, rt: $t77.t, body: $t77, p: Bridge.toList([$t74,$t75]) }));
            var e64 = ($t78 = { ntype: 38, t: Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, n: "a" }, $t79 = { ntype: 38, t: Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, n: "b" }, ($t81 = ($t80 = Bridge.getMetadata(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C).m[5], { ntype: 0, t: $t80.rt, left: $t78, right: $t79, method: $t80 }), { ntype: 18, t: Function, rt: $t81.t, body: $t81, p: Bridge.toList([$t78,$t79]) }));
            var e65 = ($t82 = { ntype: 38, t: Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, n: "a" }, $t83 = { ntype: 38, t: Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, n: "b" }, ($t85 = ($t84 = Bridge.getMetadata(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C).m[27], { ntype: 42, t: $t84.rt, left: $t82, right: $t83, method: $t84 }), { ntype: 18, t: Function, rt: $t85.t, body: $t85, p: Bridge.toList([$t82,$t83]) }));
            var e66 = ($t86 = { ntype: 38, t: Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, n: "a" }, $t87 = { ntype: 38, t: System.Int32, n: "b" }, ($t89 = ($t88 = Bridge.getMetadata(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C).m[18], { ntype: 19, t: $t88.rt, left: $t86, right: $t87, method: $t88 }), { ntype: 18, t: Function, rt: $t89.t, body: $t89, p: Bridge.toList([$t86,$t87]) }));
            var e67 = ($t90 = { ntype: 38, t: Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, n: "a" }, $t91 = { ntype: 38, t: System.Int32, n: "b" }, ($t93 = ($t92 = Bridge.getMetadata(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C).m[26], { ntype: 41, t: $t92.rt, left: $t90, right: $t91, method: $t92 }), { ntype: 18, t: Function, rt: $t93.t, body: $t93, p: Bridge.toList([$t90,$t91]) }));
            var e68 = ($t94 = { ntype: 38, t: Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, n: "a" }, $t95 = { ntype: 38, t: Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, n: "b" }, ($t97 = ($t96 = Bridge.getMetadata(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C).m[19], { ntype: 20, t: $t96.rt, left: $t94, right: $t95, method: $t96 }), { ntype: 18, t: Function, rt: $t97.t, body: $t97, p: Bridge.toList([$t94,$t95]) }));
            var e69 = ($t98 = { ntype: 38, t: Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, n: "a" }, $t99 = { ntype: 38, t: Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, n: "b" }, ($t101 = ($t100 = Bridge.getMetadata(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C).m[14], { ntype: 15, t: $t100.rt, left: $t98, right: $t99, method: $t100 }), { ntype: 18, t: Function, rt: $t101.t, body: $t101, p: Bridge.toList([$t98,$t99]) }));
            var e70 = ($t102 = { ntype: 38, t: Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, n: "a" }, $t103 = { ntype: 38, t: Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, n: "b" }, ($t105 = ($t104 = Bridge.getMetadata(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C).m[20], { ntype: 21, t: $t104.rt, left: $t102, right: $t103, method: $t104 }), { ntype: 18, t: Function, rt: $t105.t, body: $t105, p: Bridge.toList([$t102,$t103]) }));
            var e71 = ($t106 = { ntype: 38, t: Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, n: "a" }, $t107 = { ntype: 38, t: Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, n: "b" }, ($t109 = ($t108 = Bridge.getMetadata(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C).m[15], { ntype: 16, t: $t108.rt, left: $t106, right: $t107, method: $t108 }), { ntype: 18, t: Function, rt: $t109.t, body: $t109, p: Bridge.toList([$t106,$t107]) }));
            var e72 = ($t110 = { ntype: 38, t: Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, n: "a" }, $t111 = { ntype: 38, t: Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, n: "b" }, ($t113 = ($t112 = Bridge.getMetadata(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C).m[10], { ntype: 13, t: $t112.rt, left: $t110, right: $t111, method: $t112 }), { ntype: 18, t: Function, rt: $t113.t, body: $t113, p: Bridge.toList([$t110,$t111]) }));
            var e73 = ($t114 = { ntype: 38, t: Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, n: "a" }, $t115 = { ntype: 38, t: Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, n: "b" }, ($t117 = ($t116 = Bridge.getMetadata(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C).m[17], { ntype: 35, t: $t116.rt, left: $t114, right: $t115, method: $t116 }), { ntype: 18, t: Function, rt: $t117.t, body: $t117, p: Bridge.toList([$t114,$t115]) }));
            var e74 = ($t118 = { ntype: 38, t: Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, n: "a" }, $t119 = { ntype: 38, t: Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, n: "b" }, ($t121 = ($t120 = Bridge.getMetadata(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C).m[6], { ntype: 2, t: $t120.rt, left: $t118, right: $t119, method: $t120 }), { ntype: 18, t: Function, rt: $t121.t, body: $t121, p: Bridge.toList([$t118,$t119]) }));
            var e75 = ($t122 = { ntype: 38, t: Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, n: "a" }, $t123 = { ntype: 38, t: Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, n: "b" }, ($t125 = ($t124 = Bridge.getMetadata(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C).m[11], { ntype: 14, t: $t124.rt, left: $t122, right: $t123, method: $t124 }), { ntype: 18, t: Function, rt: $t125.t, body: $t125, p: Bridge.toList([$t122,$t123]) }));
            var e76 = ($t126 = { ntype: 38, t: Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, n: "a" }, $t127 = { ntype: 38, t: Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, n: "b" }, ($t129 = ($t128 = Bridge.getMetadata(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C).m[7], { ntype: 36, t: $t128.rt, left: $t126, right: $t127, method: $t128 }), { ntype: 18, t: Function, rt: $t129.t, body: $t129, p: Bridge.toList([$t126,$t127]) }));
            var e79 = ($t130 = { ntype: 38, t: Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, n: "a" }, $t131 = { ntype: 38, t: Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, n: "b" }, ($t133 = ($t132 = Bridge.getMetadata(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C).m[23], { ntype: 27, t: $t132.rt, left: $t130, right: $t131, method: $t132 }), { ntype: 18, t: Function, rt: $t133.t, body: $t133, p: Bridge.toList([$t130,$t131]) }));
            var e80 = ($t134 = { ntype: 38, t: Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, n: "a" }, $t135 = { ntype: 38, t: Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, n: "b" }, ($t137 = ($t136 = Bridge.getMetadata(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C).m[5], { ntype: 1, t: $t136.rt, left: $t134, right: $t135, method: $t136 }), { ntype: 18, t: Function, rt: $t137.t, body: $t137, p: Bridge.toList([$t134,$t135]) }));
            var e81 = ($t138 = { ntype: 38, t: Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, n: "a" }, $t139 = { ntype: 38, t: Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, n: "b" }, ($t141 = ($t140 = Bridge.getMetadata(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C).m[27], { ntype: 43, t: $t140.rt, left: $t138, right: $t139, method: $t140 }), { ntype: 18, t: Function, rt: $t141.t, body: $t141, p: Bridge.toList([$t138,$t139]) }));

            var pa2 = { ntype: 38, t: Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, n: "a" };
            var pb2 = { ntype: 38, t: Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, n: "b" };
            var e91 = ($t142 = Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, 8, 284, "op_Multiply"), { ntype: 26, t: $t142.rt, left: pa2, right: pb2, method: $t142 });
            var e92 = ($t143 = Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, 8, 284, "op_Modulus"), { ntype: 25, t: $t143.rt, left: pa2, right: pb2, method: $t143 });
            var e93 = ($t144 = Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, 8, 284, "op_Division"), { ntype: 12, t: $t144.rt, left: pa2, right: pb2, method: $t144 });
            var e94 = ($t145 = Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, 8, 284, "op_Addition"), { ntype: 0, t: $t145.rt, left: pa2, right: pb2, method: $t145 });
            var e95 = ($t146 = Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, 8, 284, "op_Subtraction"), { ntype: 42, t: $t146.rt, left: pa2, right: pb2, method: $t146 });
            var e96 = ($t147 = Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, 8, 284, "op_LeftShift"), { ntype: 19, t: $t147.rt, left: pa2, right: pb2, method: $t147 });
            var e97 = ($t148 = Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, 8, 284, "op_RightShift"), { ntype: 41, t: $t148.rt, left: pa2, right: pb2, method: $t148 });
            var e98 = ($t149 = Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, 8, 284, "op_LessThan"), { ntype: 20, t: $t149.rt, left: pa2, right: pb2, method: $t149 });
            var e99 = ($t150 = Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, 8, 284, "op_GreaterThan"), { ntype: 15, t: $t150.rt, left: pa2, right: pb2, method: $t150 });
            var e100 = ($t151 = Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, 8, 284, "op_LessThanOrEqual"), { ntype: 21, t: $t151.rt, left: pa2, right: pb2, method: $t151 });
            var e101 = ($t152 = Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, 8, 284, "op_GreaterThanOrEqual"), { ntype: 16, t: $t152.rt, left: pa2, right: pb2, method: $t152 });
            var e102 = ($t153 = Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, 8, 284, "op_Equality"), { ntype: 13, t: $t153.rt, left: pa2, right: pb2, method: $t153 });
            var e103 = ($t154 = Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, 8, 284, "op_Inequality"), { ntype: 35, t: $t154.rt, left: pa2, right: pb2, method: $t154 });
            var e104 = ($t155 = Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, 8, 284, "op_BitwiseAnd"), { ntype: 2, t: $t155.rt, left: pa2, right: pb2, method: $t155 });
            var e105 = ($t156 = Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, 8, 284, "op_ExclusiveOr"), { ntype: 14, t: $t156.rt, left: pa2, right: pb2, method: $t156 });
            var e106 = ($t157 = Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, 8, 284, "op_BitwiseOr"), { ntype: 36, t: $t157.rt, left: pa2, right: pb2, method: $t157 });
            var e109 = ($t158 = Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, 8, 284, "op_Multiply"), { ntype: 27, t: $t158.rt, left: pa2, right: pb2, method: $t158 });
            var e110 = ($t159 = Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, 8, 284, "op_Addition"), { ntype: 1, t: $t159.rt, left: pa2, right: pb2, method: $t159 });
            var e111 = ($t160 = Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, 8, 284, "op_Subtraction"), { ntype: 43, t: $t160.rt, left: pa2, right: pb2, method: $t160 });
            var e113 = ($t161 = Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, 8, 284, "op_Power"), { ntype: 39, t: $t161.rt, left: pa2, right: pb2, method: $t161 });

            var e121 = { ntype: 69, t: System.Int32, left: pa, right: pb };
            var e122 = { ntype: 68, t: System.Int32, left: pa, right: pb };
            var e123 = { ntype: 65, t: System.Int32, left: pa, right: pb };
            var e124 = { ntype: 63, t: System.Int32, left: pa, right: pb };
            var e125 = { ntype: 73, t: System.Int32, left: pa, right: pb };
            var e126 = { ntype: 67, t: System.Int32, left: pa, right: pb };
            var e127 = { ntype: 72, t: System.Int32, left: pa, right: pb };
            var e134 = { ntype: 64, t: System.Int32, left: pa, right: pb };
            var e135 = { ntype: 66, t: System.Int32, left: pa, right: pb };
            var e136 = { ntype: 70, t: System.Int32, left: pa, right: pb };
            var e139 = { ntype: 75, t: System.Int32, left: pa, right: pb };
            var e140 = { ntype: 74, t: System.Int32, left: pa, right: pb };
            var e141 = { ntype: 76, t: System.Int32, left: pa, right: pb };
            var e143 = { ntype: 71, t: System.Int32, left: pa, right: pb };
            var e144 = { ntype: 46, t: pb.t, left: pa, right: pb };

            var e151 = ($t162 = Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, 8, 284, "op_Multiply"), { ntype: 69, t: $t162.rt, left: pa2, right: pb2, method: $t162 });
            var e152 = ($t163 = Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, 8, 284, "op_Modulus"), { ntype: 68, t: $t163.rt, left: pa2, right: pb2, method: $t163 });
            var e153 = ($t164 = Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, 8, 284, "op_Division"), { ntype: 65, t: $t164.rt, left: pa2, right: pb2, method: $t164 });
            var e154 = ($t165 = Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, 8, 284, "op_Addition"), { ntype: 63, t: $t165.rt, left: pa2, right: pb2, method: $t165 });
            var e155 = ($t166 = Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, 8, 284, "op_Subtraction"), { ntype: 73, t: $t166.rt, left: pa2, right: pb2, method: $t166 });
            var e156 = ($t167 = Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, 8, 284, "op_LeftShift"), { ntype: 67, t: $t167.rt, left: pa2, right: pb2, method: $t167 });
            var e157 = ($t168 = Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, 8, 284, "op_RightShift"), { ntype: 72, t: $t168.rt, left: pa2, right: pb2, method: $t168 });
            var e164 = ($t169 = Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, 8, 284, "op_BitwiseAnd"), { ntype: 64, t: $t169.rt, left: pa2, right: pb2, method: $t169 });
            var e165 = ($t170 = Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, 8, 284, "op_ExclusiveOr"), { ntype: 66, t: $t170.rt, left: pa2, right: pb2, method: $t170 });
            var e166 = ($t171 = Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, 8, 284, "op_BitwiseOr"), { ntype: 70, t: $t171.rt, left: pa2, right: pb2, method: $t171 });
            var e169 = ($t172 = Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, 8, 284, "op_Multiply"), { ntype: 75, t: $t172.rt, left: pa2, right: pb2, method: $t172 });
            var e170 = ($t173 = Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, 8, 284, "op_Addition"), { ntype: 74, t: $t173.rt, left: pa2, right: pb2, method: $t173 });
            var e171 = ($t174 = Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, 8, 284, "op_Subtraction"), { ntype: 76, t: $t174.rt, left: pa2, right: pb2, method: $t174 });
            var e173 = ($t175 = Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, 8, 284, "op_Power"), { ntype: 71, t: $t175.rt, left: pa2, right: pb2, method: $t175 });

            var mkbin1 = { ntype: 42, t: pb.t, left: pa, right: pb };
            var mkbin2 = ($t176 = Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, 8, 284, "op_LessThan"), { ntype: 20, t: $t176.rt, left: pa2, right: pb2, method: $t176 });

            asserter(e1.body, 26, System.Int32, null, "e1");
            asserter(e2.body, 25, System.Int32, null, "e2");
            asserter(e3.body, 12, System.Int32, null, "e3");
            asserter(e4.body, 0, System.Int32, null, "e4");
            asserter(e5.body, 42, System.Int32, null, "e5");
            asserter(e6.body, 19, System.Int32, null, "e6");
            asserter(e7.body, 41, System.Int32, null, "e7");
            asserter(e8.body, 20, System.Boolean, null, "e8");
            asserter(e9.body, 15, System.Boolean, null, "e9");
            asserter(e10.body, 21, System.Boolean, null, "e10");
            asserter(e11.body, 16, System.Boolean, null, "e11");
            asserter(e12.body, 13, System.Boolean, null, "e12");
            asserter(e13.body, 35, System.Boolean, null, "e13");
            asserter(e14.body, 2, System.Int32, null, "e14");
            asserter(e15.body, 14, System.Int32, null, "e15");
            asserter(e16.body, 36, System.Int32, null, "e16");
            asserter(e17.body, 3, System.Boolean, null, "e17");
            asserter(e18.body, 37, System.Boolean, null, "e18");
            asserter(e19.body, 27, System.Int32, null, "e19");
            asserter(e20.body, 1, System.Int32, null, "e20");
            asserter(e21.body, 43, System.Int32, null, "e21");
            asserter(e22.body, 7, System.Int32, null, "e22");

            asserter(e31, 26, System.Int32, null, "e31");
            asserter(e32, 25, System.Int32, null, "e32");
            asserter(e33, 12, System.Int32, null, "e33");
            asserter(e34, 0, System.Int32, null, "e34");
            asserter(e35, 42, System.Int32, null, "e35");
            asserter(e36, 19, System.Int32, null, "e36");
            asserter(e37, 41, System.Int32, null, "e37");
            asserter(e38, 20, System.Boolean, null, "e38");
            asserter(e39, 15, System.Boolean, null, "e39");
            asserter(e40, 21, System.Boolean, null, "e40");
            asserter(e41, 16, System.Boolean, null, "e41");
            asserter(e42, 13, System.Boolean, null, "e42");
            asserter(e43, 35, System.Boolean, null, "e43");
            asserter(e44, 2, System.Int32, null, "e44");
            asserter(e45, 14, System.Int32, null, "e45");
            asserter(e46, 36, System.Int32, null, "e46");
            asserter(e47, 3, System.Boolean, null, "e47");
            asserter(e48, 37, System.Boolean, null, "e48");
            asserter(e49, 27, System.Int32, null, "e49");
            asserter(e50, 1, System.Int32, null, "e50");
            asserter(e51, 43, System.Int32, null, "e51");
            asserter(e52, 7, System.Int32, null, "e52");
            asserter(e53, 39, System.Int32, null, "e53");

            asserter(e61.body, 26, Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, "op_Multiply", "e61");
            asserter(e62.body, 25, Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, "op_Modulus", "e62");
            asserter(e63.body, 12, Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, "op_Division", "e63");
            asserter(e64.body, 0, Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, "op_Addition", "e64");
            asserter(e65.body, 42, Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, "op_Subtraction", "e65");
            asserter(e66.body, 19, Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, "op_LeftShift", "e66");
            asserter(e67.body, 41, Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, "op_RightShift", "e67");
            asserter(e68.body, 20, System.Boolean, "op_LessThan", "e68");
            asserter(e69.body, 15, System.Boolean, "op_GreaterThan", "e69");
            asserter(e70.body, 21, System.Boolean, "op_LessThanOrEqual", "e70");
            asserter(e71.body, 16, System.Boolean, "op_GreaterThanOrEqual", "e71");
            asserter(e72.body, 13, System.Boolean, "op_Equality", "e72");
            asserter(e73.body, 35, System.Boolean, "op_Inequality", "e73");
            asserter(e74.body, 2, Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, "op_BitwiseAnd", "e74");
            asserter(e75.body, 14, Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, "op_ExclusiveOr", "e75");
            asserter(e76.body, 36, Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, "op_BitwiseOr", "e76");
            asserter(e79.body, 27, Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, "op_Multiply", "e79");
            asserter(e80.body, 1, Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, "op_Addition", "e80");
            asserter(e81.body, 43, Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, "op_Subtraction", "e81");

            asserter(e91, 26, Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, "op_Multiply", "e91");
            asserter(e92, 25, Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, "op_Modulus", "e92");
            asserter(e93, 12, Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, "op_Division", "e93");
            asserter(e94, 0, Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, "op_Addition", "e94");
            asserter(e95, 42, Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, "op_Subtraction", "e95");
            asserter(e96, 19, Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, "op_LeftShift", "e96");
            asserter(e97, 41, Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, "op_RightShift", "e97");
            asserter(e98, 20, System.Boolean, "op_LessThan", "e98");
            asserter(e99, 15, System.Boolean, "op_GreaterThan", "e99");
            asserter(e100, 21, System.Boolean, "op_LessThanOrEqual", "e100");
            asserter(e101, 16, System.Boolean, "op_GreaterThanOrEqual", "e101");
            asserter(e102, 13, System.Boolean, "op_Equality", "e102");
            asserter(e103, 35, System.Boolean, "op_Inequality", "e103");
            asserter(e104, 2, Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, "op_BitwiseAnd", "e104");
            asserter(e105, 14, Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, "op_ExclusiveOr", "e105");
            asserter(e106, 36, Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, "op_BitwiseOr", "e106");
            asserter(e109, 27, Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, "op_Multiply", "e109");
            asserter(e110, 1, Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, "op_Addition", "e110");
            asserter(e111, 43, Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, "op_Subtraction", "e111");
            asserter(e113, 39, Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, "op_Power", "e113");

            asserter(e121, 69, System.Int32, null, "e121");
            asserter(e122, 68, System.Int32, null, "e122");
            asserter(e123, 65, System.Int32, null, "e123");
            asserter(e124, 63, System.Int32, null, "e124");
            asserter(e125, 73, System.Int32, null, "e125");
            asserter(e126, 67, System.Int32, null, "e126");
            asserter(e127, 72, System.Int32, null, "e127");
            asserter(e134, 64, System.Int32, null, "e134");
            asserter(e135, 66, System.Int32, null, "e135");
            asserter(e136, 70, System.Int32, null, "e136");
            asserter(e139, 75, System.Int32, null, "e139");
            asserter(e140, 74, System.Int32, null, "e140");
            asserter(e141, 76, System.Int32, null, "e141");
            asserter(e143, 71, System.Int32, null, "e143");
            asserter(e144, 46, System.Int32, null, "e143");

            asserter(e151, 69, Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, "op_Multiply", "e151");
            asserter(e152, 68, Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, "op_Modulus", "e152");
            asserter(e153, 65, Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, "op_Division", "e153");
            asserter(e154, 63, Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, "op_Addition", "e154");
            asserter(e155, 73, Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, "op_Subtraction", "e155");
            asserter(e156, 67, Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, "op_LeftShift", "e156");
            asserter(e157, 72, Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, "op_RightShift", "e157");
            asserter(e164, 64, Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, "op_BitwiseAnd", "e164");
            asserter(e165, 66, Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, "op_ExclusiveOr", "e165");
            asserter(e166, 70, Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, "op_BitwiseOr", "e166");
            asserter(e169, 75, Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, "op_Multiply", "e169");
            asserter(e170, 74, Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, "op_Addition", "e170");
            asserter(e171, 76, Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, "op_Subtraction", "e171");
            asserter(e173, 71, Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, "op_Power", "e173");

            asserter(mkbin1, 42, System.Int32, null, "mkbin1");
            asserter(mkbin2, 20, System.Boolean, "op_LessThan", "mkbin2");

            Bridge.Test.NUnit.Assert.false$1(($t177 = { ntype: 9, t: System.Object, value: null }, Bridge.is($t177, Bridge.hasValue($t177) && ([0,1,2,3,5,7,12,13,14,15,16,19,20,21,22,25,26,27,35,36,37,39,41,42,43,46,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80].indexOf($t177.ntype) >= 0))), "Constant should not be BinaryExpression");
        },
        unaryExpressionsWork: function () {
            var $t, $t1, $t2, $t3, $t4, $t5, $t6, $t7, $t8, $t9, $t10, $t11, $t12, $t13, $t14, $t15, $t16, $t17, $t18, $t19, $t20, $t21, $t22, $t23, $t24, $t25, $t26, $t27, $t28, $t29, $t30, $t31, $t32, $t33, $t34, $t35, $t36, $t37, $t38, $t39;
            var asserter = $asm.$.Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.f3;

            var e1 = ($t = { ntype: 38, t: System.Int32, n: "a" }, ($t1 = { ntype: 29, t: System.Int32, operand: $t }, { ntype: 18, t: Function, rt: $t1.t, body: $t1, p: Bridge.toList([$t]) }));
            var e2 = ($t2 = { ntype: 38, t: System.Int32, n: "a" }, ($t3 = { ntype: 28, t: System.Int32, operand: $t2 }, { ntype: 18, t: Function, rt: $t3.t, body: $t3, p: Bridge.toList([$t2]) }));
            var e3 = ($t4 = { ntype: 38, t: System.Int32, n: "a" }, ($t5 = { ntype: 82, t: System.Int32, operand: $t4 }, { ntype: 18, t: Function, rt: $t5.t, body: $t5, p: Bridge.toList([$t4]) }));
            var e4 = ($t6 = { ntype: 38, t: System.Boolean, n: "a" }, ($t7 = { ntype: 34, t: System.Boolean, operand: $t6 }, { ntype: 18, t: Function, rt: $t7.t, body: $t7, p: Bridge.toList([$t6]) }));
            var e5 = ($t8 = { ntype: 38, t: System.Int32, n: "a" }, ($t9 = { ntype: 30, t: System.Int32, operand: $t8 }, { ntype: 18, t: Function, rt: $t9.t, body: $t9, p: Bridge.toList([$t8]) }));

            var pa = { ntype: 38, t: System.Int32, n: "a" };
            var e11 = { ntype: 29, t: System.Int32, operand: pa };
            var e12 = { ntype: 28, t: System.Int32, operand: pa };
            var e13 = { ntype: 82, t: System.Int32, operand: pa };
            var e14 = { ntype: 34, t: System.Boolean, operand: { ntype: 38, t: System.Boolean, n: "a" } };
            var e15 = { ntype: 30, t: System.Int32, operand: pa };
            var e16 = { ntype: 84, t: System.Boolean, operand: { ntype: 38, t: System.Boolean, n: "a" } };
            var e17 = { ntype: 83, t: System.Boolean, operand: { ntype: 38, t: System.Boolean, n: "a" } };
            var e18 = { ntype: 54, t: System.Int32, operand: pa };
            var e19 = { ntype: 49, t: System.Int32, operand: pa };

            var e21 = ($t10 = { ntype: 38, t: Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, n: "a" }, ($t12 = ($t11 = Bridge.getMetadata(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C).m[30], { ntype: 29, t: $t11.rt, operand: $t10, method: $t11 }), { ntype: 18, t: Function, rt: $t12.t, body: $t12, p: Bridge.toList([$t10]) }));
            var e22 = ($t13 = { ntype: 38, t: Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, n: "a" }, ($t15 = ($t14 = Bridge.getMetadata(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C).m[29], { ntype: 28, t: $t14.rt, operand: $t13, method: $t14 }), { ntype: 18, t: Function, rt: $t15.t, body: $t15, p: Bridge.toList([$t13]) }));
            var e23 = ($t16 = { ntype: 38, t: Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, n: "a" }, ($t18 = ($t17 = Bridge.getMetadata(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C).m[24], { ntype: 82, t: $t17.rt, operand: $t16, method: $t17 }), { ntype: 18, t: Function, rt: $t18.t, body: $t18, p: Bridge.toList([$t16]) }));
            var e24 = ($t19 = { ntype: 38, t: Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, n: "a" }, ($t21 = ($t20 = Bridge.getMetadata(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C).m[21], { ntype: 34, t: $t20.rt, operand: $t19, method: $t20 }), { ntype: 18, t: Function, rt: $t21.t, body: $t21, p: Bridge.toList([$t19]) }));
            var e25 = ($t22 = { ntype: 38, t: Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, n: "a" }, ($t24 = ($t23 = Bridge.getMetadata(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C).m[29], { ntype: 30, t: $t23.rt, operand: $t22, method: $t23 }), { ntype: 18, t: Function, rt: $t24.t, body: $t24, p: Bridge.toList([$t22]) }));

            var pa2 = { ntype: 38, t: Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, n: "a" };
            var e31 = ($t25 = Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, 8, 284, "op_UnaryPlus"), { ntype: 29, t: $t25.rt, operand: pa2, method: $t25 });
            var e32 = ($t26 = Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, 8, 284, "op_UnaryNegation"), { ntype: 28, t: $t26.rt, operand: pa2, method: $t26 });
            var e33 = ($t27 = Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, 8, 284, "op_OnesComplement"), { ntype: 82, t: $t27.rt, operand: pa2, method: $t27 });
            var e34 = ($t28 = Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, 8, 284, "op_LogicalNot"), { ntype: 34, t: $t28.rt, operand: pa2, method: $t28 });
            var e35 = ($t29 = Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, 8, 284, "op_UnaryNegation"), { ntype: 30, t: $t29.rt, operand: pa2, method: $t29 });
            var e36 = ($t30 = Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, 8, 284, "op_False"), { ntype: 84, t: $t30.rt, operand: pa2, method: $t30 });
            var e37 = ($t31 = Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, 8, 284, "op_True"), { ntype: 83, t: $t31.rt, operand: pa2, method: $t31 });
            var e38 = ($t32 = Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, 8, 284, "op_Increment"), { ntype: 54, t: $t32.rt, operand: pa2, method: $t32 });
            var e39 = ($t33 = Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, 8, 284, "op_Decrement"), { ntype: 49, t: $t33.rt, operand: pa2, method: $t33 });

            var e41 = { ntype: 77, t: System.Int32, operand: pa };
            var e42 = { ntype: 78, t: System.Int32, operand: pa };
            var e43 = { ntype: 79, t: System.Int32, operand: pa };
            var e44 = { ntype: 80, t: System.Int32, operand: pa };

            var e51 = ($t34 = Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, 8, 284, "op_Increment"), { ntype: 77, t: $t34.rt, operand: pa, method: $t34 });
            var e52 = ($t35 = Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, 8, 284, "op_Decrement"), { ntype: 78, t: $t35.rt, operand: pa, method: $t35 });
            var e53 = ($t36 = Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, 8, 284, "op_Increment"), { ntype: 79, t: $t36.rt, operand: pa, method: $t36 });
            var e54 = ($t37 = Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, 8, 284, "op_Decrement"), { ntype: 80, t: $t37.rt, operand: pa, method: $t37 });

            var mkun1 = { ntype: 82, t: System.Int32, operand: pa };
            var mkun2 = ($t38 = Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, 8, 284, "op_UnaryNegation"), { ntype: 28, t: null || $t38.rt, operand: pa2, method: $t38 });

            asserter(e1.body, 29, System.Int32, null, "e1");
            asserter(e2.body, 28, System.Int32, null, "e2");
            asserter(e3.body, 82, System.Int32, null, "e3");
            asserter(e4.body, 34, System.Boolean, null, "e4");
            asserter(e5.body, 30, System.Int32, null, "e5");

            asserter(e11, 29, System.Int32, null, "e11");
            asserter(e12, 28, System.Int32, null, "e12");
            asserter(e13, 82, System.Int32, null, "e13");
            asserter(e14, 34, System.Boolean, null, "e14");
            asserter(e15, 30, System.Int32, null, "e15");
            asserter(e16, 84, System.Boolean, null, "e16");
            asserter(e17, 83, System.Boolean, null, "e17");
            asserter(e18, 54, System.Int32, null, "e18");
            asserter(e19, 49, System.Int32, null, "e19");

            asserter(e21.body, 29, Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, "op_UnaryPlus", "e21");
            asserter(e22.body, 28, Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, "op_UnaryNegation", "e22");
            asserter(e23.body, 82, Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, "op_OnesComplement", "e23");
            asserter(e24.body, 34, System.Boolean, "op_LogicalNot", "e24");
            asserter(e25.body, 30, Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, "op_UnaryNegation", "e25");

            asserter(e31, 29, Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, "op_UnaryPlus", "e31");
            asserter(e32, 28, Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, "op_UnaryNegation", "e32");
            asserter(e33, 82, Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, "op_OnesComplement", "e33");
            asserter(e34, 34, System.Boolean, "op_LogicalNot", "e34");
            asserter(e35, 30, Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, "op_UnaryNegation", "e35");
            asserter(e36, 84, System.Boolean, "op_False", "e36");
            asserter(e37, 83, System.Boolean, "op_True", "e37");
            asserter(e38, 54, Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, "op_Increment", "e38");
            asserter(e39, 49, Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, "op_Decrement", "e39");

            asserter(e41, 77, System.Int32, null, "e41");
            asserter(e42, 78, System.Int32, null, "e42");
            asserter(e43, 79, System.Int32, null, "e43");
            asserter(e44, 80, System.Int32, null, "e44");

            asserter(e51, 77, Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, "op_Increment", "e51");
            asserter(e52, 78, Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, "op_Decrement", "e52");
            asserter(e53, 79, Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, "op_Increment", "e53");
            asserter(e54, 80, Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, "op_Decrement", "e54");

            asserter(mkun1, 82, System.Int32, null, "mkun1");
            asserter(mkun2, 28, Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, "op_UnaryNegation", "mkun2");

            Bridge.Test.NUnit.Assert.false$1(($t39 = { ntype: 9, t: System.Object, value: null }, Bridge.is($t39, Bridge.hasValue($t39) && ([4,10,11,28,29,30,34,40,44,49,54,60,62,77,78,79,80,82,83,84].indexOf($t39.ntype) >= 0))), "Constant should not be UnaryExpression");
        },
        arrayLengthWorks: function () {
            var $t, $t1, $t2;
            var e1 = ($t = { ntype: 38, t: System.Array.type(System.Double), n: "a" }, ($t1 = { ntype: 4, t: System.Int32, operand: $t }, { ntype: 18, t: Function, rt: $t1.t, body: $t1, p: Bridge.toList([$t]) }));
            var e2 = { ntype: 4, t: System.Int32, operand: { ntype: 38, t: System.Array.type(System.Double), n: "a" } };

            Bridge.Test.NUnit.Assert.true$1(($t2 = e1.body, Bridge.is($t2, Bridge.hasValue($t2) && ([4,10,11,28,29,30,34,40,44,49,54,60,62,77,78,79,80,82,83,84].indexOf($t2.ntype) >= 0))), "e1 is UnaryExpression");
            Bridge.Test.NUnit.Assert.areEqual$1(4, e1.body.ntype, "e1 node type");
            Bridge.Test.NUnit.Assert.areEqual$1(System.Int32, e1.body.t, "e1 type");
            Bridge.Test.NUnit.Assert.true$1(($t2 = ($t2 = e1.body, Bridge.cast($t2, Bridge.hasValue($t2) && ([4,10,11,28,29,30,34,40,44,49,54,60,62,77,78,79,80,82,83,84].indexOf($t2.ntype) >= 0))).operand, Bridge.is($t2, Bridge.hasValue($t2) && ($t2.ntype === 38))) && Bridge.referenceEquals(($t2 = ($t2 = e1.body, Bridge.cast($t2, Bridge.hasValue($t2) && ([4,10,11,28,29,30,34,40,44,49,54,60,62,77,78,79,80,82,83,84].indexOf($t2.ntype) >= 0))).operand, Bridge.cast($t2, Bridge.hasValue($t2) && ($t2.ntype === 38))).n, "a"), "e1 operand");
            Bridge.Test.NUnit.Assert.true$1(($t2 = e1.body, Bridge.cast($t2, Bridge.hasValue($t2) && ([4,10,11,28,29,30,34,40,44,49,54,60,62,77,78,79,80,82,83,84].indexOf($t2.ntype) >= 0))).method == null, "e1 method");

            Bridge.Test.NUnit.Assert.true$1(Bridge.is(e2, Bridge.hasValue(e2) && ([4,10,11,28,29,30,34,40,44,49,54,60,62,77,78,79,80,82,83,84].indexOf(e2.ntype) >= 0)), "e2 is UnaryExpression");
            Bridge.Test.NUnit.Assert.areEqual$1(4, e2.ntype, "e2 node type");
            Bridge.Test.NUnit.Assert.areEqual$1(System.Int32, e2.t, "e2 type");
            Bridge.Test.NUnit.Assert.true$1(($t2 = Bridge.cast(e2, Bridge.hasValue(e2) && ([4,10,11,28,29,30,34,40,44,49,54,60,62,77,78,79,80,82,83,84].indexOf(e2.ntype) >= 0)).operand, Bridge.is($t2, Bridge.hasValue($t2) && ($t2.ntype === 38))) && Bridge.referenceEquals(($t2 = Bridge.cast(e2, Bridge.hasValue(e2) && ([4,10,11,28,29,30,34,40,44,49,54,60,62,77,78,79,80,82,83,84].indexOf(e2.ntype) >= 0)).operand, Bridge.cast($t2, Bridge.hasValue($t2) && ($t2.ntype === 38))).n, "a"), "e2 operand");
            Bridge.Test.NUnit.Assert.true$1(Bridge.cast(e2, Bridge.hasValue(e2) && ([4,10,11,28,29,30,34,40,44,49,54,60,62,77,78,79,80,82,83,84].indexOf(e2.ntype) >= 0)).method == null, "e2 method");
        },
        conversionsWork: function () {
            var $t, $t1, $t2, $t3, $t4, $t5, $t6, $t7, $t8, $t9, $t10, $t11, $t12, $t13;
            var asserter = $asm.$.Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.f3;

            var e1 = ($t = { ntype: 38, t: System.Object, n: "a" }, ($t1 = { ntype: 10, t: System.Int32, operand: $t }, { ntype: 18, t: Function, rt: $t1.t, body: $t1, p: Bridge.toList([$t]) }));
            var e2 = ($t2 = { ntype: 38, t: System.Object, n: "a" }, ($t3 = { ntype: 10, t: Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, operand: $t2 }, { ntype: 18, t: Function, rt: $t3.t, body: $t3, p: Bridge.toList([$t2]) }));
            var e3 = ($t4 = { ntype: 38, t: System.Double, n: "a" }, ($t5 = { ntype: 10, t: System.Int32, operand: $t4 }, { ntype: 18, t: Function, rt: $t5.t, body: $t5, p: Bridge.toList([$t4]) }));
            var e4 = ($t6 = { ntype: 38, t: System.Double, n: "a" }, ($t7 = { ntype: 11, t: System.Int32, operand: $t6 }, { ntype: 18, t: Function, rt: $t7.t, body: $t7, p: Bridge.toList([$t6]) }));
            var e5 = ($t8 = { ntype: 38, t: System.Object, n: "a" }, ($t9 = { ntype: 44, t: Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, operand: $t8 }, { ntype: 18, t: Function, rt: $t9.t, body: $t9, p: Bridge.toList([$t8]) }));
            var e6 = ($t10 = { ntype: 38, t: Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, n: "a" }, ($t11 = { ntype: 10, t: System.Int32, operand: $t10, method: Bridge.getMetadata(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C).m[12] }, { ntype: 18, t: Function, rt: $t11.t, body: $t11, p: Bridge.toList([$t10]) }));
            var e7 = ($t12 = { ntype: 38, t: Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, n: "a" }, ($t13 = { ntype: 11, t: System.Int32, operand: $t12, method: Bridge.getMetadata(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C).m[12] }, { ntype: 18, t: Function, rt: $t13.t, body: $t13, p: Bridge.toList([$t12]) }));

            var e11 = { ntype: 62, t: System.Int32, operand: { ntype: 38, t: System.Object, n: "a" } };
            var e12 = { ntype: 10, t: Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, operand: { ntype: 38, t: System.Object, n: "a" } };
            var e13 = { ntype: 10, t: System.Int32, operand: { ntype: 38, t: System.Double, n: "a" } };
            var e14 = { ntype: 11, t: System.Int32, operand: { ntype: 38, t: System.Double, n: "a" } };
            var e15 = { ntype: 44, t: Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, operand: { ntype: 38, t: System.Object, n: "a" } };
            var e16 = { ntype: 10, t: System.Int32, operand: { ntype: 38, t: Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, n: "a" }, method: Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, 8, 284, "op_Explicit") };
            var e17 = { ntype: 11, t: System.Int32, operand: { ntype: 38, t: Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, n: "a" }, method: Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, 8, 284, "op_Explicit") };

            asserter(e1.body, 10, System.Int32, null, "e1");
            asserter(e2.body, 10, Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, null, "e2");
            asserter(e3.body, 10, System.Int32, null, "e3");
            asserter(e4.body, 11, System.Int32, null, "e4");
            asserter(e5.body, 44, Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, null, "e5");
            asserter(e6.body, 10, System.Int32, "op_Explicit", "e6");
            asserter(e7.body, 11, System.Int32, "op_Explicit", "e7");

            asserter(e11, 62, System.Int32, null, "e11");
            asserter(e12, 10, Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, null, "e12");
            asserter(e13, 10, System.Int32, null, "e13");
            asserter(e14, 11, System.Int32, null, "e14");
            asserter(e15, 44, Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, null, "e15");
            asserter(e16, 10, System.Int32, "op_Explicit", "e16");
            asserter(e17, 11, System.Int32, "op_Explicit", "e17");
        },
        arrayIndexWorks: function () {
            var $t, $t1, $t2, $t3;
            var e1 = ($t = { ntype: 38, t: System.Array.type(System.Double), n: "a" }, $t1 = { ntype: 38, t: System.Int32, n: "b" }, ($t2 = { ntype: 5, t: System.Double, left: $t, right: $t1 }, { ntype: 18, t: Function, rt: $t2.t, body: $t2, p: Bridge.toList([$t,$t1]) }));
            var e2 = { ntype: 5, t: System.Double, left: { ntype: 38, t: System.Array.type(System.Double), n: "a" }, right: { ntype: 38, t: System.Int32, n: "b" } };

            Bridge.Test.NUnit.Assert.true$1(($t3 = e1.body, Bridge.is($t3, Bridge.hasValue($t3) && ([0,1,2,3,5,7,12,13,14,15,16,19,20,21,22,25,26,27,35,36,37,39,41,42,43,46,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80].indexOf($t3.ntype) >= 0))), "e1 is BinaryExpression");
            Bridge.Test.NUnit.Assert.areEqual$1(5, e1.body.ntype, "e1 node type");
            Bridge.Test.NUnit.Assert.areEqual$1(System.Double, e1.body.t, "e1 type");
            Bridge.Test.NUnit.Assert.true$1(($t3 = ($t3 = e1.body, Bridge.cast($t3, Bridge.hasValue($t3) && ([0,1,2,3,5,7,12,13,14,15,16,19,20,21,22,25,26,27,35,36,37,39,41,42,43,46,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80].indexOf($t3.ntype) >= 0))).left, Bridge.is($t3, Bridge.hasValue($t3) && ($t3.ntype === 38))) && Bridge.referenceEquals(($t3 = ($t3 = e1.body, Bridge.cast($t3, Bridge.hasValue($t3) && ([0,1,2,3,5,7,12,13,14,15,16,19,20,21,22,25,26,27,35,36,37,39,41,42,43,46,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80].indexOf($t3.ntype) >= 0))).left, Bridge.cast($t3, Bridge.hasValue($t3) && ($t3.ntype === 38))).n, "a"), "e1 left");
            Bridge.Test.NUnit.Assert.true$1(($t3 = ($t3 = e1.body, Bridge.cast($t3, Bridge.hasValue($t3) && ([0,1,2,3,5,7,12,13,14,15,16,19,20,21,22,25,26,27,35,36,37,39,41,42,43,46,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80].indexOf($t3.ntype) >= 0))).right, Bridge.is($t3, Bridge.hasValue($t3) && ($t3.ntype === 38))) && Bridge.referenceEquals(($t3 = ($t3 = e1.body, Bridge.cast($t3, Bridge.hasValue($t3) && ([0,1,2,3,5,7,12,13,14,15,16,19,20,21,22,25,26,27,35,36,37,39,41,42,43,46,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80].indexOf($t3.ntype) >= 0))).right, Bridge.cast($t3, Bridge.hasValue($t3) && ($t3.ntype === 38))).n, "b"), "e1 right");
            Bridge.Test.NUnit.Assert.true$1(($t3 = e1.body, Bridge.cast($t3, Bridge.hasValue($t3) && ([0,1,2,3,5,7,12,13,14,15,16,19,20,21,22,25,26,27,35,36,37,39,41,42,43,46,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80].indexOf($t3.ntype) >= 0))).method == null, "e1 method");

            Bridge.Test.NUnit.Assert.true$1(Bridge.is(e2, Bridge.hasValue(e2) && ([0,1,2,3,5,7,12,13,14,15,16,19,20,21,22,25,26,27,35,36,37,39,41,42,43,46,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80].indexOf(e2.ntype) >= 0)), "e2 is BinaryExpression");
            Bridge.Test.NUnit.Assert.areEqual$1(5, e2.ntype, "e2 node type");
            Bridge.Test.NUnit.Assert.areEqual$1(System.Double, e2.t, "e2 type");
            Bridge.Test.NUnit.Assert.true$1(($t3 = ($t3 = e1.body, Bridge.cast($t3, Bridge.hasValue($t3) && ([0,1,2,3,5,7,12,13,14,15,16,19,20,21,22,25,26,27,35,36,37,39,41,42,43,46,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80].indexOf($t3.ntype) >= 0))).left, Bridge.is($t3, Bridge.hasValue($t3) && ($t3.ntype === 38))) && Bridge.referenceEquals(($t3 = ($t3 = e1.body, Bridge.cast($t3, Bridge.hasValue($t3) && ([0,1,2,3,5,7,12,13,14,15,16,19,20,21,22,25,26,27,35,36,37,39,41,42,43,46,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80].indexOf($t3.ntype) >= 0))).left, Bridge.cast($t3, Bridge.hasValue($t3) && ($t3.ntype === 38))).n, "a"), "e2 left");
            Bridge.Test.NUnit.Assert.true$1(($t3 = ($t3 = e1.body, Bridge.cast($t3, Bridge.hasValue($t3) && ([0,1,2,3,5,7,12,13,14,15,16,19,20,21,22,25,26,27,35,36,37,39,41,42,43,46,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80].indexOf($t3.ntype) >= 0))).right, Bridge.is($t3, Bridge.hasValue($t3) && ($t3.ntype === 38))) && Bridge.referenceEquals(($t3 = ($t3 = e1.body, Bridge.cast($t3, Bridge.hasValue($t3) && ([0,1,2,3,5,7,12,13,14,15,16,19,20,21,22,25,26,27,35,36,37,39,41,42,43,46,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80].indexOf($t3.ntype) >= 0))).right, Bridge.cast($t3, Bridge.hasValue($t3) && ($t3.ntype === 38))).n, "b"), "e2 right");
            Bridge.Test.NUnit.Assert.true$1(($t3 = e1.body, Bridge.cast($t3, Bridge.hasValue($t3) && ([0,1,2,3,5,7,12,13,14,15,16,19,20,21,22,25,26,27,35,36,37,39,41,42,43,46,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80].indexOf($t3.ntype) >= 0))).method == null, "e2 method");
        },
        multiDimensionalArrayIndexWorks: function () {
            var $t, $t1, $t2, $t3, $t4, $t5, $t6, $t7, $t8;
            var arr = System.Array.create(0, null, System.Double, 4, 4);
            arr.set([1, 2], 2.5);
            var e1 = ($t = { ntype: 38, t: System.Array.type(System.Double, 2), n: "a" }, $t1 = { ntype: 38, t: System.Int32, n: "b" }, $t2 = { ntype: 38, t: System.Int32, n: "c" }, ($t5 = ($t3 = System.Double, $t4 = [$t1,$t2], { ntype: 6, t: $t3, obj: $t, method: { t: 8, td: System.Array.type($t3, $t4.length), n: 'Get', rt: $t3, p: System.Array.init($t4.length, System.Int32, $t3, true), def: function() { return System.Array.$get.call(this, arguments); } }, args: Bridge.toList($t4) }), { ntype: 18, t: Function, rt: $t5.t, body: $t5, p: Bridge.toList([$t,$t1,$t2]) }));
            var e2 = ($t6 = System.Double, $t7 = System.Array.init([{ ntype: 38, t: System.Int32, n: "b" }, { ntype: 38, t: System.Int32, n: "c" }], System.Object), { ntype: 6, t: $t6, obj: { ntype: 38, t: System.Array.type(System.Double, 2), n: "a" }, method: { t: 8, td: System.Array.type($t6, $t7.length), n: 'Get', rt: $t6, p: System.Array.init($t7.length, System.Int32, $t6, true), def: function() { return System.Array.$get.call(this, arguments); } }, args: Bridge.toList($t7) });
            var e3 = ($t8 = System.Double, (function(a, b, c) { return { ntype: 6, t: a, obj: b, method: { t: 8, td: System.Array.type($t8, c.getCount()), n: 'Get', rt: a, p: System.Array.init(c.getCount(), System.Int32, $t8, true), def: function() { return System.Array.$get.call(this, arguments); } }, args: c }; })($t8, { ntype: 38, t: System.Array.type(System.Double, 2), n: "a" }, Bridge.toList(new (Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.MyEnumerable$1(System.Object))(System.Array.init([{ ntype: 38, t: System.Int32, n: "b" }, { ntype: 38, t: System.Int32, n: "c" }], System.Object)))));

            var asserter = function (expr, title) {
                var $t9;
                var me = Bridge.as(expr, Bridge.hasValue(expr) && (expr.ntype === 6));
                Bridge.Test.NUnit.Assert.true$1(me != null, System.String.concat(title, " is MethodCallExpression"));
                Bridge.Test.NUnit.Assert.areEqual$1(6, me.ntype, System.String.concat(title, " node type"));
                Bridge.Test.NUnit.Assert.areEqual$1(System.Double, me.t, System.String.concat(title, " type"));
                Bridge.Test.NUnit.Assert.true$1(($t9 = me.obj, Bridge.is($t9, Bridge.hasValue($t9) && ($t9.ntype === 38))) && Bridge.referenceEquals(($t9 = me.obj, Bridge.cast($t9, Bridge.hasValue($t9) && ($t9.ntype === 38))).n, "a"), System.String.concat(title, " object"));
                Bridge.Test.NUnit.Assert.areEqual$1(2, me.args.Count, System.String.concat(title, " argument count"));
                Bridge.Test.NUnit.Assert.true$1(($t9 = me.args.get(0), Bridge.is($t9, Bridge.hasValue($t9) && ($t9.ntype === 38))) && Bridge.referenceEquals(($t9 = me.args.get(0), Bridge.cast($t9, Bridge.hasValue($t9) && ($t9.ntype === 38))).n, "b"), System.String.concat(title, " argument 0"));
                Bridge.Test.NUnit.Assert.true$1(($t9 = me.args.get(1), Bridge.is($t9, Bridge.hasValue($t9) && ($t9.ntype === 38))) && Bridge.referenceEquals(($t9 = me.args.get(1), Bridge.cast($t9, Bridge.hasValue($t9) && ($t9.ntype === 38))).n, "c"), System.String.concat(title, " argument 1"));
                Bridge.Test.NUnit.Assert.areEqual$1(8, me.method.t, System.String.concat(title, "method type"));
                Bridge.Test.NUnit.Assert.false$1((me.method.t === 1), System.String.concat(title, "method is constructor"));
                Bridge.Test.NUnit.Assert.false$1((me.method.is || false), System.String.concat(title, "method isstatic"));
                Bridge.Test.NUnit.Assert.areEqual$1(System.Double, me.method.rt, System.String.concat(title, " method return value"));
                Bridge.Test.NUnit.Assert.areEqual$1("Get", me.method.n, System.String.concat(title, " method name"));
                Bridge.Test.NUnit.Assert.areEqual$1(System.Array.type(System.Double, 2), me.method.td, System.String.concat(title, " method declaring type"));
                Bridge.Test.NUnit.Assert.areEqual$1(System.Array.init([System.Int32, System.Int32], Function), (me.method.p || []), System.String.concat(title, " method parameter types"));
                Bridge.Test.NUnit.Assert.areEqual$1(2.5, Bridge.unbox(Bridge.Reflection.midel(me.method, arr)(1, 2)), System.String.concat(title, " method invoke result"));
            };

            asserter(e1.body, "e1");
            asserter(e2, "e2");
            asserter(e3, "e3");
        },
        conditionWorks: function () {
            var $t, $t1, $t2, $t3, $t4;
            var e1 = ($t = { ntype: 38, t: System.Boolean, n: "a" }, $t1 = { ntype: 38, t: System.Int32, n: "b" }, $t2 = { ntype: 38, t: System.Int32, n: "c" }, ($t3 = { ntype: 8, t: System.Int32, test: $t, ifTrue: $t1, ifFalse: $t2 }, { ntype: 18, t: Function, rt: $t3.t, body: $t3, p: Bridge.toList([$t,$t1,$t2]) }));
            var e2 = { ntype: 8, t: System.Int32, test: { ntype: 38, t: System.Boolean, n: "a" }, ifTrue: { ntype: 38, t: System.Int32, n: "b" }, ifFalse: { ntype: 38, t: System.Int32, n: "c" } };

            Bridge.Test.NUnit.Assert.true$1(($t4 = e1.body, Bridge.is($t4, Bridge.hasValue($t4) && ($t4.ntype === 8))), "e1 is ConditionalExpression");
            Bridge.Test.NUnit.Assert.areEqual$1(8, e1.body.ntype, "e1 node type");
            Bridge.Test.NUnit.Assert.areEqual$1(System.Int32, e1.body.t, "e1 type");
            Bridge.Test.NUnit.Assert.true$1(($t4 = ($t4 = e1.body, Bridge.cast($t4, Bridge.hasValue($t4) && ($t4.ntype === 8))).test, Bridge.is($t4, Bridge.hasValue($t4) && ($t4.ntype === 38))) && Bridge.referenceEquals(($t4 = ($t4 = e1.body, Bridge.cast($t4, Bridge.hasValue($t4) && ($t4.ntype === 8))).test, Bridge.cast($t4, Bridge.hasValue($t4) && ($t4.ntype === 38))).n, "a"), "e1 test");
            Bridge.Test.NUnit.Assert.true$1(($t4 = ($t4 = e1.body, Bridge.cast($t4, Bridge.hasValue($t4) && ($t4.ntype === 8))).ifTrue, Bridge.is($t4, Bridge.hasValue($t4) && ($t4.ntype === 38))) && Bridge.referenceEquals(($t4 = ($t4 = e1.body, Bridge.cast($t4, Bridge.hasValue($t4) && ($t4.ntype === 8))).ifTrue, Bridge.cast($t4, Bridge.hasValue($t4) && ($t4.ntype === 38))).n, "b"), "e1 iftrue");
            Bridge.Test.NUnit.Assert.true$1(($t4 = ($t4 = e1.body, Bridge.cast($t4, Bridge.hasValue($t4) && ($t4.ntype === 8))).ifFalse, Bridge.is($t4, Bridge.hasValue($t4) && ($t4.ntype === 38))) && Bridge.referenceEquals(($t4 = ($t4 = e1.body, Bridge.cast($t4, Bridge.hasValue($t4) && ($t4.ntype === 8))).ifFalse, Bridge.cast($t4, Bridge.hasValue($t4) && ($t4.ntype === 38))).n, "c"), "e1 iffalse");

            Bridge.Test.NUnit.Assert.true$1(Bridge.is(e2, Bridge.hasValue(e2) && (e2.ntype === 8)), "e2 is ConditionalExpression");
            Bridge.Test.NUnit.Assert.areEqual$1(8, e2.ntype, "e2 node type");
            Bridge.Test.NUnit.Assert.areEqual$1(System.Int32, e2.t, "e2 type");
            Bridge.Test.NUnit.Assert.true$1(($t4 = Bridge.cast(e2, Bridge.hasValue(e2) && (e2.ntype === 8)).test, Bridge.is($t4, Bridge.hasValue($t4) && ($t4.ntype === 38))) && Bridge.referenceEquals(($t4 = Bridge.cast(e2, Bridge.hasValue(e2) && (e2.ntype === 8)).test, Bridge.cast($t4, Bridge.hasValue($t4) && ($t4.ntype === 38))).n, "a"), "e2 test");
            Bridge.Test.NUnit.Assert.true$1(($t4 = Bridge.cast(e2, Bridge.hasValue(e2) && (e2.ntype === 8)).ifTrue, Bridge.is($t4, Bridge.hasValue($t4) && ($t4.ntype === 38))) && Bridge.referenceEquals(($t4 = Bridge.cast(e2, Bridge.hasValue(e2) && (e2.ntype === 8)).ifTrue, Bridge.cast($t4, Bridge.hasValue($t4) && ($t4.ntype === 38))).n, "b"), "e2 iftrue");
            Bridge.Test.NUnit.Assert.true$1(($t4 = Bridge.cast(e2, Bridge.hasValue(e2) && (e2.ntype === 8)).ifFalse, Bridge.is($t4, Bridge.hasValue($t4) && ($t4.ntype === 38))) && Bridge.referenceEquals(($t4 = Bridge.cast(e2, Bridge.hasValue(e2) && (e2.ntype === 8)).ifFalse, Bridge.cast($t4, Bridge.hasValue($t4) && ($t4.ntype === 38))).n, "c"), "e2 iffalse");

            Bridge.Test.NUnit.Assert.false$1(($t4 = { ntype: 9, t: System.Object, value: null }, Bridge.is($t4, Bridge.hasValue($t4) && ($t4.ntype === 8))), "Constant should not be ConditionalExpression");
        },
        callWorks: function () {
            var $t, $t1, $t2, $t3, $t4, $t5, $t6, $t7, $t8, $t9, $t10, $t11, $t12, $t13, $t14, $t15, $t16, $t17, $t18, $t19, $t20, $t21;
            var asserter = $asm.$.Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.f4;

            var e1 = ($t = { ntype: 38, t: Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, n: "i" }, $t1 = { ntype: 38, t: System.Int32, n: "a" }, $t2 = { ntype: 38, t: System.String, n: "b" }, ($t4 = ($t3 = Bridge.getMetadata(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C).m[2], { ntype: 6, t: $t3.rt, obj: $t, method: $t3, args: Bridge.toList([$t1,$t2]) }), { ntype: 18, t: Function, rt: $t4.t, body: $t4, p: Bridge.toList([$t,$t1,$t2]) }));
            var e2 = ($t5 = { ntype: 38, t: System.Int32, n: "a" }, $t6 = { ntype: 38, t: System.String, n: "b" }, ($t8 = ($t7 = Bridge.getMetadata(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C).m[3], { ntype: 6, t: $t7.rt, obj: null, method: $t7, args: Bridge.toList([$t5,$t6]) }), { ntype: 18, t: Function, rt: $t8.t, body: $t8, p: Bridge.toList([$t5,$t6]) }));
            var e3 = ($t9 = Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, 8, 284, "M1"), { ntype: 6, t: $t9.rt, obj: { ntype: 38, t: Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, n: "i" }, method: $t9, args: Bridge.toList(System.Array.init([{ ntype: 38, t: System.Int32, n: "a" }, { ntype: 38, t: System.String, n: "b" }], System.Object)) });
            var e4 = ($t10 = Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, 8, 284, "M2"), { ntype: 6, t: $t10.rt, obj: null, method: $t10, args: Bridge.toList(System.Array.init([{ ntype: 38, t: System.Int32, n: "a" }, { ntype: 38, t: System.String, n: "b" }], System.Object)) });
            var e5 = ($t11 = Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, 8, 284, "M1"), { ntype: 6, t: $t11.rt, obj: { ntype: 38, t: Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, n: "i" }, method: $t11, args: Bridge.toList(new (Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.MyEnumerable$1(System.Object))(System.Array.init([{ ntype: 38, t: System.Int32, n: "a" }, { ntype: 38, t: System.String, n: "b" }], System.Object))) });
            var e6 = ($t12 = Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, 8, 284, "M2"), { ntype: 6, t: $t12.rt, obj: null, method: $t12, args: Bridge.toList(new (Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.MyEnumerable$1(System.Object))(System.Array.init([{ ntype: 38, t: System.Int32, n: "a" }, { ntype: 38, t: System.String, n: "b" }], System.Object))) });
            var e7 = ($t13 = Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, 8, 284, "M2"), { ntype: 6, t: $t13.rt, method: $t13, args: Bridge.toList(System.Array.init([{ ntype: 38, t: System.Int32, n: "a" }, { ntype: 38, t: System.String, n: "b" }], System.Object)) });
            var e8 = ($t14 = Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, 8, 284, "M2"), { ntype: 6, t: $t14.rt, method: $t14, args: Bridge.toList(new (Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.MyEnumerable$1(System.Object))(System.Array.init([{ ntype: 38, t: System.Int32, n: "a" }, { ntype: 38, t: System.String, n: "b" }], System.Object))) });
            var e9 = ($t15 = { ntype: 38, t: Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, n: "a" }, ($t17 = ($t16 = Bridge.getMetadata(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C).m[2], { ntype: 6, t: $t16.rt, obj: $t15, method: $t16, args: Bridge.toList([{ ntype: 9, t: System.Int32, value: 0 },{ ntype: 9, t: System.String, value: null }]) }), { ntype: 18, t: Function, rt: $t17.t, body: $t17, p: Bridge.toList([$t15]) }));
            var e10 = ($t18 = { ntype: 38, t: Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, n: "a" }, ($t20 = ($t19 = {"td":Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C,"a":2,"n":"M3","t":8,"pi":[{"n":"a","pt":System.Int32,"ps":0}],"sn":"M3","rt":System.Int32,"p":[System.Int32]}, { ntype: 6, t: $t19.rt, obj: $t18, method: $t19, args: Bridge.toList([{ ntype: 9, t: System.Int32, value: 0 }]) }), { ntype: 18, t: Function, rt: $t20.t, body: $t20, p: Bridge.toList([$t18]) }));

            asserter(e1.body, "M1", false, "e1");
            asserter(e2.body, "M2", true, "e2");
            asserter(e3, "M1", false, "e3");
            asserter(e4, "M2", true, "e4");
            asserter(e5, "M1", false, "e5");
            asserter(e6, "M2", true, "e6");
            asserter(e7, "M2", true, "e7");
            asserter(e8, "M2", true, "e8");

            Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(($t21 = e9.body, Bridge.cast($t21, Bridge.hasValue($t21) && ($t21.ntype === 6))).method, Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, 8, 284, "M1")), "e9 member");
            Bridge.Test.NUnit.Assert.areEqual$1("M3", ($t21 = e10.body, Bridge.cast($t21, Bridge.hasValue($t21) && ($t21.ntype === 6))).method.n, "e10 member name");
            Bridge.Test.NUnit.Assert.areEqual$1(73, Bridge.unbox(Bridge.Reflection.midel(($t21 = e10.body, Bridge.cast($t21, Bridge.hasValue($t21) && ($t21.ntype === 6))).method, new Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C.ctor())(39)), "e10 member result");

            Bridge.Test.NUnit.Assert.false$1(($t21 = { ntype: 9, t: System.Object, value: null }, Bridge.is($t21, Bridge.hasValue($t21) && ($t21.ntype === 6))), "Constant should not be MethodCallExpression");
        },
        methodGroupConversionWorks: function () {
            var $t, $t1, $t2, $t3;
            var e1 = ($t = { ntype: 38, t: Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, n: "a" }, ($t2 = { ntype: 10, t: Function, operand: ($t1 = {"td":System.Reflection.MethodInfo,"a":2,"n":"CreateDelegate","t":8,"pi":[{"n":"delegateType","pt":Function,"ps":0},{"n":"target","pt":System.Object,"ps":1}],"tpc":0,"def":function (delegateType, target) { return Bridge.Reflection.midel(this, target); },"rt":Function,"p":[Function,System.Object]}, { ntype: 6, t: $t1.rt, obj: { ntype: 9, t: System.Reflection.MethodInfo, value: Bridge.getMetadata(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C).m[4] }, method: $t1, args: Bridge.toList([Function,$t]) }) }, { ntype: 18, t: Function, rt: $t2.t, body: $t2, p: Bridge.toList([$t]) }));

            Bridge.Test.NUnit.Assert.true$1(e1.body.ntype === 10, "e1 body node type");
            var e2 = ($t3 = e1.body, Bridge.cast($t3, Bridge.hasValue($t3) && ([4,10,11,28,29,30,34,40,44,49,54,60,62,77,78,79,80,82,83,84].indexOf($t3.ntype) >= 0)));
            Bridge.Test.NUnit.Assert.areEqual$1(Function, e2.t, "e2 type");
            Bridge.Test.NUnit.Assert.areEqual$1(6, e2.operand.ntype, "2 operand type");
            var e3 = ($t3 = e2.operand, Bridge.cast($t3, Bridge.hasValue($t3) && ($t3.ntype === 6)));
            Bridge.Test.NUnit.Assert.areEqual$1(9, e3.obj.ntype, "e3 object node type");
            var e4 = ($t3 = e3.obj, Bridge.cast($t3, Bridge.hasValue($t3) && ($t3.ntype === 9)));
            Bridge.Test.NUnit.Assert.areEqual$1(System.Reflection.MethodInfo, e4.t, "e4 type");
            Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(e4.value, Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, 8, 284, "M4")), "e4 value");
            Bridge.Test.NUnit.Assert.areEqual$1(System.Reflection.MethodInfo, e3.method.td, "e3 method declaring type");
            Bridge.Test.NUnit.Assert.areEqual$1("CreateDelegate", e3.method.n, "e3 method name");
            Bridge.Test.NUnit.Assert.areEqual$1(System.Array.init([Function, System.Object], Function), (e3.method.p || []), "e3 method parameters");
            Bridge.Test.NUnit.Assert.areEqual$1(2, e3.args.Count, "e3 arguments");
            Bridge.Test.NUnit.Assert.areEqual$1(Function, e3.args.get(0), "e3 argument 0");
            Bridge.Test.NUnit.Assert.true$1(($t3 = e3.args.get(1), Bridge.is($t3, Bridge.hasValue($t3) && ($t3.ntype === 38))) && Bridge.referenceEquals(($t3 = e3.args.get(1), Bridge.cast($t3, Bridge.hasValue($t3) && ($t3.ntype === 38))).n, "a"), "e3 argument 1");
        },
        invokeWorks: function () {
            var $t, $t1, $t2, $t3, $t4;
            var e1 = ($t = { ntype: 38, t: Function, n: "a" }, $t1 = { ntype: 38, t: System.Int32, n: "b" }, $t2 = { ntype: 38, t: System.String, n: "c" }, ($t3 = { ntype: 17, t: System.String, expression: $t, args: Bridge.toList([$t1,$t2]) }, { ntype: 18, t: Function, rt: $t3.t, body: $t3, p: Bridge.toList([$t,$t1,$t2]) }));
            var e2 = { ntype: 17, t: System.String, expression: { ntype: 38, t: Function, n: "a" }, args: Bridge.toList(System.Array.init([{ ntype: 38, t: System.Int32, n: "b" }, { ntype: 38, t: System.String, n: "c" }], System.Object)) };
            var e3 = { ntype: 17, t: System.String, expression: { ntype: 38, t: Function, n: "a" }, args: Bridge.toList(new (Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.MyEnumerable$1(System.Object))(System.Array.init([{ ntype: 38, t: System.Int32, n: "b" }, { ntype: 38, t: System.String, n: "c" }], System.Object))) };

            var asserter = $asm.$.Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.f5;

            asserter(e1.body, "e1");
            asserter(e2, "e2");
            asserter(e3, "e3");

            Bridge.Test.NUnit.Assert.false$1(($t4 = { ntype: 9, t: System.Object, value: null }, Bridge.is($t4, Bridge.hasValue($t4) && ($t4.ntype === 17))), "Constant should not be InvocationExpression");
        },
        arrayCreationWorks: function () {
            var $t, $t1, $t2, $t3, $t4, $t5, $t6, $t7, $t8, $t9, $t10, $t11;
            var e1 = ($t = { ntype: 38, t: System.Int32, n: "a" }, ($t2 = ($t1 = [$t], { ntype: 33, t: System.Array.type(System.Int32, $t1.length), expressions: Bridge.toList($t1) }), { ntype: 18, t: Function, rt: $t2.t, body: $t2, p: Bridge.toList([$t]) }));
            var e2 = ($t3 = { ntype: 38, t: System.Int32, n: "a" }, $t4 = { ntype: 38, t: System.Int32, n: "b" }, ($t6 = ($t5 = [$t3,$t4], { ntype: 33, t: System.Array.type(System.Int32, $t5.length), expressions: Bridge.toList($t5) }), { ntype: 18, t: Function, rt: $t6.t, body: $t6, p: Bridge.toList([$t3,$t4]) }));
            var e3 = ($t7 = { ntype: 38, t: System.Int32, n: "a" }, $t8 = { ntype: 38, t: System.Int32, n: "b" }, ($t9 = { ntype: 32, t: System.Array.type(System.Int32), expressions: Bridge.toList([$t7,$t8]) }, { ntype: 18, t: Function, rt: $t9.t, body: $t9, p: Bridge.toList([$t7,$t8]) }));
            var e4 = ($t10 = System.Array.init([{ ntype: 38, t: System.Int32, n: "a" }, { ntype: 38, t: System.Int32, n: "b" }], System.Object), { ntype: 33, t: System.Array.type(System.Int32, $t10.length), expressions: Bridge.toList($t10) });
            var e5 = (function(l) { return { ntype: 33, t: System.Array.type(System.Int32, l.getCount()), expressions: l };})(Bridge.toList(new (Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.MyEnumerable$1(System.Object))(System.Array.init([{ ntype: 38, t: System.Int32, n: "a" }, { ntype: 38, t: System.Int32, n: "b" }], System.Object))));
            var e6 = { ntype: 32, t: System.Array.type(System.Int32), expressions: Bridge.toList(System.Array.init([{ ntype: 38, t: System.Int32, n: "a" }, { ntype: 38, t: System.Int32, n: "b" }], System.Object)) };
            var e7 = { ntype: 32, t: System.Array.type(System.Int32), expressions: Bridge.toList(new (Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.MyEnumerable$1(System.Object))(System.Array.init([{ ntype: 38, t: System.Int32, n: "a" }, { ntype: 38, t: System.Int32, n: "b" }], System.Object))) };

            Bridge.Test.NUnit.Assert.true$1(($t11 = e1.body, Bridge.is($t11, Bridge.hasValue($t11) && ($t11.ntype === 32 || $t11.ntype === 33))), "e1 is NewArrayExpression");
            Bridge.Test.NUnit.Assert.areEqual$1(33, e1.body.ntype, "e1 node type");
            Bridge.Test.NUnit.Assert.areEqual$1(System.Array.type(System.Int32), e1.body.t, "e1 type");
            Bridge.Test.NUnit.Assert.areEqual$1(1, ($t11 = e1.body, Bridge.cast($t11, Bridge.hasValue($t11) && ($t11.ntype === 32 || $t11.ntype === 33))).expressions.Count, "e1 expression count");
            Bridge.Test.NUnit.Assert.true$1(($t11 = ($t11 = e1.body, Bridge.cast($t11, Bridge.hasValue($t11) && ($t11.ntype === 32 || $t11.ntype === 33))).expressions.get(0), Bridge.is($t11, Bridge.hasValue($t11) && ($t11.ntype === 38))) && Bridge.referenceEquals(($t11 = ($t11 = e1.body, Bridge.cast($t11, Bridge.hasValue($t11) && ($t11.ntype === 32 || $t11.ntype === 33))).expressions.get(0), Bridge.cast($t11, Bridge.hasValue($t11) && ($t11.ntype === 38))).n, "a"), "e1 expression 0");

            Bridge.Test.NUnit.Assert.true$1(($t11 = e2.body, Bridge.is($t11, Bridge.hasValue($t11) && ($t11.ntype === 32 || $t11.ntype === 33))), "e2 is NewArrayExpression");
            Bridge.Test.NUnit.Assert.areEqual$1(33, e2.body.ntype, "e2 node type");
            Bridge.Test.NUnit.Assert.areEqual$1(System.Array.type(System.Int32, 2), e2.body.t, "e2 type");
            Bridge.Test.NUnit.Assert.areEqual$1(2, ($t11 = e2.body, Bridge.cast($t11, Bridge.hasValue($t11) && ($t11.ntype === 32 || $t11.ntype === 33))).expressions.Count, "e2 expression count");
            Bridge.Test.NUnit.Assert.true$1(($t11 = ($t11 = e2.body, Bridge.cast($t11, Bridge.hasValue($t11) && ($t11.ntype === 32 || $t11.ntype === 33))).expressions.get(0), Bridge.is($t11, Bridge.hasValue($t11) && ($t11.ntype === 38))) && Bridge.referenceEquals(($t11 = ($t11 = e2.body, Bridge.cast($t11, Bridge.hasValue($t11) && ($t11.ntype === 32 || $t11.ntype === 33))).expressions.get(0), Bridge.cast($t11, Bridge.hasValue($t11) && ($t11.ntype === 38))).n, "a"), "e2 expression 0");
            Bridge.Test.NUnit.Assert.true$1(($t11 = ($t11 = e2.body, Bridge.cast($t11, Bridge.hasValue($t11) && ($t11.ntype === 32 || $t11.ntype === 33))).expressions.get(1), Bridge.is($t11, Bridge.hasValue($t11) && ($t11.ntype === 38))) && Bridge.referenceEquals(($t11 = ($t11 = e2.body, Bridge.cast($t11, Bridge.hasValue($t11) && ($t11.ntype === 32 || $t11.ntype === 33))).expressions.get(1), Bridge.cast($t11, Bridge.hasValue($t11) && ($t11.ntype === 38))).n, "b"), "e2 expression 1");

            Bridge.Test.NUnit.Assert.true$1(($t11 = e3.body, Bridge.is($t11, Bridge.hasValue($t11) && ($t11.ntype === 32 || $t11.ntype === 33))), "e3 is NewArrayExpression");
            Bridge.Test.NUnit.Assert.areEqual$1(32, e3.body.ntype, "e3 node type");
            Bridge.Test.NUnit.Assert.areEqual$1(System.Array.type(System.Int32), e3.body.t, "e3 type");
            Bridge.Test.NUnit.Assert.areEqual$1(2, ($t11 = e3.body, Bridge.cast($t11, Bridge.hasValue($t11) && ($t11.ntype === 32 || $t11.ntype === 33))).expressions.Count, "e3 expression count");
            Bridge.Test.NUnit.Assert.true$1(($t11 = ($t11 = e3.body, Bridge.cast($t11, Bridge.hasValue($t11) && ($t11.ntype === 32 || $t11.ntype === 33))).expressions.get(0), Bridge.is($t11, Bridge.hasValue($t11) && ($t11.ntype === 38))) && Bridge.referenceEquals(($t11 = ($t11 = e3.body, Bridge.cast($t11, Bridge.hasValue($t11) && ($t11.ntype === 32 || $t11.ntype === 33))).expressions.get(0), Bridge.cast($t11, Bridge.hasValue($t11) && ($t11.ntype === 38))).n, "a"), "e3 expression 0");
            Bridge.Test.NUnit.Assert.true$1(($t11 = ($t11 = e3.body, Bridge.cast($t11, Bridge.hasValue($t11) && ($t11.ntype === 32 || $t11.ntype === 33))).expressions.get(1), Bridge.is($t11, Bridge.hasValue($t11) && ($t11.ntype === 38))) && Bridge.referenceEquals(($t11 = ($t11 = e3.body, Bridge.cast($t11, Bridge.hasValue($t11) && ($t11.ntype === 32 || $t11.ntype === 33))).expressions.get(1), Bridge.cast($t11, Bridge.hasValue($t11) && ($t11.ntype === 38))).n, "b"), "e3 expression 1");

            Bridge.Test.NUnit.Assert.true$1(Bridge.is(e4, Bridge.hasValue(e4) && (e4.ntype === 32 || e4.ntype === 33)), "e4 is NewArrayExpression");
            Bridge.Test.NUnit.Assert.areEqual$1(33, e4.ntype, "e4 node type");
            Bridge.Test.NUnit.Assert.areEqual$1(System.Array.type(System.Int32, 2), e4.t, "e4 type");
            Bridge.Test.NUnit.Assert.areEqual$1(2, Bridge.cast(e4, Bridge.hasValue(e4) && (e4.ntype === 32 || e4.ntype === 33)).expressions.Count, "e4 expression count");
            Bridge.Test.NUnit.Assert.true$1(($t11 = Bridge.cast(e4, Bridge.hasValue(e4) && (e4.ntype === 32 || e4.ntype === 33)).expressions.get(0), Bridge.is($t11, Bridge.hasValue($t11) && ($t11.ntype === 38))) && Bridge.referenceEquals(($t11 = Bridge.cast(e4, Bridge.hasValue(e4) && (e4.ntype === 32 || e4.ntype === 33)).expressions.get(0), Bridge.cast($t11, Bridge.hasValue($t11) && ($t11.ntype === 38))).n, "a"), "e4 expression 0");
            Bridge.Test.NUnit.Assert.true$1(($t11 = Bridge.cast(e4, Bridge.hasValue(e4) && (e4.ntype === 32 || e4.ntype === 33)).expressions.get(1), Bridge.is($t11, Bridge.hasValue($t11) && ($t11.ntype === 38))) && Bridge.referenceEquals(($t11 = Bridge.cast(e4, Bridge.hasValue(e4) && (e4.ntype === 32 || e4.ntype === 33)).expressions.get(1), Bridge.cast($t11, Bridge.hasValue($t11) && ($t11.ntype === 38))).n, "b"), "e4 expression 1");

            Bridge.Test.NUnit.Assert.true$1(Bridge.is(e5, Bridge.hasValue(e5) && (e5.ntype === 32 || e5.ntype === 33)), "e5 is NewArrayExpression");
            Bridge.Test.NUnit.Assert.areEqual$1(33, e5.ntype, "e5 node type");
            Bridge.Test.NUnit.Assert.areEqual$1(System.Array.type(System.Int32, 2), e5.t, "e5 type");
            Bridge.Test.NUnit.Assert.areEqual$1(2, Bridge.cast(e5, Bridge.hasValue(e5) && (e5.ntype === 32 || e5.ntype === 33)).expressions.Count, "e5 expression count");
            Bridge.Test.NUnit.Assert.true$1(($t11 = Bridge.cast(e5, Bridge.hasValue(e5) && (e5.ntype === 32 || e5.ntype === 33)).expressions.get(0), Bridge.is($t11, Bridge.hasValue($t11) && ($t11.ntype === 38))) && Bridge.referenceEquals(($t11 = Bridge.cast(e5, Bridge.hasValue(e5) && (e5.ntype === 32 || e5.ntype === 33)).expressions.get(0), Bridge.cast($t11, Bridge.hasValue($t11) && ($t11.ntype === 38))).n, "a"), "e5 expression 0");
            Bridge.Test.NUnit.Assert.true$1(($t11 = Bridge.cast(e5, Bridge.hasValue(e5) && (e5.ntype === 32 || e5.ntype === 33)).expressions.get(1), Bridge.is($t11, Bridge.hasValue($t11) && ($t11.ntype === 38))) && Bridge.referenceEquals(($t11 = Bridge.cast(e5, Bridge.hasValue(e5) && (e5.ntype === 32 || e5.ntype === 33)).expressions.get(1), Bridge.cast($t11, Bridge.hasValue($t11) && ($t11.ntype === 38))).n, "b"), "e5 expression 1");

            Bridge.Test.NUnit.Assert.true$1(Bridge.is(e6, Bridge.hasValue(e6) && (e6.ntype === 32 || e6.ntype === 33)), "e6 is NewArrayExpression");
            Bridge.Test.NUnit.Assert.areEqual$1(32, e6.ntype, "e6 node type");
            Bridge.Test.NUnit.Assert.areEqual$1(System.Array.type(System.Int32), e6.t, "e6 type");
            Bridge.Test.NUnit.Assert.areEqual$1(2, Bridge.cast(e6, Bridge.hasValue(e6) && (e6.ntype === 32 || e6.ntype === 33)).expressions.Count, "e6 expression count");
            Bridge.Test.NUnit.Assert.true$1(($t11 = Bridge.cast(e6, Bridge.hasValue(e6) && (e6.ntype === 32 || e6.ntype === 33)).expressions.get(0), Bridge.is($t11, Bridge.hasValue($t11) && ($t11.ntype === 38))) && Bridge.referenceEquals(($t11 = Bridge.cast(e6, Bridge.hasValue(e6) && (e6.ntype === 32 || e6.ntype === 33)).expressions.get(0), Bridge.cast($t11, Bridge.hasValue($t11) && ($t11.ntype === 38))).n, "a"), "e6 expression 0");
            Bridge.Test.NUnit.Assert.true$1(($t11 = Bridge.cast(e6, Bridge.hasValue(e6) && (e6.ntype === 32 || e6.ntype === 33)).expressions.get(1), Bridge.is($t11, Bridge.hasValue($t11) && ($t11.ntype === 38))) && Bridge.referenceEquals(($t11 = Bridge.cast(e6, Bridge.hasValue(e6) && (e6.ntype === 32 || e6.ntype === 33)).expressions.get(1), Bridge.cast($t11, Bridge.hasValue($t11) && ($t11.ntype === 38))).n, "b"), "e6 expression 1");

            Bridge.Test.NUnit.Assert.true$1(Bridge.is(e7, Bridge.hasValue(e7) && (e7.ntype === 32 || e7.ntype === 33)), "e7 is NewArrayExpression");
            Bridge.Test.NUnit.Assert.areEqual$1(32, e7.ntype, "e7 node type");
            Bridge.Test.NUnit.Assert.areEqual$1(System.Array.type(System.Int32), e7.t, "e7 type");
            Bridge.Test.NUnit.Assert.areEqual$1(2, Bridge.cast(e7, Bridge.hasValue(e7) && (e7.ntype === 32 || e7.ntype === 33)).expressions.Count, "e7 expression count");
            Bridge.Test.NUnit.Assert.true$1(($t11 = Bridge.cast(e7, Bridge.hasValue(e7) && (e7.ntype === 32 || e7.ntype === 33)).expressions.get(0), Bridge.is($t11, Bridge.hasValue($t11) && ($t11.ntype === 38))) && Bridge.referenceEquals(($t11 = Bridge.cast(e7, Bridge.hasValue(e7) && (e7.ntype === 32 || e7.ntype === 33)).expressions.get(0), Bridge.cast($t11, Bridge.hasValue($t11) && ($t11.ntype === 38))).n, "a"), "e7 expression 0");
            Bridge.Test.NUnit.Assert.true$1(($t11 = Bridge.cast(e7, Bridge.hasValue(e7) && (e7.ntype === 32 || e7.ntype === 33)).expressions.get(1), Bridge.is($t11, Bridge.hasValue($t11) && ($t11.ntype === 38))) && Bridge.referenceEquals(($t11 = Bridge.cast(e7, Bridge.hasValue(e7) && (e7.ntype === 32 || e7.ntype === 33)).expressions.get(1), Bridge.cast($t11, Bridge.hasValue($t11) && ($t11.ntype === 38))).n, "b"), "e7 expression 1");

            Bridge.Test.NUnit.Assert.false$1(($t11 = { ntype: 9, t: System.Object, value: null }, Bridge.is($t11, Bridge.hasValue($t11) && ($t11.ntype === 32 || $t11.ntype === 33))), "Constant should not be NewArrayExpression");
        },
        propertiesAndFieldsWork: function () {
            var $t, $t1, $t2, $t3, $t4, $t5, $t6, $t7, $t8, $t9, $t10, $t11, $t12, $t13, $t14, $t15, $t16, $t17, $t18, $t19, $t20, $t21, $t22;
            var e1 = ($t = { ntype: 38, t: Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, n: "a" }, ($t2 = ($t1 = Bridge.getMetadata(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C).m[36], { ntype: 23, t: $t1.rt, expression: $t, member: $t1 }), { ntype: 18, t: Function, rt: $t2.t, body: $t2, p: Bridge.toList([$t]) }));
            var e2 = ($t3 = { ntype: 38, t: Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, n: "a" }, ($t5 = ($t4 = {"td":Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C,"a":2,"n":"F2","t":4,"rt":System.Int32,"sn":"F2"}, { ntype: 23, t: $t4.rt, expression: $t3, member: $t4 }), { ntype: 18, t: Function, rt: $t5.t, body: $t5, p: Bridge.toList([$t3]) }));
            var e3 = ($t6 = { ntype: 38, t: Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, n: "a" }, ($t8 = ($t7 = Bridge.getMetadata(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C).m[34], { ntype: 23, t: $t7.rt, expression: $t6, member: $t7 }), { ntype: 18, t: Function, rt: $t8.t, body: $t8, p: Bridge.toList([$t6]) }));
            var e4 = ($t9 = { ntype: 38, t: Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, n: "a" }, ($t11 = ($t10 = {"td":Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C,"a":2,"n":"P2","t":16,"rt":System.Int32,"g":{"td":Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C,"a":2,"n":"get_P2","t":8,"rt":System.Int32,"fg":"P2"},"s":{"td":Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C,"a":2,"n":"set_P2","t":8,"p":[System.Int32],"rt":System.Object,"fs":"P2"},"fn":"P2"}, { ntype: 23, t: $t10.rt, expression: $t9, member: $t10 }), { ntype: 18, t: Function, rt: $t11.t, body: $t11, p: Bridge.toList([$t9]) }));
            var e5 = ($t12 = Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, 4, 284, "F1"), { ntype: 23, t: $t12.rt, expression: { ntype: 38, t: Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, n: "a" }, member: $t12 });
            var e6 = ($t13 = Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, 16, 284, "P1"), { ntype: 23, t: $t13.rt, expression: { ntype: 38, t: Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, n: "a" }, member: $t13 });
            var e7 = ($t14 = { ntype: 38, t: Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, n: "a" }, { ntype: 23, t: Bridge.Reflection.getMembers($t14.t, 4, 284, "F1").rt, expression: $t14, member: Bridge.Reflection.getMembers($t14.t, 4, 284, "F1") });
            var e8 = ($t15 = { ntype: 38, t: Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, n: "a" }, { ntype: 23, t: Bridge.Reflection.getMembers($t15.t, 16, 284, "P1").rt, expression: $t15, member: Bridge.Reflection.getMembers($t15.t, 16, 284, "P1") });
            var e9 = ($t16 = { ntype: 38, t: Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, n: "a" }, { ntype: 23, t: System.Int32, expression: $t16, member: Bridge.Reflection.getMembers($t16.t, 4, 284, "F1") });
            var e10 = ($t17 = { ntype: 38, t: Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, n: "a" }, { ntype: 23, t: System.Int32, expression: $t17, member: Bridge.Reflection.getMembers($t17.t, 16, 284, "P1") });
            var e11 = ($t18 = { ntype: 38, t: Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, n: "a" }, { ntype: 23, t: Bridge.Reflection.getMembers($t18.t, 20, 284, "F1").rt, expression: $t18, member: Bridge.Reflection.getMembers($t18.t, 20, 284, "F1") });
            var e12 = ($t19 = { ntype: 38, t: Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, n: "a" }, { ntype: 23, t: Bridge.Reflection.getMembers($t19.t, 20, 284, "P1").rt, expression: $t19, member: Bridge.Reflection.getMembers($t19.t, 20, 284, "P1") });
            var e13 = ($t20 = Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, 4, 284, "F1"), { ntype: 23, t: $t20.rt, expression: { ntype: 38, t: Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, n: "a" }, member: $t20 });
            var e14 = ($t21 = Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, 16, 284, "P1"), { ntype: 23, t: $t21.rt, expression: { ntype: 38, t: Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, n: "a" }, member: $t21 });

            var asserter = $asm.$.Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.f6;

            asserter(e1.body, "F1", 234, "e1");
            asserter(e2.body, "F2", 24, "e2");
            asserter(e3.body, "P1", 42, "e3");
            asserter(e4.body, "P2", 17, "e4");
            asserter(e5, "F1", 234, "e5");
            asserter(e6, "P1", 42, "e6");
            asserter(e7, "F1", 234, "e7");
            asserter(e8, "P1", 42, "e8");
            asserter(e9, "F1", 234, "e9");
            asserter(e10, "P1", 42, "e10");
            asserter(e11, "F1", 234, "e11");
            asserter(e12, "P1", 42, "e12");
            asserter(e13, "F1", 234, "e11");
            asserter(e14, "P1", 42, "e12");

            Bridge.Test.NUnit.Assert.false$1(($t22 = { ntype: 9, t: System.Object, value: null }, Bridge.is($t22, Bridge.hasValue($t22) && ($t22.ntype === 23))), "Constant should not be MemberExpression");
        },
        indexersWork: function () {
            var $t, $t1, $t2, $t3, $t4, $t5;
            var e1 = ($t = { ntype: 38, t: Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, n: "a" }, $t1 = { ntype: 38, t: System.Int32, n: "b" }, $t2 = { ntype: 38, t: System.String, n: "c" }, ($t4 = ($t3 = Bridge.getMetadata(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C).m[32].g, { ntype: 6, t: $t3.rt, obj: $t, method: $t3, args: Bridge.toList([$t1,$t2]) }), { ntype: 18, t: Function, rt: $t4.t, body: $t4, p: Bridge.toList([$t,$t1,$t2]) }));

            var ie = ($t5 = e1.body, Bridge.as($t5, Bridge.hasValue($t5) && ($t5.ntype === 6)));
            Bridge.Test.NUnit.Assert.true$1(ie != null, "is MethodCallExpression");
            Bridge.Test.NUnit.Assert.areEqual$1(6, ie.ntype, "node type");
            Bridge.Test.NUnit.Assert.areEqual$1(System.String, ie.t, "type");
            Bridge.Test.NUnit.Assert.true$1(($t5 = ie.obj, Bridge.is($t5, Bridge.hasValue($t5) && ($t5.ntype === 38))) && Bridge.referenceEquals(($t5 = ie.obj, Bridge.cast($t5, Bridge.hasValue($t5) && ($t5.ntype === 38))).n, "a"), "expression");
            Bridge.Test.NUnit.Assert.areEqual$1(2, ie.args.Count, "argument count");
            Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(ie.method, Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, 16, 284, "Item").g), "get method");
            Bridge.Test.NUnit.Assert.true$1(($t5 = ie.args.get(0), Bridge.is($t5, Bridge.hasValue($t5) && ($t5.ntype === 38))) && Bridge.referenceEquals(($t5 = ie.args.get(0), Bridge.cast($t5, Bridge.hasValue($t5) && ($t5.ntype === 38))).n, "b"), "argument 0");
            Bridge.Test.NUnit.Assert.true$1(($t5 = ie.args.get(1), Bridge.is($t5, Bridge.hasValue($t5) && ($t5.ntype === 38))) && Bridge.referenceEquals(($t5 = ie.args.get(1), Bridge.cast($t5, Bridge.hasValue($t5) && ($t5.ntype === 38))).n, "c"), "argument 1");
        },
        indexExpressionsWork: function () {
            var $t, $t1, $t2;
            var pa1 = { ntype: 38, t: Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, n: "a" };
            var pb1 = { ntype: 38, t: System.Int32, n: "b" };
            var pc1 = { ntype: 38, t: System.String, n: "c" };
            var pa2 = { ntype: 38, t: System.Array.type(System.Double, 2), n: "a" };
            var pb2 = { ntype: 38, t: System.Int32, n: "b" };
            var pc2 = { ntype: 38, t: System.Int32, n: "c" };

            var asserter = $asm.$.Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.f7;

            var e1 = ($t = Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, 16, 284, "Item"), { ntype: 55, t: $t.rt, obj: pa1, indexer: $t, arguments: Bridge.toList(System.Array.init([pb1, pc1], System.Object)) });
            var e2 = ($t1 = Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, 16, 284, "Item"), { ntype: 55, t: $t1.rt, obj: pa1, indexer: $t1, arguments: Bridge.toList(new (Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.MyEnumerable$1(System.Object))(System.Array.init([pb1, pc1], System.Object))) });
            var e3 = { ntype: 55, t: System.Double, obj: pa2, arguments: Bridge.toList(System.Array.init([pb2, pc2], System.Object)) };
            var e4 = { ntype: 55, t: System.Double, obj: pa2, arguments: Bridge.toList(new (Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.MyEnumerable$1(System.Object))(System.Array.init([pb2, pc2], System.Object))) };

            asserter(e1, Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, 16, 284, "Item"), System.String, "e1");
            asserter(e2, Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, 16, 284, "Item"), System.String, "e2");
            asserter(e3, null, System.Double, "e3");
            asserter(e4, null, System.Double, "e4");

            Bridge.Test.NUnit.Assert.false$1(($t2 = { ntype: 9, t: System.Object, value: null }, Bridge.is($t2, Bridge.hasValue($t2) && ($t2.ntype === 55))), "Constant should not be IndexExpression");
        },
        objectConstructionWorks: function () {
            var $t, $t1, $t2, $t3, $t4, $t5, $t6, $t7, $t8, $t9, $t10, $t11, $t12, $t13;
            var asserter = $asm.$.Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.f8;

            var e1 = ($t1 = ($t = Bridge.getMetadata(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C).m[0], { ntype: 31, t: $t.td, constructor: $t, arguments: Bridge.toList([]) }), { ntype: 18, t: Function, rt: $t1.t, body: $t1, p: Bridge.toList([]) });
            var e2 = ($t2 = { ntype: 38, t: System.Int32, n: "a" }, $t3 = { ntype: 38, t: System.Int32, n: "b" }, ($t5 = ($t4 = Bridge.getMetadata(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C).m[1], { ntype: 31, t: $t4.td, constructor: $t4, arguments: Bridge.toList([$t2,$t3]) }), { ntype: 18, t: Function, rt: $t5.t, body: $t5, p: Bridge.toList([$t2,$t3]) }));
            var e3 = ($t6 = { ntype: 38, t: System.Int32, n: "a" }, $t7 = { ntype: 38, t: System.String, n: "b" }, ($t9 = ($t8 = {"td":Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C,"a":2,"n":".ctor","t":1,"p":[System.Int32,System.String],"pi":[{"n":"a","pt":System.Int32,"ps":0},{"n":"b","pt":System.String,"ps":1}],"sn":"$ctor2"}, { ntype: 31, t: $t8.td, constructor: $t8, arguments: Bridge.toList([$t6,$t7]) }), { ntype: 18, t: Function, rt: $t9.t, body: $t9, p: Bridge.toList([$t6,$t7]) }));
            var e4 = ($t10 = Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, 1, 284, null, System.Array.init([System.Int32, System.Int32], Function)), { ntype: 31, t: $t10.td, constructor: $t10, arguments: Bridge.toList(System.Array.init([{ ntype: 38, t: System.Int32, n: "a" }, { ntype: 38, t: System.Int32, n: "b" }], System.Object)) });
            var e5 = ($t11 = Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, 1, 284, null, System.Array.init([System.Int32, System.Int32], Function)), { ntype: 31, t: $t11.td, constructor: $t11, arguments: Bridge.toList(new (Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.MyEnumerable$1(System.Object))(System.Array.init([{ ntype: 38, t: System.Int32, n: "a" }, { ntype: 38, t: System.Int32, n: "b" }], System.Object))) });
            var e6 = ($t12 = Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, { ntype: 31, t: $t12, constructor: Bridge.Reflection.getMembers($t12, 1, 284, null, []), arguments: Bridge.toList([]) });

            asserter(e1.body, System.Array.init(0, null, Function), true, "e1");
            asserter(e2.body, System.Array.init([System.Int32, System.Int32], Function), true, "e2");
            asserter(e3.body, System.Array.init([System.Int32, System.String], Function), false, "e3");
            asserter(e4, System.Array.init([System.Int32, System.Int32], Function), true, "e4");
            asserter(e5, System.Array.init([System.Int32, System.Int32], Function), true, "e5");
            asserter(e6, System.Array.init(0, null, Function), true, "e6");

            Bridge.Test.NUnit.Assert.false$1(($t13 = { ntype: 9, t: System.Object, value: null }, Bridge.is($t13, Bridge.hasValue($t13) && ($t13.ntype === 31))), "Constant should not be NewExpression");
        },
        anonymousTypeConstructionWorks: function () {
            var $t, $t1, $t2, $t3, $t4;
            var e = ($t = { ntype: 38, t: System.Int32, n: "a" }, $t1 = { ntype: 38, t: System.Int32, n: "b" }, ($t3 = { ntype: 10, t: System.Object, operand: ($t2 = {"td":$asm.$AnonymousType$1,"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"}, { ntype: 31, t: $t2.td, constructor: $t2, arguments: Bridge.toList([$t,$t1]), m: Bridge.toList([{"td":$asm.$AnonymousType$1,"a":2,"n":"A","t":16,"rt":System.Int32,"g":{"td":$asm.$AnonymousType$1,"a":2,"n":"get_A","t":8,"rt":System.Int32,"fg":"A"},"fn":"A"},{"td":$asm.$AnonymousType$1,"a":2,"n":"B","t":16,"rt":System.Int32,"g":{"td":$asm.$AnonymousType$1,"a":2,"n":"get_B","t":8,"rt":System.Int32,"fg":"B"},"fn":"B"}]) }) }, { ntype: 18, t: Function, rt: $t3.t, body: $t3, p: Bridge.toList([$t,$t1]) }));
            Bridge.Test.NUnit.Assert.areEqual(10, e.body.ntype);

            var ne = ($t4 = ($t4 = e.body, Bridge.cast($t4, Bridge.hasValue($t4) && ([4,10,11,28,29,30,34,40,44,49,54,60,62,77,78,79,80,82,83,84].indexOf($t4.ntype) >= 0))).operand, Bridge.as($t4, Bridge.hasValue($t4) && ($t4.ntype === 31)));
            Bridge.Test.NUnit.Assert.true$1(ne != null, "is NewExpression");
            Bridge.Test.NUnit.Assert.areEqual$1(31, ne.ntype, "node type");
            Bridge.Test.NUnit.Assert.true$1(System.String.contains(Bridge.Reflection.getTypeFullName(ne.t),"$AnonymousType$"), "type");
            Bridge.Test.NUnit.Assert.areEqual$1(2, ne.arguments.Count, "argument count");
            Bridge.Test.NUnit.Assert.true$1(($t4 = ne.arguments.get(0), Bridge.is($t4, Bridge.hasValue($t4) && ($t4.ntype === 38))) && Bridge.referenceEquals(($t4 = ne.arguments.get(0), Bridge.cast($t4, Bridge.hasValue($t4) && ($t4.ntype === 38))).n, "a"), "argument 0");
            Bridge.Test.NUnit.Assert.true$1(($t4 = ne.arguments.get(1), Bridge.is($t4, Bridge.hasValue($t4) && ($t4.ntype === 38))) && Bridge.referenceEquals(($t4 = ne.arguments.get(1), Bridge.cast($t4, Bridge.hasValue($t4) && ($t4.ntype === 38))).n, "b"), "argument 1");
            Bridge.Test.NUnit.Assert.areEqual$1(2, ne.m.Count, "member count");
            var propA = ne.m.get(0);
            var propB = ne.m.get(1);
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(propA, System.Reflection.PropertyInfo), "A should be property");
            Bridge.Test.NUnit.Assert.areEqual$1("A", propA.n, "A name");
            Bridge.Test.NUnit.Assert.areEqual$1(42, Bridge.unbox(Bridge.Reflection.midel(Bridge.cast(propA, System.Reflection.PropertyInfo).g, new $asm.$AnonymousType$1(42, 17))(null)), "A getter result");
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(propB, System.Reflection.PropertyInfo), "B should be property");
            Bridge.Test.NUnit.Assert.areEqual$1("B", propB.n, "B name");
            Bridge.Test.NUnit.Assert.areEqual$1(17, Bridge.unbox(Bridge.Reflection.midel(Bridge.cast(propB, System.Reflection.PropertyInfo).g, new $asm.$AnonymousType$1(42, 17))(null)), "B getter result");

            var instance = Bridge.Reflection.invokeCI(ne.constructor, [42, 17]);
            Bridge.Test.NUnit.Assert.areEqual$1(42, instance.a, "Constructor invocation result A");
            Bridge.Test.NUnit.Assert.areEqual$1(17, instance.b, "Constructor invocation result B");
        },
        transparentIdentifiersWork: function () {
            var $t, $t1, $t2, $t3, $t4, $t5, $t6, $t7, $t8, $t9, $t10;
            var c = new (Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.ClassWithQueryPattern$1(System.Int32))(42);
            var f = ($t9 = ($t8 = {"td":Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.ClassWithQueryPattern$1($asm.$AnonymousType$2),"a":2,"n":"Select","t":8,"pi":[{"n":"f","pt":Function,"ps":0}],"tpc":1,"tprm":["TResult"],"sn":"select","rt":Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.ClassWithQueryPattern$1(System.Int32),"p":[Function]}, { ntype: 6, t: $t8.rt, obj: ($t3 = {"td":Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.ClassWithQueryPattern$1(System.Int32),"a":2,"n":"Select","t":8,"pi":[{"n":"f","pt":Function,"ps":0}],"tpc":1,"tprm":["TResult"],"sn":"select","rt":Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.ClassWithQueryPattern$1(System.Object),"p":[Function]}, { ntype: 6, t: $t3.rt, obj: {"ntype":23,"t":Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.ClassWithQueryPattern$1(System.Int32),"expression":{"ntype":9,"t":Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.ClassWithQueryPattern$1(System.Int32),"value":{}},"member":{"td":System.Object,"n":"c","t":16,"rt":Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.ClassWithQueryPattern$1(System.Int32),"g":{"td":System.Object,"n":"getc","t":8,"rt":Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.ClassWithQueryPattern$1(System.Int32),"p":[],"def":function(){ return c}},"s":{"td":System.Object,"n":"setc","t":8,"rt":System.Object,"p":[Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.ClassWithQueryPattern$1(System.Int32)],"def":function($){ c = $; }}}}, method: $t3, args: Bridge.toList([($t = { ntype: 38, t: System.Int32, n: "a" }, ($t2 = ($t1 = {"td":$asm.$AnonymousType$2,"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"}, { ntype: 31, t: $t1.td, constructor: $t1, arguments: Bridge.toList([$t,{ ntype: 0, t: System.Int32, left: $t, right: { ntype: 9, t: System.Int32, value: 1 } }]), m: Bridge.toList([{"td":$asm.$AnonymousType$2,"a":2,"n":"a","t":16,"rt":System.Int32,"g":{"td":$asm.$AnonymousType$2,"a":2,"n":"get_a","t":8,"rt":System.Int32,"fg":"a"},"fn":"a"},{"td":$asm.$AnonymousType$2,"a":2,"n":"b","t":16,"rt":System.Int32,"g":{"td":$asm.$AnonymousType$2,"a":2,"n":"get_b","t":8,"rt":System.Int32,"fg":"b"},"fn":"b"}]) }), { ntype: 18, t: Function, rt: $t2.t, body: $t2, p: Bridge.toList([$t]) }))]) }), method: $t8, args: Bridge.toList([($t4 = { ntype: 38, t: $asm.$AnonymousType$2, n: "x0" }, ($t7 = { ntype: 0, t: System.Int32, left: ($t5 = {"td":$asm.$AnonymousType$2,"a":2,"n":"a","t":16,"rt":System.Int32,"g":{"td":$asm.$AnonymousType$2,"a":2,"n":"get_a","t":8,"rt":System.Int32,"fg":"a"},"fn":"a"}, { ntype: 23, t: $t5.rt, expression: $t4, member: $t5 }), right: ($t6 = {"td":$asm.$AnonymousType$2,"a":2,"n":"b","t":16,"rt":System.Int32,"g":{"td":$asm.$AnonymousType$2,"a":2,"n":"get_b","t":8,"rt":System.Int32,"fg":"b"},"fn":"b"}, { ntype: 23, t: $t6.rt, expression: $t4, member: $t6 }) }, { ntype: 18, t: Function, rt: $t7.t, body: $t7, p: Bridge.toList([$t4]) }))]) }), { ntype: 18, t: Function, rt: $t9.t, body: $t9, p: Bridge.toList([]) });
            var outer = ($t10 = f.body, Bridge.cast($t10, Bridge.hasValue($t10) && ($t10.ntype === 6)));
            //var outerLambda = (LambdaExpression)outer.Arguments[0];
            var inner = ($t10 = outer.obj, Bridge.cast($t10, Bridge.hasValue($t10) && ($t10.ntype === 6)));
            Bridge.Test.NUnit.Assert.areEqual("Select", inner.method.n);
            var innerLambda = ($t10 = inner.args.get(0), Bridge.cast($t10, Bridge.hasValue($t10) && ($t10.ntype === 18)));
            var ne = ($t10 = innerLambda.body, Bridge.cast($t10, Bridge.hasValue($t10) && ($t10.ntype === 31)));

            Bridge.Test.NUnit.Assert.true$1(ne != null, "is NewExpression");
            Bridge.Test.NUnit.Assert.areEqual$1(31, ne.ntype, "node type");
            Bridge.Test.NUnit.Assert.true$1(System.String.contains(Bridge.Reflection.getTypeFullName(ne.t),"$AnonymousType$"), "type");
            Bridge.Test.NUnit.Assert.areEqual$1(2, ne.arguments.Count, "argument count");
            Bridge.Test.NUnit.Assert.true$1(($t10 = ne.arguments.get(0), Bridge.is($t10, Bridge.hasValue($t10) && ($t10.ntype === 38))) && Bridge.referenceEquals(($t10 = ne.arguments.get(0), Bridge.cast($t10, Bridge.hasValue($t10) && ($t10.ntype === 38))).n, "a"), "argument 0");
            Bridge.Test.NUnit.Assert.areEqual$1(0, ne.arguments.get(1).ntype, "argument 1");
            Bridge.Test.NUnit.Assert.areEqual$1(2, ne.m.Count, "member count");
            var propA = ne.m.get(0);
            var propB = ne.m.get(1);
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(propA, System.Reflection.PropertyInfo), "A should be property");
            Bridge.Test.NUnit.Assert.areEqual$1("a", propA.n, "a name");
            Bridge.Test.NUnit.Assert.areEqual$1(42, Bridge.unbox(Bridge.Reflection.midel(Bridge.cast(propA, System.Reflection.PropertyInfo).g, new $asm.$AnonymousType$2(42, 17))(null)), "a getter result");
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(propB, System.Reflection.PropertyInfo), "B should be property");
            Bridge.Test.NUnit.Assert.areEqual$1("b", propB.n, "b name");
            Bridge.Test.NUnit.Assert.areEqual$1(17, Bridge.unbox(Bridge.Reflection.midel(Bridge.cast(propB, System.Reflection.PropertyInfo).g, new $asm.$AnonymousType$2(42, 17))(null)), "b getter result");

            var instance = Bridge.Reflection.invokeCI(ne.constructor, [42, 17]);
            Bridge.Test.NUnit.Assert.areEqual$1(42, instance.a, "Constructor invocation result a");
            Bridge.Test.NUnit.Assert.areEqual$1(17, instance.b, "Constructor invocation result b");
        },
        newExpressionWithMembersWork: function () {
            var $t, $t1, $t2;
            var a = { ntype: 38, t: System.Int32, n: "a" };
            var b = { ntype: 38, t: System.Int32, n: "b" };

            var asserter = function (expr, title) {
                var ne = Bridge.as(expr, Bridge.hasValue(expr) && (expr.ntype === 31));
                Bridge.Test.NUnit.Assert.true$1(ne != null, System.String.concat(title, " is NewExpression"));
                Bridge.Test.NUnit.Assert.areEqual$1(31, ne.ntype, System.String.concat(title, " node type"));
                Bridge.Test.NUnit.Assert.areEqual$1(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, ne.t, System.String.concat(title, " type"));
                Bridge.Test.NUnit.Assert.areEqual$1(2, ne.arguments.Count, System.String.concat(title, " argument count"));
                Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(ne.constructor, Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, 1, 284, null, System.Array.init([System.Int32, System.Int32], Function))), System.String.concat(title, " constructor reference"));
                Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(ne.arguments.get(0), a), System.String.concat(title, " argument 0"));
                Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(ne.arguments.get(1), b), System.String.concat(title, " argument 1"));
                Bridge.Test.NUnit.Assert.areEqual$1(2, ne.m.Count, System.String.concat(title, " member count"));
                Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(ne.m.get(0), Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, 4, 284, "F1")), System.String.concat(title, " member 0"));
                Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(ne.m.get(1), Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, 16, 284, "P1").g), System.String.concat(title, " member 1"));
            };

            var e1 = ($t = Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, 1, 284, null, System.Array.init([System.Int32, System.Int32], Function)), { ntype: 31, t: $t.td, constructor: $t, arguments: Bridge.toList(System.Array.init([a, b], System.Object)), m: Bridge.toList(System.Array.init([Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, 4, 284, "F1"), Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, 16, 284, "P1").g], System.Object)) });
            var e2 = ($t1 = Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, 1, 284, null, System.Array.init([System.Int32, System.Int32], Function)), { ntype: 31, t: $t1.td, constructor: $t1, arguments: Bridge.toList(new (Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.MyEnumerable$1(System.Object))(System.Array.init([a, b], System.Object))), m: Bridge.toList(System.Array.init([Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, 4, 284, "F1"), Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, 16, 284, "P1").g], System.Object)) });
            var e3 = ($t2 = Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, 1, 284, null, System.Array.init([System.Int32, System.Int32], Function)), { ntype: 31, t: $t2.td, constructor: $t2, arguments: Bridge.toList(new (Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.MyEnumerable$1(System.Object))(System.Array.init([a, b], System.Object))), m: Bridge.toList(new (Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.MyEnumerable$1(System.Object))(System.Array.init([Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, 4, 284, "F1"), Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, 16, 284, "P1").g], System.Object))) });

            asserter(e1, "e1");
            asserter(e2, "e2");
            asserter(e3, "e3");
        },
        bindWorks: function () {
            var $t, $t1, $t2, $t3, $t4, $t5, $t6, $t7, $t8;
            var pa = { ntype: 38, t: System.Int32, n: "a" };
            var e1 = ($t = { ntype: 38, t: System.Int32, n: "a" }, ($t3 = ($t2 = ($t1 = Bridge.getMetadata(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C).m[0], { ntype: 31, t: $t1.td, constructor: $t1, arguments: Bridge.toList([]) }), { ntype: 24, t: $t2.t, newExpression: $t2, bindings: Bridge.toList([{ btype: 0, member: Bridge.getMetadata(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C).m[36], expression: $t }]) }), { ntype: 18, t: Function, rt: $t3.t, body: $t3, p: Bridge.toList([$t]) }));
            var e2 = ($t4 = { ntype: 38, t: System.Int32, n: "a" }, ($t7 = ($t6 = ($t5 = Bridge.getMetadata(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C).m[0], { ntype: 31, t: $t5.td, constructor: $t5, arguments: Bridge.toList([]) }), { ntype: 24, t: $t6.t, newExpression: $t6, bindings: Bridge.toList([{ btype: 0, member: Bridge.getMetadata(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C).m[34], expression: $t4 }]) }), { ntype: 18, t: Function, rt: $t7.t, body: $t7, p: Bridge.toList([$t4]) }));

            var b1 = ($t8 = e1.body, Bridge.cast($t8, Bridge.hasValue($t8) && ($t8.ntype === 24))).bindings.get(0);
            var b2 = ($t8 = e2.body, Bridge.cast($t8, Bridge.hasValue($t8) && ($t8.ntype === 24))).bindings.get(0);
            var b3 = { btype: 0, member: Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, 4, 284, "F1"), expression: pa };
            var b4 = { btype: 0, member: Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, 16, 284, "P1"), expression: pa };

            var ma1 = Bridge.as(b1, Bridge.hasValue(b1) && (b1.btype === 0));
            Bridge.Test.NUnit.Assert.true$1(ma1 != null, "b1 should be MemberAssignment");
            Bridge.Test.NUnit.Assert.areEqual$1(0, ma1.btype, "b1 BindingType");
            Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(ma1.member, Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, 4, 284, "F1")), "b1 member");
            Bridge.Test.NUnit.Assert.true$1(($t8 = ma1.expression, Bridge.is($t8, Bridge.hasValue($t8) && ($t8.ntype === 38))) && Bridge.referenceEquals(($t8 = ma1.expression, Bridge.cast($t8, Bridge.hasValue($t8) && ($t8.ntype === 38))).n, "a"), "b1 expression");

            var ma2 = Bridge.as(b2, Bridge.hasValue(b2) && (b2.btype === 0));
            Bridge.Test.NUnit.Assert.true$1(ma2 != null, "b2 should be MemberAssignment");
            Bridge.Test.NUnit.Assert.areEqual$1(0, ma2.btype, "b2 BindingType");
            Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(ma2.member, Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, 16, 284, "P1")), "b2 member");
            Bridge.Test.NUnit.Assert.true$1(($t8 = ma2.expression, Bridge.is($t8, Bridge.hasValue($t8) && ($t8.ntype === 38))) && Bridge.referenceEquals(($t8 = ma2.expression, Bridge.cast($t8, Bridge.hasValue($t8) && ($t8.ntype === 38))).n, "a"), "b2 expression");

            var ma3 = Bridge.as(b3, Bridge.hasValue(b3) && (b3.btype === 0));
            Bridge.Test.NUnit.Assert.true$1(ma3 != null, "b3 should be MemberAssignment");
            Bridge.Test.NUnit.Assert.areEqual$1(0, ma3.btype, "b3 BindingType");
            Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(ma3.member, Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, 4, 284, "F1")), "b3 member");
            Bridge.Test.NUnit.Assert.true$1(($t8 = ma3.expression, Bridge.is($t8, Bridge.hasValue($t8) && ($t8.ntype === 38))) && Bridge.referenceEquals(($t8 = ma3.expression, Bridge.cast($t8, Bridge.hasValue($t8) && ($t8.ntype === 38))).n, "a"), "b3 expression");

            var ma4 = Bridge.as(b4, Bridge.hasValue(b4) && (b4.btype === 0));
            Bridge.Test.NUnit.Assert.true$1(ma4 != null, "b4 should be MemberAssignment");
            Bridge.Test.NUnit.Assert.areEqual$1(0, ma4.btype, "b4 BindingType");
            Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(ma4.member, Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, 16, 284, "P1")), "b4 member");
            Bridge.Test.NUnit.Assert.true$1(($t8 = ma4.expression, Bridge.is($t8, Bridge.hasValue($t8) && ($t8.ntype === 38))) && Bridge.referenceEquals(($t8 = ma4.expression, Bridge.cast($t8, Bridge.hasValue($t8) && ($t8.ntype === 38))).n, "a"), "b4 expression");

            Bridge.Test.NUnit.Assert.false$1(($t8 = { btype: 2, member: Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, 4, 284, "LF"), initializers: Bridge.toList([null]) }, Bridge.is($t8, Bridge.hasValue($t8) && ($t8.btype === 0))), "ListBinding should not be MemberAssignment");
        },
        elementInitWorks: function () {
            var add1 = Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.MyList, 8, 284, "Add", System.Array.init([System.Int32], Function));
            var add2 = Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.MyList, 8, 284, "Add", System.Array.init([System.Int32, System.Int32], Function));
            var pa = { ntype: 38, t: System.Int32, n: "a" };
            var pb = { ntype: 38, t: System.Int32, n: "b" };

            var i1 = { addMethod: add1, arguments: Bridge.toList(System.Array.init([pa], System.Object)) };
            var i2 = { addMethod: add1, arguments: Bridge.toList(new (Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.MyEnumerable$1(System.Object))(System.Array.init([pa], System.Object))) };
            var i3 = { addMethod: add2, arguments: Bridge.toList(System.Array.init([pa, pb], System.Object)) };
            var i4 = { addMethod: add2, arguments: Bridge.toList(new (Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.MyEnumerable$1(System.Object))(System.Array.init([pa, pb], System.Object))) };

            Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(i1.addMethod, add1), "i1 add method");
            Bridge.Test.NUnit.Assert.areEqual$1(1, i1.arguments.Count, "i1 argument count");
            Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(i1.arguments.get(0), pa), "i1 argument");

            Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(i2.addMethod, add1), "i2 add method");
            Bridge.Test.NUnit.Assert.areEqual$1(1, i2.arguments.Count, "i2 argument count");
            Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(i2.arguments.get(0), pa), "i2 argument");

            Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(i3.addMethod, add2), "i3 add method");
            Bridge.Test.NUnit.Assert.areEqual$1(2, i3.arguments.Count, "i3 argument count");
            Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(i3.arguments.get(0), pa), "i3 argument 0");
            Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(i3.arguments.get(1), pb), "i3 argument 1");

            Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(i4.addMethod, add2), "i4 add method");
            Bridge.Test.NUnit.Assert.areEqual$1(2, i4.arguments.Count, "i4 argument count");
            Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(i4.arguments.get(0), pa), "i4 argument 0");
            Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(i4.arguments.get(1), pb), "i4 argument 1");
        },
        listBindWorks: function () {
            var $t, $t1, $t2, $t3, $t4, $t5, $t6, $t7, $t8, $t9, $t10, $t11, $t12, $t13, $t14, $t15;
            var add1 = Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.MyList, 8, 284, "Add", System.Array.init([System.Int32], Function));
            var add2 = Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.MyList, 8, 284, "Add", System.Array.init([System.Int32, System.Int32], Function));
            var asserter = function (binding, member, title) {
                var $t;
                var mlb = Bridge.as(binding, Bridge.hasValue(binding) && (binding.btype === 2));
                Bridge.Test.NUnit.Assert.true$1(mlb != null, System.String.concat(title, " is MemberListBinding"));
                Bridge.Test.NUnit.Assert.areEqual$1(2, binding.btype, System.String.concat(title, " node type"));
                Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(binding.member, member), System.String.concat(title, " member"));
                Bridge.Test.NUnit.Assert.areEqual$1(2, mlb.initializers.Count, System.String.concat(title, " initializer count"));
                Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(mlb.initializers.get(0).addMethod, add1), System.String.concat(title, " initializer 0 add method"));
                Bridge.Test.NUnit.Assert.areEqual$1(1, mlb.initializers.get(0).arguments.Count, System.String.concat(title, " initializer 0 argument count"));
                Bridge.Test.NUnit.Assert.true$1(($t = mlb.initializers.get(0).arguments.get(0), Bridge.is($t, Bridge.hasValue($t) && ($t.ntype === 38))) && Bridge.referenceEquals(($t = mlb.initializers.get(0).arguments.get(0), Bridge.cast($t, Bridge.hasValue($t) && ($t.ntype === 38))).n, "a"), System.String.concat(title, " initializer 0 argument"));
                Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(mlb.initializers.get(0).addMethod, add1), System.String.concat(title, " initializer 1 add method"));
                Bridge.Test.NUnit.Assert.areEqual$1(1, mlb.initializers.get(1).arguments.Count, System.String.concat(title, " initializer 1 argument count"));
                Bridge.Test.NUnit.Assert.true$1(($t = mlb.initializers.get(1).arguments.get(0), Bridge.is($t, Bridge.hasValue($t) && ($t.ntype === 38))) && Bridge.referenceEquals(($t = mlb.initializers.get(1).arguments.get(0), Bridge.cast($t, Bridge.hasValue($t) && ($t.ntype === 38))).n, "b"), System.String.concat(title, " initializer 1 argument"));
            };

            var pa = { ntype: 38, t: System.Int32, n: "a" };
            var pb = { ntype: 38, t: System.Int32, n: "b" };
            var e1 = ($t = { ntype: 38, t: System.Int32, n: "a" }, $t1 = { ntype: 38, t: System.Int32, n: "b" }, ($t4 = ($t3 = ($t2 = Bridge.getMetadata(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C).m[0], { ntype: 31, t: $t2.td, constructor: $t2, arguments: Bridge.toList([]) }), { ntype: 24, t: $t3.t, newExpression: $t3, bindings: Bridge.toList([{ btype: 2, member: Bridge.getMetadata(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C).m[37], initializers: Bridge.toList([{ addMethod: Bridge.getMetadata(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.MyList).m[1], arguments: Bridge.toList([$t]) },{ addMethod: Bridge.getMetadata(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.MyList).m[1], arguments: Bridge.toList([$t1]) }]) }]) }), { ntype: 18, t: Function, rt: $t4.t, body: $t4, p: Bridge.toList([$t,$t1]) }));
            var e2 = ($t5 = { ntype: 38, t: System.Int32, n: "a" }, $t6 = { ntype: 38, t: System.Int32, n: "b" }, ($t9 = ($t8 = ($t7 = Bridge.getMetadata(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C).m[0], { ntype: 31, t: $t7.td, constructor: $t7, arguments: Bridge.toList([]) }), { ntype: 24, t: $t8.t, newExpression: $t8, bindings: Bridge.toList([{ btype: 2, member: Bridge.getMetadata(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C).m[33], initializers: Bridge.toList([{ addMethod: Bridge.getMetadata(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.MyList).m[1], arguments: Bridge.toList([$t5]) },{ addMethod: Bridge.getMetadata(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.MyList).m[1], arguments: Bridge.toList([$t6]) }]) }]) }), { ntype: 18, t: Function, rt: $t9.t, body: $t9, p: Bridge.toList([$t5,$t6]) }));
            var e3 = ($t10 = { ntype: 38, t: System.Int32, n: "a" }, $t11 = { ntype: 38, t: System.Int32, n: "b" }, ($t14 = ($t13 = ($t12 = Bridge.getMetadata(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C).m[0], { ntype: 31, t: $t12.td, constructor: $t12, arguments: Bridge.toList([]) }), { ntype: 24, t: $t13.t, newExpression: $t13, bindings: Bridge.toList([{ btype: 2, member: Bridge.getMetadata(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C).m[37], initializers: Bridge.toList([{ addMethod: Bridge.getMetadata(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.MyList).m[1], arguments: Bridge.toList([$t10]) },{ addMethod: Bridge.getMetadata(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.MyList).m[2], arguments: Bridge.toList([$t10,$t11]) }]) }]) }), { ntype: 18, t: Function, rt: $t14.t, body: $t14, p: Bridge.toList([$t10,$t11]) }));
            var b1 = ($t15 = e1.body, Bridge.cast($t15, Bridge.hasValue($t15) && ($t15.ntype === 24))).bindings.get(0);
            var b2 = ($t15 = e2.body, Bridge.cast($t15, Bridge.hasValue($t15) && ($t15.ntype === 24))).bindings.get(0);
            var b3 = { btype: 2, member: Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, 4, 284, "LF"), initializers: Bridge.toList(System.Array.init([{ addMethod: add1, arguments: Bridge.toList([pa]) }, { addMethod: add1, arguments: Bridge.toList([pb]) }], System.Object)) };
            var b4 = { btype: 2, member: Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, 16, 284, "LP"), initializers: Bridge.toList(System.Array.init([{ addMethod: add1, arguments: Bridge.toList([pa]) }, { addMethod: add1, arguments: Bridge.toList([pb]) }], System.Object)) };
            var b5 = { btype: 2, member: Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, 4, 284, "LF"), initializers: Bridge.toList(new (Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.MyEnumerable$1(System.Object))(System.Array.init([{ addMethod: add1, arguments: Bridge.toList([pa]) }, { addMethod: add1, arguments: Bridge.toList([pb]) }], System.Object))) };
            var b6 = { btype: 2, member: Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, 16, 284, "LP"), initializers: Bridge.toList(new (Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.MyEnumerable$1(System.Object))(System.Array.init([{ addMethod: add1, arguments: Bridge.toList([pa]) }, { addMethod: add1, arguments: Bridge.toList([pb]) }], System.Object))) };
            var b7 = ($t15 = e3.body, Bridge.cast($t15, Bridge.hasValue($t15) && ($t15.ntype === 24))).bindings.get(0);

            asserter(b1, Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, 4, 284, "LF"), "b1");
            asserter(b2, Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, 16, 284, "LP"), "b2");
            asserter(b3, Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, 4, 284, "LF"), "b3");
            asserter(b4, Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, 16, 284, "LP"), "b4");
            asserter(b5, Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, 4, 284, "LF"), "b5");
            asserter(b6, Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, 16, 284, "LP"), "b6");

            var mlb7 = Bridge.as(b7, Bridge.hasValue(b7) && (b7.btype === 2));
            Bridge.Test.NUnit.Assert.true$1(mlb7 != null, "b7 is MemberListBinding");
            Bridge.Test.NUnit.Assert.areEqual$1(2, b7.btype, "b7 node type");
            Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(b7.member, Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, 4, 284, "LF")), "b7 member");
            Bridge.Test.NUnit.Assert.areEqual$1(2, mlb7.initializers.Count, "b7 initializer count");
            Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(mlb7.initializers.get(0).addMethod, add1), "b7 initializer 0 add method");
            Bridge.Test.NUnit.Assert.areEqual$1(1, mlb7.initializers.get(0).arguments.Count, "b7 initializer 0 argument count");
            Bridge.Test.NUnit.Assert.true$1(($t15 = mlb7.initializers.get(0).arguments.get(0), Bridge.is($t15, Bridge.hasValue($t15) && ($t15.ntype === 38))) && Bridge.referenceEquals(($t15 = mlb7.initializers.get(0).arguments.get(0), Bridge.cast($t15, Bridge.hasValue($t15) && ($t15.ntype === 38))).n, "a"), "b7 initializer 0 argument");
            Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(mlb7.initializers.get(1).addMethod, add2), "b7 initializer 1 add method");
            Bridge.Test.NUnit.Assert.areEqual$1(2, mlb7.initializers.get(1).arguments.Count, "b7 initializer 1 argument count");
            Bridge.Test.NUnit.Assert.true$1(($t15 = mlb7.initializers.get(1).arguments.get(0), Bridge.is($t15, Bridge.hasValue($t15) && ($t15.ntype === 38))) && Bridge.referenceEquals(($t15 = mlb7.initializers.get(1).arguments.get(0), Bridge.cast($t15, Bridge.hasValue($t15) && ($t15.ntype === 38))).n, "a"), "b7 initializer 1 argument 0");
            Bridge.Test.NUnit.Assert.true$1(($t15 = mlb7.initializers.get(1).arguments.get(1), Bridge.is($t15, Bridge.hasValue($t15) && ($t15.ntype === 38))) && Bridge.referenceEquals(($t15 = mlb7.initializers.get(1).arguments.get(1), Bridge.cast($t15, Bridge.hasValue($t15) && ($t15.ntype === 38))).n, "b"), "b7 initializer 1 argument 1");

            Bridge.Test.NUnit.Assert.false$1(($t15 = { btype: 0, member: Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, 4, 284, "F1"), expression: { ntype: 38, t: System.Int32, n: "a" } }, Bridge.is($t15, Bridge.hasValue($t15) && ($t15.btype === 2))), "MemberAssignment should not be list binding");
        },
        memberBindWorks: function () {
            var $t, $t1, $t2, $t3, $t4, $t5, $t6, $t7, $t8;
            var pa = { ntype: 38, t: System.Int32, n: "a" };
            var e1 = ($t = { ntype: 38, t: System.Int32, n: "a" }, ($t3 = ($t2 = ($t1 = Bridge.getMetadata(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C).m[0], { ntype: 31, t: $t1.td, constructor: $t1, arguments: Bridge.toList([]) }), { ntype: 24, t: $t2.t, newExpression: $t2, bindings: Bridge.toList([{ btype: 1, member: Bridge.getMetadata(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C).m[35], bindings: Bridge.toList([{ btype: 0, member: Bridge.getMetadata(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C).m[36], expression: $t },{ btype: 0, member: Bridge.getMetadata(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C).m[34], expression: $t }]) }]) }), { ntype: 18, t: Function, rt: $t3.t, body: $t3, p: Bridge.toList([$t]) }));
            var e2 = ($t4 = { ntype: 38, t: System.Int32, n: "a" }, ($t7 = ($t6 = ($t5 = Bridge.getMetadata(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C).m[0], { ntype: 31, t: $t5.td, constructor: $t5, arguments: Bridge.toList([]) }), { ntype: 24, t: $t6.t, newExpression: $t6, bindings: Bridge.toList([{ btype: 1, member: Bridge.getMetadata(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C).m[31], bindings: Bridge.toList([{ btype: 0, member: Bridge.getMetadata(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C).m[36], expression: $t4 },{ btype: 0, member: Bridge.getMetadata(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C).m[34], expression: $t4 }]) }]) }), { ntype: 18, t: Function, rt: $t7.t, body: $t7, p: Bridge.toList([$t4]) }));

            var bindings = System.Array.init([{ btype: 0, member: Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, 4, 284, "F1"), expression: pa }, { btype: 0, member: Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, 16, 284, "P1"), expression: pa }], System.Object);
            var b1 = ($t8 = e1.body, Bridge.cast($t8, Bridge.hasValue($t8) && ($t8.ntype === 24))).bindings.get(0);
            var b2 = ($t8 = e2.body, Bridge.cast($t8, Bridge.hasValue($t8) && ($t8.ntype === 24))).bindings.get(0);
            var b3 = { btype: 1, member: Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, 4, 284, "CF"), bindings: Bridge.toList(bindings) };
            var b4 = { btype: 1, member: Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, 16, 284, "CP"), bindings: Bridge.toList(new (Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.MyEnumerable$1(System.Object))(bindings)) };

            var mb1 = Bridge.as(b1, Bridge.hasValue(b1) && (b1.btype === 1));
            Bridge.Test.NUnit.Assert.true$1(mb1 != null, "b1 should be MemberMemberBinding");
            Bridge.Test.NUnit.Assert.areEqual$1(1, mb1.btype, "b1 BindingType");
            Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(mb1.member, Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, 4, 284, "CF")), "b1 member");
            Bridge.Test.NUnit.Assert.areEqual$1(2, mb1.bindings.Count, "b1 binding count");
            Bridge.Test.NUnit.Assert.true$1(($t8 = mb1.bindings.get(0), Bridge.is($t8, Bridge.hasValue($t8) && ($t8.btype === 0))) && Bridge.referenceEquals(mb1.bindings.get(0).member, Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, 4, 284, "F1")), "b1 binding 0");
            Bridge.Test.NUnit.Assert.true$1(($t8 = mb1.bindings.get(1), Bridge.is($t8, Bridge.hasValue($t8) && ($t8.btype === 0))) && Bridge.referenceEquals(mb1.bindings.get(1).member, Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, 16, 284, "P1")), "b1 binding 1");

            var mb2 = Bridge.as(b2, Bridge.hasValue(b2) && (b2.btype === 1));
            Bridge.Test.NUnit.Assert.true$1(mb2 != null, "b2 should be MemberMemberBinding");
            Bridge.Test.NUnit.Assert.areEqual$1(1, mb2.btype, "b2 BindingType");
            Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(mb2.member, Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, 16, 284, "CP")), "b2 member");
            Bridge.Test.NUnit.Assert.areEqual$1(2, mb2.bindings.Count, "b2 binding count");
            Bridge.Test.NUnit.Assert.true$1(($t8 = mb2.bindings.get(0), Bridge.is($t8, Bridge.hasValue($t8) && ($t8.btype === 0))) && Bridge.referenceEquals(mb2.bindings.get(0).member, Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, 4, 284, "F1")), "b1 binding 0");
            Bridge.Test.NUnit.Assert.true$1(($t8 = mb2.bindings.get(1), Bridge.is($t8, Bridge.hasValue($t8) && ($t8.btype === 0))) && Bridge.referenceEquals(mb2.bindings.get(1).member, Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, 16, 284, "P1")), "b1 binding 1");

            var mb3 = Bridge.as(b3, Bridge.hasValue(b3) && (b3.btype === 1));
            Bridge.Test.NUnit.Assert.true$1(mb3 != null, "b3 should be MemberMemberBinding");
            Bridge.Test.NUnit.Assert.areEqual$1(1, mb3.btype, "b3 BindingType");
            Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(mb3.member, Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, 4, 284, "CF")), "b3 member");
            Bridge.Test.NUnit.Assert.areEqual$1(2, mb3.bindings.Count, "b3 binding count");
            Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(mb3.bindings.get(0), bindings[System.Array.index(0, bindings)]), "b3 binding 0");
            Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(mb3.bindings.get(1), bindings[System.Array.index(1, bindings)]), "b3 binding 1");

            var mb4 = Bridge.as(b4, Bridge.hasValue(b4) && (b4.btype === 1));
            Bridge.Test.NUnit.Assert.true$1(mb4 != null, "b4 should be MemberMemberBinding");
            Bridge.Test.NUnit.Assert.areEqual$1(1, mb4.btype, "b4 BindingType");
            Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(mb4.member, Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, 16, 284, "CP")), "b4 member");
            Bridge.Test.NUnit.Assert.areEqual$1(2, mb4.bindings.Count, "b4 binding count");
            Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(mb4.bindings.get(0), bindings[System.Array.index(0, bindings)]), "b4 binding 0");
            Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(mb4.bindings.get(1), bindings[System.Array.index(1, bindings)]), "b4 binding 1");

            Bridge.Test.NUnit.Assert.false$1(($t8 = { btype: 2, member: Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, 4, 284, "LF"), initializers: Bridge.toList([null]) }, Bridge.is($t8, Bridge.hasValue($t8) && ($t8.btype === 1))), "ListBinding should not be MemberMemberBinding");
        },
        memberInitWorks: function () {
            var $t, $t1, $t2, $t3, $t4, $t5, $t6, $t7, $t8, $t9;
            var asserter = $asm.$.Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.f9;

            var pa = { ntype: 38, t: System.Int32, n: "a" };
            var pb = { ntype: 38, t: System.Int32, n: "b" };
            var e1 = ($t = { ntype: 38, t: System.Int32, n: "a" }, $t1 = { ntype: 38, t: System.Int32, n: "b" }, ($t4 = ($t3 = ($t2 = Bridge.getMetadata(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C).m[0], { ntype: 31, t: $t2.td, constructor: $t2, arguments: Bridge.toList([]) }), { ntype: 24, t: $t3.t, newExpression: $t3, bindings: Bridge.toList([{ btype: 0, member: Bridge.getMetadata(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C).m[36], expression: $t },{ btype: 0, member: Bridge.getMetadata(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C).m[34], expression: $t1 }]) }), { ntype: 18, t: Function, rt: $t4.t, body: $t4, p: Bridge.toList([$t,$t1]) }));
            var e2 = ($t6 = ($t5 = Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, 1, 284, null, System.Array.init(0, null, Function)), { ntype: 31, t: $t5.td, constructor: $t5, arguments: Bridge.toList([null]) }), { ntype: 24, t: $t6.t, newExpression: $t6, bindings: Bridge.toList(System.Array.init([{ btype: 0, member: Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, 4, 284, "F1"), expression: pa }, { btype: 0, member: Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, 16, 284, "P1"), expression: pb }], System.Object)) });
            var e3 = ($t8 = ($t7 = Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, 1, 284, null, System.Array.init(0, null, Function)), { ntype: 31, t: $t7.td, constructor: $t7, arguments: Bridge.toList([null]) }), { ntype: 24, t: $t8.t, newExpression: $t8, bindings: Bridge.toList(new (Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.MyEnumerable$1(System.Object))(System.Array.init([{ btype: 0, member: Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, 4, 284, "F1"), expression: pa }, { btype: 0, member: Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, 16, 284, "P1"), expression: pb }], System.Object))) });

            asserter(e1.body, "e1");
            asserter(e2, "e2");
            asserter(e3, "e3");

            Bridge.Test.NUnit.Assert.false$1(($t9 = { ntype: 9, t: System.Int32, value: Bridge.box(0, System.Int32) }, Bridge.is($t9, Bridge.hasValue($t9) && ($t9.ntype === 24))), "Constant is MemberInitExpression");
        },
        listInitWorks: function () {
            var $t, $t1, $t2, $t3, $t4, $t5, $t6, $t7, $t8, $t9, $t10, $t11, $t12, $t13, $t14, $t15, $t16, $t17, $t18;
            var add1 = Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.MyList, 8, 284, "Add", System.Array.init([System.Int32], Function));
            var add2 = Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.MyList, 8, 284, "Add", System.Array.init([System.Int32, System.Int32], Function));

            var asserter = function (expr, title) {
                var $t;
                var lie = Bridge.as(expr, Bridge.hasValue(expr) && (expr.ntype === 22));
                Bridge.Test.NUnit.Assert.true$1(lie != null, System.String.concat(title, " is ListInitExpression"));
                Bridge.Test.NUnit.Assert.areEqual$1(22, expr.ntype, System.String.concat(title, " node type"));
                Bridge.Test.NUnit.Assert.areEqual$1(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.MyList, expr.t, System.String.concat(title, " type"));
                Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(lie.newExpression.constructor, Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.MyList, 1, 284, null, System.Array.init(0, null, Function))), System.String.concat(title, " new expression"));
                Bridge.Test.NUnit.Assert.areEqual$1(2, lie.initializers.Count, System.String.concat(title, " initializer count"));
                Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(lie.initializers.get(0).addMethod, add1), System.String.concat(title, " initializer 0 add method"));
                Bridge.Test.NUnit.Assert.areEqual$1(1, lie.initializers.get(0).arguments.Count, System.String.concat(title, " initializer 0 argument count"));
                Bridge.Test.NUnit.Assert.true$1(($t = lie.initializers.get(0).arguments.get(0), Bridge.is($t, Bridge.hasValue($t) && ($t.ntype === 38))) && Bridge.referenceEquals(($t = lie.initializers.get(0).arguments.get(0), Bridge.cast($t, Bridge.hasValue($t) && ($t.ntype === 38))).n, "a"), System.String.concat(title, " initializer 0 argument"));
                Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(lie.initializers.get(1).addMethod, add1), System.String.concat(title, " initializer 1 add method"));
                Bridge.Test.NUnit.Assert.areEqual$1(1, lie.initializers.get(1).arguments.Count, System.String.concat(title, " initializer 1 argument count"));
                Bridge.Test.NUnit.Assert.true$1(($t = lie.initializers.get(1).arguments.get(0), Bridge.is($t, Bridge.hasValue($t) && ($t.ntype === 38))) && Bridge.referenceEquals(($t = lie.initializers.get(1).arguments.get(0), Bridge.cast($t, Bridge.hasValue($t) && ($t.ntype === 38))).n, "b"), System.String.concat(title, " initializer 1 argument"));
            };

            var pa = { ntype: 38, t: System.Int32, n: "a" };
            var pb = { ntype: 38, t: System.Int32, n: "b" };
            var e1 = ($t = { ntype: 38, t: System.Int32, n: "a" }, $t1 = { ntype: 38, t: System.Int32, n: "b" }, ($t4 = ($t3 = ($t2 = Bridge.getMetadata(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.MyList).m[0], { ntype: 31, t: $t2.td, constructor: $t2, arguments: Bridge.toList([]) }), { ntype: 22, t: $t3.t, newExpression: $t3, initializers: Bridge.toList([{ addMethod: Bridge.getMetadata(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.MyList).m[1], arguments: Bridge.toList([$t]) },{ addMethod: Bridge.getMetadata(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.MyList).m[1], arguments: Bridge.toList([$t1]) }]) }), { ntype: 18, t: Function, rt: $t4.t, body: $t4, p: Bridge.toList([$t,$t1]) }));
            var e2 = ($t6 = ($t5 = Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.MyList, { ntype: 31, t: $t5, constructor: Bridge.Reflection.getMembers($t5, 1, 284, null, []), arguments: Bridge.toList([]) }), { ntype: 22, t: $t6.t, newExpression: $t6, initializers: Bridge.toList(System.Array.init([{ addMethod: add1, arguments: Bridge.toList(System.Array.init([pa], System.Object)) }, { addMethod: add1, arguments: Bridge.toList(System.Array.init([pb], System.Object)) }], System.Object)) });
            var e3 = ($t8 = ($t7 = Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.MyList, { ntype: 31, t: $t7, constructor: Bridge.Reflection.getMembers($t7, 1, 284, null, []), arguments: Bridge.toList([]) }), { ntype: 22, t: $t8.t, newExpression: $t8, initializers: Bridge.toList(new (Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.MyEnumerable$1(System.Object))(System.Array.init([{ addMethod: add1, arguments: Bridge.toList(System.Array.init([pa], System.Object)) }, { addMethod: add1, arguments: Bridge.toList(System.Array.init([pb], System.Object)) }], System.Object))) });
            var e4 = ($t10 = ($t9 = Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.MyList, { ntype: 31, t: $t9, constructor: Bridge.Reflection.getMembers($t9, 1, 284, null, []), arguments: Bridge.toList([]) }), { ntype: 22, t: $t10.t, newExpression: $t10, initializers: Bridge.toList(System.Array.init([pa, pb], System.Object).map(function(i) { return { addMethod: add1, arguments: Bridge.toList([i]) }; })) });
            var e5 = ($t12 = ($t11 = Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.MyList, { ntype: 31, t: $t11, constructor: Bridge.Reflection.getMembers($t11, 1, 284, null, []), arguments: Bridge.toList([]) }), { ntype: 22, t: $t12.t, newExpression: $t12, initializers: Bridge.toList(Bridge.toArray(new (Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.MyEnumerable$1(System.Object))(System.Array.init([pa, pb], System.Object))).map(function(i) { return { addMethod: add1, arguments: Bridge.toList([i]) }; })) });
            var e6 = ($t13 = { ntype: 38, t: System.Int32, n: "a" }, $t14 = { ntype: 38, t: System.Int32, n: "b" }, ($t17 = ($t16 = ($t15 = Bridge.getMetadata(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.MyList).m[0], { ntype: 31, t: $t15.td, constructor: $t15, arguments: Bridge.toList([]) }), { ntype: 22, t: $t16.t, newExpression: $t16, initializers: Bridge.toList([{ addMethod: Bridge.getMetadata(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.MyList).m[1], arguments: Bridge.toList([$t13]) },{ addMethod: Bridge.getMetadata(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.MyList).m[2], arguments: Bridge.toList([$t13,$t14]) }]) }), { ntype: 18, t: Function, rt: $t17.t, body: $t17, p: Bridge.toList([$t13,$t14]) }));

            asserter(e1.body, "e1");
            asserter(e2, "e2");
            asserter(e3, "e3");
            asserter(e4, "e4");
            asserter(e5, "e5");

            var lie6 = ($t18 = e6.body, Bridge.as($t18, Bridge.hasValue($t18) && ($t18.ntype === 22)));
            Bridge.Test.NUnit.Assert.true$1(lie6 != null, "e6 is ListInitExpression");
            Bridge.Test.NUnit.Assert.areEqual$1(22, lie6.ntype, "e6 node type");
            Bridge.Test.NUnit.Assert.areEqual$1(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.MyList, lie6.t, "e6 type");
            Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(lie6.newExpression.constructor, Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.MyList, 1, 284, null, System.Array.init(0, null, Function))), "e6 new expression");
            Bridge.Test.NUnit.Assert.areEqual$1(2, lie6.initializers.Count, "e6 initializer count");
            Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(lie6.initializers.get(0).addMethod, add1), "e6 initializer 0 add method");
            Bridge.Test.NUnit.Assert.areEqual$1(1, lie6.initializers.get(0).arguments.Count, "e6 initializer 0 argument count");
            Bridge.Test.NUnit.Assert.true$1(($t18 = lie6.initializers.get(0).arguments.get(0), Bridge.is($t18, Bridge.hasValue($t18) && ($t18.ntype === 38))) && Bridge.referenceEquals(($t18 = lie6.initializers.get(0).arguments.get(0), Bridge.cast($t18, Bridge.hasValue($t18) && ($t18.ntype === 38))).n, "a"), "e6 initializer 0 argument");
            Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(lie6.initializers.get(1).addMethod, add2), "e6 initializer 1 add method");
            Bridge.Test.NUnit.Assert.areEqual$1(2, lie6.initializers.get(1).arguments.Count, "e6 initializer 1 argument count");
            Bridge.Test.NUnit.Assert.true$1(($t18 = lie6.initializers.get(1).arguments.get(0), Bridge.is($t18, Bridge.hasValue($t18) && ($t18.ntype === 38))) && Bridge.referenceEquals(($t18 = lie6.initializers.get(1).arguments.get(0), Bridge.cast($t18, Bridge.hasValue($t18) && ($t18.ntype === 38))).n, "a"), "e6 initializer 1 argument 0");
            Bridge.Test.NUnit.Assert.true$1(($t18 = lie6.initializers.get(1).arguments.get(1), Bridge.is($t18, Bridge.hasValue($t18) && ($t18.ntype === 38))) && Bridge.referenceEquals(($t18 = lie6.initializers.get(1).arguments.get(1), Bridge.cast($t18, Bridge.hasValue($t18) && ($t18.ntype === 38))).n, "b"), "e6 initializer 1 argument 1");

            Bridge.Test.NUnit.Assert.false$1(($t18 = { ntype: 9, t: System.Int32, value: Bridge.box(0, System.Int32) }, Bridge.is($t18, Bridge.hasValue($t18) && ($t18.ntype === 22))), "Constant is ListInitExpression");
        },
        typeIsAndTypeEqualWork: function () {
            var $t, $t1, $t2;
            var e1 = ($t = { ntype: 38, t: System.Object, n: "a" }, ($t1 = { ntype: 45, t: System.Boolean, expression: $t, typeOperand: Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C }, { ntype: 18, t: Function, rt: $t1.t, body: $t1, p: Bridge.toList([$t]) }));
            var e2 = { ntype: 45, t: System.Boolean, expression: { ntype: 38, t: System.Object, n: "a" }, typeOperand: Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C };
            var e3 = { ntype: 81, t: System.Boolean, expression: { ntype: 38, t: System.Object, n: "a" }, typeOperand: Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C };

            Bridge.Test.NUnit.Assert.true$1(($t2 = e1.body, Bridge.is($t2, Bridge.hasValue($t2) && ($t2.ntype === 45 || $t2.ntype === 81))), "e1 is TypeBinaryExpression");
            Bridge.Test.NUnit.Assert.areEqual$1(45, e1.body.ntype, "e1 node type");
            Bridge.Test.NUnit.Assert.areEqual$1(System.Boolean, e1.body.t, "e1 type");
            Bridge.Test.NUnit.Assert.true$1(($t2 = ($t2 = e1.body, Bridge.cast($t2, Bridge.hasValue($t2) && ($t2.ntype === 45 || $t2.ntype === 81))).expression, Bridge.is($t2, Bridge.hasValue($t2) && ($t2.ntype === 38))) && Bridge.referenceEquals(($t2 = ($t2 = e1.body, Bridge.cast($t2, Bridge.hasValue($t2) && ($t2.ntype === 45 || $t2.ntype === 81))).expression, Bridge.cast($t2, Bridge.hasValue($t2) && ($t2.ntype === 38))).n, "a"), "e1 expression");
            Bridge.Test.NUnit.Assert.areEqual$1(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, ($t2 = e1.body, Bridge.cast($t2, Bridge.hasValue($t2) && ($t2.ntype === 45 || $t2.ntype === 81))).typeOperand, "e1 type operand");

            Bridge.Test.NUnit.Assert.true$1(Bridge.is(e2, Bridge.hasValue(e2) && (e2.ntype === 45 || e2.ntype === 81)), "e2 is TypeBinaryExpression");
            Bridge.Test.NUnit.Assert.areEqual$1(45, e2.ntype, "e2 node type");
            Bridge.Test.NUnit.Assert.areEqual$1(System.Boolean, e2.t, "e2 type");
            Bridge.Test.NUnit.Assert.true$1(($t2 = Bridge.cast(e2, Bridge.hasValue(e2) && (e2.ntype === 45 || e2.ntype === 81)).expression, Bridge.is($t2, Bridge.hasValue($t2) && ($t2.ntype === 38))) && Bridge.referenceEquals(($t2 = Bridge.cast(e2, Bridge.hasValue(e2) && (e2.ntype === 45 || e2.ntype === 81)).expression, Bridge.cast($t2, Bridge.hasValue($t2) && ($t2.ntype === 38))).n, "a"), "e2 expression");
            Bridge.Test.NUnit.Assert.areEqual$1(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, Bridge.cast(e2, Bridge.hasValue(e2) && (e2.ntype === 45 || e2.ntype === 81)).typeOperand, "e2 type operand");

            Bridge.Test.NUnit.Assert.true$1(Bridge.is(e3, Bridge.hasValue(e3) && (e3.ntype === 45 || e3.ntype === 81)), "e3 is TypeBinaryExpression");
            Bridge.Test.NUnit.Assert.areEqual$1(81, e3.ntype, "e3 node type");
            Bridge.Test.NUnit.Assert.areEqual$1(System.Boolean, e3.t, "e3 type");
            Bridge.Test.NUnit.Assert.true$1(($t2 = Bridge.cast(e3, Bridge.hasValue(e3) && (e3.ntype === 45 || e3.ntype === 81)).expression, Bridge.is($t2, Bridge.hasValue($t2) && ($t2.ntype === 38))) && Bridge.referenceEquals(($t2 = Bridge.cast(e2, Bridge.hasValue(e2) && (e2.ntype === 45 || e2.ntype === 81)).expression, Bridge.cast($t2, Bridge.hasValue($t2) && ($t2.ntype === 38))).n, "a"), "e3 expression");
            Bridge.Test.NUnit.Assert.areEqual$1(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, Bridge.cast(e3, Bridge.hasValue(e3) && (e3.ntype === 45 || e3.ntype === 81)).typeOperand, "e3 type operand");

            Bridge.Test.NUnit.Assert.false$1(($t2 = { ntype: 9, t: System.Int32, value: Bridge.box(0, System.Int32) }, Bridge.is($t2, Bridge.hasValue($t2) && ($t2.ntype === 45 || $t2.ntype === 81))), "Constant is TypeBinaryExpression");
        },
        quoteWorks: function () {
            var $t, $t1, $t2, $t3, $t4, $t5;
            var p = { ntype: 38, t: System.Int32, n: "x" };
            var e1 = ($t = { ntype: 38, t: System.Int32, n: "a" }, ($t4 = ($t3 = {"td":Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests,"a":1,"n":"F","is":true,"t":8,"pi":[{"n":"f","pt":System.Object,"ps":0}],"sn":"f","rt":System.Int32,"p":[System.Object]}, { ntype: 6, t: $t3.rt, obj: null, method: $t3, args: Bridge.toList([{ ntype: 40, t: System.Object, operand: ($t1 = { ntype: 38, t: System.Int32, n: "x" }, ($t2 = { ntype: 0, t: System.Int32, left: $t1, right: $t }, { ntype: 18, t: Function, rt: $t2.t, body: $t2, p: Bridge.toList([$t1]) })) }]) }), { ntype: 18, t: Function, rt: $t4.t, body: $t4, p: Bridge.toList([$t]) }));
            var e2 = { ntype: 40, t: System.Object, operand: { ntype: 18, t: Function, rt: p.t, body: p, p: Bridge.toList(System.Array.init([p], System.Object)) } };

            var q1 = ($t5 = e1.body, Bridge.cast($t5, Bridge.hasValue($t5) && ($t5.ntype === 6))).args.get(0);
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(q1, Bridge.hasValue(q1) && ([4,10,11,28,29,30,34,40,44,49,54,60,62,77,78,79,80,82,83,84].indexOf(q1.ntype) >= 0)), "e1 is UnaryExpression");
            Bridge.Test.NUnit.Assert.areEqual$1(40, q1.ntype, "e1 node type");
            Bridge.Test.NUnit.Assert.areEqual$1(System.Object, q1.t, "e1 type");
            var l1 = ($t5 = Bridge.cast(q1, Bridge.hasValue(q1) && ([4,10,11,28,29,30,34,40,44,49,54,60,62,77,78,79,80,82,83,84].indexOf(q1.ntype) >= 0)).operand, Bridge.as($t5, Bridge.hasValue($t5) && ($t5.ntype === 18)));
            Bridge.Test.NUnit.Assert.true$1(l1 != null, "e1 operand should be LambdaExpression");
            Bridge.Test.NUnit.Assert.areEqual$1(1, l1.p.Count, "e1 lambda parameter count");
            Bridge.Test.NUnit.Assert.areEqual$1("x", l1.p.get(0).n, "e1 lambda parameter name");

            Bridge.Test.NUnit.Assert.true$1(Bridge.is(e2, Bridge.hasValue(e2) && ([4,10,11,28,29,30,34,40,44,49,54,60,62,77,78,79,80,82,83,84].indexOf(e2.ntype) >= 0)), "e2 is UnaryExpression");
            Bridge.Test.NUnit.Assert.areEqual$1(40, e2.ntype, "e2 node type");
            Bridge.Test.NUnit.Assert.areEqual$1(System.Object, e2.t, "e2 type");
            var l2 = ($t5 = Bridge.cast(e2, Bridge.hasValue(e2) && ([4,10,11,28,29,30,34,40,44,49,54,60,62,77,78,79,80,82,83,84].indexOf(e2.ntype) >= 0)).operand, Bridge.as($t5, Bridge.hasValue($t5) && ($t5.ntype === 18)));
            Bridge.Test.NUnit.Assert.true$1(l2 != null, "e2 operand should be LambdaExpression");
            Bridge.Test.NUnit.Assert.areEqual$1(1, l2.p.Count, "e2 lambda parameter count");
            Bridge.Test.NUnit.Assert.areEqual$1("x", l2.p.get(0).n, "e2 lambda parameter name");
        },
        localVariableReferenceWorks: function () {
            var $t, $t1;
            var a = 42;
            var e = ($t = {"ntype":23,"t":System.Int32,"expression":{"ntype":9,"t":System.Int32,"value":{}},"member":{"td":System.Object,"n":"a","t":16,"rt":System.Int32,"g":{"td":System.Object,"n":"geta","t":8,"rt":System.Int32,"p":[],"def":function(){ return a}},"s":{"td":System.Object,"n":"seta","t":8,"rt":System.Object,"p":[System.Int32],"def":function($){ a = $; }}}}, { ntype: 18, t: Function, rt: $t.t, body: $t, p: Bridge.toList([]) });
            var me = ($t1 = e.body, Bridge.as($t1, Bridge.hasValue($t1) && ($t1.ntype === 23)));
            Bridge.Test.NUnit.Assert.true$1(me != null, "e is MemberExpression");
            Bridge.Test.NUnit.Assert.areEqual$1(23, me.ntype, "e node type");
            Bridge.Test.NUnit.Assert.areEqual$1(System.Int32, me.t, "e type");

            var expr = ($t1 = me.expression, Bridge.as($t1, Bridge.hasValue($t1) && ($t1.ntype === 9)));
            Bridge.Test.NUnit.Assert.true$1(expr != null, "expression should be ConstantExpression");
            Bridge.Test.NUnit.Assert.areEqual$1(9, expr.ntype, "expression node type");
            Bridge.Test.NUnit.Assert.areEqual$1(System.Int32, expr.t, "expression type");
            Bridge.Test.NUnit.Assert.true$1(expr.value != null, "expression value");

            var prop = Bridge.as(($t1 = e.body, Bridge.cast($t1, Bridge.hasValue($t1) && ($t1.ntype === 23))).member, System.Reflection.PropertyInfo);
            Bridge.Test.NUnit.Assert.true$1(prop != null, "property not null");

            Bridge.Test.NUnit.Assert.areEqual$1(16, prop.t, "property member type");
            Bridge.Test.NUnit.Assert.areEqual$1("a", prop.n, "property name");
            Bridge.Test.NUnit.Assert.true$1(prop.td != null, "property declaring type");
            Bridge.Test.NUnit.Assert.false$1((prop.is || false), "property is static");
            Bridge.Test.NUnit.Assert.areEqual$1(System.Int32, prop.rt, "property type");
            Bridge.Test.NUnit.Assert.areEqual$1(0, (prop.p || []).length, "property indexer parameters");
            Bridge.Test.NUnit.Assert.true$1((!!prop.g), "property can read");
            Bridge.Test.NUnit.Assert.true$1((!!prop.s), "property can write");

            Bridge.Test.NUnit.Assert.areEqual$1(8, prop.g.t, "getter member type");
            Bridge.Test.NUnit.Assert.areEqual$1("geta", prop.g.n, "getter name");
            Bridge.Test.NUnit.Assert.true$1(prop.g.td != null, "getter declaring type");
            Bridge.Test.NUnit.Assert.false$1((prop.g.is || false), "getter is static");
            Bridge.Test.NUnit.Assert.areEqual$1(0, (prop.g.p || []).length, "getter parameters");
            Bridge.Test.NUnit.Assert.false$1((prop.g.t === 1), "getter is constructor");
            Bridge.Test.NUnit.Assert.areEqual$1(System.Int32, prop.g.rt, "getter return type");
            Bridge.Test.NUnit.Assert.areEqual$1(0, (prop.g.tpc || 0), "getter type parameter count");

            Bridge.Test.NUnit.Assert.areEqual$1(8, prop.s.t, "setter member type");
            Bridge.Test.NUnit.Assert.areEqual$1("seta", prop.s.n, "setter name");
            Bridge.Test.NUnit.Assert.true$1(prop.s.td != null, "setter declaring type");
            Bridge.Test.NUnit.Assert.false$1((prop.s.is || false), "setter is static");
            Bridge.Test.NUnit.Assert.areEqual$1(1, (prop.s.p || []).length, "setter parameter count");
            Bridge.Test.NUnit.Assert.areEqual$1(System.Int32, ($t1 = (prop.s.p || []))[System.Array.index(0, $t1)], "setter parameter type");
            Bridge.Test.NUnit.Assert.false$1((prop.s.t === 1), "setter is constructor");
            Bridge.Test.NUnit.Assert.areEqual$1(System.Object, prop.s.rt, "setter return type");
            Bridge.Test.NUnit.Assert.areEqual$1(0, (prop.s.tpc || 0), "setter type parameter count");

            Bridge.Test.NUnit.Assert.areEqual$1(42, Bridge.unbox(Bridge.Reflection.midel(prop.g, Bridge.unbox(expr.value))()), "property get");
            Bridge.Reflection.midel(prop.s, Bridge.unbox(expr.value))(120);
            Bridge.Test.NUnit.Assert.areEqual$1(120, a, "property set");
        },
        throwAndRethrowWork: function () {
            var a = { ntype: 38, t: System.NotSupportedException, n: "a" };
            var e1 = { ntype: 60, t: System.Object, operand: a };
            var e2 = { ntype: 60, t: System.Exception, operand: a };
            var e3 = { ntype: 60, t: System.Object };
            var e4 = { ntype: 60, t: System.Exception };

            var asserter = $asm.$.Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.f10;

            asserter(e1, System.Object, true, "e1");
            asserter(e2, System.Exception, true, "e2");
            asserter(e3, System.Object, false, "e3");
            asserter(e4, System.Exception, false, "e4");
        },
        defaultAndEmptyWork: function () {
            var $t;
            var e1 = { ntype: 51, t: System.Object };
            var e2 = { ntype: 51, t: System.String };

            Bridge.Test.NUnit.Assert.true$1(Bridge.is(e1, Bridge.hasValue(e1) && (e1.ntype === 51)), "e1 is DefaultExpression");
            Bridge.Test.NUnit.Assert.areEqual$1(51, e1.ntype, "e1 node type");
            Bridge.Test.NUnit.Assert.areEqual$1(System.Object, e1.t, "e1 type");

            Bridge.Test.NUnit.Assert.true$1(Bridge.is(e2, Bridge.hasValue(e2) && (e2.ntype === 51)), "e2 is DefaultExpression");
            Bridge.Test.NUnit.Assert.areEqual$1(51, e2.ntype, "e2 node type");
            Bridge.Test.NUnit.Assert.areEqual$1(System.String, e2.t, "e2 type");

            Bridge.Test.NUnit.Assert.false$1(($t = { ntype: 9, t: System.Int32, value: Bridge.box(0, System.Int32) }, Bridge.is($t, Bridge.hasValue($t) && ($t.ntype === 45 || $t.ntype === 81))), "Constant is DefaultExpression");
        },
        blockWorks: function () {
            var $t, $t1, $t2, $t3;
            var c1 = { ntype: 9, t: System.Int32, value: 2 };
            var c2 = { ntype: 9, t: System.String, value: "X" };
            var v1 = { ntype: 38, t: System.Int32, n: "v1" };
            var v2 = { ntype: 38, t: System.String, n: "v2" };

            var e1 = ($t = System.Array.init([c1, c2], System.Object), { ntype: 47, t: $t[$t.length - 1].t, expressions: Bridge.toList($t) });
            var e2 = (function(a) { return { ntype: 47, t: a.get(a.getCount() - 1).t, expressions: a }; })(Bridge.toList(new (Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.MyEnumerable$1(System.Object))(System.Array.init([c1, c2], System.Object))));
            var e3 = { ntype: 47, t: System.Object, expressions: Bridge.toList(System.Array.init([c1, c2], System.Object)) };
            var e4 = { ntype: 47, t: System.Object, expressions: Bridge.toList(new (Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.MyEnumerable$1(System.Object))(System.Array.init([c1, c2], System.Object))) };
            var e5 = ($t1 = System.Array.init([c1, c2], System.Object), { ntype: 47, t: $t1[$t1.length - 1].t, variables: Bridge.toList(new (Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.MyEnumerable$1(System.Object))(System.Array.init([v1, v2], System.Object))), expressions: Bridge.toList($t1) });
            var e6 = (function(a, b) { return { ntype: 47, t: b.get(b.getCount() - 1).t, variables: a, expressions: b }; })(Bridge.toList(new (Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.MyEnumerable$1(System.Object))(System.Array.init([v1, v2], System.Object))), Bridge.toList(new (Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.MyEnumerable$1(System.Object))(System.Array.init([c1, c2], System.Object))));
            var e7 = { ntype: 47, t: System.Object, variables: Bridge.toList(new (Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.MyEnumerable$1(System.Object))(System.Array.init([v1, v2], System.Object))), expressions: Bridge.toList(System.Array.init([c1, c2], System.Object)) };
            var e8 = { ntype: 47, t: System.Object, variables: Bridge.toList(new (Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.MyEnumerable$1(System.Object))(System.Array.init([v1, v2], System.Object))), expressions: Bridge.toList(new (Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.MyEnumerable$1(System.Object))(System.Array.init([c1, c2], System.Object))) };
            var e9 = ($t2 = System.Array.init([c1, c2], System.Object), { ntype: 47, t: $t2[$t2.length - 1].t, variables: Bridge.toList(System.Array.init([v1, v2], System.Object)), expressions: Bridge.toList($t2) });
            var e10 = (function(a, b) { return { ntype: 47, t: b.get(b.getCount() - 1).t, variables: a, expressions: b }; })(Bridge.toList(System.Array.init([v1, v2], System.Object)), Bridge.toList(new (Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.MyEnumerable$1(System.Object))(System.Array.init([c1, c2], System.Object))));
            var e11 = { ntype: 47, t: System.Object, variables: Bridge.toList(System.Array.init([v1, v2], System.Object)), expressions: Bridge.toList(System.Array.init([c1, c2], System.Object)) };
            var e12 = { ntype: 47, t: System.Object, variables: Bridge.toList(System.Array.init([v1, v2], System.Object)), expressions: Bridge.toList(new (Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.MyEnumerable$1(System.Object))(System.Array.init([c1, c2], System.Object))) };

            var asserter = function (expr, type, hasVariables, title) {
                var be = Bridge.as(expr, Bridge.hasValue(expr) && (expr.ntype === 47));
                Bridge.Test.NUnit.Assert.true$1(be != null, System.String.concat(title, " is BlockExpression"));
                Bridge.Test.NUnit.Assert.areEqual$1(47, be.ntype, System.String.concat(title, " node type"));
                Bridge.Test.NUnit.Assert.areEqual$1(type, be.t, System.String.concat(title, " type"));
                Bridge.Test.NUnit.Assert.areEqual$1(2, be.expressions.Count, System.String.concat(title, " expression count"));
                Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(be.expressions.get(0), c1), System.String.concat(title, " expression 0"));
                Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(be.expressions.get(1), c2), System.String.concat(title, " expression 1"));
                Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(be.expressions.get(be.expressions.getCount() - 1), c2), System.String.concat(title, " result"));
                if (hasVariables) {
                    Bridge.Test.NUnit.Assert.areEqual$1(2, (be.variables || Bridge.toList([])).Count, System.String.concat(title, " variable count"));
                    Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals((be.variables || Bridge.toList([])).get(0), v1), System.String.concat(title, " variable 0"));
                    Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals((be.variables || Bridge.toList([])).get(1), v2), System.String.concat(title, " variable 1"));
                } else {
                    Bridge.Test.NUnit.Assert.areEqual$1(0, (be.variables || Bridge.toList([])).Count, System.String.concat(title, " variable count"));
                }
            };

            asserter(e1, System.String, false, "e1");
            asserter(e2, System.String, false, "e2");
            asserter(e3, System.Object, false, "e3");
            asserter(e4, System.Object, false, "e4");
            asserter(e5, System.String, true, "e5");
            asserter(e6, System.String, true, "e6");
            asserter(e7, System.Object, true, "e7");
            asserter(e8, System.Object, true, "e8");
            asserter(e9, System.String, true, "e9");
            asserter(e10, System.String, true, "e10");
            asserter(e11, System.Object, true, "e11");
            asserter(e12, System.Object, true, "e12");

            Bridge.Test.NUnit.Assert.false$1(($t3 = { ntype: 9, t: System.Int32, value: Bridge.box(0, System.Int32) }, Bridge.is($t3, Bridge.hasValue($t3) && ($t3.ntype === 47))), "Constant is BlockExpression");
        },
        ifThenWorks: function () {
            var a = { ntype: 38, t: System.Boolean, n: "a" };
            var b = { ntype: 38, t: System.Boolean, n: "a" };
            var c = { ntype: 38, t: System.Boolean, n: "a" };

            var e1 = { ntype: 8, t: System.Object, test: a, ifTrue: b, ifFalse: { ntype: 51, t: System.Object } };
            var e2 = { ntype: 8, t: System.Object, test: a, ifTrue: b, ifFalse: c };

            var ce1 = Bridge.as(e1, Bridge.hasValue(e1) && (e1.ntype === 8));
            Bridge.Test.NUnit.Assert.true$1(ce1 != null, "e1 is ConditionalExpression");
            Bridge.Test.NUnit.Assert.areEqual$1(8, ce1.ntype, "e1 node type");
            Bridge.Test.NUnit.Assert.areEqual$1(System.Object, ce1.t, "e1 type");
            Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(ce1.test, a), "e1 test");
            Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(ce1.ifTrue, b), "e1 iftrue");
            Bridge.Test.NUnit.Assert.areEqual$1(51, ce1.ifFalse.ntype, "e1 iffalse node type");
            Bridge.Test.NUnit.Assert.areEqual$1(System.Object, ce1.ifFalse.t, "e1 iffalse type");

            var ce2 = Bridge.as(e2, Bridge.hasValue(e2) && (e2.ntype === 8));
            Bridge.Test.NUnit.Assert.true$1(ce2 != null, "e2 is ConditionalExpression");
            Bridge.Test.NUnit.Assert.areEqual$1(8, ce2.ntype, "e2 node type");
            Bridge.Test.NUnit.Assert.areEqual$1(System.Object, ce2.t, "e2 type");
            Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(ce2.test, a), "e2 test");
            Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(ce2.ifTrue, b), "e2 iftrue");
            Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(ce2.ifFalse, c), "e2 iffalse");
        },
        labelTargetWorks: function () {
            var l1 = { t: System.Object };
            var l2 = { t: System.Object, n: "name1" };
            var l3 = { t: System.Int32 };
            var l4 = { t: System.String, n: "name2" };

            Bridge.Test.NUnit.Assert.true$1(l1.n == null, "l1 name");
            Bridge.Test.NUnit.Assert.areEqual$1(System.Object, l1.t, "l1 type");
            Bridge.Test.NUnit.Assert.areEqual$1("name1", l2.n, "l2 name");
            Bridge.Test.NUnit.Assert.areEqual$1(System.Object, l2.t, "l2 type");
            Bridge.Test.NUnit.Assert.true$1(l3.n == null, "l3 name");
            Bridge.Test.NUnit.Assert.areEqual$1(System.Int32, l3.t, "l3 type");
            Bridge.Test.NUnit.Assert.areEqual$1("name2", l4.n, "l4 name");
            Bridge.Test.NUnit.Assert.areEqual$1(System.String, l4.t, "l4 type");
        },
        gotoWorks: function () {
            var $t;
            var lbl1 = { t: System.Object };
            var lbl2 = { t: System.String };
            var c = { ntype: 9, t: System.String, value: "X" };
            var e1 = { ntype: 53, t: System.Object, kind: 2, target: lbl1 };
            var e2 = { ntype: 53, t: System.Object, kind: 2, target: lbl2, value: c };
            var e3 = { ntype: 53, t: System.Int32, kind: 2, target: lbl1 };
            var e4 = { ntype: 53, t: System.String, kind: 2, target: lbl1, value: c };
            var e5 = { ntype: 53, t: System.Object, kind: 3, target: lbl1 };
            var e6 = { ntype: 53, t: System.Int32, kind: 3, target: lbl1 };
            var e7 = { ntype: 53, t: System.Object, kind: 1, target: lbl1 };
            var e8 = { ntype: 53, t: System.Object, kind: 1, target: lbl2, value: c };
            var e9 = { ntype: 53, t: System.Int32, kind: 1, target: lbl1 };
            var e10 = { ntype: 53, t: System.String, kind: 1, target: lbl1, value: c };
            var e11 = { ntype: 53, t: System.Object, kind: 0, target: lbl1 };
            var e12 = { ntype: 53, t: System.Object, kind: 0, target: lbl2, value: c };
            var e13 = { ntype: 53, t: System.Int32, kind: 0, target: lbl1 };
            var e14 = { ntype: 53, t: System.String, kind: 0, target: lbl2, value: c };
            var e15 = { ntype: 53, t: System.String, kind: 2, target: lbl2, value: c };

            var asserter = $asm.$.Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.f11;

            asserter(e1, System.Object, 2, lbl1, null, "e1");
            asserter(e2, System.Object, 2, lbl2, c, "e2");
            asserter(e3, System.Int32, 2, lbl1, null, "e3");
            asserter(e4, System.String, 2, lbl1, c, "e4");
            asserter(e5, System.Object, 3, lbl1, null, "e5");
            asserter(e6, System.Int32, 3, lbl1, null, "e6");
            asserter(e7, System.Object, 1, lbl1, null, "e7");
            asserter(e8, System.Object, 1, lbl2, c, "e8");
            asserter(e9, System.Int32, 1, lbl1, null, "e9");
            asserter(e10, System.String, 1, lbl1, c, "e10");
            asserter(e11, System.Object, 0, lbl1, null, "e11");
            asserter(e12, System.Object, 0, lbl2, c, "e12");
            asserter(e13, System.Int32, 0, lbl1, null, "e13");
            asserter(e14, System.String, 0, lbl2, c, "e14");
            asserter(e15, System.String, 2, lbl2, c, "e15");

            Bridge.Test.NUnit.Assert.false$1(($t = { ntype: 9, t: System.Int32, value: Bridge.box(0, System.Int32) }, Bridge.is($t, Bridge.hasValue($t) && ($t.ntype === 53))), "Constant is GotoExpression");
        },
        labelExpressionWorks: function () {
            var $t;
            var lbl1 = { t: System.Object };
            var lbl2 = { t: System.String };
            var v = { ntype: 9, t: System.String, value: "X" };
            var e1 = { ntype: 56, t: lbl1.t, target: lbl1 };
            var e2 = { ntype: 56, t: lbl1.t, target: lbl1, dv: v };
            var e3 = { ntype: 56, t: lbl2.t, target: lbl2, dv: v };

            Bridge.Test.NUnit.Assert.true$1(Bridge.is(e1, Bridge.hasValue(e1) && (e1.ntype === 56)), "e1 is LabelExpression");
            Bridge.Test.NUnit.Assert.areEqual$1(56, e1.ntype, "e1 node type");
            Bridge.Test.NUnit.Assert.areEqual$1(System.Object, e1.t, "e1 type");
            Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(Bridge.cast(e1, Bridge.hasValue(e1) && (e1.ntype === 56)).target, lbl1), "e1 target");
            Bridge.Test.NUnit.Assert.true$1(Bridge.cast(e1, Bridge.hasValue(e1) && (e1.ntype === 56)).dv == null, "e1 default value");

            Bridge.Test.NUnit.Assert.true$1(Bridge.is(e2, Bridge.hasValue(e2) && (e2.ntype === 56)), "e2 is LabelExpression");
            Bridge.Test.NUnit.Assert.areEqual$1(56, e2.ntype, "e2 node type");
            Bridge.Test.NUnit.Assert.areEqual$1(System.Object, e2.t, "e2 type");
            Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(Bridge.cast(e2, Bridge.hasValue(e2) && (e2.ntype === 56)).target, lbl1), "e2 target");
            Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(Bridge.cast(e2, Bridge.hasValue(e2) && (e2.ntype === 56)).dv, v), "e2 default value");

            Bridge.Test.NUnit.Assert.true$1(Bridge.is(e3, Bridge.hasValue(e3) && (e3.ntype === 56)), "e3 is LabelExpression");
            Bridge.Test.NUnit.Assert.areEqual$1(56, e3.ntype, "e3 node type");
            Bridge.Test.NUnit.Assert.areEqual$1(System.String, e3.t, "e3 type");
            Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(Bridge.cast(e3, Bridge.hasValue(e3) && (e3.ntype === 56)).target, lbl2), "e3 target");
            Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(Bridge.cast(e3, Bridge.hasValue(e3) && (e3.ntype === 56)).dv, v), "e3 default value");

            Bridge.Test.NUnit.Assert.false$1(($t = { ntype: 9, t: System.Int32, value: Bridge.box(0, System.Int32) }, Bridge.is($t, Bridge.hasValue($t) && ($t.ntype === 56))), "Constant is LabelExpression");
        },
        loopWorks: function () {
            var $t, $t1;
            var c = { ntype: 9, t: System.Int32, value: 1 };
            var lb = { t: System.String };
            var lc = { t: System.Object };

            var e1 = { ntype: 58, t: System.Object, body: c };
            var e2 = { ntype: 58, t: lb.t, body: c, breakLabel: lb };
            var e3 = { ntype: 58, t: lb ? lb.t : System.Object, body: c, breakLabel: lb, continueLabel: lc };
            var e4 = ($t = null, { ntype: 58, t: $t ? $t.t : System.Object, body: c, breakLabel: $t, continueLabel: null });

            Bridge.Test.NUnit.Assert.true$1(Bridge.is(e1, Bridge.hasValue(e1) && (e1.ntype === 58)), "e1 is LoopExpression");
            Bridge.Test.NUnit.Assert.areEqual$1(58, e1.ntype, "e1 node type");
            Bridge.Test.NUnit.Assert.areEqual$1(System.Object, e1.t, "e1 type");
            Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(Bridge.cast(e1, Bridge.hasValue(e1) && (e1.ntype === 58)).body, c), "e1 body");
            Bridge.Test.NUnit.Assert.true$1(Bridge.cast(e1, Bridge.hasValue(e1) && (e1.ntype === 58)).breakLabel == null, "e1 break label");
            Bridge.Test.NUnit.Assert.true$1(Bridge.cast(e1, Bridge.hasValue(e1) && (e1.ntype === 58)).continueLabel == null, "e1 continue label");

            Bridge.Test.NUnit.Assert.true$1(Bridge.is(e2, Bridge.hasValue(e2) && (e2.ntype === 58)), "e2 is LoopExpression");
            Bridge.Test.NUnit.Assert.areEqual$1(58, e2.ntype, "e2 node type");
            Bridge.Test.NUnit.Assert.areEqual$1(System.String, e2.t, "e2 type");
            Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(Bridge.cast(e2, Bridge.hasValue(e2) && (e2.ntype === 58)).body, c), "e2 target");
            Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(Bridge.cast(e2, Bridge.hasValue(e2) && (e2.ntype === 58)).breakLabel, lb), "e2 break label");
            Bridge.Test.NUnit.Assert.true$1(Bridge.cast(e2, Bridge.hasValue(e2) && (e2.ntype === 58)).continueLabel == null, "e1 continue label");

            Bridge.Test.NUnit.Assert.true$1(Bridge.is(e3, Bridge.hasValue(e3) && (e3.ntype === 58)), "e3 is LoopExpression");
            Bridge.Test.NUnit.Assert.areEqual$1(58, e3.ntype, "e3 node type");
            Bridge.Test.NUnit.Assert.areEqual$1(System.String, e3.t, "e3 type");
            Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(Bridge.cast(e3, Bridge.hasValue(e3) && (e3.ntype === 58)).body, c), "e3 target");
            Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(Bridge.cast(e3, Bridge.hasValue(e3) && (e3.ntype === 58)).breakLabel, lb), "e3 break label");
            Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(Bridge.cast(e3, Bridge.hasValue(e3) && (e3.ntype === 58)).continueLabel, lc), "e3 continue label");

            Bridge.Test.NUnit.Assert.true$1(Bridge.is(e4, Bridge.hasValue(e4) && (e4.ntype === 58)), "e4 is LoopExpression");
            Bridge.Test.NUnit.Assert.areEqual$1(58, e4.ntype, "e4 node type");
            Bridge.Test.NUnit.Assert.areEqual$1(System.Object, e4.t, "e4 type");
            Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(Bridge.cast(e4, Bridge.hasValue(e4) && (e4.ntype === 58)).body, c), "e4 body");
            Bridge.Test.NUnit.Assert.true$1(Bridge.cast(e4, Bridge.hasValue(e4) && (e4.ntype === 58)).breakLabel == null, "e4 break label");
            Bridge.Test.NUnit.Assert.true$1(Bridge.cast(e4, Bridge.hasValue(e4) && (e4.ntype === 58)).continueLabel == null, "e4 continue label");

            Bridge.Test.NUnit.Assert.false$1(($t1 = { ntype: 9, t: System.Int32, value: Bridge.box(0, System.Int32) }, Bridge.is($t1, Bridge.hasValue($t1) && ($t1.ntype === 58))), "Constant is LoopExpression");
        },
        switchCaseWorks: function () {
            var v1 = { ntype: 9, t: System.Int32, value: 1 };
            var v2 = { ntype: 9, t: System.Int32, value: 2 };
            var v3 = { ntype: 9, t: System.Int32, value: 3 };

            var sc1 = { body: v1, testValues: Bridge.toList(System.Array.init([v2, v3], System.Object)) };
            var sc2 = { body: v1, testValues: Bridge.toList(new (Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.MyEnumerable$1(System.Object))(System.Array.init([v2, v3], System.Object))) };

            Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(sc1.body, v1), "sc1 body");
            Bridge.Test.NUnit.Assert.areEqual$1(2, sc1.testValues.Count, "sc1 test values count");
            Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(sc1.testValues.get(0), v2), "sc1 test value 0");
            Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(sc1.testValues.get(1), v3), "sc1 test value 1");

            Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(sc2.body, v1), "sc2 body");
            Bridge.Test.NUnit.Assert.areEqual$1(2, sc2.testValues.Count, "sc2 test values count");
            Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(sc2.testValues.get(0), v2), "sc2 test value 0");
            Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(sc2.testValues.get(1), v3), "sc2 test value 1");
        },
        switchWorks: function () {
            var $t, $t1, $t2, $t3;
            var c1 = { ntype: 9, t: System.Int32, value: 1 };
            var d = { ntype: 9, t: System.String, value: "T" };
            var c2 = { ntype: 9, t: Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, value: new Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C.ctor() };
            var sc1 = { body: { ntype: 9, t: System.String, value: "X" }, testValues: Bridge.toList([{ ntype: 9, t: System.Int32, value: 1 }]) };
            var sc2 = { body: { ntype: 9, t: System.String, value: "Y" }, testValues: Bridge.toList([{ ntype: 9, t: System.Int32, value: 2 }]) };
            var sc3 = { body: { ntype: 9, t: System.String, value: "X" }, testValues: Bridge.toList([{ ntype: 9, t: Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, value: new Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C.ctor() }]) };
            var sc4 = { body: { ntype: 9, t: System.String, value: "Y" }, testValues: Bridge.toList([{ ntype: 9, t: Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, value: new Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C.ctor() }]) };
            var op = Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, 8, 284, "op_Equality");

            var e1 = ($t = System.Array.init([sc1, sc2], System.Object), { ntype: 59, t: $t[0].body.t, switchValue: c1, cases: Bridge.toList($t) });
            var e2 = ($t1 = System.Array.init([sc1, sc2], System.Object), { ntype: 59, t: $t1[0].body.t, switchValue: c1, defaultBody: d, cases: Bridge.toList($t1) });
            var e3 = ($t2 = System.Array.init([sc3, sc4], System.Object), { ntype: 59, t: $t2[0].body.t, switchValue: c2, defaultBody: d, comparison: op, cases: Bridge.toList($t2) });
            var e4 = { ntype: 59, t: System.Object, switchValue: c2, defaultBody: d, comparison: op, cases: Bridge.toList(System.Array.init([sc3, sc4], System.Object)) };
            var e5 = (function(a, b, c, d) { return { ntype: 59, t: d.get(0).body.t, switchValue: a, defaultBody: b, comparison: c, cases: d }; })(c2, d, op, Bridge.toList(new (Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.MyEnumerable$1(System.Object))(System.Array.init([sc3, sc4], System.Object))));
            var e6 = { ntype: 59, t: System.Object, switchValue: c2, defaultBody: d, comparison: op, cases: Bridge.toList(new (Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.MyEnumerable$1(System.Object))(System.Array.init([sc3, sc4], System.Object))) };

            var asserter = $asm.$.Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.f12;

            asserter(e1, System.String, c1, null, System.Array.init([sc1, sc2], System.Object), null, "e1");
            asserter(e2, System.String, c1, d, System.Array.init([sc1, sc2], System.Object), null, "e2");
            asserter(e3, System.String, c2, d, System.Array.init([sc3, sc4], System.Object), op, "e3");
            asserter(e4, System.Object, c2, d, System.Array.init([sc3, sc4], System.Object), op, "e4");
            asserter(e5, System.String, c2, d, System.Array.init([sc3, sc4], System.Object), op, "e5");
            asserter(e6, System.Object, c2, d, System.Array.init([sc3, sc4], System.Object), op, "e6");

            Bridge.Test.NUnit.Assert.false$1(($t3 = { ntype: 9, t: System.Int32, value: Bridge.box(0, System.Int32) }, Bridge.is($t3, Bridge.hasValue($t3) && ($t3.ntype === 59))), "Constant is SwitchExpression");
        },
        catchBlockWorks: function () {
            var $t;
            var ex = { ntype: 38, t: System.NotSupportedException, n: "ex" };
            var b = { ntype: 51, t: System.Object };
            var f = { ntype: 9, t: System.Boolean, value: true };

            var b1 = { test: System.NotSupportedException, body: b };
            var b2 = { test: ex.t, variable: ex, body: b };
            var b3 = { test: System.NotSupportedException, body: b, filter: f };
            var b4 = { test: ex.t, variable: ex, body: b, filter: f };
            var b5 = { test: null || ex.t, variable: ex, body: b, filter: f };
            var b6 = ($t = null, { test: System.NotSupportedException || $t.t, variable: $t, body: b, filter: f });

            var asserter = function (block, variable, filter, title) {
                Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(block.variable, variable), System.String.concat(title, " variable"));
                Bridge.Test.NUnit.Assert.areEqual$1(System.NotSupportedException, block.test, System.String.concat(title, " test"));
                Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(block.body, b), System.String.concat(title, " body"));
                Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(block.filter, filter), System.String.concat(title, " filter"));
            };

            asserter(b1, null, null, "b1");
            asserter(b2, ex, null, "b2");
            asserter(b3, null, f, "b3");
            asserter(b4, ex, f, "b4");
            asserter(b5, ex, f, "b5");
            asserter(b6, null, f, "b6");
        },
        tryWorks: function () {
            var $t;
            var b1 = { ntype: 51, t: System.String };
            var b2 = { ntype: 51, t: System.Object };
            var b3 = { ntype: 51, t: System.Object };
            var cs = System.Array.init([{ test: System.NotSupportedException, body: { ntype: 51, t: System.Object } }, { test: System.Object, body: { ntype: 51, t: System.Object } }], System.Object);

            var e1 = { ntype: 61, t: b1.t, body: b1, handlers: Bridge.toList([]), fault: b2 };
            var e2 = { ntype: 61, t: b1.t, body: b1, handlers: Bridge.toList([]), finallyExpr: b3 };
            var e3 = { ntype: 61, t: b1.t, body: b1, handlers: Bridge.toList(cs) };
            var e4 = { ntype: 61, t: b1.t, body: b1, finallyExpr: b3, handlers: Bridge.toList(cs) };
            var e5 = { ntype: 61, t: System.Object || b1.t, body: b1, finallyExpr: b3, fault: null, handlers: Bridge.toList(cs || []) };
            var e6 = { ntype: 61, t: System.Object || b1.t, body: b1, finallyExpr: null, fault: b2, handlers: Bridge.toList(null || []) };

            var asserter = function (expr, type, fault, $finally, hasHandlers, title) {
                var te = Bridge.as(expr, Bridge.hasValue(expr) && (expr.ntype === 61));
                Bridge.Test.NUnit.Assert.true$1(te != null, System.String.concat(title, " is TryExpression"));
                Bridge.Test.NUnit.Assert.areEqual$1(61, te.ntype, System.String.concat(title, " node type"));
                Bridge.Test.NUnit.Assert.areEqual$1(type, te.t, System.String.concat(title, " type"));
                Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(te.body, b1), System.String.concat(title, " body"));
                Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(te.fault, fault), System.String.concat(title, " fault"));
                Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(te.finallyExpr, $finally), System.String.concat(title, " finally"));
                if (hasHandlers) {
                    Bridge.Test.NUnit.Assert.areEqual$1(2, te.handlers.Count, System.String.concat(title, " handler count"));
                    Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(te.handlers.get(0), cs[System.Array.index(0, cs)]), System.String.concat(title, " handler 0"));
                    Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(te.handlers.get(1), cs[System.Array.index(1, cs)]), System.String.concat(title, " handler 1"));
                } else {
                    Bridge.Test.NUnit.Assert.areEqual$1(0, te.handlers.Count, System.String.concat(title, " handler count"));
                }
            };

            asserter(e1, System.String, b2, null, false, "e1");
            asserter(e2, System.String, null, b3, false, "e2");
            asserter(e3, System.String, null, null, true, "e3");
            asserter(e4, System.String, null, b3, true, "e4");
            asserter(e5, System.Object, null, b3, true, "e5");
            asserter(e6, System.Object, b2, null, false, "e6");

            Bridge.Test.NUnit.Assert.false$1(($t = { ntype: 9, t: System.Int32, value: Bridge.box(0, System.Int32) }, Bridge.is($t, Bridge.hasValue($t) && ($t.ntype === 61))), "Constant is TryExpression");
        },
        dynamicWorks: function () {
            var $t;
            var a = { ntype: 38, t: System.String, n: "a" };
            var b = { ntype: 38, t: System.String, n: "b" };
            var c = { ntype: 38, t: System.String, n: "c" };

            var e1 = { ntype: 50, t: System.Object, dtype: 0, expression: a, member: "member1" };
            var e2 = { ntype: 50, t: System.Int32, dtype: 0, expression: a, member: "member1" };
            var e3 = { ntype: 50, t: System.Object, dtype: 1, expression: a, arguments: Bridge.toList(System.Array.init([b, c], System.Object)) };
            var e4 = { ntype: 50, t: System.Object, dtype: 1, expression: a, arguments: Bridge.toList(new (Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.MyEnumerable$1(System.Object))(System.Array.init([b, c], System.Object))) };
            var e5 = { ntype: 50, t: System.Int32, dtype: 1, expression: a, arguments: Bridge.toList(System.Array.init([b, c], System.Object)) };
            var e6 = { ntype: 50, t: System.Int32, dtype: 1, expression: a, arguments: Bridge.toList(new (Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.MyEnumerable$1(System.Object))(System.Array.init([b, c], System.Object))) };
            var e7 = { ntype: 50, t: System.Object, dtype: 2, expression: a, argument: b };
            var e8 = { ntype: 50, t: System.Int32, dtype: 2, expression: a, argument: b };

            var assertMember = function (expr, type, title) {
                var dme = Bridge.as(expr, Bridge.hasValue(expr) && (expr.ntype == 50 && expr.dtype === 0));
                Bridge.Test.NUnit.Assert.true$1(Bridge.is(expr, Bridge.hasValue(expr) && (expr.ntype == 50)), System.String.concat(title, " is DynamicExpression"));
                Bridge.Test.NUnit.Assert.true$1(dme != null, System.String.concat(title, " is DynamicMemberExpression"));
                Bridge.Test.NUnit.Assert.areEqual$1(50, dme.ntype, System.String.concat(title, " node type"));
                Bridge.Test.NUnit.Assert.areEqual$1(type, dme.t, System.String.concat(title, " type"));
                Bridge.Test.NUnit.Assert.areEqual$1(0, dme.dtype, System.String.concat(title, " dynamic type"));
                Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(dme.expression, a), System.String.concat(title, " expression"));
                Bridge.Test.NUnit.Assert.areEqual$1("member1", dme.member, System.String.concat(title, " member name"));
            };

            var assertInvocation = function (expr, type, title) {
                var dme = Bridge.as(expr, Bridge.hasValue(expr) && (expr.ntype == 50 && expr.dtype === 1));
                Bridge.Test.NUnit.Assert.true$1(Bridge.is(expr, Bridge.hasValue(expr) && (expr.ntype == 50)), System.String.concat(title, " is DynamicExpression"));
                Bridge.Test.NUnit.Assert.true$1(dme != null, System.String.concat(title, " is DynamicInvocationExpression"));
                Bridge.Test.NUnit.Assert.areEqual$1(50, dme.ntype, System.String.concat(title, " node type"));
                Bridge.Test.NUnit.Assert.areEqual$1(type, dme.t, System.String.concat(title, " type"));
                Bridge.Test.NUnit.Assert.areEqual$1(1, dme.dtype, System.String.concat(title, " dynamic type"));
                Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(dme.expression, a), System.String.concat(title, " expression"));
                Bridge.Test.NUnit.Assert.areEqual$1(2, dme.arguments.Count, System.String.concat(title, " argument count"));
                Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(dme.arguments.get(0), b), System.String.concat(title, " argument 0"));
                Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(dme.arguments.get(1), c), System.String.concat(title, " argument 1"));
            };

            var assertIndex = function (expr, type, title) {
                var dme = Bridge.as(expr, Bridge.hasValue(expr) && (expr.ntype == 50 && expr.dtype === 2));
                Bridge.Test.NUnit.Assert.true$1(Bridge.is(expr, Bridge.hasValue(expr) && (expr.ntype == 50)), System.String.concat(title, " is DynamicExpression"));
                Bridge.Test.NUnit.Assert.true$1(dme != null, System.String.concat(title, " is DynamicIndexExpression"));
                Bridge.Test.NUnit.Assert.areEqual$1(50, dme.ntype, System.String.concat(title, " node type"));
                Bridge.Test.NUnit.Assert.areEqual$1(type, dme.t, System.String.concat(title, " type"));
                Bridge.Test.NUnit.Assert.areEqual$1(2, dme.dtype, System.String.concat(title, " dynamic type"));
                Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(dme.expression, a), System.String.concat(title, " expression"));
                Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(dme.argument, b), System.String.concat(title, " argument"));
            };

            assertMember(e1, System.Object, "e1");
            assertMember(e2, System.Int32, "e2");
            assertInvocation(e3, System.Object, "e3");
            assertInvocation(e4, System.Object, "e4");
            assertInvocation(e5, System.Int32, "e5");
            assertInvocation(e6, System.Int32, "e6");
            assertIndex(e7, System.Object, "e7");
            assertIndex(e8, System.Int32, "e8");

            Bridge.Test.NUnit.Assert.false$1(($t = { ntype: 9, t: System.Int32, value: Bridge.box(0, System.Int32) }, Bridge.is($t, Bridge.hasValue($t) && ($t.ntype == 50))), "Constant is DynamicExpression");
            Bridge.Test.NUnit.Assert.false$1(($t = { ntype: 50, t: System.Object, dtype: 1, expression: a, arguments: Bridge.toList([null]) }, Bridge.is($t, Bridge.hasValue($t) && ($t.ntype == 50 && $t.dtype === 0))), "DynamicInvocation is DynamicMember");
            Bridge.Test.NUnit.Assert.false$1(($t = { ntype: 50, t: System.Object, dtype: 0, expression: a, member: "x" }, Bridge.is($t, Bridge.hasValue($t) && ($t.ntype == 50 && $t.dtype === 1))), "DynamicIndex is DynamicInvocation");
            Bridge.Test.NUnit.Assert.false$1(($t = { ntype: 50, t: System.Object, dtype: 1, expression: a, arguments: Bridge.toList([null]) }, Bridge.is($t, Bridge.hasValue($t) && ($t.ntype == 50 && $t.dtype === 2))), "DynamicInvocation is DynamicIndex");
        }
    });

    Bridge.define("$AnonymousType$1", $asm, {
        $kind: "anonymous",
        ctor: function (a, b) {
            this.A = a;
            this.B = b;
        },
        equals: function (o) {
            if (!Bridge.is(o, $asm.$AnonymousType$1)) {
                return false;
            }
            return Bridge.equals(this.A, o.A) && Bridge.equals(this.B, o.B);
        },
        getHashCode: function () {
            var h = Bridge.addHash([7550196186, this.A, this.B]);
            return h;
        },
        toJSON: function () {
            return {
                A : this.A,
                B : this.B
            };
        },
        statics : {
            $metadata : function () { return {"m":[{"a":2,"n":"A","t":16,"rt":System.Int32,"g":{"a":2,"n":"get_A","t":8,"rt":System.Int32,"fg":"A"},"fn":"A"},{"a":2,"n":"B","t":16,"rt":System.Int32,"g":{"a":2,"n":"get_B","t":8,"rt":System.Int32,"fg":"B"},"fn":"B"}]}; }
        }
    });

    Bridge.define("$AnonymousType$2", $asm, {
        $kind: "anonymous",
        ctor: function (a, b) {
            this.a = a;
            this.b = b;
        },
        equals: function (o) {
            if (!Bridge.is(o, $asm.$AnonymousType$2)) {
                return false;
            }
            return Bridge.equals(this.a, o.a) && Bridge.equals(this.b, o.b);
        },
        getHashCode: function () {
            var h = Bridge.addHash([7550196187, this.a, this.b]);
            return h;
        },
        toJSON: function () {
            return {
                a : this.a,
                b : this.b
            };
        },
        statics : {
            $metadata : function () { return {"m":[{"a":2,"n":"a","t":16,"rt":System.Int32,"g":{"a":2,"n":"get_a","t":8,"rt":System.Int32,"fg":"a"},"fn":"a"},{"a":2,"n":"b","t":16,"rt":System.Int32,"g":{"a":2,"n":"get_b","t":8,"rt":System.Int32,"fg":"b"},"fn":"b"}]}; }
        }
    });

    Bridge.ns("Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests", $asm.$);

    Bridge.apply($asm.$.Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests, {
        f1: function (expr, returnType, parmNames, parmTypes, title) {
            var $t;
            Bridge.Test.NUnit.Assert.true$1(($t = expr, Bridge.is($t, Bridge.hasValue($t) && ($t.ntype === 18))), System.String.concat(title, " is lambda"));
            Bridge.Test.NUnit.Assert.false$1(($t = expr.body, Bridge.is($t, Bridge.hasValue($t) && ($t.ntype === 18))), System.String.concat(title, " body is lambda"));
            Bridge.Test.NUnit.Assert.areEqual$1(18, expr.ntype, System.String.concat(title, " node type"));
            Bridge.Test.NUnit.Assert.areEqual$1(Function, expr.t, System.String.concat(title, " type"));
            Bridge.Test.NUnit.Assert.areEqual$1(returnType, expr.rt, System.String.concat(title, " return type"));
            Bridge.Test.NUnit.Assert.areEqual$1(parmTypes.length, expr.p.Count, System.String.concat(title, " param count"));
            for (var i = 0; i < expr.p.Count; i = (i + 1) | 0) {
                Bridge.Test.NUnit.Assert.areEqual$1(38, expr.p.get(i).ntype, System.String.concat(title, " parameter ", i, " node type"));
                Bridge.Test.NUnit.Assert.areEqual$1(parmNames[System.Array.index(i, parmNames)], expr.p.get(i).n, System.String.concat(title, " parameter ", i, " name"));
                Bridge.Test.NUnit.Assert.areEqual$1(parmTypes[System.Array.index(i, parmTypes)], expr.p.get(i).t, System.String.concat(title, " parameter ", i, " type"));
            }
        },
        f2: function (expr, nodeType, type, method, title) {
            var $t;
            var be = Bridge.as(expr, Bridge.hasValue(expr) && ([0,1,2,3,5,7,12,13,14,15,16,19,20,21,22,25,26,27,35,36,37,39,41,42,43,46,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80].indexOf(expr.ntype) >= 0));
            Bridge.Test.NUnit.Assert.true$1(be != null, System.String.concat(title, " is BinaryExpression"));
            Bridge.Test.NUnit.Assert.false$1(Bridge.is(expr, Bridge.hasValue(expr) && (expr.ntype === 9)), System.String.concat(title, " is ConstantExpression"));
            Bridge.Test.NUnit.Assert.areEqual$1(nodeType, be.ntype, System.String.concat(title, " node type"));
            Bridge.Test.NUnit.Assert.areEqual$1(type, be.t, System.String.concat(title, " type"));
            Bridge.Test.NUnit.Assert.true$1(($t = be.left, Bridge.is($t, Bridge.hasValue($t) && ($t.ntype === 38))) && Bridge.referenceEquals(($t = be.left, Bridge.cast($t, Bridge.hasValue($t) && ($t.ntype === 38))).n, "a"), System.String.concat(title, " left"));
            Bridge.Test.NUnit.Assert.true$1(($t = be.right, Bridge.is($t, Bridge.hasValue($t) && ($t.ntype === 38))) && Bridge.referenceEquals(($t = be.right, Bridge.cast($t, Bridge.hasValue($t) && ($t.ntype === 38))).n, "b"), System.String.concat(title, " right"));
            if (method == null) {
                Bridge.Test.NUnit.Assert.true$1(be.method == null, System.String.concat(title, " method should be null"));
            } else {
                Bridge.Test.NUnit.Assert.true$1(be.method != null, System.String.concat(title, " method should not be null"));
                Bridge.Test.NUnit.Assert.areEqual$1(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, be.method.td, System.String.concat(title, " method declaring type should be correct"));
                Bridge.Test.NUnit.Assert.areEqual$1(method, be.method.n, System.String.concat(title, " method name should be correct"));
            }
        },
        f3: function (expr, nodeType, type, method, title) {
            var $t;
            var ue = Bridge.as(expr, Bridge.hasValue(expr) && ([4,10,11,28,29,30,34,40,44,49,54,60,62,77,78,79,80,82,83,84].indexOf(expr.ntype) >= 0));
            Bridge.Test.NUnit.Assert.true$1(ue != null, System.String.concat(title, " is UnaryExpression"));
            Bridge.Test.NUnit.Assert.areEqual$1(nodeType, ue.ntype, System.String.concat(title, " node type"));
            Bridge.Test.NUnit.Assert.areEqual$1(type, ue.t, System.String.concat(title, " type"));
            Bridge.Test.NUnit.Assert.true$1(($t = ue.operand, Bridge.is($t, Bridge.hasValue($t) && ($t.ntype === 38))) && Bridge.referenceEquals(($t = ue.operand, Bridge.cast($t, Bridge.hasValue($t) && ($t.ntype === 38))).n, "a"), System.String.concat(title, " operand"));
            if (method == null) {
                Bridge.Test.NUnit.Assert.true$1(ue.method == null, System.String.concat(title, " method should be null"));
            } else {
                Bridge.Test.NUnit.Assert.true$1(ue.method != null, System.String.concat(title, " method should not be null"));
                Bridge.Test.NUnit.Assert.areEqual$1(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, ue.method.td, System.String.concat(title, " method declaring type should be correct"));
                Bridge.Test.NUnit.Assert.areEqual$1(method, ue.method.n, System.String.concat(title, " method name should be correct"));
            }
        },
        f4: function (expr, method, isStatic, title) {
            var $t;
            var ce = Bridge.as(expr, Bridge.hasValue(expr) && (expr.ntype === 6));
            Bridge.Test.NUnit.Assert.true$1(ce != null, System.String.concat(title, " is CallExpression"));
            Bridge.Test.NUnit.Assert.areEqual$1(6, ce.ntype, System.String.concat(title, " node type"));
            Bridge.Test.NUnit.Assert.areEqual$1(System.Int32, ce.t, System.String.concat(title, " type"));
            Bridge.Test.NUnit.Assert.areEqual$1(2, ce.args.Count, System.String.concat(title, " argument count"));
            Bridge.Test.NUnit.Assert.true$1(($t = ce.args.get(0), Bridge.is($t, Bridge.hasValue($t) && ($t.ntype === 38))) && Bridge.referenceEquals(($t = ce.args.get(0), Bridge.cast($t, Bridge.hasValue($t) && ($t.ntype === 38))).n, "a"), System.String.concat(title, " argument 0"));
            Bridge.Test.NUnit.Assert.true$1(($t = ce.args.get(1), Bridge.is($t, Bridge.hasValue($t) && ($t.ntype === 38))) && Bridge.referenceEquals(($t = ce.args.get(1), Bridge.cast($t, Bridge.hasValue($t) && ($t.ntype === 38))).n, "b"), System.String.concat(title, " argument 1"));
            Bridge.Test.NUnit.Assert.areEqual$1(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, ce.method.td, System.String.concat(title, " method declaring type"));
            Bridge.Test.NUnit.Assert.areEqual$1(method, ce.method.n, System.String.concat(title, " method name"));
            if (isStatic) {
                Bridge.Test.NUnit.Assert.true$1(ce.obj == null, System.String.concat(title, " object should be null"));
            } else {
                Bridge.Test.NUnit.Assert.true(($t = ce.obj, Bridge.is($t, Bridge.hasValue($t) && ($t.ntype === 38))) && Bridge.referenceEquals(($t = ce.obj, Bridge.cast($t, Bridge.hasValue($t) && ($t.ntype === 38))).n, "i"));
            }
        },
        f5: function (expr, title) {
            var $t4;
            var ie = Bridge.as(expr, Bridge.hasValue(expr) && (expr.ntype === 17));
            Bridge.Test.NUnit.Assert.true$1(ie != null, System.String.concat(title, " is InvocationExpression"));
            Bridge.Test.NUnit.Assert.areEqual$1(17, ie.ntype, System.String.concat(title, " node type"));
            Bridge.Test.NUnit.Assert.areEqual$1(System.String, ie.t, System.String.concat(title, " type"));
            Bridge.Test.NUnit.Assert.true$1(($t4 = ie.expression, Bridge.is($t4, Bridge.hasValue($t4) && ($t4.ntype === 38))) && Bridge.referenceEquals(($t4 = ie.expression, Bridge.cast($t4, Bridge.hasValue($t4) && ($t4.ntype === 38))).n, "a"), System.String.concat(title, " expression"));
            Bridge.Test.NUnit.Assert.areEqual$1(2, ie.args.Count, System.String.concat(title, " argument count"));
            Bridge.Test.NUnit.Assert.true$1(($t4 = ie.args.get(0), Bridge.is($t4, Bridge.hasValue($t4) && ($t4.ntype === 38))) && Bridge.referenceEquals(($t4 = ie.args.get(0), Bridge.cast($t4, Bridge.hasValue($t4) && ($t4.ntype === 38))).n, "b"), System.String.concat(title, " argument 0"));
            Bridge.Test.NUnit.Assert.true$1(($t4 = ie.args.get(1), Bridge.is($t4, Bridge.hasValue($t4) && ($t4.ntype === 38))) && Bridge.referenceEquals(($t4 = ie.args.get(1), Bridge.cast($t4, Bridge.hasValue($t4) && ($t4.ntype === 38))).n, "c"), System.String.concat(title, " argument 1"));
        },
        f6: function (expr, memberName, result, title) {
            var $t22;
            var me = Bridge.as(expr, Bridge.hasValue(expr) && (expr.ntype === 23));
            Bridge.Test.NUnit.Assert.true$1(me != null, System.String.concat(title, " is MemberExpression"));
            Bridge.Test.NUnit.Assert.areEqual$1(23, me.ntype, System.String.concat(title, " node type"));
            Bridge.Test.NUnit.Assert.areEqual$1(System.Int32, me.t, System.String.concat(title, " type"));
            Bridge.Test.NUnit.Assert.true$1(($t22 = me.expression, Bridge.is($t22, Bridge.hasValue($t22) && ($t22.ntype === 38))) && Bridge.referenceEquals(($t22 = me.expression, Bridge.cast($t22, Bridge.hasValue($t22) && ($t22.ntype === 38))).n, "a"), System.String.concat(title, " expression"));
            if (Bridge.referenceEquals(memberName, "F1") || Bridge.referenceEquals(memberName, "P1")) {
                Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(me.member, System.String.startsWith(memberName, "F") ? Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, 4, 284, memberName) : Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, 16, 284, memberName)), System.String.concat(title, " member"));
            } else {
                Bridge.Test.NUnit.Assert.areEqual$1(System.String.startsWith(memberName, "F") ? 4 : 16, me.member.t, System.String.concat(title, " member type"));
                Bridge.Test.NUnit.Assert.areEqual$1(memberName, me.member.n, System.String.concat(title, " name"));
            }
            Bridge.Test.NUnit.Assert.areEqual$1(result, Bridge.unbox(Bridge.is(me.member, System.Reflection.FieldInfo) ? Bridge.Reflection.fieldAccess(Bridge.cast(me.member, System.Reflection.FieldInfo), new Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C.ctor()) : Bridge.Reflection.midel(Bridge.cast(me.member, System.Reflection.PropertyInfo).g, new Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C.ctor())(null)), System.String.concat(title, " member result"));
        },
        f7: function (expr, member, type, title) {
            var $t;
            var ie = Bridge.as(expr, Bridge.hasValue(expr) && (expr.ntype === 55));
            Bridge.Test.NUnit.Assert.true$1(ie != null, System.String.concat(title, " is IndexExpression"));
            Bridge.Test.NUnit.Assert.areEqual$1(55, ie.ntype, System.String.concat(title, " node type"));
            Bridge.Test.NUnit.Assert.areEqual$1(type, ie.t, System.String.concat(title, " type"));
            Bridge.Test.NUnit.Assert.true$1(($t = ie.obj, Bridge.is($t, Bridge.hasValue($t) && ($t.ntype === 38))) && Bridge.referenceEquals(($t = ie.obj, Bridge.cast($t, Bridge.hasValue($t) && ($t.ntype === 38))).n, "a"), System.String.concat(title, " object"));
            Bridge.Test.NUnit.Assert.areEqual$1(2, ie.arguments.Count, System.String.concat(title, " argument count"));
            Bridge.Test.NUnit.Assert.true$1(($t = ie.arguments.get(0), Bridge.is($t, Bridge.hasValue($t) && ($t.ntype === 38))) && Bridge.referenceEquals(($t = ie.arguments.get(0), Bridge.cast($t, Bridge.hasValue($t) && ($t.ntype === 38))).n, "b"), System.String.concat(title, " argument 0"));
            Bridge.Test.NUnit.Assert.true$1(($t = ie.arguments.get(1), Bridge.is($t, Bridge.hasValue($t) && ($t.ntype === 38))) && Bridge.referenceEquals(($t = ie.arguments.get(1), Bridge.cast($t, Bridge.hasValue($t) && ($t.ntype === 38))).n, "c"), System.String.concat(title, " argument 1"));
            Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(ie.indexer, member), System.String.concat(title, " member"));
        },
        f8: function (expr, argTypes, checkReference, title) {
            var $t;
            var ne = Bridge.as(expr, Bridge.hasValue(expr) && (expr.ntype === 31));
            Bridge.Test.NUnit.Assert.true$1(ne != null, System.String.concat(title, " is NewExpression"));
            Bridge.Test.NUnit.Assert.areEqual$1(31, ne.ntype, System.String.concat(title, " node type"));
            Bridge.Test.NUnit.Assert.areEqual$1(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, ne.t, System.String.concat(title, " type"));
            Bridge.Test.NUnit.Assert.areEqual$1(argTypes.length, ne.arguments.Count, System.String.concat(title, " argument count"));
            for (var i = 0; i < ne.arguments.Count; i = (i + 1) | 0) {
                Bridge.Test.NUnit.Assert.true$1(($t = ne.arguments.get(i), Bridge.is($t, Bridge.hasValue($t) && ($t.ntype === 38))) && Bridge.referenceEquals(($t = ne.arguments.get(i), Bridge.cast($t, Bridge.hasValue($t) && ($t.ntype === 38))).n, String.fromCharCode(((((97 + i) | 0)) & 65535))), System.String.concat(title, " argument ", i));
            }
            Bridge.Test.NUnit.Assert.areEqual$1(argTypes.length, (ne.constructor.p || []).length, System.String.concat(title, " constructor argument length"));
            for (var i1 = 0; i1 < (ne.constructor.p || []).length; i1 = (i1 + 1) | 0) {
                Bridge.Test.NUnit.Assert.areEqual$1(argTypes[System.Array.index(i1, argTypes)], ($t = (ne.constructor.p || []))[System.Array.index(i1, $t)], System.String.concat(title, " constructor parameter type ", i1));
            }
            if (checkReference) {
                var $ctor = Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, 1, 284, null, argTypes);
                Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals($ctor, ne.constructor), System.String.concat(title, " constructor reference"));
            }
        },
        f9: function (expr, title) {
            var $t;
            var mie = Bridge.as(expr, Bridge.hasValue(expr) && (expr.ntype === 24));
            Bridge.Test.NUnit.Assert.true$1(mie != null, System.String.concat(title, " is MemberInitExpression"));
            Bridge.Test.NUnit.Assert.areEqual$1(24, expr.ntype, System.String.concat(title, " node type"));
            Bridge.Test.NUnit.Assert.areEqual$1(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, expr.t, System.String.concat(title, " type"));
            Bridge.Test.NUnit.Assert.areEqual$1(2, mie.bindings.Count, System.String.concat(title, " binding count"));
            Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(mie.newExpression.constructor, Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, 1, 284, null, System.Array.init(0, null, Function))), System.String.concat(title, " new expression"));
            Bridge.Test.NUnit.Assert.true$1(($t = mie.bindings.get(0), Bridge.is($t, Bridge.hasValue($t) && ($t.btype === 0))), System.String.concat(title, " binding 0 type"));
            Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(mie.bindings.get(0).member, Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, 4, 284, "F1")), System.String.concat(title, " binding 0 member"));
            Bridge.Test.NUnit.Assert.true$1(($t = ($t = mie.bindings.get(0), Bridge.cast($t, Bridge.hasValue($t) && ($t.btype === 0))).expression, Bridge.is($t, Bridge.hasValue($t) && ($t.ntype === 38))) && Bridge.referenceEquals(($t = ($t = mie.bindings.get(0), Bridge.cast($t, Bridge.hasValue($t) && ($t.btype === 0))).expression, Bridge.cast($t, Bridge.hasValue($t) && ($t.ntype === 38))).n, "a"), System.String.concat(title, " binding 0 expression"));
            Bridge.Test.NUnit.Assert.true$1(($t = mie.bindings.get(1), Bridge.is($t, Bridge.hasValue($t) && ($t.btype === 0))), System.String.concat(title, " binding 1 type"));
            Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(mie.bindings.get(1).member, Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C, 16, 284, "P1")), System.String.concat(title, " binding 1 member"));
            Bridge.Test.NUnit.Assert.true$1(($t = ($t = mie.bindings.get(1), Bridge.cast($t, Bridge.hasValue($t) && ($t.btype === 0))).expression, Bridge.is($t, Bridge.hasValue($t) && ($t.ntype === 38))) && Bridge.referenceEquals(($t = ($t = mie.bindings.get(1), Bridge.cast($t, Bridge.hasValue($t) && ($t.btype === 0))).expression, Bridge.cast($t, Bridge.hasValue($t) && ($t.ntype === 38))).n, "b"), System.String.concat(title, " binding 1 expression"));
        },
        f10: function (expr, type, hasOperand, title) {
            var $t;
            var ue = Bridge.as(expr, Bridge.hasValue(expr) && ([4,10,11,28,29,30,34,40,44,49,54,60,62,77,78,79,80,82,83,84].indexOf(expr.ntype) >= 0));
            Bridge.Test.NUnit.Assert.true$1(ue != null, System.String.concat(title, " is UnaryExpression"));
            Bridge.Test.NUnit.Assert.areEqual$1(60, ue.ntype, System.String.concat(title, " node type"));
            Bridge.Test.NUnit.Assert.areEqual$1(type, ue.t, System.String.concat(title, " type"));
            if (hasOperand) {
                Bridge.Test.NUnit.Assert.true$1(($t = ue.operand, Bridge.is($t, Bridge.hasValue($t) && ($t.ntype === 38))) && Bridge.referenceEquals(($t = ue.operand, Bridge.cast($t, Bridge.hasValue($t) && ($t.ntype === 38))).n, "a"), System.String.concat(title, " operand"));
            } else {
                Bridge.Test.NUnit.Assert.true$1(ue.operand == null, System.String.concat(title, " operand"));
            }
            Bridge.Test.NUnit.Assert.true$1(ue.method == null, System.String.concat(title, " method should be null"));
        },
        f11: function (expr, type, kind, target, value, title) {
            var ge = Bridge.as(expr, Bridge.hasValue(expr) && (expr.ntype === 53));
            Bridge.Test.NUnit.Assert.true$1(ge != null, System.String.concat(title, " is GotoExpression"));
            Bridge.Test.NUnit.Assert.areEqual$1(53, ge.ntype, System.String.concat(title, " node type"));
            Bridge.Test.NUnit.Assert.areEqual$1(type, ge.t, System.String.concat(title, " type"));
            Bridge.Test.NUnit.Assert.areEqual$1(kind, ge.kind, System.String.concat(title, " kind"));
            Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(ge.target, target), System.String.concat(title, " target"));
            Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(ge.value, value), System.String.concat(title, " target"));
        },
        f12: function (expr, type, switchValue, defaultBody, cases, comparison, title) {
            var se = Bridge.as(expr, Bridge.hasValue(expr) && (expr.ntype === 59));
            Bridge.Test.NUnit.Assert.true$1(se != null, System.String.concat(title, " is SwitchExpression"));
            Bridge.Test.NUnit.Assert.areEqual$1(59, se.ntype, System.String.concat(title, " node type"));
            Bridge.Test.NUnit.Assert.areEqual$1(type, se.t, System.String.concat(title, " type"));
            Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(se.comparison, comparison), System.String.concat(title, " comparison"));
            Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(se.switchValue, switchValue), System.String.concat(title, " switch value"));
            Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(se.defaultBody, defaultBody), System.String.concat(title, " default value"));
            Bridge.Test.NUnit.Assert.areEqual$1(cases.length, se.cases.Count, System.String.concat(title, " cases count"));
            for (var i = 0; i < se.cases.Count; i = (i + 1) | 0) {
                Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(se.cases.get(i), cases[System.Array.index(i, cases)]), System.String.concat(title, " case ", i));
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.C", {
        statics: {
            op_Power: function (a, b) {
                return null;
            },
            M2: function (a, b) {
                return 0;
            },
            op_Multiply: function (a, b) {
                return null;
            },
            op_Modulus: function (a, b) {
                return null;
            },
            op_Division: function (a, b) {
                return null;
            },
            op_Addition: function (a, b) {
                return null;
            },
            op_Subtraction: function (a, b) {
                return null;
            },
            op_LeftShift: function (a, b) {
                return null;
            },
            op_RightShift: function (a, b) {
                return null;
            },
            op_LessThan: function (a, b) {
                return false;
            },
            op_GreaterThan: function (a, b) {
                return false;
            },
            op_LessThanOrEqual: function (a, b) {
                return false;
            },
            op_GreaterThanOrEqual: function (a, b) {
                return false;
            },
            op_Equality: function (a, b) {
                return false;
            },
            op_Inequality: function (a, b) {
                return false;
            },
            op_BitwiseAnd: function (a, b) {
                return null;
            },
            op_ExclusiveOr: function (a, b) {
                return null;
            },
            op_BitwiseOr: function (a, b) {
                return null;
            },
            op_UnaryPlus: function (a) {
                return null;
            },
            op_UnaryNegation: function (a) {
                return null;
            },
            op_OnesComplement: function (a) {
                return null;
            },
            op_LogicalNot: function (a) {
                return false;
            },
            op_Increment: function (a) {
                return null;
            },
            op_Decrement: function (a) {
                return null;
            },
            op_True: function (a) {
                return false;
            },
            op_False: function (a) {
                return false;
            },
            op_Explicit: function (a) {
                return 0;
            }
        },
        F1: 0,
        F2: 0,
        LF: null,
        CF: null,
        config: {
            properties: {
                P1: 0,
                P2: 0,
                LP: null,
                CP: null
            }
        },
        ctor: function () {
            this.$initialize();
            this.F1 = 234;
            this.F2 = 24;
            this.P1 = 42;
            this.P2 = 17;
        },
        $ctor1: function (a, b) {
            this.$initialize();
        },
        $ctor2: function (a, b) {
            this.$initialize();
        },
        getItem: function (a, b) {
            return System.String.concat(this.F1 + " " + a + " ", b);
        },
        M1: function (a, b) {
            return 0;
        },
        M3: function (a) {
            return ((a + 34) | 0);
        },
        M4: function (a) {
            return ((a + 34) | 0);
        },
        equals: function (o) {
            return false;
        },
        getHashCode: function () {
            return 0;
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.ClassWithQueryPattern$1", function (T) { return {
        data: Bridge.getDefaultValue(T),
        ctor: function (data) {
            this.$initialize();
            this.data = data;
        },
        select: function (TResult, f) {
            return new (Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.ClassWithQueryPattern$1(TResult))(f(this.data));
        }
    }; });

    Bridge.define("Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.MyEnumerable$1", function (T) { return {
        inherits: [System.Collections.Generic.IEnumerable$1(T)],
        _hasEnumerated: false,
        _items: null,
        config: {
            alias: [
            "getEnumerator", "System$Collections$Generic$IEnumerable$1$" + Bridge.getTypeAlias(T) + "$getEnumerator"
            ]
        },
        ctor: function (items) {
            this.$initialize();
            this._items = items;
        },
        System$Collections$IEnumerable$getEnumerator: function () {
            return this.getEnumerator();
        },
        getEnumerator: function () {
            if (this._hasEnumerated) {
                throw new System.Exception("Already enumerated");
            }
            this._hasEnumerated = true;
            return Bridge.getEnumerator(this._items, T);
        }
    }; });

    Bridge.define("Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.MyExpression", {
        ctor: function () {
            this.$initialize();
            Bridge.merge(this, { ntype: 9999, t: System.String });
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests.MyList", {
        inherits: [System.Collections.IEnumerable],
        config: {
            alias: [
            "getEnumerator", "System$Collections$IEnumerable$getEnumerator"
            ]
        },
        ctor: function () {
            this.$initialize();
        },
        add: function (i) {
        },
        add$1: function (i, j) {
        },
        getEnumerator: function () {
            throw new System.Exception();
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.MathTests", {
        assertAlmostEqual: function (d1, d2) {
            var diff = d2 - d1;
            if (diff < 0) {
                diff = -diff;
            }
            Bridge.Test.NUnit.Assert.true(diff < 1E-08);
        },
        assertIsDecimalAndEqualTo: function (v, d) {
            Bridge.Test.NUnit.Assert.true(Bridge.is(v, System.Decimal));
            Bridge.Test.NUnit.Assert.areStrictEqual(System.Double.format(d, 'G'), v.toString());
        },
        constantsWork: function () {
            this.assertAlmostEqual(Math.E, 2.7182818284590451);
            this.assertAlmostEqual(Math.LN2, 0.69314718055994529);
            this.assertAlmostEqual(Math.LN10, 2.3025850929940459);
            this.assertAlmostEqual(Math.LOG2E, 1.4426950408889634);
            this.assertAlmostEqual(Math.LOG10E, 0.43429448190325182);
            this.assertAlmostEqual(Math.PI, 3.1415926535897931);
            this.assertAlmostEqual(Math.SQRT1_2, 0.70710678118654757);
            this.assertAlmostEqual(Math.SQRT2, 1.4142135623730951);
        },
        absOfDoubleWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual(12.5, Math.abs(-12.5));
        },
        absOfIntWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual(12, Math.abs(-12));
        },
        absOfLongWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual(System.Int64(12), System.Int64(-12).abs());
        },
        absOfSbyteWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual(15, Math.abs(-15));
        },
        absOfShortWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual(15, Math.abs(-15));
        },
        absOfFloatWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual(17.5, Math.abs(-17.5));
        },
        absOfDecimalWorks: function () {
            this.assertIsDecimalAndEqualTo(System.Decimal(10.5).abs(), 10.5);
            this.assertIsDecimalAndEqualTo(System.Decimal(-10.5).abs(), 10.5);
            this.assertIsDecimalAndEqualTo(System.Decimal(0.0).abs(), 0);
        },
        acosWorks: function () {
            this.assertAlmostEqual(Math.acos(0.5), 1.0471975511965979);
        },
        asinWorks: function () {
            this.assertAlmostEqual(Math.asin(0.5), 0.52359877559829893);
        },
        atanWorks: function () {
            this.assertAlmostEqual(Math.atan(0.5), 0.46364760900080609);
        },
        atan2Works: function () {
            this.assertAlmostEqual(Math.atan2(1, 2), 0.46364760900080609);
        },
        ceilingOfDoubleWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual(4.0, Math.ceil(3.2));
            Bridge.Test.NUnit.Assert.areEqual(-3.0, Math.ceil(-3.2));
        },
        ceilingOfDecimalWorks: function () {
            this.assertIsDecimalAndEqualTo(System.Decimal(3.1).ceil(), 4);
            this.assertIsDecimalAndEqualTo(System.Decimal(-3.9).ceil(), -3);
            this.assertIsDecimalAndEqualTo(System.Decimal(3.0).ceil(), 3);
        },
        cosWorks: function () {
            this.assertAlmostEqual(Math.cos(0.5), 0.87758256189037276);
        },
        coshWorks: function () {
            this.assertAlmostEqual(Bridge.Math.cosh(0.1), 1.0050041680558035);
        },
        sinhWorks: function () {
            this.assertAlmostEqual(Bridge.Math.sinh(-0.98343), -1.1497925156481);
        },
        tanhWorks: function () {
            this.assertAlmostEqual(Bridge.Math.tanh(5.4251848), 0.999961205877);
        },
        expWorks: function () {
            this.assertAlmostEqual(Math.exp(0.5), 1.6487212707001282);
        },
        floorOfDoubleWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual(3.0, Math.floor(3.6));
            Bridge.Test.NUnit.Assert.areEqual(-4.0, Math.floor(-3.6));
        },
        floorOfDecimalWorks: function () {
            this.assertIsDecimalAndEqualTo(System.Decimal(3.9).floor(), 3);
            this.assertIsDecimalAndEqualTo(System.Decimal(-3.1).floor(), -4);
            this.assertIsDecimalAndEqualTo(System.Decimal(3.0).floor(), 3);
        },
        logWorks: function () {
            this.assertAlmostEqual(Bridge.Math.log(0.5), -0.69314718055994529);
        },
        logWithBaseWorks_SPI_1566: function () {
            // #1566
            // Test restructure to keep assertion count correct (prevent uncaught test exception)
            var d1 = 0.0;
            Bridge.ClientTest.Batch4.TestHelper.safe(function () {
                d1 = Bridge.Math.logWithBase(16, 2);
            });
            Bridge.Test.NUnit.Assert.areEqual(4.0, d1);

            var d2 = 0.0;
            Bridge.ClientTest.Batch4.TestHelper.safe(function () {
                d2 = Bridge.Math.logWithBase(16, 4);
            });
            Bridge.Test.NUnit.Assert.areEqual(2.0, d2);
        },
        log10Works_SPI_1629: function () {
            // #1629
            Bridge.Test.NUnit.Assert.areEqual(Bridge.Math.logWithBase(10, 10.0), 1.0);
            Bridge.Test.NUnit.Assert.areEqual(Bridge.Math.logWithBase(100, 10.0), 2.0);
        },
        maxOfByteWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual(3.0, Math.max(1, 3));
            Bridge.Test.NUnit.Assert.areEqual(5.0, Math.max(5, 3));
        },
        maxOfDecimalWorks: function () {
            this.assertIsDecimalAndEqualTo(System.Decimal.max(System.Decimal(-14.5), System.Decimal(3.0)), 3.0);
            this.assertIsDecimalAndEqualTo(System.Decimal.max(System.Decimal(5.4), System.Decimal(3.0)), 5.4);
        },
        maxOfDoubleWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual(3.0, Math.max(1.0, 3.0));
            Bridge.Test.NUnit.Assert.areEqual(4.0, Math.max(4.0, 3.0));
        },
        maxOfShortWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual(3, Math.max(1, 3));
            Bridge.Test.NUnit.Assert.areEqual(4, Math.max(4, 3));
        },
        maxOfIntWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual(3, Math.max(1, 3));
            Bridge.Test.NUnit.Assert.areEqual(4, Math.max(4, 3));
        },
        maxOfLongWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual(System.Int64(3), System.Int64.max(System.Int64(1), System.Int64(3)));
            Bridge.Test.NUnit.Assert.areEqual(System.Int64(4), System.Int64.max(System.Int64(4), System.Int64(3)));
        },
        maxOfSByteWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual(3, Math.max(-1, 3));
            Bridge.Test.NUnit.Assert.areEqual(5, Math.max(5, 3));
        },
        maxOfFloatWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual(3.0, Math.max(-14.5, 3.0));
            Bridge.Test.NUnit.Assert.areEqual(5.4, Math.max(5.4, 3.0));
        },
        maxOfUShortWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual(3, Math.max(1, 3));
            Bridge.Test.NUnit.Assert.areEqual(5, Math.max(5, 3));
        },
        maxOfUIntWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual(3, Math.max(1, 3));
            Bridge.Test.NUnit.Assert.areEqual(5, Math.max(5, 3));
        },
        maxOfULongWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual(System.UInt64(300), System.UInt64.max(System.UInt64(100), System.UInt64(300)));
            Bridge.Test.NUnit.Assert.areEqual(System.UInt64(500), System.UInt64.max(System.UInt64(500), System.UInt64(300)));
        },
        minOfByteWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual(1.0, Math.min(1, 3));
            Bridge.Test.NUnit.Assert.areEqual(3.0, Math.min(5, 3));
        },
        minOfDecimalWorks: function () {
            this.assertIsDecimalAndEqualTo(System.Decimal.min(System.Decimal(-14.5), System.Decimal(3.0)), -14.5);
            this.assertIsDecimalAndEqualTo(System.Decimal.min(System.Decimal(5.4), System.Decimal(3.0)), 3.0);
        },
        minOfDoubleWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual(1.0, Math.min(1.0, 3.0));
            Bridge.Test.NUnit.Assert.areEqual(3.0, Math.min(4.0, 3.0));
        },
        minOfShortWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual(1, Math.min(1, 3));
            Bridge.Test.NUnit.Assert.areEqual(3, Math.min(4, 3));
        },
        minOfIntWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual(1, Math.min(1, 3));
            Bridge.Test.NUnit.Assert.areEqual(3, Math.min(4, 3));
        },
        minOfLongWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual(System.Int64(1), System.Int64.min(System.Int64(1), System.Int64(3)));
            Bridge.Test.NUnit.Assert.areEqual(System.Int64(3), System.Int64.min(System.Int64(4), System.Int64(3)));
        },
        minOfSByteWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual(-1, Math.min(-1, 3));
            Bridge.Test.NUnit.Assert.areEqual(3, Math.min(5, 3));
        },
        minOfFloatWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual(-14.5, Math.min(-14.5, 3.0));
            Bridge.Test.NUnit.Assert.areEqual(3.0, Math.min(5.4, 3.0));
        },
        minOfUShortWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual(1, Math.min(1, 3));
            Bridge.Test.NUnit.Assert.areEqual(3, Math.min(5, 3));
        },
        minOfUIntWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual(1, Math.min(1, 3));
            Bridge.Test.NUnit.Assert.areEqual(3, Math.min(5, 3));
        },
        minOfULongWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual(System.UInt64(100), System.UInt64.min(System.UInt64(100), System.UInt64(300)));
            Bridge.Test.NUnit.Assert.areEqual(System.UInt64(300), System.UInt64.min(System.UInt64(500), System.UInt64(300)));
        },
        powWorks: function () {
            this.assertAlmostEqual(Math.pow(3, 0.5), 1.7320508075688772);
        },
        randomWorks: function () {
            for (var i = 0; i < 5; i = (i + 1) | 0) {
                var d = Math.random();
                Bridge.Test.NUnit.Assert.true(d >= 0);
                Bridge.Test.NUnit.Assert.true(d < 1);
            }
        },
        roundOfDoubleWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual(3.0, Bridge.Math.round(3.432, 0, 6));
            Bridge.Test.NUnit.Assert.areEqual(4.0, Bridge.Math.round(3.6, 0, 6));
            Bridge.Test.NUnit.Assert.areEqual(4.0, Bridge.Math.round(3.5, 0, 6));
            Bridge.Test.NUnit.Assert.areEqual(4.0, Bridge.Math.round(4.5, 0, 6));
            Bridge.Test.NUnit.Assert.areEqual(-4.0, Bridge.Math.round(-3.5, 0, 6));
            Bridge.Test.NUnit.Assert.areEqual(-4.0, Bridge.Math.round(-4.5, 0, 6));
        },
        roundOfDecimalWorks: function () {
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(3.432), 6), 3.0);
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(3.6), 6), 4.0);
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(3.5), 6), 4.0);
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(4.5), 6), 4.0);
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(-3.5), 6), -4.0);
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(-4.5), 6), -4.0);
        },
        jsRoundOfDoubleWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual(3.0, Math.round(3.432));
            Bridge.Test.NUnit.Assert.areEqual(4.0, Math.round(3.6));
            Bridge.Test.NUnit.Assert.areEqual(4.0, Math.round(3.5));
            Bridge.Test.NUnit.Assert.areEqual(5.0, Math.round(4.5));
            Bridge.Test.NUnit.Assert.areEqual(-3.0, Math.round(-3.5));
            Bridge.Test.NUnit.Assert.areEqual(-4.0, Math.round(-4.5));
        },
        roundOfDoubleWithDigitsWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual(3.43, Bridge.Math.round(3.432, 2, 6));
            Bridge.Test.NUnit.Assert.areEqual(4.0, Bridge.Math.round(3.6, 0, 6));
            Bridge.Test.NUnit.Assert.areEqual(3.4, Bridge.Math.round(3.35, 1, 6));
            Bridge.Test.NUnit.Assert.areEqual(3.4, Bridge.Math.round(3.45, 1, 6));
            Bridge.Test.NUnit.Assert.areEqual(-3.4, Bridge.Math.round(-3.35, 1, 6));
            Bridge.Test.NUnit.Assert.areEqual(-3.4, Bridge.Math.round(-3.45, 1, 6));
        },
        roundOfDecimalWithDigitsWorks: function () {
            this.assertIsDecimalAndEqualTo(System.Decimal.toDecimalPlaces(System.Decimal(3.432), 2, 6), 3.43);
            this.assertIsDecimalAndEqualTo(System.Decimal.toDecimalPlaces(System.Decimal(3.6), 0, 6), 4.0);
            this.assertIsDecimalAndEqualTo(System.Decimal.toDecimalPlaces(System.Decimal(3.35), 1, 6), 3.4);
            this.assertIsDecimalAndEqualTo(System.Decimal.toDecimalPlaces(System.Decimal(3.45), 1, 6), 3.4);
            this.assertIsDecimalAndEqualTo(System.Decimal.toDecimalPlaces(System.Decimal(-3.35), 1, 6), -3.4);
            this.assertIsDecimalAndEqualTo(System.Decimal.toDecimalPlaces(System.Decimal(-3.45), 1, 6), -3.4);
        },
        signWithDecimalWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual(-1, System.Decimal(-0.5).sign());
            Bridge.Test.NUnit.Assert.areEqual(0, System.Decimal(0.0).sign());
            Bridge.Test.NUnit.Assert.areEqual(1, System.Decimal(3.35).sign());
        },
        signWithDoubleWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual(-1, Bridge.Int.sign(-0.5));
            Bridge.Test.NUnit.Assert.areEqual(0, Bridge.Int.sign(0.0));
            Bridge.Test.NUnit.Assert.areEqual(1, Bridge.Int.sign(3.35));
        },
        signWithFloatWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual(-1, Bridge.Int.sign(-0.5));
            Bridge.Test.NUnit.Assert.areEqual(0, Bridge.Int.sign(0.0));
            Bridge.Test.NUnit.Assert.areEqual(1, Bridge.Int.sign(3.35));
        },
        sinWorks: function () {
            this.assertAlmostEqual(Math.sin(0.5), 0.479425538604203);
        },
        sqrtWorks: function () {
            this.assertAlmostEqual(Math.sqrt(3), 1.7320508075688772);
        },
        tanWorks: function () {
            this.assertAlmostEqual(Math.tan(0.5), 0.54630248984379048);
        },
        truncateWithDoubleWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual(3.0, Bridge.Int.trunc(3.9));
            Bridge.Test.NUnit.Assert.areEqual(-3.0, Bridge.Int.trunc(-3.9));
        },
        truncateWithDecimalWorks: function () {
            this.assertIsDecimalAndEqualTo(System.Decimal(3.9).trunc(), 3.0);
            this.assertIsDecimalAndEqualTo(System.Decimal(-3.9).trunc(), -3.0);
        },
        iEEERemainderWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual(-1.0, 3.0 - (2.0 * Math.round(3.0 / 2.0)));
            Bridge.Test.NUnit.Assert.areEqual(0.0, 4.0 - (2.0 * Math.round(4.0 / 2.0)));
            Bridge.Test.NUnit.Assert.areEqual(1.0, 10.0 - (3.0 * Math.round(10.0 / 3.0)));
            Bridge.Test.NUnit.Assert.areEqual(-1.0, 11.0 - (3.0 * Math.round(11.0 / 3.0)));
            Bridge.Test.NUnit.Assert.areEqual(-1.0, 27.0 - (4.0 * Math.round(27.0 / 4.0)));
            Bridge.Test.NUnit.Assert.areEqual(-2.0, 28.0 - (5.0 * Math.round(28.0 / 5.0)));
            this.assertAlmostEqual(17.8 - (4.0 * Math.round(17.8 / 4.0)), 1.8);
            this.assertAlmostEqual(17.8 - (4.1 * Math.round(17.8 / 4.1)), 1.4);
            this.assertAlmostEqual(-16.3 - (4.1 * Math.round(-16.3 / 4.1)), 0.0999999999999979);
            this.assertAlmostEqual(17.8 - (-4.1 * Math.round(17.8 / -4.1)), 1.4);
            this.assertAlmostEqual(-17.8 - (-4.1 * Math.round(-17.8 / -4.1)), -1.4);
        },
        roundOfDoubleWithMidpointRoundingWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual(3.0, Bridge.Math.round(3.432, 0, 4));
            Bridge.Test.NUnit.Assert.areEqual(3.0, Bridge.Math.round(3.432, 0, 6));
            Bridge.Test.NUnit.Assert.areEqual(4.0, Bridge.Math.round(3.5, 0, 4));
            Bridge.Test.NUnit.Assert.areEqual(4.0, Bridge.Math.round(3.5, 0, 6));
            Bridge.Test.NUnit.Assert.areEqual(4.0, Bridge.Math.round(3.64, 0, 4));
            Bridge.Test.NUnit.Assert.areEqual(4.0, Bridge.Math.round(3.64, 0, 6));
            Bridge.Test.NUnit.Assert.areEqual(3.0, Bridge.Math.round(2.5, 0, 4));
            Bridge.Test.NUnit.Assert.areEqual(2.0, Bridge.Math.round(2.5, 0, 6));
            Bridge.Test.NUnit.Assert.areEqual(-3.0, Bridge.Math.round(-2.5, 0, 4));
            Bridge.Test.NUnit.Assert.areEqual(-2.0, Bridge.Math.round(-2.5, 0, 6));
        },
        roundOfDecimalWithMidpointRoundingWorks: function () {
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(3.432), 4), 3.0);
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(3.432), 6), 3.0);
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(3.5), 4), 4.0);
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(3.5), 6), 4.0);
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(3.64), 4), 4.0);
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(3.64), 6), 4.0);
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(2.5), 4), 3.0);
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(2.5), 6), 2.0);
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(-2.5), 4), -3.0);
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(-2.5), 6), -2.0);
        },
        roundOfDoubleWithDigitsAndMidpointRoundingWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual(3.5, Bridge.Math.round(3.45, 1, 4));
            Bridge.Test.NUnit.Assert.areEqual(3.4, Bridge.Math.round(3.45, 1, 6));
            Bridge.Test.NUnit.Assert.areEqual(4.0, Bridge.Math.round(3.5, 0, 4));
            Bridge.Test.NUnit.Assert.areEqual(4.0, Bridge.Math.round(3.5, 0, 6));
            Bridge.Test.NUnit.Assert.areEqual(3.65, Bridge.Math.round(3.645, 2, 4));
            Bridge.Test.NUnit.Assert.areEqual(3.64, Bridge.Math.round(3.645, 2, 6));
            Bridge.Test.NUnit.Assert.areEqual(3.0, Bridge.Math.round(2.5, 0, 4));
            Bridge.Test.NUnit.Assert.areEqual(2.0, Bridge.Math.round(2.5, 0, 6));
            Bridge.Test.NUnit.Assert.areEqual(-2.5, Bridge.Math.round(-2.5, 1, 4));
            Bridge.Test.NUnit.Assert.areEqual(-2.5, Bridge.Math.round(-2.5, 1, 6));
        },
        roundOfDecimalWithDigitsAndMidpointRoundingWorks: function () {
            this.assertIsDecimalAndEqualTo(System.Decimal.toDecimalPlaces(System.Decimal(3.45), 1, 4), 3.5);
            this.assertIsDecimalAndEqualTo(System.Decimal.toDecimalPlaces(System.Decimal(3.45), 1, 6), 3.4);
            this.assertIsDecimalAndEqualTo(System.Decimal.toDecimalPlaces(System.Decimal(3.5), 0, 4), 4.0);
            this.assertIsDecimalAndEqualTo(System.Decimal.toDecimalPlaces(System.Decimal(3.5), 0, 6), 4.0);
            this.assertIsDecimalAndEqualTo(System.Decimal.toDecimalPlaces(System.Decimal(3.645), 2, 4), 3.65);
            this.assertIsDecimalAndEqualTo(System.Decimal.toDecimalPlaces(System.Decimal(3.645), 2, 6), 3.64);
            this.assertIsDecimalAndEqualTo(System.Decimal.toDecimalPlaces(System.Decimal(2.5), 0, 4), 3.0);
            this.assertIsDecimalAndEqualTo(System.Decimal.toDecimalPlaces(System.Decimal(2.5), 0, 6), 2.0);
            this.assertIsDecimalAndEqualTo(System.Decimal.toDecimalPlaces(System.Decimal(-2.5), 1, 4), -2.5);
            this.assertIsDecimalAndEqualTo(System.Decimal.toDecimalPlaces(System.Decimal(-2.5), 1, 6), -2.5);
        },
        divRemWorks: function () {
            var result = { };
            Bridge.Test.NUnit.Assert.areEqual(1073741823, Bridge.Math.divRem(2147483647, 2, result));
            Bridge.Test.NUnit.Assert.areEqual(1, result.v);
            var longResult = { };
            Bridge.Test.NUnit.Assert.areEqual(System.Int64([-1249320088,5368]), System.Int64.divRem(System.Int64([-702313053,21474]), System.Int64(4), longResult));
            Bridge.Test.NUnit.Assert.areEqual(System.Int64(3), longResult.v);
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.MultidimArrayTests", {
        typePropertiesAreCorrect: function () {
            Bridge.Test.NUnit.Assert.areEqual$1("System.Int32[,]", Bridge.Reflection.getTypeFullName(System.Array.type(System.Int32, 2)), "FullName should be Array");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.isClass(System.Array.type(System.Int32, 2)), "IsClass should be true");
            var arr = System.Array.create(0, null, System.Int32, 1, 1);
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(arr, Array), "is Array should be true");
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(arr, System.Array.type(System.Int32, 2)), "is int[,] should be true");
        },
        lengthWorks: function () {
            var arr = System.Array.create(0, null, System.Int32, 3, 2);
            Bridge.Test.NUnit.Assert.areEqual(arr.length, 6);
        },
        gettingValueByIndexWorks: function () {
            var arr = System.Array.create(0, [[1, 2], [3, 4], [5, 6]], System.Int32, 3, 2);
            Bridge.Test.NUnit.Assert.areEqual(1, arr.get([0, 0]));
            Bridge.Test.NUnit.Assert.areEqual(2, arr.get([0, 1]));
            Bridge.Test.NUnit.Assert.areEqual(3, arr.get([1, 0]));
            Bridge.Test.NUnit.Assert.areEqual(4, arr.get([1, 1]));
            Bridge.Test.NUnit.Assert.areEqual(5, arr.get([2, 0]));
            Bridge.Test.NUnit.Assert.areEqual(6, arr.get([2, 1]));
        },
        getValueWorks: function () {
            var arr = System.Array.create(0, [[1, 2], [3, 4], [5, 6]], System.Int32, 3, 2);
            Bridge.Test.NUnit.Assert.areEqual(1, Bridge.unbox(System.Array.get(arr, 0, 0)));
            Bridge.Test.NUnit.Assert.areEqual(2, Bridge.unbox(System.Array.get(arr, 0, 1)));
            Bridge.Test.NUnit.Assert.areEqual(3, Bridge.unbox(System.Array.get(arr, 1, 0)));
            Bridge.Test.NUnit.Assert.areEqual(4, Bridge.unbox(System.Array.get(arr, 1, 1)));
            Bridge.Test.NUnit.Assert.areEqual(5, Bridge.unbox(System.Array.get(arr, 2, 0)));
            Bridge.Test.NUnit.Assert.areEqual(6, Bridge.unbox(System.Array.get(arr, 2, 1)));
        },
        getValueWorksForUninitializedElement: function () {
            var arr = System.Array.create(0, null, System.Int32, 2, 2);
            Bridge.Test.NUnit.Assert.areStrictEqual(0, Bridge.unbox(System.Array.get(arr, 0, 0)));
        },
        getValueByIndexWorksForUninitializedElement: function () {
            var arr = System.Array.create(0, null, System.Int32, 2, 2);
            Bridge.Test.NUnit.Assert.areStrictEqual(0, arr.get([0, 0]));
        },
        settingValueByIndexWorks: function () {
            var arr = System.Array.create(null, null, System.String, 3, 2);
            arr.set([0, 0], "a");
            arr.set([0, 1], "b");
            arr.set([1, 0], "c");
            arr.set([1, 1], "d");
            arr.set([2, 0], "e");
            arr.set([2, 1], "f");
            Bridge.Test.NUnit.Assert.areEqual("a", arr.get([0, 0]));
            Bridge.Test.NUnit.Assert.areEqual("b", arr.get([0, 1]));
            Bridge.Test.NUnit.Assert.areEqual("c", arr.get([1, 0]));
            Bridge.Test.NUnit.Assert.areEqual("d", arr.get([1, 1]));
            Bridge.Test.NUnit.Assert.areEqual("e", arr.get([2, 0]));
            Bridge.Test.NUnit.Assert.areEqual("f", arr.get([2, 1]));
        },
        setValueWorks: function () {
            var arr = System.Array.create(null, null, System.String, 3, 2);
            System.Array.set(arr, "a", 0, 0);
            System.Array.set(arr, "b", 0, 1);
            System.Array.set(arr, "c", 1, 0);
            System.Array.set(arr, "d", 1, 1);
            System.Array.set(arr, "e", 2, 0);
            System.Array.set(arr, "f", 2, 1);
            Bridge.Test.NUnit.Assert.areEqual("a", arr.get([0, 0]));
            Bridge.Test.NUnit.Assert.areEqual("b", arr.get([0, 1]));
            Bridge.Test.NUnit.Assert.areEqual("c", arr.get([1, 0]));
            Bridge.Test.NUnit.Assert.areEqual("d", arr.get([1, 1]));
            Bridge.Test.NUnit.Assert.areEqual("e", arr.get([2, 0]));
            Bridge.Test.NUnit.Assert.areEqual("f", arr.get([2, 1]));
        },
        getLengthWorks: function () {
            var arr = System.Array.create(0, [[[1, 2], [3, 4], [5, 6]], [[7, 8], [9, 10], [11, 12]], [[13, 14], [15, 16], [17, 18]], [[19, 20], [21, 22], [23, 24]]], System.Int32, 4, 3, 2);
            Bridge.Test.NUnit.Assert.areEqual(4, System.Array.getLength(arr, 0));
            Bridge.Test.NUnit.Assert.areEqual(3, System.Array.getLength(arr, 1));
            Bridge.Test.NUnit.Assert.areEqual(2, System.Array.getLength(arr, 2));
        },
        getLowerBoundWorks: function () {
            var arr = System.Array.create(0, [[[1, 2], [3, 4], [5, 6]], [[7, 8], [9, 10], [11, 12]], [[13, 14], [15, 16], [17, 18]], [[19, 20], [21, 22], [23, 24]]], System.Int32, 4, 3, 2);
            Bridge.Test.NUnit.Assert.areEqual(0, System.Array.getLower(arr, 0));
            Bridge.Test.NUnit.Assert.areEqual(0, System.Array.getLower(arr, 1));
            Bridge.Test.NUnit.Assert.areEqual(0, System.Array.getLower(arr, 2));
        },
        getUpperBoundWorks: function () {
            var arr = System.Array.create(0, [[[1, 2], [3, 4], [5, 6]], [[7, 8], [9, 10], [11, 12]], [[13, 14], [15, 16], [17, 18]], [[19, 20], [21, 22], [23, 24]]], System.Int32, 4, 3, 2);
            Bridge.Test.NUnit.Assert.areEqual(3, (System.Array.getLength(arr, 0) - 1));
            Bridge.Test.NUnit.Assert.areEqual(2, (System.Array.getLength(arr, 1) - 1));
            Bridge.Test.NUnit.Assert.areEqual(1, (System.Array.getLength(arr, 2) - 1));
        },
        foreachWorks: function () {
            var $t;
            var arr = System.Array.create(0, [[[1, 2], [3, 4], [5, 6]], [[7, 8], [9, 10], [11, 12]], [[13, 14], [15, 16], [17, 18]], [[19, 20], [21, 22], [23, 24]]], System.Int32, 4, 3, 2);
            var actual = new (System.Collections.Generic.List$1(System.Int32))();
            $t = Bridge.getEnumerator(arr);
            try {
                while ($t.moveNext()) {
                    var i = $t.Current;
                    actual.add(i);
                }
            }finally {
                if (Bridge.is($t, System.IDisposable)) {
                    $t.System$IDisposable$dispose();
                }
            }Bridge.Test.NUnit.Assert.areEqual(System.Array.init([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24], System.Int32), actual.toArray());
        },
        rankWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual(2, System.Array.getRank(System.Array.create(0, null, System.Int32, 0, 0)));
            Bridge.Test.NUnit.Assert.areEqual(3, System.Array.getRank(System.Array.create(0, null, System.Int32, 0, 0, 0)));
        },
        getValueWithIndexOutOfRangeThrowsAnException: function () {
            var arr = System.Array.create(0, null, System.Int32, 2, 3, 4);
            var i = arr.get([1, 2, 3]);
            Bridge.Test.NUnit.Assert.throws(function () {
                i = arr.get([2, 2, 1]);
            });
            Bridge.Test.NUnit.Assert.throws(function () {
                i = arr.get([1, 3, 1]);
            });
            Bridge.Test.NUnit.Assert.throws(function () {
                i = arr.get([1, 2, 4]);
            });
            Bridge.Test.NUnit.Assert.throws(function () {
                i = arr.get([-1, 0, 0]);
            });
            Bridge.Test.NUnit.Assert.throws(function () {
                i = arr.get([0, -1, 0]);
            });
            Bridge.Test.NUnit.Assert.throws(function () {
                i = arr.get([0, 0, -1]);
            });
        },
        setValueWithIndexOutOfRangeThrowsAnException: function () {
            var arr = System.Array.create(0, null, System.Int32, 2, 3, 4);
            arr.set([1, 2, 3], 0);
            Bridge.Test.NUnit.Assert.throws(function () {
                arr.set([2, 2, 1], 0);
            });
            Bridge.Test.NUnit.Assert.throws(function () {
                arr.set([1, 3, 1], 0);
            });
            Bridge.Test.NUnit.Assert.throws(function () {
                arr.set([1, 2, 4], 0);
            });
            Bridge.Test.NUnit.Assert.throws(function () {
                arr.set([-1, 0, 0], 0);
            });
            Bridge.Test.NUnit.Assert.throws(function () {
                arr.set([0, -1, 0], 0);
            });
            Bridge.Test.NUnit.Assert.throws(function () {
                arr.set([0, 0, -1], 0);
            });
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.NullableTests", {
        isOfType: function (T, value) {
            return Bridge.is(value, T);
        },
        typePropertiesAreCorrect_SPI_1567: function () {
            var a = 3, b = null;
            // #1567
            Bridge.Test.NUnit.Assert.areEqual$1("System.Nullable`1[[System.Double, mscorlib]]", Bridge.Reflection.getTypeFullName(System.Nullable$1(System.Double)), "Open FullName");
            Bridge.Test.NUnit.Assert.areEqual$1("System.Nullable`1[[System.Int32, mscorlib]]", Bridge.Reflection.getTypeFullName(System.Nullable$1(System.Int32)), "Instantiated FullName");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.isGenericTypeDefinition(System.Nullable$1), "IsGenericTypeDefinition");
            Bridge.Test.NUnit.Assert.areEqual$1(System.Nullable$1, Bridge.Reflection.getGenericTypeDefinition(System.Nullable$1(System.Int32)), "GetGenericTypeDefinition");
            // Test restructure to keep assertion count correct (prevent uncaught test exception)
            var b1 = false;
            Bridge.ClientTest.Batch4.TestHelper.safe(function () {
                var $t;
                b1 = Bridge.referenceEquals(($t = Bridge.Reflection.getGenericArguments(System.Nullable$1(System.Int32)))[System.Array.index(0, $t)], System.Int32);
            });
            Bridge.Test.NUnit.Assert.true$1(b1, "GenericArguments");

            Bridge.Test.NUnit.Assert.true$1(Bridge.is(Bridge.box(a, System.Int32, $box_.System.Nullable$1.toString), System.Int32), "is int? #1");
            Bridge.Test.NUnit.Assert.false$1(Bridge.is(Bridge.box(b, System.Int32, $box_.System.Nullable$1.toString), System.Int32), "is int? #2");

            Bridge.Test.NUnit.Assert.true$1(this.isOfType(System.Nullable$1(System.Int32), Bridge.box(3, System.Int32)), "IsOfType #1");
            Bridge.Test.NUnit.Assert.false$1(this.isOfType(System.Nullable$1(System.Int32), Bridge.box(3.14, System.Double, $box_.System.Double.toString)), "IsOfType #2");
            Bridge.Test.NUnit.Assert.true$1(this.isOfType(System.Nullable$1(System.TimeSpan), new System.TimeSpan(System.Int64(1))), "IsOfType #3");
            Bridge.Test.NUnit.Assert.false$1(this.isOfType(System.Nullable$1(System.TimeSpan), Bridge.box(3.14, System.Double, $box_.System.Double.toString)), "IsOfType #4");
        },
        convertingToNullableWorks: function () {
            var i = 3;
            var i1 = i;
            var i2 = i;
            Bridge.Test.NUnit.Assert.areEqual(3, i1);
            Bridge.Test.NUnit.Assert.areEqual(3, i2);
        },
        hasValueWorks: function () {
            var a = 3, b = null;
            Bridge.Test.NUnit.Assert.true(System.Nullable.hasValue(a));
            Bridge.Test.NUnit.Assert.false(System.Nullable.hasValue(b));
        },
        boxingWorks: function () {
            var a = 3, b = null;
            Bridge.Test.NUnit.Assert.true(Bridge.box(a, System.Int32, $box_.System.Nullable$1.toString) != null);
            Bridge.Test.NUnit.Assert.false(Bridge.box(b, System.Int32, $box_.System.Nullable$1.toString) != null);
        },
        unboxingWorks: function () {
            var a = 3, b = null;
            Bridge.Test.NUnit.Assert.areEqual(3, System.Nullable.getValue(a));
            try {
                var x = System.Nullable.getValue(b);
                Bridge.Test.NUnit.Assert.fail$1("Unboxing null should have thrown an exception");
            }
            catch ($e1) {
                $e1 = System.Exception.create($e1);
                if (Bridge.is($e1, System.InvalidOperationException)) {
                } else {
                    throw $e1;
                }
            }
        },
        valueWorks: function () {
            var a = 3, b = null;
            Bridge.Test.NUnit.Assert.areEqual(3, System.Nullable.getValue(a));
            try {
                var x = System.Nullable.getValue(b);
                Bridge.Test.NUnit.Assert.fail$1("null.Value should have thrown an exception");
            }
            catch ($e1) {
                $e1 = System.Exception.create($e1);
                if (Bridge.is($e1, System.InvalidOperationException)) {
                } else {
                    throw $e1;
                }
            }
        },
        unboxingValueOfWrongTypeThrowsAnException: function () {
            Bridge.Test.NUnit.Assert.throws($asm.$.Bridge.ClientTest.Batch4.NullableTests.f1);
        },
        getValueOrDefaultWithArgWorks: function () {
            var a = 3, b = null;
            Bridge.Test.NUnit.Assert.areEqual(3, System.Nullable.getValueOrDefault(a, 1));
            Bridge.Test.NUnit.Assert.areEqual(1, System.Nullable.getValueOrDefault(b, 1));
        },
        liftedEqualityWorks: function () {
            var a = 1, b = 1, c = 2, d = null, e = null;
            Bridge.Test.NUnit.Assert.areStrictEqual(true, System.Nullable.eq(a, b));
            Bridge.Test.NUnit.Assert.areStrictEqual(false, System.Nullable.eq(a, c));
            Bridge.Test.NUnit.Assert.areStrictEqual(false, System.Nullable.eq(a, d));
            Bridge.Test.NUnit.Assert.areStrictEqual(true, System.Nullable.eq(d, e));
        },
        liftedInequalityWorks: function () {
            var a = 1, b = 1, c = 2, d = null, e = null;
            Bridge.Test.NUnit.Assert.areStrictEqual(false, System.Nullable.neq(a, b));
            Bridge.Test.NUnit.Assert.areStrictEqual(true, System.Nullable.neq(a, c));
            Bridge.Test.NUnit.Assert.areStrictEqual(true, System.Nullable.neq(a, d));
            Bridge.Test.NUnit.Assert.areStrictEqual(false, System.Nullable.neq(d, e));
        },
        liftedLessThanWorks: function () {
            var a = 1, b = 1, c = 2, d = null, e = null;
            Bridge.Test.NUnit.Assert.areStrictEqual(false, System.Nullable.lt(a, b));
            Bridge.Test.NUnit.Assert.areStrictEqual(true, System.Nullable.lt(a, c));
            Bridge.Test.NUnit.Assert.areStrictEqual(false, System.Nullable.lt(a, d));
            Bridge.Test.NUnit.Assert.areStrictEqual(false, System.Nullable.lt(d, e));
        },
        liftedGreaterThanWorks: function () {
            var a = 1, b = 1, c = 2, d = null, e = null;
            Bridge.Test.NUnit.Assert.areStrictEqual(false, System.Nullable.gt(a, b));
            Bridge.Test.NUnit.Assert.areStrictEqual(true, System.Nullable.gt(c, a));
            Bridge.Test.NUnit.Assert.areStrictEqual(false, System.Nullable.gt(a, d));
            Bridge.Test.NUnit.Assert.areStrictEqual(false, System.Nullable.gt(d, e));
        },
        liftedLessThanOrEqualWorks: function () {
            var a = 1, b = 1, c = 2, d = null, e = null;
            Bridge.Test.NUnit.Assert.areStrictEqual(true, System.Nullable.lte(a, b));
            Bridge.Test.NUnit.Assert.areStrictEqual(false, System.Nullable.lte(c, a));
            Bridge.Test.NUnit.Assert.areStrictEqual(false, System.Nullable.lte(a, d));
            Bridge.Test.NUnit.Assert.areStrictEqual(false, System.Nullable.lte(d, e));
        },
        liftedGreaterThanOrEqualWorks: function () {
            var a = 1, b = 1, c = 2, d = null, e = null;
            Bridge.Test.NUnit.Assert.areStrictEqual(true, System.Nullable.gte(a, b));
            Bridge.Test.NUnit.Assert.areStrictEqual(false, System.Nullable.gte(a, c));
            Bridge.Test.NUnit.Assert.areStrictEqual(false, System.Nullable.gte(a, d));
            Bridge.Test.NUnit.Assert.areStrictEqual(false, System.Nullable.gte(d, e));
        },
        liftedSubtractionWorks: function () {
            var a = 2, b = 3, c = null;
            Bridge.Test.NUnit.Assert.areStrictEqual(-1, Bridge.Int.clip32(System.Nullable.sub(a, b)));
            Bridge.Test.NUnit.Assert.areStrictEqual(null, Bridge.Int.clip32(System.Nullable.sub(a, c)));
        },
        liftedAdditionWorks: function () {
            var a = 2, b = 3, c = null;
            Bridge.Test.NUnit.Assert.areStrictEqual(5, Bridge.Int.clip32(System.Nullable.add(a, b)));
            Bridge.Test.NUnit.Assert.areStrictEqual(null, Bridge.Int.clip32(System.Nullable.add(a, c)));
        },
        liftedModWorks: function () {
            var a = 14, b = 3, c = null;
            Bridge.Test.NUnit.Assert.areStrictEqual(2, System.Nullable.mod(a, b));
            Bridge.Test.NUnit.Assert.areStrictEqual(null, System.Nullable.mod(a, c));
        },
        liftedFloatingPointDivisionWorks: function () {
            var a = 15, b = 3, c = null;
            Bridge.Test.NUnit.Assert.areStrictEqual(5, System.Nullable.div(a, b));
            Bridge.Test.NUnit.Assert.areStrictEqual(null, System.Nullable.div(a, c));
        },
        liftedIntegerDivisionWorks: function () {
            var a = 16, b = 3, c = null;
            Bridge.Test.NUnit.Assert.areStrictEqual(5, Bridge.Int.clip32(Bridge.Int.div(a, b)));
            Bridge.Test.NUnit.Assert.areStrictEqual(null, Bridge.Int.clip32(Bridge.Int.div(a, c)));
        },
        liftedMultiplicationWorks: function () {
            var a = 2, b = 3, c = null;
            Bridge.Test.NUnit.Assert.areStrictEqual(6, Bridge.Int.clip32(System.Nullable.mul(a, b)));
            Bridge.Test.NUnit.Assert.areStrictEqual(null, Bridge.Int.clip32(System.Nullable.mul(a, c)));
        },
        liftedBitwiseAndWorks: function () {
            var a = 6, b = 3, c = null;
            Bridge.Test.NUnit.Assert.areStrictEqual(2, System.Nullable.band(a, b));
            Bridge.Test.NUnit.Assert.areStrictEqual(null, System.Nullable.band(a, c));
        },
        liftedBitwiseOrWorks: function () {
            var a = 6, b = 3, c = null;
            Bridge.Test.NUnit.Assert.areStrictEqual(7, System.Nullable.bor(a, b));
            Bridge.Test.NUnit.Assert.areStrictEqual(null, System.Nullable.bor(a, c));
        },
        liftedBitwiseXorWorks: function () {
            var a = 6, b = 3, c = null;
            Bridge.Test.NUnit.Assert.areStrictEqual(5, System.Nullable.xor(a, b));
            Bridge.Test.NUnit.Assert.areStrictEqual(null, System.Nullable.xor(a, c));
        },
        liftedLeftShiftWorks: function () {
            var a = 6, b = 3, c = null;
            Bridge.Test.NUnit.Assert.areStrictEqual(48, System.Nullable.sl(a, b));
            Bridge.Test.NUnit.Assert.areStrictEqual(null, System.Nullable.sl(a, c));
        },
        liftedSignedRightShiftWorks: function () {
            var a = 48, b = 3, c = null;
            Bridge.Test.NUnit.Assert.areStrictEqual(6, System.Nullable.sr(a, b));
            Bridge.Test.NUnit.Assert.areStrictEqual(null, System.Nullable.sr(a, c));
        },
        liftedUnsignedRightShiftWorks: function () {
            var a = -48, b = 3, c = null;
            Bridge.Test.NUnit.Assert.areStrictEqual(-6, System.Nullable.sr(a, b));
            Bridge.Test.NUnit.Assert.areStrictEqual(null, System.Nullable.sr(a, c));
        },
        liftedEqualityWorksWithUserDefinedOperators: function () {
            var a = Bridge.ClientTest.Batch4.NullableTests.MyType.op_Implicit(1), b = Bridge.ClientTest.Batch4.NullableTests.MyType.op_Implicit(1), c = Bridge.ClientTest.Batch4.NullableTests.MyType.op_Implicit(2), d = null, e = null;
            Bridge.Test.NUnit.Assert.areStrictEqual(true, System.Nullable.lifteq(Bridge.ClientTest.Batch4.NullableTests.MyType.op_Equality, a, b));
            Bridge.Test.NUnit.Assert.areStrictEqual(false, System.Nullable.lifteq(Bridge.ClientTest.Batch4.NullableTests.MyType.op_Equality, a, c));
            Bridge.Test.NUnit.Assert.areStrictEqual(false, System.Nullable.lifteq(Bridge.ClientTest.Batch4.NullableTests.MyType.op_Equality, a, d));
            Bridge.Test.NUnit.Assert.areStrictEqual(false, System.Nullable.lifteq(Bridge.ClientTest.Batch4.NullableTests.MyType.op_Equality, d, a));
            Bridge.Test.NUnit.Assert.areStrictEqual(true, System.Nullable.lifteq(Bridge.ClientTest.Batch4.NullableTests.MyType.op_Equality, d, e));
        },
        liftedInequalityWorksWithUserDefinedOperators: function () {
            var a = Bridge.ClientTest.Batch4.NullableTests.MyType.op_Implicit(1), b = Bridge.ClientTest.Batch4.NullableTests.MyType.op_Implicit(1), c = Bridge.ClientTest.Batch4.NullableTests.MyType.op_Implicit(2), d = null, e = null;
            Bridge.Test.NUnit.Assert.areStrictEqual(false, System.Nullable.liftne(Bridge.ClientTest.Batch4.NullableTests.MyType.op_Inequality, a, b));
            Bridge.Test.NUnit.Assert.areStrictEqual(true, System.Nullable.liftne(Bridge.ClientTest.Batch4.NullableTests.MyType.op_Inequality, a, c));
            Bridge.Test.NUnit.Assert.areStrictEqual(true, System.Nullable.liftne(Bridge.ClientTest.Batch4.NullableTests.MyType.op_Inequality, a, d));
            Bridge.Test.NUnit.Assert.areStrictEqual(true, System.Nullable.liftne(Bridge.ClientTest.Batch4.NullableTests.MyType.op_Inequality, d, a));
            Bridge.Test.NUnit.Assert.areStrictEqual(false, System.Nullable.liftne(Bridge.ClientTest.Batch4.NullableTests.MyType.op_Inequality, d, e));
        },
        liftedLessThanWorksWithUserDefinedOperators: function () {
            var a = Bridge.ClientTest.Batch4.NullableTests.MyType.op_Implicit(1), b = Bridge.ClientTest.Batch4.NullableTests.MyType.op_Implicit(1), c = Bridge.ClientTest.Batch4.NullableTests.MyType.op_Implicit(2), d = null, e = null;
            Bridge.Test.NUnit.Assert.areStrictEqual(false, System.Nullable.liftcmp(Bridge.ClientTest.Batch4.NullableTests.MyType.op_LessThan, a, b));
            Bridge.Test.NUnit.Assert.areStrictEqual(true, System.Nullable.liftcmp(Bridge.ClientTest.Batch4.NullableTests.MyType.op_LessThan, a, c));
            Bridge.Test.NUnit.Assert.areStrictEqual(false, System.Nullable.liftcmp(Bridge.ClientTest.Batch4.NullableTests.MyType.op_LessThan, a, d));
            Bridge.Test.NUnit.Assert.areStrictEqual(false, System.Nullable.liftcmp(Bridge.ClientTest.Batch4.NullableTests.MyType.op_LessThan, d, a));
            Bridge.Test.NUnit.Assert.areStrictEqual(false, System.Nullable.liftcmp(Bridge.ClientTest.Batch4.NullableTests.MyType.op_LessThan, d, e));
        },
        liftedGreaterThanWorksWithUserDefinedOperators: function () {
            var a = Bridge.ClientTest.Batch4.NullableTests.MyType.op_Implicit(1), b = Bridge.ClientTest.Batch4.NullableTests.MyType.op_Implicit(1), c = Bridge.ClientTest.Batch4.NullableTests.MyType.op_Implicit(2), d = null, e = null;
            Bridge.Test.NUnit.Assert.areStrictEqual(false, System.Nullable.liftcmp(Bridge.ClientTest.Batch4.NullableTests.MyType.op_GreaterThan, a, b));
            Bridge.Test.NUnit.Assert.areStrictEqual(true, System.Nullable.liftcmp(Bridge.ClientTest.Batch4.NullableTests.MyType.op_GreaterThan, c, a));
            Bridge.Test.NUnit.Assert.areStrictEqual(false, System.Nullable.liftcmp(Bridge.ClientTest.Batch4.NullableTests.MyType.op_GreaterThan, a, d));
            Bridge.Test.NUnit.Assert.areStrictEqual(false, System.Nullable.liftcmp(Bridge.ClientTest.Batch4.NullableTests.MyType.op_GreaterThan, d, a));
            Bridge.Test.NUnit.Assert.areStrictEqual(false, System.Nullable.liftcmp(Bridge.ClientTest.Batch4.NullableTests.MyType.op_GreaterThan, d, e));
        },
        liftedLessThanOrEqualWorksWithUserDefinedOperators: function () {
            var a = Bridge.ClientTest.Batch4.NullableTests.MyType.op_Implicit(1), b = Bridge.ClientTest.Batch4.NullableTests.MyType.op_Implicit(1), c = Bridge.ClientTest.Batch4.NullableTests.MyType.op_Implicit(2), d = null, e = null;
            Bridge.Test.NUnit.Assert.areStrictEqual(true, System.Nullable.liftcmp(Bridge.ClientTest.Batch4.NullableTests.MyType.op_LessThanOrEqual, a, b));
            Bridge.Test.NUnit.Assert.areStrictEqual(false, System.Nullable.liftcmp(Bridge.ClientTest.Batch4.NullableTests.MyType.op_LessThanOrEqual, c, a));
            Bridge.Test.NUnit.Assert.areStrictEqual(false, System.Nullable.liftcmp(Bridge.ClientTest.Batch4.NullableTests.MyType.op_LessThanOrEqual, a, d));
            Bridge.Test.NUnit.Assert.areStrictEqual(false, System.Nullable.liftcmp(Bridge.ClientTest.Batch4.NullableTests.MyType.op_LessThanOrEqual, d, a));
            Bridge.Test.NUnit.Assert.areStrictEqual(false, System.Nullable.liftcmp(Bridge.ClientTest.Batch4.NullableTests.MyType.op_LessThanOrEqual, d, e));
        },
        liftedGreaterThanOrEqualWorksWithUserDefinedOperators: function () {
            var a = Bridge.ClientTest.Batch4.NullableTests.MyType.op_Implicit(1), b = Bridge.ClientTest.Batch4.NullableTests.MyType.op_Implicit(1), c = Bridge.ClientTest.Batch4.NullableTests.MyType.op_Implicit(2), d = null, e = null;
            Bridge.Test.NUnit.Assert.areStrictEqual(true, System.Nullable.liftcmp(Bridge.ClientTest.Batch4.NullableTests.MyType.op_GreaterThanOrEqual, a, b));
            Bridge.Test.NUnit.Assert.areStrictEqual(false, System.Nullable.liftcmp(Bridge.ClientTest.Batch4.NullableTests.MyType.op_GreaterThanOrEqual, a, c));
            Bridge.Test.NUnit.Assert.areStrictEqual(false, System.Nullable.liftcmp(Bridge.ClientTest.Batch4.NullableTests.MyType.op_GreaterThanOrEqual, a, d));
            Bridge.Test.NUnit.Assert.areStrictEqual(false, System.Nullable.liftcmp(Bridge.ClientTest.Batch4.NullableTests.MyType.op_GreaterThanOrEqual, d, a));
            Bridge.Test.NUnit.Assert.areStrictEqual(false, System.Nullable.liftcmp(Bridge.ClientTest.Batch4.NullableTests.MyType.op_GreaterThanOrEqual, d, e));
        },
        liftedAdditionWorksWithUserDefinedOperators: function () {
            var a = Bridge.ClientTest.Batch4.NullableTests.MyType.op_Implicit(2), b = Bridge.ClientTest.Batch4.NullableTests.MyType.op_Implicit(3), c = null;
            Bridge.Test.NUnit.Assert.areStrictEqual(5, Bridge.Int.clip32(System.Nullable.lift(Bridge.ClientTest.Batch4.NullableTests.MyType.op_Addition, a, b)));
            Bridge.Test.NUnit.Assert.areStrictEqual(null, Bridge.Int.clip32(System.Nullable.lift(Bridge.ClientTest.Batch4.NullableTests.MyType.op_Addition, a, c)));
        },
        liftedUnaryMinusWorksWithUserDefinedOperators_SPI_1634: function () {
            var a = Bridge.ClientTest.Batch4.NullableTests.MyType.op_Implicit(2), c = null;
            // #1634
            Bridge.Test.NUnit.Assert.areStrictEqual(Bridge.Int.clip32(System.Nullable.lift(Bridge.ClientTest.Batch4.NullableTests.MyType.op_UnaryNegation, a)), -2);
            Bridge.Test.NUnit.Assert.areStrictEqual(Bridge.Int.clip32(System.Nullable.lift(Bridge.ClientTest.Batch4.NullableTests.MyType.op_UnaryNegation, c)), null);
        },
        liftedBooleanAndWorks: function () {
            var a = true, b = true, c = false, d = false, e = null, f = null;
            Bridge.Test.NUnit.Assert.areStrictEqual(true, System.Nullable.and(a, b));
            Bridge.Test.NUnit.Assert.areStrictEqual(false, System.Nullable.and(a, c));
            Bridge.Test.NUnit.Assert.areStrictEqual(null, System.Nullable.and(a, e));
            Bridge.Test.NUnit.Assert.areStrictEqual(false, System.Nullable.and(c, a));
            Bridge.Test.NUnit.Assert.areStrictEqual(false, System.Nullable.and(c, d));
            Bridge.Test.NUnit.Assert.areStrictEqual(false, System.Nullable.and(c, e));
            Bridge.Test.NUnit.Assert.areStrictEqual(null, System.Nullable.and(e, a));
            Bridge.Test.NUnit.Assert.areStrictEqual(false, System.Nullable.and(e, c));
            Bridge.Test.NUnit.Assert.areStrictEqual(null, System.Nullable.and(e, f));
        },
        liftedBooleanOrWorks: function () {
            var a = true, b = true, c = false, d = false, e = null, f = null;
            Bridge.Test.NUnit.Assert.areStrictEqual(true, System.Nullable.or(a, b));
            Bridge.Test.NUnit.Assert.areStrictEqual(true, System.Nullable.or(a, c));
            Bridge.Test.NUnit.Assert.areStrictEqual(true, System.Nullable.or(a, e));
            Bridge.Test.NUnit.Assert.areStrictEqual(true, System.Nullable.or(c, a));
            Bridge.Test.NUnit.Assert.areStrictEqual(false, System.Nullable.or(c, d));
            Bridge.Test.NUnit.Assert.areStrictEqual(null, System.Nullable.or(c, e));
            Bridge.Test.NUnit.Assert.areStrictEqual(true, System.Nullable.or(e, a));
            Bridge.Test.NUnit.Assert.areStrictEqual(null, System.Nullable.or(e, c));
            Bridge.Test.NUnit.Assert.areStrictEqual(null, System.Nullable.or(e, f));
        },
        liftedBooleanXorWorks_SPI_1568: function () {
            var a = true, b = true, c = false, d = false, e = null, f = null;
            // #1568
            Bridge.Test.NUnit.Assert.areStrictEqual(false, System.Nullable.xor(a, b));
            Bridge.Test.NUnit.Assert.areStrictEqual(true, System.Nullable.xor(a, c));

            Bridge.Test.NUnit.Assert.areStrictEqual(null, System.Nullable.xor(a, e));
            // #1568
            Bridge.Test.NUnit.Assert.areStrictEqual(true, System.Nullable.xor(c, a));
            Bridge.Test.NUnit.Assert.areStrictEqual(false, System.Nullable.xor(c, d));

            Bridge.Test.NUnit.Assert.areStrictEqual(null, System.Nullable.xor(c, e));
            Bridge.Test.NUnit.Assert.areStrictEqual(null, System.Nullable.xor(e, a));
            Bridge.Test.NUnit.Assert.areStrictEqual(null, System.Nullable.xor(e, c));
            Bridge.Test.NUnit.Assert.areStrictEqual(null, System.Nullable.xor(e, f));
        },
        liftedBooleanNotWorks: function () {
            var a = true, b = false, c = null;
            Bridge.Test.NUnit.Assert.areStrictEqual(false, System.Nullable.not(a));
            Bridge.Test.NUnit.Assert.areStrictEqual(true, System.Nullable.not(b));
            Bridge.Test.NUnit.Assert.areStrictEqual(null, System.Nullable.not(c));
        },
        liftedNegationWorks: function () {
            var a = 3, b = null;
            Bridge.Test.NUnit.Assert.areStrictEqual(-3, Bridge.Int.clip32(System.Nullable.neg(a)));
            Bridge.Test.NUnit.Assert.areStrictEqual(null, Bridge.Int.clip32(System.Nullable.neg(b)));
        },
        liftedUnaryPlusWorks: function () {
            var a = 3, b = null;
            Bridge.Test.NUnit.Assert.areStrictEqual(3, System.Nullable.pos(a));
            Bridge.Test.NUnit.Assert.areStrictEqual(null, System.Nullable.pos(b));
        },
        liftedOnesComplementWorks: function () {
            var a = 3, b = null;
            Bridge.Test.NUnit.Assert.areStrictEqual(-4, System.Nullable.bnot(a));
            Bridge.Test.NUnit.Assert.areStrictEqual(null, System.Nullable.bnot(b));
        },
        coalesceWorks: function () {
            var $t, $t1, $t2, $t3, $t4;
            var v1 = null, v2 = 1, v3 = 0, v4 = 2;
            var s1 = null, s2 = "x";
            Bridge.Test.NUnit.Assert.areStrictEqual(null, ($t = v1, $t != null ? $t : v1));
            Bridge.Test.NUnit.Assert.areStrictEqual(1, ($t1 = v1, $t1 != null ? $t1 : v2));
            Bridge.Test.NUnit.Assert.areStrictEqual(0, ($t2 = v3, $t2 != null ? $t2 : v4));
            Bridge.Test.NUnit.Assert.areStrictEqual(null, ($t3 = s1, $t3 != null ? $t3 : s1));
            Bridge.Test.NUnit.Assert.areStrictEqual("x", ($t4 = s1, $t4 != null ? $t4 : s2));
        }
    });

    Bridge.ns("Bridge.ClientTest.Batch4.NullableTests", $asm.$);

    Bridge.apply($asm.$.Bridge.ClientTest.Batch4.NullableTests, {
        f1: function () {
            var o = "x";
            var x = System.Nullable.getValue(Bridge.cast(Bridge.unbox(o), System.Int32));
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.NullableTests.MyType", {
        $kind: "struct",
        statics: {
            op_Implicit: function (i) {
                return new Bridge.ClientTest.Batch4.NullableTests.MyType.$ctor1(i);
            },
            op_Addition: function (a, b) {
                return ((a.v + b.v) | 0);
            },
            op_UnaryNegation: function (a) {
                return ((-a.v) | 0);
            },
            op_LessThan: function (a, b) {
                return a.v < b.v;
            },
            op_GreaterThan: function (a, b) {
                return a.v > b.v;
            },
            op_LessThanOrEqual: function (a, b) {
                return a.v <= b.v;
            },
            op_GreaterThanOrEqual: function (a, b) {
                return a.v >= b.v;
            },
            op_Equality: function (a, b) {
                return a.v === b.v;
            },
            op_Inequality: function (a, b) {
                return a.v !== b.v;
            },
            getDefaultValue: function () { return new Bridge.ClientTest.Batch4.NullableTests.MyType(); }
        },
        v: 0,
        $ctor1: function (v) {
            this.$initialize();
            this.v = v;
        },
        ctor: function () {
            this.$initialize();
        },
        getHashCode: function () {
            var h = Bridge.addHash([2035605181, this.v]);
            return h;
        },
        equals: function (o) {
            if (!Bridge.is(o, Bridge.ClientTest.Batch4.NullableTests.MyType)) {
                return false;
            }
            return Bridge.equals(this.v, o.v);
        },
        $clone: function (to) {
            var s = to || new Bridge.ClientTest.Batch4.NullableTests.MyType();
            s.v = this.v;
            return s;
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.NumberFormatInfoTests", {
        typePropertiesAreCorrect: function () {
            var format = System.Globalization.NumberFormatInfo.invariantInfo;
            Bridge.Test.NUnit.Assert.areEqual("System.Globalization.NumberFormatInfo", Bridge.Reflection.getTypeFullName(System.Globalization.NumberFormatInfo));
            Bridge.Test.NUnit.Assert.true(Bridge.Reflection.isClass(System.Globalization.NumberFormatInfo));
            Bridge.Test.NUnit.Assert.true(Bridge.hasValue(format));
            Bridge.Test.NUnit.Assert.areEqual(System.Array.init([System.IFormatProvider, System.ICloneable], Function), Bridge.Reflection.getInterfaces(System.Globalization.NumberFormatInfo));
        },
        getFormatWorks: function () {
            var format = System.Globalization.NumberFormatInfo.invariantInfo;
            Bridge.Test.NUnit.Assert.areEqual(null, Bridge.unbox(format.getFormat(System.Int32)));
            Bridge.Test.NUnit.Assert.areEqual(format, Bridge.unbox(format.getFormat(System.Globalization.NumberFormatInfo)));
        },
        invariantWorks: function () {
            var format = System.Globalization.NumberFormatInfo.invariantInfo;
            Bridge.Test.NUnit.Assert.areEqual("NaN", format.nanSymbol);
            Bridge.Test.NUnit.Assert.areEqual("-", format.negativeSign);
            Bridge.Test.NUnit.Assert.areEqual("+", format.positiveSign);
            Bridge.Test.NUnit.Assert.areEqual("-Infinity", format.negativeInfinitySymbol);
            Bridge.Test.NUnit.Assert.areEqual("Infinity", format.positiveInfinitySymbol);

            Bridge.Test.NUnit.Assert.areEqual("%", format.percentSymbol);
            Bridge.Test.NUnit.Assert.areEqual(System.Array.init([3], System.Int32), format.percentGroupSizes);
            Bridge.Test.NUnit.Assert.areEqual(2, format.percentDecimalDigits);
            Bridge.Test.NUnit.Assert.areEqual(".", format.percentDecimalSeparator);
            Bridge.Test.NUnit.Assert.areEqual(",", format.percentGroupSeparator);
            Bridge.Test.NUnit.Assert.areEqual(0, format.percentPositivePattern);
            Bridge.Test.NUnit.Assert.areEqual(0, format.percentNegativePattern);

            // "�"
            Bridge.Test.NUnit.Assert.areEqual(String.fromCharCode(164), format.currencySymbol);
            Bridge.Test.NUnit.Assert.areEqual(System.Array.init([3], System.Int32), format.currencyGroupSizes);
            Bridge.Test.NUnit.Assert.areEqual(2, format.currencyDecimalDigits);
            Bridge.Test.NUnit.Assert.areEqual(".", format.currencyDecimalSeparator);
            Bridge.Test.NUnit.Assert.areEqual(",", format.currencyGroupSeparator);
            Bridge.Test.NUnit.Assert.areEqual(0, format.currencyNegativePattern);
            Bridge.Test.NUnit.Assert.areEqual(0, format.currencyPositivePattern);

            Bridge.Test.NUnit.Assert.areEqual(System.Array.init([3], System.Int32), format.numberGroupSizes);
            Bridge.Test.NUnit.Assert.areEqual(2, format.numberDecimalDigits);
            Bridge.Test.NUnit.Assert.areEqual(".", format.numberDecimalSeparator);
            Bridge.Test.NUnit.Assert.areEqual(",", format.numberGroupSeparator);
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.PropertyAccessorTests", {
        accessorsCanBeInvokedInstance: function () {
            var c = new Bridge.ClientTest.Batch4.PropertyAccessorTests.C1();

            c.P1 = 42;
            Bridge.Test.NUnit.Assert.areEqual$1(41, c.F1, "F1 value");

            c.F1 = 15;
            Bridge.Test.NUnit.Assert.areEqual$1(16, c.P1, "P1 value");

            c.F2 = 17;
            Bridge.Test.NUnit.Assert.areEqual$1(18, c.P2, "P2 value");

            c.P3 = 12;
            Bridge.Test.NUnit.Assert.areEqual$1(11, c.F3, "F3 value");
        },
        accessorsCanBeInvokedStatic: function () {
            Bridge.ClientTest.Batch4.PropertyAccessorTests.C1.PS1 = 42;
            Bridge.Test.NUnit.Assert.areEqual$1(41, Bridge.ClientTest.Batch4.PropertyAccessorTests.C1.FS1, "FS1 value");

            Bridge.ClientTest.Batch4.PropertyAccessorTests.C1.FS1 = 15;
            Bridge.Test.NUnit.Assert.areEqual$1(16, Bridge.ClientTest.Batch4.PropertyAccessorTests.C1.PS1, "PS1 value");

            Bridge.ClientTest.Batch4.PropertyAccessorTests.C1.FS2 = 17;
            Bridge.Test.NUnit.Assert.areEqual$1(18, Bridge.ClientTest.Batch4.PropertyAccessorTests.C1.PS2, "PS2 value");

            Bridge.ClientTest.Batch4.PropertyAccessorTests.C1.PS3 = 12;
            Bridge.Test.NUnit.Assert.areEqual$1(11, Bridge.ClientTest.Batch4.PropertyAccessorTests.C1.FS3, "FS3 value");
        },
        accessorsCanBeInvokedGeneric: function () {
            var c = new (Bridge.ClientTest.Batch4.PropertyAccessorTests.C2$1(System.Int32))();

            c.P1 = 42;
            Bridge.Test.NUnit.Assert.areEqual$1(41, c.F1, "F1 value");

            c.F1 = 15;
            Bridge.Test.NUnit.Assert.areEqual$1(16, c.P1, "P1 value");

            c.F2 = 17;
            Bridge.Test.NUnit.Assert.areEqual$1(18, c.P2, "P2 value");

            c.P3 = 12;
            Bridge.Test.NUnit.Assert.areEqual$1(11, c.F3, "F3 value");
        },
        accessorsCanBeInvokedGenericStatic: function () {
            Bridge.ClientTest.Batch4.PropertyAccessorTests.C2$1(System.Int32).PS1 = 42;
            Bridge.Test.NUnit.Assert.areEqual$1(41, Bridge.ClientTest.Batch4.PropertyAccessorTests.C2$1(System.Int32).FS1, "FS1 value");

            Bridge.ClientTest.Batch4.PropertyAccessorTests.C2$1(System.Int32).FS1 = 15;
            Bridge.Test.NUnit.Assert.areEqual$1(16, Bridge.ClientTest.Batch4.PropertyAccessorTests.C2$1(System.Int32).PS1, "PS1 value");

            Bridge.ClientTest.Batch4.PropertyAccessorTests.C2$1(System.Int32).FS2 = 17;
            Bridge.Test.NUnit.Assert.areEqual$1(18, Bridge.ClientTest.Batch4.PropertyAccessorTests.C2$1(System.Int32).PS2, "PS2 value");

            Bridge.ClientTest.Batch4.PropertyAccessorTests.C2$1(System.Int32).PS3 = 12;
            Bridge.Test.NUnit.Assert.areEqual$1(11, Bridge.ClientTest.Batch4.PropertyAccessorTests.C2$1(System.Int32).FS3, "FS3 value");
        },
        baseAccessorsCanBeInvoked: function () {
            var d = new Bridge.ClientTest.Batch4.PropertyAccessorTests.D3();

            d.P1 = 42;
            Bridge.Test.NUnit.Assert.areEqual$1(41, d.F1, "F1 value");

            d.F1 = 15;
            Bridge.Test.NUnit.Assert.areEqual$1(16, d.P1, "P1 value");

            d.F2 = 17;
            Bridge.Test.NUnit.Assert.areEqual$1(18, d.P2, "P2 value");

            d.P3 = 12;
            Bridge.Test.NUnit.Assert.areEqual$1(11, d.F3, "F3 value");
        },
        baseAccessorsCanBeInvokedGeneric: function () {
            var d = new (Bridge.ClientTest.Batch4.PropertyAccessorTests.D4$1(System.Int32))();

            d.P1 = 42;
            Bridge.Test.NUnit.Assert.areEqual$1(41, d.F1, "F1 value");

            d.F1 = 15;
            Bridge.Test.NUnit.Assert.areEqual$1(16, d.P1, "P1 value");

            d.F2 = 17;
            Bridge.Test.NUnit.Assert.areEqual$1(18, d.P2, "P2 value");

            d.P3 = 12;
            Bridge.Test.NUnit.Assert.areEqual$1(11, d.F3, "F3 value");
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.PropertyAccessorTests.B3", {
        F1: 0,
        F2: 0,
        F3: 0,
        config: {
            properties: {
                P1: {
                    get: function () {
                        return this.F1;
                    },
                    set: function (value) {
                        this.F1 = value;
                    }
                },
                P2: {
                    get: function () {
                        return this.F2;
                    }
                },
                P3: {
                    set: function (value) {
                        this.F3 = value;
                    }
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.PropertyAccessorTests.B4$1", function (T) { return {
        F1: Bridge.getDefaultValue(T),
        F2: Bridge.getDefaultValue(T),
        F3: Bridge.getDefaultValue(T),
        config: {
            properties: {
                P1: {
                    get: function () {
                        return this.F1;
                    },
                    set: function (value) {
                        this.F1 = value;
                    }
                },
                P2: {
                    get: function () {
                        return this.F2;
                    }
                },
                P3: {
                    set: function (value) {
                        this.F3 = value;
                    }
                }
            }
        }
    }; });

    Bridge.define("Bridge.ClientTest.Batch4.PropertyAccessorTests.C1", {
        statics: {
            FS1: 0,
            FS2: 0,
            FS3: 0,
            config: {
                properties: {
                    PS1: {
                        get: function () {
                            return ((Bridge.ClientTest.Batch4.PropertyAccessorTests.C1.FS1 + 1) | 0);
                        },
                        set: function (value) {
                            Bridge.ClientTest.Batch4.PropertyAccessorTests.C1.FS1 = (value - 1) | 0;
                        }
                    },
                    PS2: {
                        get: function () {
                            return ((Bridge.ClientTest.Batch4.PropertyAccessorTests.C1.FS2 + 1) | 0);
                        }
                    },
                    PS3: {
                        set: function (value) {
                            Bridge.ClientTest.Batch4.PropertyAccessorTests.C1.FS3 = (value - 1) | 0;
                        }
                    }
                }
            }
        },
        F1: 0,
        F2: 0,
        F3: 0,
        config: {
            properties: {
                P1: {
                    get: function () {
                        return ((this.F1 + 1) | 0);
                    },
                    set: function (value) {
                        this.F1 = (value - 1) | 0;
                    }
                },
                P2: {
                    get: function () {
                        return ((this.F2 + 1) | 0);
                    }
                },
                P3: {
                    set: function (value) {
                        this.F3 = (value - 1) | 0;
                    }
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.PropertyAccessorTests.C2$1", function (T) { return {
        statics: {
            FS1: Bridge.getDefaultValue(T),
            FS2: Bridge.getDefaultValue(T),
            FS3: Bridge.getDefaultValue(T),
            config: {
                properties: {
                    PS1: {
                        get: function () {
                            return ((Bridge.ClientTest.Batch4.PropertyAccessorTests.C2$1(T).FS1 + 1) | 0);
                        },
                        set: function (value) {
                            Bridge.ClientTest.Batch4.PropertyAccessorTests.C2$1(T).FS1 = value - 1;
                        }
                    },
                    PS2: {
                        get: function () {
                            return ((Bridge.ClientTest.Batch4.PropertyAccessorTests.C2$1(T).FS2 + 1) | 0);
                        }
                    },
                    PS3: {
                        set: function (value) {
                            Bridge.ClientTest.Batch4.PropertyAccessorTests.C2$1(T).FS3 = value - 1;
                        }
                    }
                }
            }
        },
        F1: Bridge.getDefaultValue(T),
        F2: Bridge.getDefaultValue(T),
        F3: Bridge.getDefaultValue(T),
        config: {
            properties: {
                P1: {
                    get: function () {
                        return ((this.F1 + 1) | 0);
                    },
                    set: function (value) {
                        this.F1 = value - 1;
                    }
                },
                P2: {
                    get: function () {
                        return ((this.F2 + 1) | 0);
                    }
                },
                P3: {
                    set: function (value) {
                        this.F3 = value - 1;
                    }
                }
            }
        }
    }; });

    Bridge.define("Bridge.ClientTest.Batch4.RandomTests", {
        typePropertiesAreCorrect: function () {
            var rand = new System.Random.ctor();
            Bridge.Test.NUnit.Assert.areEqual("System.Random", Bridge.Reflection.getTypeFullName(System.Random));
            Bridge.Test.NUnit.Assert.true(Bridge.Reflection.isClass(System.Random));
            Bridge.Test.NUnit.Assert.true(Bridge.hasValue(rand));
        },
        defaultConstructorWorks: function () {
            var rand = new System.Random.ctor();
        },
        seedConstructorWorks: function () {
            var rand = new System.Random.$ctor1(854);
        },
        nextWorks: function () {
            var rand = new System.Random.ctor();
            for (var i = 0; i < 10; i = (i + 1) | 0) {
                var randomNumber = rand.next();
                Bridge.Test.NUnit.Assert.true$1(randomNumber >= 0, randomNumber + " is greater or equal to 0");
                Bridge.Test.NUnit.Assert.true$1(randomNumber <= 2147483647, randomNumber + " is less than or equal to int.MaxValue");
            }
        },
        nextWithMaxWorks: function () {
            var rand = new System.Random.ctor();
            for (var i = 0; i < 10; i = (i + 1) | 0) {
                var randomNumber = rand.next$1(5);
                Bridge.Test.NUnit.Assert.true$1(randomNumber >= 0, randomNumber + " is greater or equal to 0");
                Bridge.Test.NUnit.Assert.true$1(randomNumber < 5, randomNumber + " is smaller than 5");
            }
        },
        nextWithMinAndMaxWorks: function () {
            var rand = new System.Random.ctor();
            for (var i = 0; i < 10; i = (i + 1) | 0) {
                var randomNumber = rand.next$2(5, 10);
                Bridge.Test.NUnit.Assert.true$1(randomNumber >= 5, randomNumber + " is greater or equal to 5");
                Bridge.Test.NUnit.Assert.true$1(randomNumber < 10, randomNumber + " is smaller than 10");
            }
        },
        nextDoubleWorks: function () {
            var rand = new System.Random.ctor();
            for (var i = 0; i < 10; i = (i + 1) | 0) {
                var randomNumber = rand.nextDouble();
                Bridge.Test.NUnit.Assert.true$1(randomNumber >= 0.0, System.Double.format(randomNumber, 'G') + " is greater or equal to 0.0");
                Bridge.Test.NUnit.Assert.true$1(randomNumber < 1.0, System.Double.format(randomNumber, 'G') + " is smaller than 1.0");
            }
        },
        nextBytesWorks: function () {
            var rand = new System.Random.$ctor1(1447849172);
            var bytes = System.Array.init(150, 0, System.Byte);
            rand.nextBytes(bytes);
            for (var i = 0; i < bytes.length; i = (i + 1) | 0) {
                Bridge.Test.NUnit.Assert.true$1(bytes[System.Array.index(i, bytes)] >= 0, "a: " + bytes[System.Array.index(i, bytes)] + " is greater or equal to " + 0);
                Bridge.Test.NUnit.Assert.true$1(bytes[System.Array.index(i, bytes)] <= 255, "a: " + bytes[System.Array.index(i, bytes)] + " is smaller than or equal to " + 255);
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.Reflection.AssemblyTests", {
        config: {
            properties: {
                ImportedModuleTestCase: {
                    get: function () {
                        
	var x = {
		Foo: {
			Bar: {
				Inner: {
					OtherFunction: function() { }
				},
				Something: function() { }
			},
			baz: function() {
			},
			Bar2: 0
		}
	};
	x.Foo.baz.Test = function() {};
	return x;
                    }
                },
                MscorlibWithVersion: {
                    get: function () {
                        return "mscorlib";
                    }
                },
                AssemblyWithVersion: {
                    get: function () {
                        return "Bridge.ClientTest.Batch4";
                    }
                }
            }
        },
        getExecutingAssemblyWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual(this.AssemblyWithVersion, $asm.name);
        },
        getAssemblyForTypeWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual(this.MscorlibWithVersion, Bridge.Reflection.getTypeAssembly(System.Int32).name);
            Bridge.Test.NUnit.Assert.areEqual(this.AssemblyWithVersion, Bridge.Reflection.getTypeAssembly(Bridge.ClientTest.Batch4.Reflection.AssemblyTests).name);
        },
        fullNameWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual(this.MscorlibWithVersion, Bridge.Reflection.getTypeAssembly(System.Int32).name);
            Bridge.Test.NUnit.Assert.areEqual(this.AssemblyWithVersion, Bridge.Reflection.getTypeAssembly(Bridge.ClientTest.Batch4.Reflection.AssemblyTests).name);
        },
        toStringWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual(this.MscorlibWithVersion, Bridge.Reflection.getTypeAssembly(System.Int32).toString());
            Bridge.Test.NUnit.Assert.areEqual(this.AssemblyWithVersion, Bridge.Reflection.getTypeAssembly(Bridge.ClientTest.Batch4.Reflection.AssemblyTests).toString());
        },
        getTypesWorks: function () {
            var $t;
            var types = new (System.Collections.Generic.List$1(System.String))();
            $t = Bridge.getEnumerator(Bridge.Reflection.getAssemblyTypes($asm));
            try {
                while ($t.moveNext()) {
                    var t = $t.Current;
                    types.add(Bridge.Reflection.getTypeFullName(t));
                }
            }finally {
                if (Bridge.is($t, System.IDisposable)) {
                    $t.System$IDisposable$dispose();
                }
            }Bridge.Test.NUnit.Assert.true(types.contains(Bridge.Reflection.getTypeFullName(Bridge.ClientTest.Batch4.Reflection.AssemblyTests)));
            Bridge.Test.NUnit.Assert.true(types.contains(Bridge.Reflection.getTypeFullName(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C1)));
        },
        getTypesWithImportedModuleWorks: function () {
            var asm = this.ImportedModuleTestCase;
            var types = Bridge.Reflection.getAssemblyTypes(asm);
            Bridge.Test.NUnit.Assert.areEqual$1(3, types.length, "Length");
            Bridge.Test.NUnit.Assert.true$1(System.Array.contains(types, Bridge.cast(asm.Foo.Bar.Inner.OtherFunction, Function), Function), "#1");
            Bridge.Test.NUnit.Assert.true$1(System.Array.contains(types, Bridge.cast(asm.Foo.Bar.Something, Function), Function), "#2");
            Bridge.Test.NUnit.Assert.true$1(System.Array.contains(types, Bridge.cast(asm.Foo.baz.Test, Function), Function), "#3");
        },
        getTypeWorks: function () {
            Bridge.Test.NUnit.Assert.true(Bridge.referenceEquals(Bridge.Reflection.getType(Bridge.Reflection.getTypeFullName(Bridge.ClientTest.Batch4.Reflection.AssemblyTests), $asm), Bridge.ClientTest.Batch4.Reflection.AssemblyTests));
            Bridge.Test.NUnit.Assert.true(Bridge.Reflection.getType(Bridge.Reflection.getTypeFullName(System.Collections.Generic.Dictionary$2), $asm) == null);
            Bridge.Test.NUnit.Assert.true(Bridge.referenceEquals(Bridge.Reflection.getType(Bridge.Reflection.getTypeFullName(System.Collections.Generic.Dictionary$2), Bridge.Reflection.getTypeAssembly(System.Int32)), System.Collections.Generic.Dictionary$2));
        },
        getTypeWorksWithGenerics: function () {
            Bridge.Test.NUnit.Assert.true(Bridge.referenceEquals(Bridge.Reflection.getType(Bridge.Reflection.getTypeFullName(Bridge.ClientTest.Batch4.Reflection.AssemblyTests.G$2), $asm), Bridge.ClientTest.Batch4.Reflection.AssemblyTests.G$2));
            Bridge.Test.NUnit.Assert.true(Bridge.referenceEquals(Bridge.Reflection.getType(Bridge.Reflection.getTypeFullName(Bridge.ClientTest.Batch4.Reflection.AssemblyTests.G$2(System.Int32,System.String)), $asm), Bridge.ClientTest.Batch4.Reflection.AssemblyTests.G$2(System.Int32,System.String)));
        },
        getTypeWithImportedModuleWorks: function () {
            var asm = this.ImportedModuleTestCase;
            Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(Bridge.Reflection.getType("Foo.Bar.Inner.OtherFunction", asm), Bridge.cast(asm.Foo.Bar.Inner.OtherFunction, Function)), "#1");
            Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(Bridge.Reflection.getType("Foo.Bar.Something", asm), Bridge.cast(asm.Foo.Bar.Something, Function)), "#2");
            Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(Bridge.Reflection.getType("Foo.baz.Test", asm), Bridge.cast(asm.Foo.baz.Test, Function)), "#3");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.getType("Foo.Bar", asm) == null, "#4");
        },
        assemblyOfBuiltInTypes: function () {
            Bridge.Test.NUnit.Assert.areEqual(this.MscorlibWithVersion, Bridge.Reflection.getTypeAssembly(System.DateTime).name);
            Bridge.Test.NUnit.Assert.areEqual(this.MscorlibWithVersion, Bridge.Reflection.getTypeAssembly(System.Double).name);
            Bridge.Test.NUnit.Assert.areEqual(this.MscorlibWithVersion, Bridge.Reflection.getTypeAssembly(System.Boolean).name);
            Bridge.Test.NUnit.Assert.areEqual(this.MscorlibWithVersion, Bridge.Reflection.getTypeAssembly(System.String).name);
            Bridge.Test.NUnit.Assert.areEqual(this.MscorlibWithVersion, Bridge.Reflection.getTypeAssembly(Function).name);
            Bridge.Test.NUnit.Assert.areEqual(this.MscorlibWithVersion, Bridge.Reflection.getTypeAssembly(System.Array.type(System.Int32)).name);
        },
        createInstanceWorks: function () {
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(Bridge.Reflection.createAssemblyInstance(Bridge.Reflection.getTypeAssembly(Bridge.ClientTest.Batch4.Reflection.AssemblyTests.C), Bridge.Reflection.getTypeFullName(Bridge.ClientTest.Batch4.Reflection.AssemblyTests.C)), Bridge.ClientTest.Batch4.Reflection.AssemblyTests.C), "#1");
            Bridge.Test.NUnit.Assert.areEqual$1(0, Bridge.unbox(Bridge.Reflection.createAssemblyInstance(Bridge.Reflection.getTypeAssembly(System.Int32), Bridge.Reflection.getTypeFullName(System.Int32))), "#2");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.createAssemblyInstance(Bridge.Reflection.getTypeAssembly(Bridge.ClientTest.Batch4.Reflection.AssemblyTests.C), "NonExistentType") == null, "#3");
        },
        getCustomAttributesWorks: function () {
            var $t, $t1;
            var asm = $asm;
            $t = Bridge.getEnumerator(System.Array.init([asm.getCustomAttributes(), asm.getCustomAttributes(true), asm.getCustomAttributes(false)], System.Array.type(System.Object)));
            try {
                while ($t.moveNext()) {
                    var a = $t.Current;
                    Bridge.Test.NUnit.Assert.false(a.some($asm.$.Bridge.ClientTest.Batch4.Reflection.AssemblyTests.f1));
                    var a2 = a.filter($asm.$.Bridge.ClientTest.Batch4.Reflection.AssemblyTests.f2);
                    Bridge.Test.NUnit.Assert.areEqual(1, a2.length);
                    Bridge.Test.NUnit.Assert.true(Bridge.cast(a2[System.Array.index(0, a2)], Bridge.ClientTest.Batch4.Reflection.AssemblyTests.A2Attribute).X === 64);
                    Bridge.Test.NUnit.Assert.true(Bridge.cast(a2[System.Array.index(0, a2)], Bridge.ClientTest.Batch4.Reflection.AssemblyTests.A2Attribute).P === 23);

                    var a3 = a.filter($asm.$.Bridge.ClientTest.Batch4.Reflection.AssemblyTests.f3);
                    Bridge.Test.NUnit.Assert.areEqual(1, a3.length);
                    Bridge.Test.NUnit.Assert.true(Bridge.cast(a3[System.Array.index(0, a3)], Bridge.ClientTest.Batch4.Reflection.AssemblyTests.A3Attribute).X === 15);
                    Bridge.Test.NUnit.Assert.true(Bridge.cast(a3[System.Array.index(0, a3)], Bridge.ClientTest.Batch4.Reflection.AssemblyTests.A3Attribute).P === 45);
                }
            }finally {
                if (Bridge.is($t, System.IDisposable)) {
                    $t.System$IDisposable$dispose();
                }
            }
            $t1 = Bridge.getEnumerator(System.Array.init([asm.getCustomAttributes(Bridge.ClientTest.Batch4.Reflection.AssemblyTests.A2Attribute), asm.getCustomAttributes(Bridge.ClientTest.Batch4.Reflection.AssemblyTests.A2Attribute, true), asm.getCustomAttributes(Bridge.ClientTest.Batch4.Reflection.AssemblyTests.A2Attribute, false)], System.Array.type(System.Object)));
            try {
                while ($t1.moveNext()) {
                    var a1 = $t1.Current;
                    Bridge.Test.NUnit.Assert.areEqual(1, a1.length);
                    Bridge.Test.NUnit.Assert.true(Bridge.cast(a1[System.Array.index(0, a1)], Bridge.ClientTest.Batch4.Reflection.AssemblyTests.A2Attribute).X === 64);
                    Bridge.Test.NUnit.Assert.true(Bridge.cast(a1[System.Array.index(0, a1)], Bridge.ClientTest.Batch4.Reflection.AssemblyTests.A2Attribute).P === 23);
                }
            }finally {
                if (Bridge.is($t1, System.IDisposable)) {
                    $t1.System$IDisposable$dispose();
                }
            }},
        loadCanReturnReferenceToLoadedAssembly: function () {
            Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(Bridge.Reflection.load("Bridge.ClientTest.Batch4"), $asm), "ClientTest");
            Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(Bridge.Reflection.load("mscorlib"), Bridge.Reflection.getTypeAssembly(System.Int32)), "mscorlib");
        },
        getManifestResourceNamesWorks: function () {
            var names = $asm.getManifestResourceNames();
            names.sort($asm.$.Bridge.ClientTest.Batch4.Reflection.AssemblyTests.f4);
            Bridge.Test.NUnit.Assert.areEqual(System.Array.init(["Bridge.ClientTest.Batch4.Reflection.Resource1.bin", "Bridge.ClientTest.Batch4.Reflection.Resource2.bin"], System.String), names);
        },
        getManifestResourceDataAsBase64WithoutTypeWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual$1("AAECAwQFBgc=", $asm.getManifestResourceDataAsBase64("Bridge.ClientTest.Batch4.Reflection.Resource1.bin"), "#1");
            Bridge.Test.NUnit.Assert.areEqual$1("EBESExQV", $asm.getManifestResourceDataAsBase64("Bridge.ClientTest.Batch4.Reflection.Resource2.bin"), "#2");
            Bridge.Test.NUnit.Assert.null$1($asm.getManifestResourceDataAsBase64("NonExistent"), "#3");
        },
        getManifestResourceDataAsBase64WithTypeWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual$1("AAECAwQFBgc=", $asm.getManifestResourceDataAsBase64(Bridge.ClientTest.Batch4.Reflection.AssemblyTests, "Resource1.bin"), "#1");
            Bridge.Test.NUnit.Assert.areEqual$1("EBESExQV", $asm.getManifestResourceDataAsBase64(Bridge.ClientTest.Batch4.Reflection.AssemblyTests, "Resource2.bin"), "#2");
            Bridge.Test.NUnit.Assert.null$1($asm.getManifestResourceDataAsBase64(Bridge.ClientTest.Batch4.Reflection.AssemblyTests, "NonExistent"), "#3");
        },
        getManifestResourceDataWithoutTypeWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual$1(System.Array.init([0, 1, 2, 3, 4, 5, 6, 7], System.Int32), $asm.getManifestResourceData("Bridge.ClientTest.Batch4.Reflection.Resource1.bin"), "#1");
            Bridge.Test.NUnit.Assert.areEqual$1(System.Array.init([16, 17, 18, 19, 20, 21], System.Int32), $asm.getManifestResourceData("Bridge.ClientTest.Batch4.Reflection.Resource2.bin"), "#2");
            Bridge.Test.NUnit.Assert.null$1($asm.getManifestResourceData("NonExistent"), "#3");
        },
        getManifestResourceDataWithTypeWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual$1(System.Array.init([0, 1, 2, 3, 4, 5, 6, 7], System.Int32), $asm.getManifestResourceData(Bridge.ClientTest.Batch4.Reflection.AssemblyTests, "Resource1.bin"), "#1");
            Bridge.Test.NUnit.Assert.areEqual$1(System.Array.init([16, 17, 18, 19, 20, 21], System.Int32), $asm.getManifestResourceData(Bridge.ClientTest.Batch4.Reflection.AssemblyTests, "Resource2.bin"), "#2");
            Bridge.Test.NUnit.Assert.null$1($asm.getManifestResourceData(Bridge.ClientTest.Batch4.Reflection.AssemblyTests, "NonExistent"), "#3");
        }
    });

    Bridge.ns("Bridge.ClientTest.Batch4.Reflection.AssemblyTests", $asm.$);

    Bridge.apply($asm.$.Bridge.ClientTest.Batch4.Reflection.AssemblyTests, {
        f1: function (x) {
            return Bridge.referenceEquals(Bridge.Reflection.getTypeName(Bridge.getType(x)), "A1Attribute");
        },
        f2: function (x) {
            return Bridge.is(x, Bridge.ClientTest.Batch4.Reflection.AssemblyTests.A2Attribute);
        },
        f3: function (x) {
            return Bridge.is(x, Bridge.ClientTest.Batch4.Reflection.AssemblyTests.A3Attribute);
        },
        f4: function (a, b) {
            return System.String.compare(a, b);
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.Reflection.AssemblyTests.A2Attribute", {
        inherits: [System.Attribute],
        config: {
            properties: {
                X: 0,
                P: 0
            }
        },
        ctor: function () {
            this.$initialize();
            System.Attribute.ctor.call(this);
        },
        $ctor1: function (x) {
            this.$initialize();
            System.Attribute.ctor.call(this);
            this.X = x;
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.Reflection.AssemblyTests.A3Attribute", {
        inherits: [System.Attribute],
        config: {
            properties: {
                X: 0,
                P: 0
            }
        },
        ctor: function () {
            this.$initialize();
            System.Attribute.ctor.call(this);
        },
        $ctor1: function (x) {
            this.$initialize();
            System.Attribute.ctor.call(this);
            this.X = x;
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.Reflection.AssemblyTests.C");

    Bridge.define("Bridge.ClientTest.Batch4.Reflection.AssemblyTests.G$2", function (T1, T2) { return {

    }; });

    Bridge.define("Bridge.ClientTest.Batch4.Reflection.AttributeTests", {
        canGetCustomTypeAttributesForTypeWithNoAttributes: function () {
            var arr = Bridge.Reflection.getAttributes(Bridge.ClientTest.Batch4.Reflection.AttributeTests.C1, null, false);
            Bridge.Test.NUnit.Assert.areEqual$1(0, arr.length, "Should have no attributes");
        },
        canGetCustomTypeAttributesForClassWithAttributes: function () {
            var arr = Bridge.Reflection.getAttributes(Bridge.ClientTest.Batch4.Reflection.AttributeTests.C2, null, false);
            Bridge.Test.NUnit.Assert.areEqual$1(2, arr.length, "Should have two attributes");
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(arr[System.Array.index(0, arr)], Bridge.ClientTest.Batch4.Reflection.AttributeTests.A1Attribute) || Bridge.is(arr[System.Array.index(1, arr)], Bridge.ClientTest.Batch4.Reflection.AttributeTests.A1Attribute), "A1 should exist");
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(arr[System.Array.index(0, arr)], Bridge.ClientTest.Batch4.Reflection.AttributeTests.A2Attribute) || Bridge.is(arr[System.Array.index(1, arr)], Bridge.ClientTest.Batch4.Reflection.AttributeTests.A2Attribute), "A2 should exist");
            var a1 = Bridge.cast((Bridge.is(arr[System.Array.index(0, arr)], Bridge.ClientTest.Batch4.Reflection.AttributeTests.A1Attribute) ? arr[System.Array.index(0, arr)] : arr[System.Array.index(1, arr)]), Bridge.ClientTest.Batch4.Reflection.AttributeTests.A1Attribute);
            Bridge.Test.NUnit.Assert.areEqual(1, a1.V);
            var a2 = Bridge.cast((Bridge.is(arr[System.Array.index(0, arr)], Bridge.ClientTest.Batch4.Reflection.AttributeTests.A2Attribute) ? arr[System.Array.index(0, arr)] : arr[System.Array.index(1, arr)]), Bridge.ClientTest.Batch4.Reflection.AttributeTests.A2Attribute);
            Bridge.Test.NUnit.Assert.areEqual(2, a2.V);
        },
        nonScriptableAttributesAreNotIncluded: function () {
            var arr = Bridge.Reflection.getAttributes(Bridge.ClientTest.Batch4.Reflection.AttributeTests.C19, null, false);
            Bridge.Test.NUnit.Assert.areEqual$1(1, arr.length, "Should have one attribute");
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(arr[System.Array.index(0, arr)], Bridge.ClientTest.Batch4.Reflection.AttributeTests.A1Attribute), "A1 should exist");
        },
        canGetCustomTypeAttributesForInterfaceWithAttributes: function () {
            var arr = Bridge.Reflection.getAttributes(Bridge.ClientTest.Batch4.Reflection.AttributeTests.I1, null, false);
            Bridge.Test.NUnit.Assert.areEqual$1(2, arr.length, "Should have two attributes");
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(arr[System.Array.index(0, arr)], Bridge.ClientTest.Batch4.Reflection.AttributeTests.A1Attribute) || Bridge.is(arr[System.Array.index(1, arr)], Bridge.ClientTest.Batch4.Reflection.AttributeTests.A1Attribute), "A1 should exist");
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(arr[System.Array.index(0, arr)], Bridge.ClientTest.Batch4.Reflection.AttributeTests.A2Attribute) || Bridge.is(arr[System.Array.index(1, arr)], Bridge.ClientTest.Batch4.Reflection.AttributeTests.A2Attribute), "A2 should exist");
            var a1 = Bridge.cast((Bridge.is(arr[System.Array.index(0, arr)], Bridge.ClientTest.Batch4.Reflection.AttributeTests.A1Attribute) ? arr[System.Array.index(0, arr)] : arr[System.Array.index(1, arr)]), Bridge.ClientTest.Batch4.Reflection.AttributeTests.A1Attribute);
            Bridge.Test.NUnit.Assert.areEqual(1, a1.V);
            var a2 = Bridge.cast((Bridge.is(arr[System.Array.index(0, arr)], Bridge.ClientTest.Batch4.Reflection.AttributeTests.A2Attribute) ? arr[System.Array.index(0, arr)] : arr[System.Array.index(1, arr)]), Bridge.ClientTest.Batch4.Reflection.AttributeTests.A2Attribute);
            Bridge.Test.NUnit.Assert.areEqual(2, a2.V);
        },
        canGetCustomTypeAttributesForEnumWithAttributes: function () {
            var arr = Bridge.Reflection.getAttributes(Bridge.ClientTest.Batch4.Reflection.AttributeTests.E1, null, false);
            Bridge.Test.NUnit.Assert.areEqual$1(2, arr.length, "Should have two attributes");
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(arr[System.Array.index(0, arr)], Bridge.ClientTest.Batch4.Reflection.AttributeTests.A1Attribute) || Bridge.is(arr[System.Array.index(1, arr)], Bridge.ClientTest.Batch4.Reflection.AttributeTests.A1Attribute), "A1 should exist");
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(arr[System.Array.index(0, arr)], Bridge.ClientTest.Batch4.Reflection.AttributeTests.A2Attribute) || Bridge.is(arr[System.Array.index(1, arr)], Bridge.ClientTest.Batch4.Reflection.AttributeTests.A2Attribute), "A2 should exist");
            var a1 = Bridge.cast((Bridge.is(arr[System.Array.index(0, arr)], Bridge.ClientTest.Batch4.Reflection.AttributeTests.A1Attribute) ? arr[System.Array.index(0, arr)] : arr[System.Array.index(1, arr)]), Bridge.ClientTest.Batch4.Reflection.AttributeTests.A1Attribute);
            Bridge.Test.NUnit.Assert.areEqual(1, a1.V);
            var a2 = Bridge.cast((Bridge.is(arr[System.Array.index(0, arr)], Bridge.ClientTest.Batch4.Reflection.AttributeTests.A2Attribute) ? arr[System.Array.index(0, arr)] : arr[System.Array.index(1, arr)]), Bridge.ClientTest.Batch4.Reflection.AttributeTests.A2Attribute);
            Bridge.Test.NUnit.Assert.areEqual(2, a2.V);
        },
        inheritedFlagToGetCustomAttributesWorks: function () {
            var arr = Bridge.Reflection.getAttributes(Bridge.ClientTest.Batch4.Reflection.AttributeTests.C3, null, false);
            Bridge.Test.NUnit.Assert.areEqual$1(1, arr.length, "Should have one non-inherited attribute");
            Bridge.Test.NUnit.Assert.true(Bridge.is(arr[System.Array.index(0, arr)], Bridge.ClientTest.Batch4.Reflection.AttributeTests.A3Attribute));

            arr = Bridge.Reflection.getAttributes(Bridge.ClientTest.Batch4.Reflection.AttributeTests.C3, null, true);
            Bridge.Test.NUnit.Assert.areEqual$1(3, arr.length, "Should have three inherited attributes");
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(arr[System.Array.index(0, arr)], Bridge.ClientTest.Batch4.Reflection.AttributeTests.A1Attribute) || Bridge.is(arr[System.Array.index(1, arr)], Bridge.ClientTest.Batch4.Reflection.AttributeTests.A1Attribute) || Bridge.is(arr[System.Array.index(2, arr)], Bridge.ClientTest.Batch4.Reflection.AttributeTests.A1Attribute), "A1 should exist");
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(arr[System.Array.index(0, arr)], Bridge.ClientTest.Batch4.Reflection.AttributeTests.A2Attribute) || Bridge.is(arr[System.Array.index(1, arr)], Bridge.ClientTest.Batch4.Reflection.AttributeTests.A2Attribute) || Bridge.is(arr[System.Array.index(2, arr)], Bridge.ClientTest.Batch4.Reflection.AttributeTests.A2Attribute), "A2 should exist");
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(arr[System.Array.index(0, arr)], Bridge.ClientTest.Batch4.Reflection.AttributeTests.A3Attribute) || Bridge.is(arr[System.Array.index(1, arr)], Bridge.ClientTest.Batch4.Reflection.AttributeTests.A3Attribute) || Bridge.is(arr[System.Array.index(2, arr)], Bridge.ClientTest.Batch4.Reflection.AttributeTests.A3Attribute), "A3 should exist");
        },
        deepInheritanceWorks: function () {
            var arr = Bridge.Reflection.getAttributes(Bridge.ClientTest.Batch4.Reflection.AttributeTests.C4, null, true);
            Bridge.Test.NUnit.Assert.areEqual$1(4, arr.length, "Should have 4 attributes");
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(arr[System.Array.index(0, arr)], Bridge.ClientTest.Batch4.Reflection.AttributeTests.A1Attribute) || Bridge.is(arr[System.Array.index(1, arr)], Bridge.ClientTest.Batch4.Reflection.AttributeTests.A1Attribute) || Bridge.is(arr[System.Array.index(2, arr)], Bridge.ClientTest.Batch4.Reflection.AttributeTests.A1Attribute) || Bridge.is(arr[System.Array.index(3, arr)], Bridge.ClientTest.Batch4.Reflection.AttributeTests.A1Attribute), "A1 should exist");
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(arr[System.Array.index(0, arr)], Bridge.ClientTest.Batch4.Reflection.AttributeTests.A2Attribute) || Bridge.is(arr[System.Array.index(1, arr)], Bridge.ClientTest.Batch4.Reflection.AttributeTests.A2Attribute) || Bridge.is(arr[System.Array.index(2, arr)], Bridge.ClientTest.Batch4.Reflection.AttributeTests.A2Attribute) || Bridge.is(arr[System.Array.index(3, arr)], Bridge.ClientTest.Batch4.Reflection.AttributeTests.A2Attribute), "A2 should exist");
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(arr[System.Array.index(0, arr)], Bridge.ClientTest.Batch4.Reflection.AttributeTests.A3Attribute) || Bridge.is(arr[System.Array.index(1, arr)], Bridge.ClientTest.Batch4.Reflection.AttributeTests.A3Attribute) || Bridge.is(arr[System.Array.index(2, arr)], Bridge.ClientTest.Batch4.Reflection.AttributeTests.A3Attribute) || Bridge.is(arr[System.Array.index(3, arr)], Bridge.ClientTest.Batch4.Reflection.AttributeTests.A3Attribute), "A3 should exist");
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(arr[System.Array.index(0, arr)], Bridge.ClientTest.Batch4.Reflection.AttributeTests.A4Attribute) || Bridge.is(arr[System.Array.index(1, arr)], Bridge.ClientTest.Batch4.Reflection.AttributeTests.A4Attribute) || Bridge.is(arr[System.Array.index(2, arr)], Bridge.ClientTest.Batch4.Reflection.AttributeTests.A4Attribute) || Bridge.is(arr[System.Array.index(3, arr)], Bridge.ClientTest.Batch4.Reflection.AttributeTests.A4Attribute), "A4 should exist");
        },
        overridingSingleUseAttributeReplacesTheAttributeOnTheBaseClass: function () {
            var arr = Bridge.Reflection.getAttributes(Bridge.ClientTest.Batch4.Reflection.AttributeTests.C5, null, true);
            Bridge.Test.NUnit.Assert.areEqual$1(2, arr.length, "Should have 2 attributes");
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(arr[System.Array.index(0, arr)], Bridge.ClientTest.Batch4.Reflection.AttributeTests.A1Attribute) || Bridge.is(arr[System.Array.index(1, arr)], Bridge.ClientTest.Batch4.Reflection.AttributeTests.A1Attribute), "A1 should exist");
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(arr[System.Array.index(0, arr)], Bridge.ClientTest.Batch4.Reflection.AttributeTests.A2Attribute) || Bridge.is(arr[System.Array.index(1, arr)], Bridge.ClientTest.Batch4.Reflection.AttributeTests.A2Attribute), "A2 should exist");
            var a1 = Bridge.cast((Bridge.is(arr[System.Array.index(0, arr)], Bridge.ClientTest.Batch4.Reflection.AttributeTests.A1Attribute) ? arr[System.Array.index(0, arr)] : arr[System.Array.index(1, arr)]), Bridge.ClientTest.Batch4.Reflection.AttributeTests.A1Attribute);
            Bridge.Test.NUnit.Assert.areEqual(5, a1.V);
        },
        applyingNewInstanceOfMultipleUseAttributeAddsTheAttribute: function () {
            var arr = Bridge.Reflection.getAttributes(Bridge.ClientTest.Batch4.Reflection.AttributeTests.C6, null, true);
            Bridge.Test.NUnit.Assert.areEqual$1(3, arr.length, "Should have 2 attributes");
            Bridge.Test.NUnit.Assert.areEqual$1(arr.filter($asm.$.Bridge.ClientTest.Batch4.Reflection.AttributeTests.f1).length, 1, "Should have one A1");
            Bridge.Test.NUnit.Assert.areEqual$1(arr.filter($asm.$.Bridge.ClientTest.Batch4.Reflection.AttributeTests.f2).length, 2, "Should have two A2");
            var a2 = Bridge.cast(arr.filter($asm.$.Bridge.ClientTest.Batch4.Reflection.AttributeTests.f2), System.Array.type(Bridge.ClientTest.Batch4.Reflection.AttributeTests.A2Attribute));
            Bridge.Test.NUnit.Assert.true(a2[System.Array.index(0, a2)].V === 2 || a2[System.Array.index(1, a2)].V === 2);
            Bridge.Test.NUnit.Assert.true(a2[System.Array.index(0, a2)].V === 6 || a2[System.Array.index(1, a2)].V === 6);
        },
        nonInheritedAttributeIsNotInherited: function () {
            var arr = Bridge.Reflection.getAttributes(Bridge.ClientTest.Batch4.Reflection.AttributeTests.C8, null, true);
            Bridge.Test.NUnit.Assert.areEqual$1(0, arr.length, "Should not have any attributes");
        },
        getCustomAttributesTypeFilterWorks: function () {
            var arr = Bridge.Reflection.getAttributes(Bridge.ClientTest.Batch4.Reflection.AttributeTests.C9, Bridge.ClientTest.Batch4.Reflection.AttributeTests.A2Attribute, true);
            Bridge.Test.NUnit.Assert.areEqual$1(2, arr.length, "Should have 2 A2 attributes");
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(arr[System.Array.index(0, arr)], Bridge.ClientTest.Batch4.Reflection.AttributeTests.A2Attribute) && Bridge.is(arr[System.Array.index(1, arr)], Bridge.ClientTest.Batch4.Reflection.AttributeTests.A2Attribute), "Should only return A2 attributes");
            Bridge.Test.NUnit.Assert.true$1(Bridge.cast(arr[System.Array.index(0, arr)], Bridge.ClientTest.Batch4.Reflection.AttributeTests.A2Attribute).V === 8 || Bridge.cast(arr[System.Array.index(0, arr)], Bridge.ClientTest.Batch4.Reflection.AttributeTests.A2Attribute).V === 9, "Attribute members should be correct");
            Bridge.Test.NUnit.Assert.true$1(Bridge.cast(arr[System.Array.index(1, arr)], Bridge.ClientTest.Batch4.Reflection.AttributeTests.A2Attribute).V === 8 || Bridge.cast(arr[System.Array.index(1, arr)], Bridge.ClientTest.Batch4.Reflection.AttributeTests.A2Attribute).V === 9, "Attribute members should be correct");
        },
        getCustomAttributesWorksForOpenGenericClass: function () {
            var arr = Bridge.Reflection.getAttributes(Bridge.ClientTest.Batch4.Reflection.AttributeTests.C10$2, null, true);
            Bridge.Test.NUnit.Assert.areEqual$1(1, arr.length, "Should have one attribute");
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(arr[System.Array.index(0, arr)], Bridge.ClientTest.Batch4.Reflection.AttributeTests.A1Attribute), "Should be A1");
        },
        getCustomAttributesWorksForConstructedGenericClass: function () {
            var arr = Bridge.Reflection.getAttributes(Bridge.ClientTest.Batch4.Reflection.AttributeTests.C10$2(System.Int32,System.String), null, true);
            Bridge.Test.NUnit.Assert.areEqual$1(1, arr.length, "Should have one attribute");
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(arr[System.Array.index(0, arr)], Bridge.ClientTest.Batch4.Reflection.AttributeTests.A1Attribute), "Should be A1");
        },
        getCustomAttributesWorksForOpenGenericInterface: function () {
            var arr = Bridge.Reflection.getAttributes(Bridge.ClientTest.Batch4.Reflection.AttributeTests.I2$2, null, true);
            Bridge.Test.NUnit.Assert.areEqual$1(1, arr.length, "Should have one attribute");
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(arr[System.Array.index(0, arr)], Bridge.ClientTest.Batch4.Reflection.AttributeTests.A1Attribute), "Should be A1");
        },
        getCustomAttributesWorksForConstructedGenericInterface: function () {
            var arr = Bridge.Reflection.getAttributes(Bridge.ClientTest.Batch4.Reflection.AttributeTests.I2$2(System.Int32,System.String), null, true);
            Bridge.Test.NUnit.Assert.areEqual$1(1, arr.length, "Should have one attribute");
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(arr[System.Array.index(0, arr)], Bridge.ClientTest.Batch4.Reflection.AttributeTests.A1Attribute), "Should be A1");
        },
        allSupportedScalarTypesCanBeUsedAsAttributeArguments: function () {
            var $t;
            var a6 = Bridge.cast(($t = Bridge.Reflection.getAttributes(Bridge.ClientTest.Batch4.Reflection.AttributeTests.C11, null, false))[System.Array.index(0, $t)], Bridge.ClientTest.Batch4.Reflection.AttributeTests.A6Attribute);
            Bridge.Test.NUnit.Assert.areEqual$1(true, a6.B, "B");
            Bridge.Test.NUnit.Assert.areEqual$1(43, a6.Y, "Y");
            Bridge.Test.NUnit.Assert.areEqual$1(68, a6.C, "C");
            Bridge.Test.NUnit.Assert.areEqual$1(45.5, a6.D, "D");
            Bridge.Test.NUnit.Assert.areEqual$1(46.5, a6.F, "F");
            Bridge.Test.NUnit.Assert.areEqual$1(47, a6.I, "I");
            Bridge.Test.NUnit.Assert.true$1(a6.L.equals(System.Int64(48)), "L");
            Bridge.Test.NUnit.Assert.areEqual$1(49, a6.H, "H");
            Bridge.Test.NUnit.Assert.areEqual$1(Bridge.ClientTest.Batch4.Reflection.AttributeTests.E1.V1, a6.E, "E");
            Bridge.Test.NUnit.Assert.areEqual$1("Test_string", a6.S, "S");
            Bridge.Test.NUnit.Assert.areEqual$1(null, Bridge.unbox(a6.O), "O");
            Bridge.Test.NUnit.Assert.areEqual$1(System.String, a6.T, "T");
        },
        arraysCanBeUsedAsAttributeArguments: function () {
            var $t;
            var a7 = Bridge.cast(($t = Bridge.Reflection.getAttributes(Bridge.ClientTest.Batch4.Reflection.AttributeTests.C12, null, false))[System.Array.index(0, $t)], Bridge.ClientTest.Batch4.Reflection.AttributeTests.A7Attribute);
            Bridge.Test.NUnit.Assert.areEqual$1(System.Array.init([42, 17, 31], System.Int32), a7.I, "I");
            Bridge.Test.NUnit.Assert.areEqual$1(System.Array.init(["X", "Y2", "Z3"], System.String), a7.S, "S");
        },
        namedValuesEnumCanBeUsedAsAttributeArgument: function () {
            var $t;
            var a8 = Bridge.cast(($t = Bridge.Reflection.getAttributes(Bridge.ClientTest.Batch4.Reflection.AttributeTests.C13, null, false))[System.Array.index(0, $t)], Bridge.ClientTest.Batch4.Reflection.AttributeTests.A8Attribute);
            Bridge.Test.NUnit.Assert.areEqual$1("v2", a8.E, "E");
        },
        propertiesWithSetMethodsImplementedAsNormalMethodsCanBeSetInAttributeDeclaration: function () {
            var $t;
            var a = Bridge.cast(($t = Bridge.Reflection.getAttributes(Bridge.ClientTest.Batch4.Reflection.AttributeTests.C14, null, false))[System.Array.index(0, $t)], Bridge.ClientTest.Batch4.Reflection.AttributeTests.A9Attribute);
            Bridge.Test.NUnit.Assert.areEqual(42, a.P1);
        },
        propertiesWithSetMethodsImplementedAsInlineCodeCanBeSetInAttributeDeclaration: function () {
            var $t;
            var a = Bridge.cast(($t = Bridge.Reflection.getAttributes(Bridge.ClientTest.Batch4.Reflection.AttributeTests.C15, null, false))[System.Array.index(0, $t)], Bridge.ClientTest.Batch4.Reflection.AttributeTests.A9Attribute);
            Bridge.Test.NUnit.Assert.areEqual(18, a.$$XX$$);
        },
        propertiesImplementedAsFieldsCanBeAssignedInAttributeDeclaration: function () {
            var $t;
            var a = Bridge.cast(($t = Bridge.Reflection.getAttributes(Bridge.ClientTest.Batch4.Reflection.AttributeTests.C16, null, false))[System.Array.index(0, $t)], Bridge.ClientTest.Batch4.Reflection.AttributeTests.A9Attribute);
            Bridge.Test.NUnit.Assert.areEqual(43, a.P3);
        },
        fieldsCanBeAssignedInAttributeDeclaration: function () {
            var $t;
            var a = Bridge.cast(($t = Bridge.Reflection.getAttributes(Bridge.ClientTest.Batch4.Reflection.AttributeTests.C18, null, false))[System.Array.index(0, $t)], Bridge.ClientTest.Batch4.Reflection.AttributeTests.A9Attribute);
            Bridge.Test.NUnit.Assert.areEqual(13, a.F1);
        },
        creatingAttributeWithNamedConstructorWorks: function () {
            var $t;
            var a = Bridge.cast(($t = Bridge.Reflection.getAttributes(Bridge.ClientTest.Batch4.Reflection.AttributeTests.C20, null, false))[System.Array.index(0, $t)], Bridge.ClientTest.Batch4.Reflection.AttributeTests.A11Attribute);
            Bridge.Test.NUnit.Assert.areEqual(42, a.i);
        },
        creatingAttributeWithInlineCodeConstructorWorks: function () {
            var $t;
            var a = ($t = Bridge.Reflection.getAttributes(Bridge.ClientTest.Batch4.Reflection.AttributeTests.C21, null, false))[System.Array.index(0, $t)];
            Bridge.Test.NUnit.Assert.areEqual(18, a.i);
        },
        conditionalAttributesWhoseSymbolsAreNotDefinedAreRemoved: function () {
            Bridge.Test.NUnit.Assert.areEqual$1(1, Bridge.Reflection.getAttributes(Bridge.ClientTest.Batch4.Reflection.AttributeTests.C22, Bridge.ClientTest.Batch4.Reflection.AttributeTests.A12Attribute, false).length, "A12");
            Bridge.Test.NUnit.Assert.areEqual$1(1, Bridge.Reflection.getAttributes(Bridge.ClientTest.Batch4.Reflection.AttributeTests.C22, Bridge.ClientTest.Batch4.Reflection.AttributeTests.A13Attribute, false).length, "A13");
            Bridge.Test.NUnit.Assert.areEqual$1(0, Bridge.Reflection.getAttributes(Bridge.ClientTest.Batch4.Reflection.AttributeTests.C22, Bridge.ClientTest.Batch4.Reflection.AttributeTests.A14Attribute, false).length, "A14");
            Bridge.Test.NUnit.Assert.areEqual$1(1, System.Attribute.getCustomAttributes(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.AttributeTests.C22, 8, 284, "M"), Bridge.ClientTest.Batch4.Reflection.AttributeTests.A12Attribute, false).length, "A12");
            Bridge.Test.NUnit.Assert.areEqual$1(1, System.Attribute.getCustomAttributes(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.AttributeTests.C22, 8, 284, "M"), Bridge.ClientTest.Batch4.Reflection.AttributeTests.A13Attribute, false).length, "A13");
            Bridge.Test.NUnit.Assert.areEqual$1(0, System.Attribute.getCustomAttributes(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.AttributeTests.C22, 8, 284, "M"), Bridge.ClientTest.Batch4.Reflection.AttributeTests.A14Attribute, false).length, "A14");
        }
    });

    Bridge.ns("Bridge.ClientTest.Batch4.Reflection.AttributeTests", $asm.$);

    Bridge.apply($asm.$.Bridge.ClientTest.Batch4.Reflection.AttributeTests, {
        f1: function (a) {
            return Bridge.is(a, Bridge.ClientTest.Batch4.Reflection.AttributeTests.A1Attribute);
        },
        f2: function (a) {
            return Bridge.is(a, Bridge.ClientTest.Batch4.Reflection.AttributeTests.A2Attribute);
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.Reflection.AttributeTests.A11Attribute", {
        inherits: [System.Attribute],
        i: 0,
        ctor: function () {
            this.$initialize();
            System.Attribute.ctor.call(this);
        },
        $ctor1: function (i) {
            this.$initialize();
            System.Attribute.ctor.call(this);
            this.i = i;
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.Reflection.AttributeTests.A12Attribute", {
        inherits: [System.Attribute]
    });

    Bridge.define("Bridge.ClientTest.Batch4.Reflection.AttributeTests.A13Attribute", {
        inherits: [System.Attribute]
    });

    Bridge.define("Bridge.ClientTest.Batch4.Reflection.AttributeTests.A14Attribute", {
        inherits: [System.Attribute]
    });

    Bridge.define("Bridge.ClientTest.Batch4.Reflection.AttributeTests.A1Attribute", {
        inherits: [System.Attribute],
        config: {
            properties: {
                V: 0
            }
        },
        ctor: function (v) {
            this.$initialize();
            System.Attribute.ctor.call(this);
            this.V = v;
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.Reflection.AttributeTests.A2Attribute", {
        inherits: [System.Attribute],
        config: {
            properties: {
                V: 0
            }
        },
        ctor: function (v) {
            this.$initialize();
            System.Attribute.ctor.call(this);
            this.V = v;
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.Reflection.AttributeTests.A3Attribute", {
        inherits: [System.Attribute],
        config: {
            properties: {
                V: 0
            }
        },
        ctor: function (v) {
            this.$initialize();
            System.Attribute.ctor.call(this);
            this.V = v;
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.Reflection.AttributeTests.A4Attribute", {
        inherits: [System.Attribute],
        config: {
            properties: {
                V: 0
            }
        },
        ctor: function (v) {
            this.$initialize();
            System.Attribute.ctor.call(this);
            this.V = v;
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.Reflection.AttributeTests.A5Attribute", {
        inherits: [System.Attribute]
    });

    Bridge.define("Bridge.ClientTest.Batch4.Reflection.AttributeTests.A6Attribute", {
        inherits: [System.Attribute],
        config: {
            properties: {
                B: false,
                Y: 0,
                C: 0,
                D: 0,
                F: 0,
                I: 0,
                L: System.Int64(0),
                H: 0,
                E: 0,
                S: null,
                O: null,
                T: null
            }
        },
        ctor: function (b, y, c, d, f, i, l, h, e, s, o, t) {
            this.$initialize();
            System.Attribute.ctor.call(this);
            this.B = b;
            this.Y = y;
            this.C = c;
            this.D = d;
            this.F = f;
            this.I = i;
            this.L = l;
            this.H = h;
            this.E = e;
            this.S = s;
            this.O = o;
            this.T = t;
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.Reflection.AttributeTests.A7Attribute", {
        inherits: [System.Attribute],
        config: {
            properties: {
                I: null,
                S: null
            }
        },
        ctor: function (i, s) {
            this.$initialize();
            System.Attribute.ctor.call(this);
            this.I = i;
            this.S = s;
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.Reflection.AttributeTests.A8Attribute", {
        inherits: [System.Attribute],
        config: {
            properties: {
                E: "v1"
            }
        },
        ctor: function (e) {
            this.$initialize();
            System.Attribute.ctor.call(this);
            this.E = e;
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.Reflection.AttributeTests.A9Attribute", {
        inherits: [System.Attribute],
        config: {
            properties: {
                P1: 0,
                P3: 0,
                P4: 0,
                F1: 0,
                F2: 0
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.Reflection.AttributeTests.C1");

    Bridge.define("Bridge.ClientTest.Batch4.Reflection.AttributeTests.C10$2", function (T1, T2) { return {

    }; });

    Bridge.define("Bridge.ClientTest.Batch4.Reflection.AttributeTests.C11");

    Bridge.define("Bridge.ClientTest.Batch4.Reflection.AttributeTests.C12");

    Bridge.define("Bridge.ClientTest.Batch4.Reflection.AttributeTests.C13");

    Bridge.define("Bridge.ClientTest.Batch4.Reflection.AttributeTests.C14");

    Bridge.define("Bridge.ClientTest.Batch4.Reflection.AttributeTests.C15");

    Bridge.define("Bridge.ClientTest.Batch4.Reflection.AttributeTests.C16");

    Bridge.define("Bridge.ClientTest.Batch4.Reflection.AttributeTests.C18");

    Bridge.define("Bridge.ClientTest.Batch4.Reflection.AttributeTests.C19");

    Bridge.define("Bridge.ClientTest.Batch4.Reflection.AttributeTests.C2");

    Bridge.define("Bridge.ClientTest.Batch4.Reflection.AttributeTests.C20");

    Bridge.define("Bridge.ClientTest.Batch4.Reflection.AttributeTests.C21");

    Bridge.define("Bridge.ClientTest.Batch4.Reflection.AttributeTests.C22", {
        m: function () {
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.Reflection.AttributeTests.C7");

    Bridge.define("Bridge.ClientTest.Batch4.Reflection.AttributeTests.C9");

    Bridge.define("Bridge.ClientTest.Batch4.Reflection.AttributeTests.E1", {
        $kind: "enum",
        statics: {
            V1: 1,
            V2: 2
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.Reflection.AttributeTests.E2", {
        $kind: "enum",
        statics: {
            v1: "v1",
            v2: "v2"
        },
        $utype: System.String
    });

    Bridge.define("Bridge.ClientTest.Batch4.Reflection.AttributeTests.I1", {
        $kind: "interface"
    });

    Bridge.define("Bridge.ClientTest.Batch4.Reflection.AttributeTests.I2$2", function (T1, T2) { return {

    }; });

    Bridge.define("Bridge.ClientTest.Batch4.Reflection.GetMembersTests", {
        assertEquivalent: function (actual, expected) {
            var actualValues = actual.filter($asm.$.Bridge.ClientTest.Batch4.Reflection.GetMembersTests.f1).map($asm.$.Bridge.ClientTest.Batch4.Reflection.GetMembersTests.f2).filter($asm.$.Bridge.ClientTest.Batch4.Reflection.GetMembersTests.f3);
            actualValues.sort();
            expected.sort();
            Bridge.Test.NUnit.Assert.areEqual(expected, actualValues);
        },
        assertEqual: function (actual, expected) {
            var $t;
            var actualValue = actual != null ? Bridge.cast(($t = System.Attribute.getCustomAttributes(actual, Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute, true))[System.Array.index(0, $t)], Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute).I : null;
            Bridge.Test.NUnit.Assert.areEqual(expected, actualValue);
        },
        assertAmbiguous: function (action) {
            Bridge.Test.NUnit.Assert.throws(action);
        },
        getMembersWithoutBindingFlagsWorks: function () {
            this.assertEquivalent(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.GetMembersTests.D1, 31, 28), System.Array.init([111, 112, 113, 114, 131, 132, 151, 152, 153, 154, 155, 156, 157, 158, 159, 171, 172, 173, 174, 175, 176, 211, 212, 213, 214, 231, 232, 251, 252, 253, 254, 255, 256, 257, 258, 259, 271, 272, 273, 274, 275, 276, 301, 302, 303, 311, 312, 313, 314, 321, 322, 323, 324, 331, 332, 341, 342, 351, 352, 353, 354, 355, 356, 357, 358, 359, 361, 362, 363, 364, 365, 366, 371, 372, 373, 374, 375, 376, 381, 382, 383, 384, 385, 386], System.Int32));
        },
        getMembersWorksForInterface: function () {
            this.assertEquivalent(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.GetMembersTests.I2, 31, 28), System.Array.init([511, 512, 513, 514, 551, 552, 553, 554, 555, 556, 557, 558, 559, 571, 574], System.Int32));
        },
        getMembersWithBindingFlagsWorks: function () {
            this.assertEquivalent(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.GetMembersTests.D1, 31, 0), System.Array.init(0, 0, System.Int32));

            this.assertEquivalent(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.GetMembersTests.D1, 31, 28), System.Array.init([111, 112, 113, 114, 131, 132, 151, 152, 153, 154, 155, 156, 157, 158, 159, 171, 172, 173, 174, 175, 176, 211, 212, 213, 214, 231, 232, 251, 252, 253, 254, 255, 256, 257, 258, 259, 271, 272, 273, 274, 275, 276, 301, 302, 303, 311, 312, 313, 314, 321, 322, 323, 324, 331, 332, 341, 342, 351, 352, 353, 354, 355, 356, 357, 358, 359, 361, 362, 363, 364, 365, 366, 371, 372, 373, 374, 375, 376, 381, 382, 383, 384, 385, 386], System.Int32));

            this.assertEquivalent(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.GetMembersTests.D1, 31, 92), System.Array.init([111, 112, 113, 114, 121, 122, 123, 124, 131, 132, 141, 142, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 164, 165, 166, 171, 172, 173, 174, 175, 176, 181, 182, 183, 184, 185, 186, 211, 212, 213, 214, 221, 222, 223, 224, 231, 232, 241, 242, 251, 252, 253, 254, 255, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 271, 272, 273, 274, 275, 276, 281, 282, 283, 284, 285, 286, 301, 302, 303, 311, 312, 313, 314, 321, 322, 323, 324, 331, 332, 341, 342, 351, 352, 353, 354, 355, 356, 357, 358, 359, 361, 362, 363, 364, 365, 366, 371, 372, 373, 374, 375, 376, 381, 382, 383, 384, 385, 386], System.Int32));

            this.assertEquivalent(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.GetMembersTests.D1, 31, 20), System.Array.init([111, 112, 113, 114, 131, 132, 151, 152, 153, 154, 155, 156, 157, 158, 159, 171, 172, 173, 174, 175, 176, 211, 212, 213, 214, 231, 232, 251, 252, 253, 254, 255, 256, 257, 258, 259, 271, 272, 273, 274, 275, 276, 301, 302, 303, 311, 312, 313, 314, 331, 332, 351, 352, 353, 354, 355, 356, 357, 358, 359, 371, 372, 373, 374, 375, 376], System.Int32));

            this.assertEquivalent(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.GetMembersTests.D1, 31, 22), System.Array.init([301, 302, 303, 311, 312, 313, 314, 331, 332, 351, 352, 353, 354, 355, 356, 357, 358, 359, 371, 372, 373, 374, 375, 376], System.Int32));

            this.assertEquivalent(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.GetMembersTests.D1, 31, 24), System.Array.init([321, 322, 323, 324, 341, 342, 361, 362, 363, 364, 365, 366, 381, 382, 383, 384, 385, 386], System.Int32));

            this.assertEquivalent(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.GetMembersTests.D1, 31, 88), System.Array.init([121, 122, 123, 124, 141, 142, 161, 162, 163, 164, 165, 166, 181, 182, 183, 184, 185, 186, 221, 222, 223, 224, 241, 242, 261, 262, 263, 264, 265, 266, 281, 282, 283, 284, 285, 286, 321, 322, 323, 324, 341, 342, 361, 362, 363, 364, 365, 366, 381, 382, 383, 384, 385, 386], System.Int32));
        },
        getMemberWithNameWorks: function () {
            this.assertEquivalent(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.GetMembersTests.D2, 31, 28, "FB"), System.Array.init([132], System.Int32));
            this.assertEquivalent(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.GetMembersTests.D2, 31, 28, "MB"), System.Array.init([112], System.Int32));
            this.assertEquivalent(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.GetMembersTests.D2, 31, 28, "MD"), System.Array.init([312], System.Int32));
            this.assertEquivalent(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.GetMembersTests.D2, 31, 28, "M"), System.Array.init([111, 211, 311], System.Int32));
            this.assertEquivalent(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.GetMembersTests.D2, 31, 28, "X"), System.Array.init(0, 0, System.Int32));
        },
        getMemberWithNameAndBindingFlagsWorks: function () {
            this.assertEquivalent(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.GetMembersTests.D2, 31, 20, "FB"), System.Array.init([132], System.Int32));
            this.assertEquivalent(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.GetMembersTests.D2, 31, 22, "FB"), System.Array.init(0, 0, System.Int32));
            this.assertEquivalent(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.GetMembersTests.D2, 31, 24, "FB"), System.Array.init(0, 0, System.Int32));
            this.assertEquivalent(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.GetMembersTests.D2, 31, 20, "FDS"), System.Array.init(0, 0, System.Int32));
            this.assertEquivalent(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.GetMembersTests.D2, 31, 24, "FDS"), System.Array.init([342], System.Int32));
            this.assertEquivalent(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.GetMembersTests.D2, 31, 24, "FBS"), System.Array.init(0, 0, System.Int32));
            this.assertEquivalent(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.GetMembersTests.D2, 31, 88, "FBS"), System.Array.init([142], System.Int32));
            this.assertEquivalent(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.GetMembersTests.D2, 31, 20, "F"), System.Array.init([131, 231, 331], System.Int32));
            this.assertEquivalent(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.GetMembersTests.D2, 31, 24, "FS"), System.Array.init([341], System.Int32));
            this.assertEquivalent(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.GetMembersTests.D2, 31, 88, "FS"), System.Array.init([141, 241, 341], System.Int32));
        },
        getConstructorsWorks: function () {
            this.assertEquivalent(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.GetMembersTests.D1, 1, 28), System.Array.init([301, 302, 303], System.Int32));
        },
        getConstructorWorks: function () {
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.GetMembersTests.D1, 1, 284, null, System.Array.init(0, null, Function)), 301);
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.GetMembersTests.D1, 1, 284, null, System.Array.init([System.Int32, System.String], Function)), 303);
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.GetMembersTests.D1, 1, 284, null, System.Array.init([System.DateTime], Function)), null);
        },
        getMethodsWithoutBindingFlagsWorks: function () {
            this.assertEquivalent(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.GetMembersTests.D1, 8, 28), System.Array.init([111, 112, 113, 114, 152, 153, 155, 156, 158, 159, 172, 173, 175, 176, 211, 212, 213, 214, 252, 253, 255, 256, 258, 259, 272, 273, 275, 276, 311, 312, 313, 314, 321, 322, 323, 324, 352, 353, 355, 356, 358, 359, 362, 363, 365, 366, 372, 373, 375, 376, 382, 383, 385, 386], System.Int32));
        },
        getMethodsWithBindingFlagsWorks: function () {
            this.assertEquivalent(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.GetMembersTests.D1, 8, 0), System.Array.init(0, 0, System.Int32));

            this.assertEquivalent(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.GetMembersTests.D1, 8, 28), System.Array.init([111, 112, 113, 114, 152, 153, 155, 156, 158, 159, 172, 173, 175, 176, 211, 212, 213, 214, 252, 253, 255, 256, 258, 259, 272, 273, 275, 276, 311, 312, 313, 314, 321, 322, 323, 324, 352, 353, 355, 356, 358, 359, 362, 363, 365, 366, 372, 373, 375, 376, 382, 383, 385, 386], System.Int32));

            this.assertEquivalent(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.GetMembersTests.D1, 8, 92), System.Array.init([111, 112, 113, 114, 121, 122, 123, 124, 152, 153, 155, 156, 158, 159, 162, 163, 165, 166, 172, 173, 175, 176, 182, 183, 185, 186, 211, 212, 213, 214, 221, 222, 223, 224, 252, 253, 255, 256, 258, 259, 262, 263, 265, 266, 272, 273, 275, 276, 282, 283, 285, 286, 311, 312, 313, 314, 321, 322, 323, 324, 352, 353, 355, 356, 358, 359, 362, 363, 365, 366, 372, 373, 375, 376, 382, 383, 385, 386], System.Int32));

            this.assertEquivalent(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.GetMembersTests.D1, 8, 20), System.Array.init([111, 112, 113, 114, 152, 153, 155, 156, 158, 159, 172, 173, 175, 176, 211, 212, 213, 214, 252, 253, 255, 256, 258, 259, 272, 273, 275, 276, 311, 312, 313, 314, 352, 353, 355, 356, 358, 359, 372, 373, 375, 376], System.Int32));

            this.assertEquivalent(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.GetMembersTests.D1, 8, 22), System.Array.init([311, 312, 313, 314, 352, 353, 355, 356, 358, 359, 372, 373, 375, 376], System.Int32));

            this.assertEquivalent(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.GetMembersTests.D1, 8, 24), System.Array.init([321, 322, 323, 324, 362, 363, 365, 366, 382, 383, 385, 386], System.Int32));

            this.assertEquivalent(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.GetMembersTests.D1, 8, 88), System.Array.init([121, 122, 123, 124, 162, 163, 165, 166, 182, 183, 185, 186, 221, 222, 223, 224, 262, 263, 265, 266, 282, 283, 285, 286, 321, 322, 323, 324, 362, 363, 365, 366, 382, 383, 385, 386], System.Int32));
        },
        getMethodWithNameWorks: function () {
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.GetMembersTests.D2, 8, 284, "MB"), 112);
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.GetMembersTests.D2, 8, 284, "MD"), 312);
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.GetMembersTests.D2, 8, 284, "M"), 311);
            this.assertAmbiguous($asm.$.Bridge.ClientTest.Batch4.Reflection.GetMembersTests.f4);
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.GetMembersTests.D2, 8, 284, "F"), null);
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.GetMembersTests.D2, 8, 284, "X"), null);

            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.GetMembersTests.D1, 8, 284, "get_PD1"), 352);
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.GetMembersTests.D1, 8, 284, "set_PD1"), 353);
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.GetMembersTests.D1, 8, 284, "add_ED1"), 372);
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.GetMembersTests.D1, 8, 284, "remove_ED1"), 373);
        },
        getMethodWithNameAndBindingFlagsWorks: function () {
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.GetMembersTests.D2, 8, 20 | 256, "MB"), 112);
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.GetMembersTests.D2, 8, 22 | 256, "MB"), null);
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.GetMembersTests.D2, 8, 24 | 256, "MB"), null);
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.GetMembersTests.D2, 8, 20 | 256, "MDS"), null);
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.GetMembersTests.D2, 8, 24 | 256, "MDS"), 322);
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.GetMembersTests.D2, 8, 24 | 256, "MBS"), null);
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.GetMembersTests.D2, 8, 88 | 256, "MBS"), 122);
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.GetMembersTests.D2, 8, 20 | 256, "M"), 311);
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.GetMembersTests.D2, 8, 24 | 256, "MS"), 321);
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.GetMembersTests.D2, 8, 88 | 256, "MS"), 321);
            this.assertAmbiguous($asm.$.Bridge.ClientTest.Batch4.Reflection.GetMembersTests.f5);
            this.assertAmbiguous($asm.$.Bridge.ClientTest.Batch4.Reflection.GetMembersTests.f6);
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.GetMembersTests.D2, 8, 20 | 256, "F"), null);
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.GetMembersTests.D2, 8, 20 | 256, "X"), null);

            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.GetMembersTests.D1, 8, 20 | 256, "get_PD1"), 352);
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.GetMembersTests.D1, 8, 20 | 256, "set_PD1"), 353);
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.GetMembersTests.D1, 8, 20 | 256, "add_ED1"), 372);
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.GetMembersTests.D1, 8, 20 | 256, "remove_ED1"), 373);
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.GetMembersTests.D1, 8, 24 | 256, "get_PDS1"), 362);
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.GetMembersTests.D1, 8, 24 | 256, "set_PDS1"), 363);
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.GetMembersTests.D1, 8, 24 | 256, "add_EDS1"), 382);
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.GetMembersTests.D1, 8, 24 | 256, "remove_EDS1"), 383);
        },
        getMethodWithNameAndArgumentTypesWorks: function () {
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.GetMembersTests.D2, 8, 284, "MD", System.Array.init(0, null, Function)), 312);
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.GetMembersTests.D2, 8, 284, "M2D", System.Array.init([System.Int32], Function)), 315);
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.GetMembersTests.D2, 8, 284, "M2D", System.Array.init([System.String], Function)), 316);
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.GetMembersTests.D2, 8, 284, "M2D", System.Array.init([System.DateTime], Function)), null);
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.GetMembersTests.D2, 8, 284, "M3", System.Array.init([System.Int32], Function)), 117);
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.GetMembersTests.D2, 8, 284, "M3", System.Array.init([System.String], Function)), 217);
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.GetMembersTests.D2, 8, 284, "M3", System.Array.init([System.DateTime], Function)), 317);
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.GetMembersTests.D2, 8, 284, "M3", System.Array.init([System.DateTime, System.Int32], Function)), null);
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.GetMembersTests.D2, 8, 284, "M3S", System.Array.init([System.String], Function)), null);
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.GetMembersTests.D2, 8, 284, "M3S", System.Array.init([System.DateTime], Function)), 327);
        },
        getMethodWithNameAndArgumentTypesAndBindingFlagsWorks: function () {
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.GetMembersTests.D2, 8, 20 | 256, "MD", System.Array.init(0, null, Function)), 312);
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.GetMembersTests.D2, 8, 24 | 256, "MD", System.Array.init(0, null, Function)), null);
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.GetMembersTests.D2, 8, 20 | 256, "M2D", System.Array.init([System.Int32], Function)), 315);
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.GetMembersTests.D2, 8, 20 | 256, "M3", System.Array.init([System.Int32], Function)), 117);
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.GetMembersTests.D2, 8, 20 | 256, "M3", System.Array.init([System.String], Function)), 217);
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.GetMembersTests.D2, 8, 20 | 256, "M3", System.Array.init([System.DateTime], Function)), 317);
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.GetMembersTests.D2, 8, 22 | 256, "M3", System.Array.init([System.String], Function)), null);
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.GetMembersTests.D2, 8, 22 | 256, "M3", System.Array.init([System.DateTime], Function)), 317);
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.GetMembersTests.D2, 8, 24 | 256, "M3", System.Array.init([System.DateTime], Function)), null);

            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.GetMembersTests.D2, 8, 24 | 256, "M3S", System.Array.init([System.String], Function)), null);
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.GetMembersTests.D2, 8, 24 | 256, "M3S", System.Array.init([System.DateTime], Function)), 327);
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.GetMembersTests.D2, 8, 24 | 256, "M3S", System.Array.init([System.Int32], Function)), null);
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.GetMembersTests.D2, 8, 88 | 256, "M3S", System.Array.init([System.String], Function)), 227);
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.GetMembersTests.D2, 8, 88 | 256, "M3S", System.Array.init([System.DateTime], Function)), 327);
        },
        getPropertiesWithoutBindingFlagsWorks: function () {
            this.assertEquivalent(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.GetMembersTests.D1, 16, 28), System.Array.init([151, 154, 157, 251, 254, 257, 351, 354, 357, 361, 364], System.Int32));
        },
        getPropertiesWithBindingFlagsWorks: function () {
            this.assertEquivalent(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.GetMembersTests.D1, 16, 0), System.Array.init(0, 0, System.Int32));

            this.assertEquivalent(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.GetMembersTests.D1, 16, 28), System.Array.init([151, 154, 157, 251, 254, 257, 351, 354, 357, 361, 364], System.Int32));

            this.assertEquivalent(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.GetMembersTests.D1, 16, 92), System.Array.init([151, 154, 157, 161, 164, 251, 254, 257, 261, 264, 351, 354, 357, 361, 364], System.Int32));

            this.assertEquivalent(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.GetMembersTests.D1, 16, 20), System.Array.init([151, 154, 157, 251, 254, 257, 351, 354, 357], System.Int32));

            this.assertEquivalent(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.GetMembersTests.D1, 16, 22), System.Array.init([351, 354, 357], System.Int32));

            this.assertEquivalent(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.GetMembersTests.D1, 16, 24), System.Array.init([361, 364], System.Int32));

            this.assertEquivalent(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.GetMembersTests.D1, 16, 88), System.Array.init([161, 164, 261, 264, 361, 364], System.Int32));
        },
        getPropertyWithNameWorks: function () {
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.GetMembersTests.D2, 16, 284, "PB"), 152);
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.GetMembersTests.D2, 16, 284, "PD"), 352);
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.GetMembersTests.D2, 16, 284, "P"), 351);
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.GetMembersTests.D2, 16, 284, "F"), null);
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.GetMembersTests.D2, 16, 284, "X"), null);
            this.assertAmbiguous($asm.$.Bridge.ClientTest.Batch4.Reflection.GetMembersTests.f7);
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.GetMembersTests.C3, 16, 284, "Item"), 1);
        },
        getPropertyWithNameAndBindingFlagsWorks: function () {
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.GetMembersTests.D2, 16, 20 | 256, "PB"), 152);
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.GetMembersTests.D2, 16, 22 | 256, "PB"), null);
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.GetMembersTests.D2, 16, 24 | 256, "PB"), null);
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.GetMembersTests.D2, 16, 20 | 256, "PDS"), null);
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.GetMembersTests.D2, 16, 24 | 256, "PDS"), 362);
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.GetMembersTests.D2, 16, 24 | 256, "PBS"), null);
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.GetMembersTests.D2, 16, 88 | 256, "PBS"), 162);
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.GetMembersTests.D2, 16, 20 | 256, "P"), 351);
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.GetMembersTests.D2, 16, 24 | 256, "PS"), 361);
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.GetMembersTests.D2, 16, 88 | 256, "PS"), 361);
            this.assertAmbiguous($asm.$.Bridge.ClientTest.Batch4.Reflection.GetMembersTests.f8);
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.GetMembersTests.C3, 16, 20 | 256, "Item"), 1);
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.GetMembersTests.C3, 16, 24 | 256, "Item"), null);
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.GetMembersTests.D2, 16, 20 | 256, "F"), null);
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.GetMembersTests.D2, 16, 20 | 256, "X"), null);
        },
        getPropertyWithNameAndArgumentTypesWorks: function () {
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.GetMembersTests.D2, 16, 284, "PD", System.Array.init(0, null, Function)), 352);
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.GetMembersTests.D2, 16, 284, "Item", System.Array.init([System.String], Function)), 154);
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.GetMembersTests.D2, 16, 284, "Item", System.Array.init([System.Double], Function)), 254);
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.GetMembersTests.D2, 16, 284, "Item", System.Array.init([System.DateTime], Function)), 354);
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.GetMembersTests.D2, 16, 284, "Item", System.Array.init([System.Int32], Function)), 353);
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.GetMembersTests.D2, 16, 284, "Item", System.Array.init([System.Int32, System.String], Function)), null);
        },
        getPropertyWithNameAndArgumentTypesAndBindingFlagsWorks: function () {
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.GetMembersTests.D2, 16, 20 | 256, "PD", System.Array.init(0, null, Function)), 352);
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.GetMembersTests.D2, 16, 24 | 256, "PD", System.Array.init(0, null, Function)), null);
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.GetMembersTests.D2, 16, 20 | 256, "Item", System.Array.init([System.String], Function)), 154);
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.GetMembersTests.D2, 16, 20 | 256, "Item", System.Array.init([System.Double], Function)), 254);
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.GetMembersTests.D2, 16, 20 | 256, "Item", System.Array.init([System.DateTime], Function)), 354);
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.GetMembersTests.D2, 16, 20 | 256, "Item", System.Array.init([System.Int32], Function)), 353);
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.GetMembersTests.D2, 16, 20 | 256, "Item", System.Array.init([System.Int32, System.String], Function)), null);
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.GetMembersTests.D2, 16, 22 | 256, "Item", System.Array.init([System.String], Function)), null);
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.GetMembersTests.D2, 16, 22 | 256, "Item", System.Array.init([System.Double], Function)), null);
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.GetMembersTests.D2, 16, 22 | 256, "Item", System.Array.init([System.DateTime], Function)), 354);
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.GetMembersTests.D2, 16, 22 | 256, "Item", System.Array.init([System.Int32], Function)), 353);
        },
        getFieldsWithoutBindingFlagsWorks: function () {
            this.assertEquivalent(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.GetMembersTests.D1, 4, 28), System.Array.init([131, 132, 231, 232, 331, 332, 341, 342], System.Int32));
        },
        getFieldsWithBindingFlagsWorks: function () {
            this.assertEquivalent(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.GetMembersTests.D1, 4, 0), System.Array.init(0, 0, System.Int32));

            this.assertEquivalent(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.GetMembersTests.D1, 4, 28), System.Array.init([131, 132, 231, 232, 331, 332, 341, 342], System.Int32));

            this.assertEquivalent(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.GetMembersTests.D1, 4, 92), System.Array.init([131, 132, 141, 142, 231, 232, 241, 242, 331, 332, 341, 342], System.Int32));

            this.assertEquivalent(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.GetMembersTests.D1, 4, 20), System.Array.init([131, 132, 231, 232, 331, 332], System.Int32));

            this.assertEquivalent(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.GetMembersTests.D1, 4, 22), System.Array.init([331, 332], System.Int32));

            this.assertEquivalent(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.GetMembersTests.D1, 4, 24), System.Array.init([341, 342], System.Int32));

            this.assertEquivalent(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.GetMembersTests.D1, 4, 88), System.Array.init([141, 142, 241, 242, 341, 342], System.Int32));
        },
        getFieldWithNameWorks: function () {
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.GetMembersTests.D2, 4, 284, "FB"), 132);
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.GetMembersTests.D2, 4, 284, "FD"), 332);
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.GetMembersTests.D2, 4, 284, "F"), 331);
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.GetMembersTests.D2, 4, 284, "E"), null);
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.GetMembersTests.D2, 4, 284, "X"), null);
        },
        getFieldWithNameAndBindingFlagsWorks: function () {
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.GetMembersTests.D2, 4, 20 | 256, "FB"), 132);
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.GetMembersTests.D2, 4, 22 | 256, "FB"), null);
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.GetMembersTests.D2, 4, 24 | 256, "FB"), null);
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.GetMembersTests.D2, 4, 20 | 256, "FDS"), null);
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.GetMembersTests.D2, 4, 24 | 256, "FDS"), 342);
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.GetMembersTests.D2, 4, 24 | 256, "FBS"), null);
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.GetMembersTests.D2, 4, 88 | 256, "FBS"), 142);
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.GetMembersTests.D2, 4, 20 | 256, "F"), 331);
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.GetMembersTests.D2, 4, 24 | 256, "FS"), 341);
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.GetMembersTests.D2, 4, 88 | 256, "FS"), 341);
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.GetMembersTests.D2, 4, 20 | 256, "E"), null);
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.GetMembersTests.D2, 4, 20 | 256, "X"), null);
        },
        getEventsWithoutBindingFlagsWorks: function () {
            this.assertEquivalent(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.GetMembersTests.D1, 2, 28), System.Array.init([171, 174, 271, 274, 371, 374, 381, 384], System.Int32));
        },
        getEventsWithBindingFlagsWorks: function () {
            this.assertEquivalent(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.GetMembersTests.D1, 2, 0), System.Array.init(0, 0, System.Int32));

            this.assertEquivalent(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.GetMembersTests.D1, 2, 28), System.Array.init([171, 174, 271, 274, 371, 374, 381, 384], System.Int32));

            this.assertEquivalent(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.GetMembersTests.D1, 2, 92), System.Array.init([171, 174, 181, 184, 271, 274, 281, 284, 371, 374, 381, 384], System.Int32));

            this.assertEquivalent(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.GetMembersTests.D1, 2, 20), System.Array.init([171, 174, 271, 274, 371, 374], System.Int32));

            this.assertEquivalent(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.GetMembersTests.D1, 2, 22), System.Array.init([371, 374], System.Int32));

            this.assertEquivalent(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.GetMembersTests.D1, 2, 24), System.Array.init([381, 384], System.Int32));

            this.assertEquivalent(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.GetMembersTests.D1, 2, 88), System.Array.init([181, 184, 281, 284, 381, 384], System.Int32));
        },
        getEventWithNameWorks: function () {
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.GetMembersTests.D2, 2, 284, "EB"), 172);
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.GetMembersTests.D2, 2, 284, "ED"), 372);
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.GetMembersTests.D2, 2, 284, "E"), 371);
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.GetMembersTests.D2, 2, 284, "F"), null);
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.GetMembersTests.D2, 2, 284, "X"), null);
        },
        getEventWithNameAndBindingFlagsWorks: function () {
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.GetMembersTests.D2, 2, 20 | 256, "EB"), 172);
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.GetMembersTests.D2, 2, 22 | 256, "EB"), null);
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.GetMembersTests.D2, 2, 24 | 256, "EB"), null);
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.GetMembersTests.D2, 2, 20 | 256, "EDS"), null);
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.GetMembersTests.D2, 2, 24 | 256, "EDS"), 382);
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.GetMembersTests.D2, 2, 24 | 256, "EBS"), null);
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.GetMembersTests.D2, 2, 88 | 256, "EBS"), 182);
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.GetMembersTests.D2, 2, 20 | 256, "E"), 371);
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.GetMembersTests.D2, 2, 24 | 256, "ES"), 381);
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.GetMembersTests.D2, 2, 88 | 256, "ES"), 381);
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.GetMembersTests.D2, 2, 20 | 256, "F"), null);
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.GetMembersTests.D2, 2, 20 | 256, "X"), null);
        },
        isOperatorForMemberInfoWorks: function () {
            Bridge.Test.NUnit.Assert.true(Bridge.is(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.GetMembersTests.B1, 1, 284, null, System.Array.init(0, null, Function)), System.Reflection.ConstructorInfo));
            Bridge.Test.NUnit.Assert.false(Bridge.is(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.GetMembersTests.B1, 4, 284, "FB1"), System.Reflection.ConstructorInfo));

            Bridge.Test.NUnit.Assert.true(Bridge.is(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.GetMembersTests.B1, 8, 284, "MB2"), System.Reflection.MethodInfo));
            Bridge.Test.NUnit.Assert.false(Bridge.is(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.GetMembersTests.B1, 4, 284, "FB1"), System.Reflection.MethodInfo));

            Bridge.Test.NUnit.Assert.true(Bridge.is(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.GetMembersTests.B1, 4, 284, "FB1"), System.Reflection.FieldInfo));
            Bridge.Test.NUnit.Assert.false(Bridge.is(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.GetMembersTests.B1, 8, 284, "MB2"), System.Reflection.FieldInfo));

            Bridge.Test.NUnit.Assert.true(Bridge.is(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.GetMembersTests.B1, 16, 284, "PB1"), System.Reflection.PropertyInfo));
            Bridge.Test.NUnit.Assert.false(Bridge.is(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.GetMembersTests.B1, 4, 284, "FB1"), System.Reflection.PropertyInfo));

            Bridge.Test.NUnit.Assert.true(Bridge.is(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.GetMembersTests.B1, 2, 284, "EB1"), System.Reflection.EventInfo));
            Bridge.Test.NUnit.Assert.false(Bridge.is(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.GetMembersTests.B1, 4, 284, "FB1"), System.Reflection.EventInfo));
        }
    });

    Bridge.ns("Bridge.ClientTest.Batch4.Reflection.GetMembersTests", $asm.$);

    Bridge.apply($asm.$.Bridge.ClientTest.Batch4.Reflection.GetMembersTests, {
        f1: function (m) {
            return !Bridge.referenceEquals(m.td, System.Object);
        },
        f2: function (m) {
            var arr = Bridge.cast(System.Attribute.getCustomAttributes(m, Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute, true), System.Array.type(Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute));
            return arr.length > 0 ? arr[System.Array.index(0, arr)].I : 0;
        },
        f3: function (x) {
            return x !== 0;
        },
        f4: function () {
            Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.GetMembersTests.D2, 8, 284, "M2");
        },
        f5: function () {
            Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.GetMembersTests.D2, 8, 20 | 256, "M2D");
        },
        f6: function () {
            Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.GetMembersTests.D2, 8, 24 | 256, "M2DS");
        },
        f7: function () {
            Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.GetMembersTests.D2, 16, 284, "Item");
        },
        f8: function () {
            Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.GetMembersTests.D2, 16, 20 | 256, "Item");
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute", {
        inherits: [System.Attribute],
        config: {
            properties: {
                I: 0
            }
        },
        ctor: function (i) {
            this.$initialize();
            System.Attribute.ctor.call(this);
            this.I = i;
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.Reflection.GetMembersTests.B1", {
        statics: {
            FBS1: 0,
            FBS2: 0,
            config: {
                properties: {
                    PBS1: 0,
                    PBS2: 0
                }
            },
            addEBS1: function (value) {
            },
            removeEBS1: function (value) {
            },
            addEBS2: function (value) {
            },
            removeEBS2: function (value) {
            },
            MBS: function () {
            },
            MBS$1: function (x) {
            },
            MBS$2: function (x, y) {
            },
            MBS2: function (x, y) {
            }
        },
        FB1: 0,
        FB2: 0,
        config: {
            properties: {
                PB1: 0,
                PB2: 0
            }
        },
        ctor: function () {
            this.$initialize();
        },
        $ctor1: function (x) {
            this.$initialize();
        },
        $ctor2: function (x, y) {
            this.$initialize();
        },
        getItem: function (x) {
            return 0;
        },
        setItem: function (x, value) {
        },
        addEB1: function (value) {
        },
        removeEB1: function (value) {
        },
        addEB2: function (value) {
        },
        removeEB2: function (value) {
        },
        MB: function () {
        },
        MB$1: function (x) {
        },
        MB$2: function (x, y) {
        },
        MB2: function (x, y) {
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.Reflection.GetMembersTests.B2", {
        statics: {
            FS: 0,
            FBS: 0,
            config: {
                events: {
                    ES: null,
                    EBS: null
                },
                properties: {
                    PS: 0,
                    PBS: 0
                }
            },
            MS: function () {
            },
            MBS: function () {
            },
            M2S: function (x) {
            },
            M2S$1: function (x) {
            },
            M2BS: function (x) {
            },
            M2BS$1: function (x) {
            },
            M3S: function (x) {
            }
        },
        f: 0,
        FB: 0,
        config: {
            events: {
                E: null,
                EB: null
            },
            properties: {
                P: 0,
                PB: 0
            }
        },
        getItem: function (x) {
            return 0;
        },
        setItem: function (x, value) {
        },
        getItem$1: function (x) {
            return 0;
        },
        setItem$1: function (x, value) {
        },
        m: function () {
        },
        MB: function () {
        },
        M2: function (x) {
        },
        M2$1: function (x) {
        },
        M2B: function (x) {
        },
        M2B$1: function (x) {
        },
        M3: function (x) {
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.Reflection.GetMembersTests.C3", {
        getItem: function (x) {
            return 0;
        },
        setItem: function (x, value) {
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.Reflection.GetMembersTests.I1", {
        $kind: "interface"
    });

    Bridge.define("Bridge.ClientTest.Batch4.Reflection.ReflectionTests", {
        getMembersReturnsMethodsWithAnyScriptableAttributeOrReflectableAttribute: function () {
            var methods = Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C1, 31, 28);
            Bridge.Test.NUnit.Assert.areEqual$1(2, methods.length, "Should be two methods");
            Bridge.Test.NUnit.Assert.true(Bridge.referenceEquals(methods[System.Array.index(0, methods)].n, "M2") || Bridge.referenceEquals(methods[System.Array.index(1, methods)].n, "M2"));
            Bridge.Test.NUnit.Assert.true(Bridge.referenceEquals(methods[System.Array.index(0, methods)].n, "M3") || Bridge.referenceEquals(methods[System.Array.index(1, methods)].n, "M3"));
        },
        structMemberReflectionWorks: function () {
            var methods = Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.S1, 31, 28);
            Bridge.Test.NUnit.Assert.areEqual$1(2, methods.length, "Should be two methods");
            Bridge.Test.NUnit.Assert.true(Bridge.referenceEquals(methods[System.Array.index(0, methods)].n, "M2") || Bridge.referenceEquals(methods[System.Array.index(1, methods)].n, "M2"));
            Bridge.Test.NUnit.Assert.true(Bridge.referenceEquals(methods[System.Array.index(0, methods)].n, "M3") || Bridge.referenceEquals(methods[System.Array.index(1, methods)].n, "M3"));
        },
        isStaticFlagWorksForMethod: function () {
            var $t, $t1;
            Bridge.Test.NUnit.Assert.areEqual$1(false, (($t = Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C2, 31, 4))[System.Array.index(0, $t)].is || false), "Instance member should not be static");
            Bridge.Test.NUnit.Assert.areEqual$1(true, (($t1 = Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C2, 31, 8))[System.Array.index(0, $t1)].is || false), "Static member should be static");
        },
        memberTypeIsMethodForMethod: function () {
            Bridge.Test.NUnit.Assert.areEqual(8, Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C3, 8, 284, "M1").t);
            Bridge.Test.NUnit.Assert.areEqual(8, Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C21, 8, 284, "M1").t);
        },
        isConstructorIsFalseForMethod: function () {
            Bridge.Test.NUnit.Assert.areEqual(false, (Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C3, 8, 284, "M1").t === 1));
            Bridge.Test.NUnit.Assert.areEqual(false, (Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C21, 8, 284, "M1").t === 1));
        },
        isConstructorIsTrueForAllKindsOfConstructors: function () {
            var c10 = Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C10, 31, 28);
            var c11 = Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C11, 31, 28);
            var c19 = Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C19, 31, 28);
            var c20 = Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C20, 31, 28);
            Bridge.Test.NUnit.Assert.true$1((Bridge.cast(c10[System.Array.index(0, c10)], System.Reflection.ConstructorInfo).t === 1), "Unnamed");
            Bridge.Test.NUnit.Assert.true$1((Bridge.cast(c10[System.Array.index(1, c10)], System.Reflection.ConstructorInfo).t === 1), "Named");
            Bridge.Test.NUnit.Assert.true$1((Bridge.cast(c11[System.Array.index(0, c11)], System.Reflection.ConstructorInfo).t === 1), "Static method");
            Bridge.Test.NUnit.Assert.true$1((Bridge.cast(c19[System.Array.index(0, c19)], System.Reflection.ConstructorInfo).t === 1), "Object literal");
            Bridge.Test.NUnit.Assert.true$1((Bridge.cast(c20[System.Array.index(0, c20)], System.Reflection.ConstructorInfo).t === 1), "Inline code");
        },
        isStaticIsFalseForAllKindsOfConstructors: function () {
            var c10 = Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C10, 31, 28);
            var c11 = Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C11, 31, 28);
            var c19 = Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C19, 31, 28);
            var c20 = Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C20, 31, 28);
            Bridge.Test.NUnit.Assert.false$1((c10[System.Array.index(0, c10)].is || false), "Unnamed");
            Bridge.Test.NUnit.Assert.false$1((c10[System.Array.index(1, c10)].is || false), "Named");
            Bridge.Test.NUnit.Assert.false$1((c11[System.Array.index(0, c11)].is || false), "Static method");
            Bridge.Test.NUnit.Assert.false$1((c19[System.Array.index(0, c19)].is || false), "Object literal");
            Bridge.Test.NUnit.Assert.false$1((c20[System.Array.index(0, c20)].is || false), "Inline code");
        },
        memberTypeIsConstructorForAllKindsOfConstructors: function () {
            var c10 = Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C10, 31, 28);
            var c11 = Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C11, 31, 28);
            var c19 = Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C19, 31, 28);
            var c20 = Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C20, 31, 28);
            Bridge.Test.NUnit.Assert.areEqual$1(1, c10[System.Array.index(0, c10)].t, "Unnamed");
            Bridge.Test.NUnit.Assert.areEqual$1(1, c10[System.Array.index(1, c10)].t, "Named");
            Bridge.Test.NUnit.Assert.areEqual$1(1, c11[System.Array.index(0, c11)].t, "Static method");
            Bridge.Test.NUnit.Assert.areEqual$1(1, c19[System.Array.index(0, c19)].t, "Object literal");
            Bridge.Test.NUnit.Assert.areEqual$1(1, c20[System.Array.index(0, c20)].t, "Inline code");
        },
        nameIsCtorForAllKindsOfConstructors: function () {
            var c10 = Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C10, 31, 28);
            var c11 = Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C11, 31, 28);
            var c19 = Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C19, 31, 28);
            var c20 = Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C20, 31, 28);
            Bridge.Test.NUnit.Assert.areEqual$1(".ctor", c10[System.Array.index(0, c10)].n, "Unnamed");
            Bridge.Test.NUnit.Assert.areEqual$1(".ctor", c10[System.Array.index(1, c10)].n, "Named");
            Bridge.Test.NUnit.Assert.areEqual$1(".ctor", c11[System.Array.index(0, c11)].n, "Static method");
            Bridge.Test.NUnit.Assert.areEqual$1(".ctor", c19[System.Array.index(0, c19)].n, "Object literal");
            Bridge.Test.NUnit.Assert.areEqual$1(".ctor", c20[System.Array.index(0, c20)].n, "Inline code");
        },
        declaringTypeIsCorrectForAllKindsOfConstructors: function () {
            var c10 = Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C10, 31, 28);
            var c11 = Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C11, 31, 28);
            var c19 = Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C19, 31, 28);
            var c20 = Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C20, 31, 28);
            Bridge.Test.NUnit.Assert.areEqual$1(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C10, c10[System.Array.index(0, c10)].td, "Unnamed");
            Bridge.Test.NUnit.Assert.areEqual$1(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C10, c10[System.Array.index(1, c10)].td, "Named");
            Bridge.Test.NUnit.Assert.areEqual$1(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C11, c11[System.Array.index(0, c11)].td, "Static method");
            Bridge.Test.NUnit.Assert.areEqual$1(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C19, c19[System.Array.index(0, c19)].td, "Object literal");
            Bridge.Test.NUnit.Assert.areEqual$1(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C20, c20[System.Array.index(0, c20)].td, "Inline code");
        },
        scriptNameIsCorrectForAllKindsOfConstructors: function () {
            var c10 = Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C10, 31, 28);
            var c11 = Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C11, 31, 28);
            var c19 = Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C19, 31, 28);
            var c20 = Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C20, 31, 28);
            Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(Bridge.cast(c10[System.Array.index(0, c10)], System.Reflection.ConstructorInfo).sn, "ctor"), "Unnamed");
            Bridge.Test.NUnit.Assert.areEqual$1("$ctor1", Bridge.cast(c10[System.Array.index(1, c10)], System.Reflection.ConstructorInfo).sn, "Named");
            Bridge.Test.NUnit.Assert.areEqual$1("ctor", Bridge.cast(c11[System.Array.index(0, c11)], System.Reflection.ConstructorInfo).sn, "Static method");
            Bridge.Test.NUnit.Assert.true$1(Bridge.cast(c19[System.Array.index(0, c19)], System.Reflection.ConstructorInfo).sn == null, "Object literal");
            Bridge.Test.NUnit.Assert.true$1(Bridge.cast(c20[System.Array.index(0, c20)], System.Reflection.ConstructorInfo).sn == null, "Inline code");
        },
        isStaticMethodIsTrueOnlyForStaticMethodConstructors: function () {
            var c10 = Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C10, 31, 28);
            var c11 = Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C11, 31, 28);
            var c19 = Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C19, 31, 28);
            var c20 = Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C20, 31, 28);
            Bridge.Test.NUnit.Assert.false$1((Bridge.cast(c10[System.Array.index(0, c10)], System.Reflection.ConstructorInfo).sm || false), "Unnamed");
            Bridge.Test.NUnit.Assert.false$1((Bridge.cast(c10[System.Array.index(1, c10)], System.Reflection.ConstructorInfo).sm || false), "Named");
            Bridge.Test.NUnit.Assert.false$1((Bridge.cast(c11[System.Array.index(0, c11)], System.Reflection.ConstructorInfo).sm || false), "Static method");
            Bridge.Test.NUnit.Assert.false$1((Bridge.cast(c19[System.Array.index(0, c19)], System.Reflection.ConstructorInfo).sm || false), "Object literal");
            Bridge.Test.NUnit.Assert.false$1((Bridge.cast(c20[System.Array.index(0, c20)], System.Reflection.ConstructorInfo).sm || false), "Inline code");
        },
        isExpandParamsIsCorrectForConstructors: function () {
            var c1 = Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C22, 1, 284, null, System.Array.init([System.Int32, System.Array.type(System.Int32)], Function));
            var c2 = Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C22, 1, 284, null, System.Array.init([System.String, System.Array.type(System.String)], Function));
            var c3 = Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C23, 1, 284, null, System.Array.init([System.Int32, System.Array.type(System.Int32)], Function));
            var c4 = Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C23, 1, 284, null, System.Array.init([System.String, System.Array.type(System.String)], Function));
            Bridge.Test.NUnit.Assert.false(c1.exp || false);
            Bridge.Test.NUnit.Assert.true(c2.exp || false);
            Bridge.Test.NUnit.Assert.false(c3.exp || false);
            Bridge.Test.NUnit.Assert.true(c4.exp || false);
        },
        specialImplementationExistsOnlyForObjectLiteralAndInlineCodeConstructors: function () {
            var c10 = Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C10, 31, 28);
            var c11 = Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C11, 31, 28);
            var c19 = Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C19, 31, 28);
            var c20 = Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C20, 31, 28);
            Bridge.Test.NUnit.Assert.true$1(Bridge.staticEquals(Bridge.cast(c10[System.Array.index(0, c10)], System.Reflection.ConstructorInfo).def, null), "Unnamed");
            Bridge.Test.NUnit.Assert.true$1(Bridge.staticEquals(Bridge.cast(c10[System.Array.index(1, c10)], System.Reflection.ConstructorInfo).def, null), "Named");
            Bridge.Test.NUnit.Assert.true$1(Bridge.staticEquals(Bridge.cast(c11[System.Array.index(0, c11)], System.Reflection.ConstructorInfo).def, null), "Static method");
            Bridge.Test.NUnit.Assert.true$1(!Bridge.staticEquals(Bridge.cast(c19[System.Array.index(0, c19)], System.Reflection.ConstructorInfo).def, null), "Object literal");
            Bridge.Test.NUnit.Assert.true$1(!Bridge.staticEquals(Bridge.cast(c20[System.Array.index(0, c20)], System.Reflection.ConstructorInfo).def, null), "Inline code");
        },
        declaringTypeShouldBeCorrectForMethods: function () {
            Bridge.Test.NUnit.Assert.areEqual$1(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C3, Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C3, 8, 284, "M1").td, "Simple type");
            Bridge.Test.NUnit.Assert.areEqual$1(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C5$2, Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C5$2, 8, 284, "M").td, "Open generic type");
            Bridge.Test.NUnit.Assert.areEqual$1(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C5$2(System.Int32,System.String), Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C5$2(System.Int32,System.String), 8, 284, "M").td, "Constructed generic type");
        },
        returnTypeAndParameterTypesAreCorrectForMethods: function () {
            var m1 = Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C3, 8, 284, "M1");
            Bridge.Test.NUnit.Assert.areEqual$1(System.Int32, m1.rt, "Return type should be int");
            Bridge.Test.NUnit.Assert.areEqual$1(0, (m1.p || []).length, "M1 should have no parameters");

            var m2 = Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C3, 8, 284, "M2");
            Bridge.Test.NUnit.Assert.areEqual$1(System.Array.init([System.String], Function), (m2.p || []), "M2 parameter types should be correct");

            var m3 = Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C3, 8, 284, "M3");
            Bridge.Test.NUnit.Assert.areEqual$1(System.Array.init([System.String, System.Int32], Function), (m3.p || []), "M3 parameter types should be correct");

            var m4 = Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C7, 8, 284, "M1");
            Bridge.Test.NUnit.Assert.false$1((m4.is || false), "M4 should not be static");
            Bridge.Test.NUnit.Assert.areEqual$1(System.Array.init([System.Int32], Function), (m4.p || []), "C7.M1 parameters should be correct");

            var m5 = Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C21, 8, 284, "M1");
            Bridge.Test.NUnit.Assert.areEqual$1(System.Int32, m5.rt, "M5 Return type should be int");
            Bridge.Test.NUnit.Assert.false$1((m5.is || false), "M5 should not be static");
            Bridge.Test.NUnit.Assert.areEqual$1(System.Array.init([System.Int32, System.Int32], Function), (m5.p || []), "M5 parameters should be correct");
        },
        parameterTypesShouldBeCorrectForConstructors: function () {
            var c10 = Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C10, 31, 28);
            var c11 = Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C11, 31, 28);
            var c19 = Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C19, 31, 28);
            var c20 = Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C20, 31, 28);
            Bridge.Test.NUnit.Assert.areEqual$1(System.Array.init([System.Int32], Function), (Bridge.cast(c10[System.Array.index(0, c10)], System.Reflection.ConstructorInfo).p || []), "Unnamed");
            Bridge.Test.NUnit.Assert.areEqual$1(System.Array.init([System.Int32, System.String], Function), (Bridge.cast(c10[System.Array.index(1, c10)], System.Reflection.ConstructorInfo).p || []), "Named");
            Bridge.Test.NUnit.Assert.areEqual$1(System.Array.init([System.DateTime], Function), (Bridge.cast(c11[System.Array.index(0, c11)], System.Reflection.ConstructorInfo).p || []), "Static method");
            Bridge.Test.NUnit.Assert.areEqual$1(System.Array.init([System.Int32, System.String], Function), (Bridge.cast(c19[System.Array.index(0, c19)], System.Reflection.ConstructorInfo).p || []), "Object literal");
            Bridge.Test.NUnit.Assert.areEqual$1(System.Array.init([System.Int32, System.String], Function), (Bridge.cast(c20[System.Array.index(0, c20)], System.Reflection.ConstructorInfo).p || []), "Object literal");
        },
        voidIsConsideredObjectAsReturnType: function () {
            Bridge.Test.NUnit.Assert.areEqual$1(System.Object, Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C3, 8, 284, "M4").rt, "Return type of void method should be object");
        },
        methodNameIsTheCSharpName: function () {
            var members = Bridge.cast(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C4, 31, 28), System.Array.type(System.Reflection.MethodInfo));
            Bridge.Test.NUnit.Assert.areEqual$1(3, members.filter($asm.$.Bridge.ClientTest.Batch4.Reflection.ReflectionTests.f1).length, "All methods should have name M");
        },
        typeParametersAreReplacedWithObjectForReturnAndParameterTypesForOpenGenericTypes: function () {
            var m = Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C5$2, 8, 284, "M");
            Bridge.Test.NUnit.Assert.areEqual$1("T1", Bridge.Reflection.getTypeName(m.rt), "Return type should be object");
            Bridge.Test.NUnit.Assert.areDeepEqual$1((m.p || []).map($asm.$.Bridge.ClientTest.Batch4.Reflection.ReflectionTests.f2), System.Array.init(["T2", "String"], System.String), "Parameters should be correct");
        },
        typeParametersAreCorrectForReturnAndParameterTypesForConstructedGenericTypes: function () {
            var m = Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C5$2(System.String,System.DateTime), 8, 284, "M");
            Bridge.Test.NUnit.Assert.areEqual$1(System.String, m.rt, "Return type of M should be string");
            Bridge.Test.NUnit.Assert.areDeepEqual$1(System.Array.init([System.DateTime, System.String], Function), (m.p || []), "Parameters to M should be correct");

            var m2 = Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C5$2(System.String,System.DateTime), 8, 284, "M2");
            Bridge.Test.NUnit.Assert.areEqual$1(System.Object, m2.rt, "Return type of M2 should be object");
            Bridge.Test.NUnit.Assert.areEqual$1(0, (m2.p || []).length, "M2 should not have any parameters");
        },
        methodTypeParametersAreReplacedWithObjectForReturnAndParameterTypes: function () {
            var m = Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C6, 8, 284, "M1");
            Bridge.Test.NUnit.Assert.areEqual$1(System.Object, m.rt, "Return type should be object");
            Bridge.Test.NUnit.Assert.areDeepEqual$1(System.Array.init([System.Object, System.String], Function), (m.p || []), "Parameters should be correct");
        },
        isGenericMethodDefinitionAndTypeParameterCountWork: function () {
            Bridge.Test.NUnit.Assert.true$1((!!Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C6, 8, 284, "M1").tpc), "M1 should be generic");
            Bridge.Test.NUnit.Assert.true$1((!!Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C6, 8, 284, "M2").tpc), "M2 should be generic");
            Bridge.Test.NUnit.Assert.false$1((!!Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C6, 8, 284, "M3").tpc), "M3 should not be generic");
            Bridge.Test.NUnit.Assert.areEqual$1(2, (Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C6, 8, 284, "M1").tpc || 0), "M1 should have 2 type parameters");
            Bridge.Test.NUnit.Assert.areEqual$1(1, (Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C6, 8, 284, "M2").tpc || 0), "M2 should have 1 type parameters");
            Bridge.Test.NUnit.Assert.areEqual$1(0, (Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C6, 8, 284, "M3").tpc || 0), "M3 should have 0 type parameters");
        },
        scriptNameWorksForAllKindsOfMethods: function () {
            Bridge.Test.NUnit.Assert.areEqual$1("m$1", Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C4, 8, 284, "M", System.Array.init([System.Int32], Function)).sn, "C4.M");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C21, 8, 284, "M1").sn == null, "C21.M1");
            Bridge.Test.NUnit.Assert.areEqual$1("M1", Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C7, 8, 284, "M1").sn, "C7.M1");
        },
        specialImplementationExistsOnlyForMethodsImplementedAsInlineCode: function () {
            Bridge.Test.NUnit.Assert.true$1(Bridge.staticEquals(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C4, 8, 284, "M", System.Array.init([System.Int32], Function)).def, null), "C4.M");
            Bridge.Test.NUnit.Assert.true$1(!Bridge.staticEquals(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C21, 8, 284, "M3").def, null), "C21.M3");
            Bridge.Test.NUnit.Assert.true$1(Bridge.staticEquals(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C7, 8, 284, "M1").def, null), "C7.m1");
        },
        isExpandParamsIsCorrectForMethods: function () {
            var m1 = Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C22, 8, 284, "M1");
            var m2 = Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C22, 8, 284, "M2");
            var m3 = Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C23, 8, 284, "M1");
            var m4 = Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C23, 8, 284, "M2");
            Bridge.Test.NUnit.Assert.false(m1.exp || false);
            Bridge.Test.NUnit.Assert.true(m2.exp || false);
            Bridge.Test.NUnit.Assert.false(m3.exp || false);
            Bridge.Test.NUnit.Assert.true(m4.exp || false);
        },
        createDelegateWorksForNonGenericInstanceMethods: function () {
            var m = Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C8, 8, 284, "M1");
            var c = new Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C8("X");
            var f1 = Bridge.Reflection.midel(m, c);
            var f2 = Bridge.Reflection.midel(m, c);
            Bridge.Test.NUnit.Assert.areEqual$1("X a b", f1("a", "b"), "Delegate created with delegate type should be correct");
            Bridge.Test.NUnit.Assert.areEqual$1("X c d", f2("c", "d"), "Delegate created without delegate type should be correct");
            Bridge.Test.NUnit.Assert.throws$5(function () {
                Bridge.Reflection.midel(m);
            }, "Without target with delegate type should throw");
            Bridge.Test.NUnit.Assert.throws$5(function () {
                Bridge.Reflection.midel(m);
            }, "Without target without delegate type should throw");
            Bridge.Test.NUnit.Assert.throws$5(function () {
                Bridge.Reflection.midel(m, Bridge.unbox(null));
            }, "Null target with delegate type should throw");
            Bridge.Test.NUnit.Assert.throws$5(function () {
                Bridge.Reflection.midel(m, Bridge.unbox(null));
            }, "Null target without delegate type should throw");
            Bridge.Test.NUnit.Assert.throws$5(function () {
                Bridge.Reflection.midel(m, c, System.Array.init([System.String], Function));
            }, "With type arguments with target should throw");
            Bridge.Test.NUnit.Assert.throws$5(function () {
                Bridge.Reflection.midel(m, null, System.Array.init([System.String], Function));
            }, "With type arguments without target should throw");
            Bridge.Test.NUnit.Assert.throws$5(function () {
                Bridge.Reflection.midel(m, Bridge.unbox(null), System.Array.init([System.String], Function));
            }, "With type arguments with null target should throw");
        },
        delegateCreateDelegateWorksForNonGenericInstanceMethods: function () {
            var m = Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C8, 8, 284, "M1");
            var f1 = Bridge.Reflection.midel(m, new Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C8("X"));
            Bridge.Test.NUnit.Assert.areEqual$1("X a b", f1("a", "b"), "Delegate should be correct");
        },
        createDelegateWorksNonGenericStaticMethods: function () {
            var m = Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C8, 8, 284, "M2");
            var f1 = Bridge.Reflection.midel(m);
            var f2 = Bridge.Reflection.midel(m);
            var f3 = Bridge.Reflection.midel(m, Bridge.unbox(null));
            var f4 = Bridge.Reflection.midel(m, Bridge.unbox(null));
            Bridge.Test.NUnit.Assert.areEqual$1("a b", f1("a", "b"), "Delegate created with delegate type without target should be correct");
            Bridge.Test.NUnit.Assert.areEqual$1("c d", f2("c", "d"), "Delegate created without delegate type without target should be correct");
            Bridge.Test.NUnit.Assert.areEqual$1("e f", f3("e", "f"), "Delegate created with delegate type with null target should be correct");
            Bridge.Test.NUnit.Assert.areEqual$1("g h", f4("g", "h"), "Delegate created without delegate type with null target should be correct");
            Bridge.Test.NUnit.Assert.throws$5(function () {
                Bridge.Reflection.midel(m, new Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C8(""));
            }, "With target with delegate type should throw");
            Bridge.Test.NUnit.Assert.throws$5(function () {
                Bridge.Reflection.midel(m, new Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C8(""));
            }, "With target without delegate type should throw");
            Bridge.Test.NUnit.Assert.throws$5(function () {
                Bridge.Reflection.midel(m, new Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C8(""), System.Array.init([System.String], Function));
            }, "With type arguments with target should throw");
            Bridge.Test.NUnit.Assert.throws$5(function () {
                Bridge.Reflection.midel(m, null, System.Array.init([System.String], Function));
            }, "With type arguments without target should throw");
            Bridge.Test.NUnit.Assert.throws$5(function () {
                Bridge.Reflection.midel(m, Bridge.unbox(null), System.Array.init([System.String], Function));
            }, "With type arguments with null target should throw");
        },
        createDelegateWorksNonGenericStaticMethodOfGenericType: function () {
            var m = Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C9$2(System.Int32,System.String), 8, 284, "M");
            var f = Bridge.Reflection.midel(m);
            Bridge.Test.NUnit.Assert.areEqual$1("System.Int32 System.String a", f("a"), "Delegate should return correct results");
        },
        createDelegateWorksForGenericInstanceMethods: function () {
            var m = Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C8, 8, 284, "M3");
            var c = new Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C8("X");
            var f = Bridge.Reflection.midel(m, c, System.Array.init([System.Int32, System.String], Function));
            Bridge.Test.NUnit.Assert.areEqual$1("X System.Int32 System.String a", f("a"), "Result of invoking delegate should be correct");
            Bridge.Test.NUnit.Assert.throws$5(function () {
                Bridge.Reflection.midel(m, Bridge.unbox(null), System.Array.init([System.Int32, System.String], Function));
            }, "Null target with correct type arguments should throw");
            Bridge.Test.NUnit.Assert.throws$5(function () {
                Bridge.Reflection.midel(m, c);
            }, "No type arguments with target should throw");
            Bridge.Test.NUnit.Assert.throws$5(function () {
                Bridge.Reflection.midel(m, c, System.Array.init(0, null, Function));
            }, "0 type arguments with target should throw");
            Bridge.Test.NUnit.Assert.throws$5(function () {
                Bridge.Reflection.midel(m, c, System.Array.init(1, null, Function));
            }, "1 type arguments with target should throw");
            Bridge.Test.NUnit.Assert.throws$5(function () {
                Bridge.Reflection.midel(m, c, System.Array.init(3, null, Function));
            }, "3 type arguments with target should throw");
        },
        createDelegateWorksForGenericStaticMethods: function () {
            var m = Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C8, 8, 284, "M4");
            var f = Bridge.Reflection.midel(m, Bridge.unbox(null), System.Array.init([System.Int32, System.String], Function));
            Bridge.Test.NUnit.Assert.areEqual$1("System.Int32 System.String a", f("a"), "Result of invoking delegate should be correct");
            Bridge.Test.NUnit.Assert.throws$5(function () {
                Bridge.Reflection.midel(m, new Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C8(""), System.Array.init([System.Int32, System.String], Function));
            }, "Target with correct type arguments should throw");
            Bridge.Test.NUnit.Assert.throws$5(function () {
                Bridge.Reflection.midel(m, Bridge.unbox(null));
            }, "No type arguments without target should throw");
            Bridge.Test.NUnit.Assert.throws$5(function () {
                Bridge.Reflection.midel(m, Bridge.unbox(null), System.Array.init(0, null, Function));
            }, "0 type arguments without target should throw");
            Bridge.Test.NUnit.Assert.throws$5(function () {
                Bridge.Reflection.midel(m, Bridge.unbox(null), System.Array.init(1, null, Function));
            }, "1 type arguments without target should throw");
            Bridge.Test.NUnit.Assert.throws$5(function () {
                Bridge.Reflection.midel(m, Bridge.unbox(null), System.Array.init(3, null, Function));
            }, "3 type arguments without target should throw");
        },
        invokeWorksForNonGenericInstanceMethods: function () {
            var m = Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C8, 8, 284, "M1");
            var argsArr = System.Array.init(["c", "d"], System.Object);
            var c = new Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C8("X");
            Bridge.Test.NUnit.Assert.areEqual$1("X a b", Bridge.unbox(Bridge.Reflection.midel(m, c)("a", "b")), "Invoke with target should work");
            Bridge.Test.NUnit.Assert.areEqual$1("X c d", Bridge.unbox(Bridge.Reflection.midel(m, c).apply(null, argsArr)), "Invoke (non-expanded) with target should work");
            Bridge.Test.NUnit.Assert.throws$5(function () {
                Bridge.Reflection.midel(m, null)("a", "b");
            }, "Invoke without target should throw");
            Bridge.Test.NUnit.Assert.throws$5(function () {
                Bridge.Reflection.midel(m, c, System.Array.init([System.String], Function))("a", "b");
            }, "Invoke with type arguments with target should throw");
            Bridge.Test.NUnit.Assert.throws$5(function () {
                Bridge.Reflection.midel(m, null, System.Array.init([System.String], Function))("a", "b");
            }, "Invoke with type arguments without target should throw");
        },
        invokeWorksForNonGenericStaticMethods: function () {
            var m = Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C8, 8, 284, "M2");
            Bridge.Test.NUnit.Assert.areEqual$1("a b", Bridge.unbox(Bridge.Reflection.midel(m, null)("a", "b")), "Invoke without target should work");
            Bridge.Test.NUnit.Assert.throws$5(function () {
                Bridge.Reflection.midel(m, new Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C8(""))("a", "b");
            }, "Invoke with target should throw");
            Bridge.Test.NUnit.Assert.throws$5(function () {
                Bridge.Reflection.midel(m, new Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C8(""), System.Array.init([System.String], Function))("a", "b");
            }, "Invoke with type arguments with target should throw");
            Bridge.Test.NUnit.Assert.throws$5(function () {
                Bridge.Reflection.midel(m, null, System.Array.init([System.String], Function))("a", "b");
            }, "Invoke with type arguments without target should throw");
        },
        invokeWorksForNonGenericInstanceMethodsOnSerializableTypes: function () {
            var m = Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C7, 8, 284, "M1");
            Bridge.Test.NUnit.Assert.areEqual$1(27, Bridge.unbox(Bridge.Reflection.midel(m, Bridge.merge(new Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C7(), {
                    x: 13
                } ))(14)), "Invoke should work");
        },
        invokeWorksForNonGenericInlineCodeMethods: function () {
            Bridge.Test.NUnit.Assert.areEqual$1(45, Bridge.unbox(Bridge.Reflection.midel(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C21, 8, 284, "M1"), new Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C21(14))(15, 16)), "Instance invoke should work");
            Bridge.Test.NUnit.Assert.areEqual$1(31, Bridge.unbox(Bridge.Reflection.midel(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C21, 8, 284, "M2"), null)(15, 16)), "Static invoke should work");
        },
        invokeWorksForGenericInlineCodeMethods: function () {
            var m = Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C21, 8, 284, "M3");
            Bridge.Test.NUnit.Assert.areEqual$1("42System.StringWorld", Bridge.unbox(Bridge.Reflection.midel(m, new Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C21(42), System.Array.init([System.String], Function))("World")), "Invoke should work");
        },
        invokeWorksForGenericInstanceMethod: function () {
            var m = Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C8, 8, 284, "M3");
            var argsArr = System.Array.init(["x"], System.Object);
            var c = new Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C8("X");
            Bridge.Test.NUnit.Assert.areEqual$1("X System.Int32 System.String a", Bridge.unbox(Bridge.Reflection.midel(m, c, System.Array.init([System.Int32, System.String], Function))("a")), "Result of invoking delegate should be correct");
            Bridge.Test.NUnit.Assert.areEqual$1("X System.Int32 System.String x", Bridge.unbox(Bridge.Reflection.midel(m, c, System.Array.init([System.Int32, System.String], Function)).apply(null, argsArr)), "Result of invoking delegate should be correct");
            Bridge.Test.NUnit.Assert.throws$5(function () {
                Bridge.Reflection.midel(m, null, System.Array.init([System.Int32, System.String], Function))("a");
            }, "Null target with correct type arguments should throw");
            Bridge.Test.NUnit.Assert.throws$5(function () {
                Bridge.Reflection.midel(m, c)("a");
            }, "No type arguments with target should throw");
            Bridge.Test.NUnit.Assert.throws$5(function () {
                Bridge.Reflection.midel(m, c, System.Array.init(0, null, Function))("a");
            }, "0 type arguments with target should throw");
            Bridge.Test.NUnit.Assert.throws$5(function () {
                Bridge.Reflection.midel(m, c, System.Array.init(1, null, Function))("a");
            }, "1 type arguments with target should throw");
            Bridge.Test.NUnit.Assert.throws$5(function () {
                Bridge.Reflection.midel(m, c, System.Array.init(3, null, Function))("a");
            }, "3 type arguments with target should throw");
        },
        invokeWorksForGenericStaticMethod: function () {
            var m = Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C8, 8, 284, "M4");
            Bridge.Test.NUnit.Assert.areEqual$1("System.Int32 System.String a", Bridge.unbox(Bridge.Reflection.midel(m, null, System.Array.init([System.Int32, System.String], Function))("a")), "Result of invoking delegate should be correct");
            Bridge.Test.NUnit.Assert.throws$5(function () {
                Bridge.Reflection.midel(m, new Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C8(""), System.Array.init([System.Int32, System.String], Function))("a");
            }, "Target with correct type arguments should throw");
            Bridge.Test.NUnit.Assert.throws$5(function () {
                Bridge.Reflection.midel(m, null)("a");
            }, "No type arguments without target should throw");
            Bridge.Test.NUnit.Assert.throws$5(function () {
                Bridge.Reflection.midel(m, null, System.Array.init(0, null, Function))("a");
            }, "0 type arguments without target should throw");
            Bridge.Test.NUnit.Assert.throws$5(function () {
                Bridge.Reflection.midel(m, null, System.Array.init(1, null, Function))("a");
            }, "1 type arguments without target should throw");
            Bridge.Test.NUnit.Assert.throws$5(function () {
                Bridge.Reflection.midel(m, null, System.Array.init(3, null, Function))("a");
            }, "3 type arguments without target should throw");
        },
        invokeWorksForGenericInstanceMethodsOnSerializableTypes: function () {
            var m = Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C7, 8, 284, "M3");
            Bridge.Test.NUnit.Assert.areEqual$1("13 System.Int32 System.String Suffix", Bridge.unbox(Bridge.Reflection.midel(m, Bridge.merge(new Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C7(), {
                    x: 13
                } ), System.Array.init([System.Int32, System.String], Function))("Suffix")), "Invoke should work");
        },
        invokeWorksForExpandParamsMethods: function () {
            var m1 = Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C22, 8, 284, "M2");
            var r1 = Bridge.cast(Bridge.Reflection.midel(m1, new Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C22.ctor(0, null)).apply(null, System.Array.init([Bridge.box(2, System.Int32), System.Array.init([17, 31], System.Int32)], System.Object)), System.Array.type(System.Object));
            Bridge.Test.NUnit.Assert.areEqual(System.Array.init([Bridge.box(2, System.Int32), System.Array.init([17, 31], System.Int32)], System.Object), Bridge.unbox(r1));

            var m2 = Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C23, 8, 284, "M2");
            var r2 = Bridge.cast(Bridge.Reflection.midel(m2, new Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C23.ctor(0, null)).apply(null, System.Array.init([Bridge.box(2, System.Int32), System.Array.init([17, 32], System.Int32)], System.Object)), System.Array.type(System.Object));
            Bridge.Test.NUnit.Assert.areEqual(System.Array.init([Bridge.box(2, System.Int32), System.Array.init([17, 32], System.Int32)], System.Object), Bridge.unbox(r2));
        },
        invokeWorksForAllKindsOfConstructors: function () {
            var $t, $t1, $t2, $t3, $t4;
            var c1 = Bridge.cast(($t = Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C10, 31, 28).filter($asm.$.Bridge.ClientTest.Batch4.Reflection.ReflectionTests.f3))[System.Array.index(0, $t)], System.Reflection.ConstructorInfo);
            var o1 = Bridge.cast(Bridge.Reflection.invokeCI(c1, [42]), Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C10);
            Bridge.Test.NUnit.Assert.areEqual$1(42, o1.x, "o1.X");
            Bridge.Test.NUnit.Assert.areEqual$1("X", o1.s, "o1.S");

            var c2 = Bridge.cast(($t1 = Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C10, 31, 28).filter($asm.$.Bridge.ClientTest.Batch4.Reflection.ReflectionTests.f4))[System.Array.index(0, $t1)], System.Reflection.ConstructorInfo);
            var o2 = Bridge.cast(Bridge.Reflection.invokeCI(c2, [14, "Hello"]), Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C10);
            Bridge.Test.NUnit.Assert.areEqual$1(14, o2.x, "o2.X");
            Bridge.Test.NUnit.Assert.areEqual$1("Hello", o2.s, "o2.S");

            var c3 = Bridge.cast(($t2 = Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C11, 31, 28))[System.Array.index(0, $t2)], System.Reflection.ConstructorInfo);
            var o3 = Bridge.cast(Bridge.Reflection.invokeCI(c3, [new Date(2012, 1 - 1, 2)]), Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C11);
            Bridge.Test.NUnit.Assert.areEqual$1(new Date(2012, 1 - 1, 2), o3.D, "o3.D");

            var c19 = Bridge.cast(($t3 = Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C19, 31, 28))[System.Array.index(0, $t3)], System.Reflection.ConstructorInfo);
            var o4 = Bridge.Reflection.invokeCI(c19, [42, "Hello"]);
            Bridge.Test.NUnit.Assert.areDeepEqual({ a: 42, b: "Hello" }, o4);

            var c20 = Bridge.cast(($t4 = Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C20, 31, 28))[System.Array.index(0, $t4)], System.Reflection.ConstructorInfo);
            var o5 = Bridge.Reflection.invokeCI(c20, [42, "Hello"]);
            Bridge.Test.NUnit.Assert.areDeepEqual({ A: 42, B: "Hello" }, Bridge.unbox(o5));
        },
        invokeWorksForExpandParamsConstructors: function () {
            var c1 = Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C22, 1, 284, null, System.Array.init([System.String, System.Array.type(System.String)], Function));
            var o1 = Bridge.cast(Bridge.Reflection.invokeCI(c1, System.Array.init(["a", System.Array.init(["b", "c"], System.String)], System.Object)), Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C22);
            Bridge.Test.NUnit.Assert.areEqual$1("a", Bridge.unbox(o1.a), "o1.a");
            Bridge.Test.NUnit.Assert.areEqual$1(System.Array.init(["b", "c"], System.String), Bridge.unbox(o1.b), "o1.b");

            var c2 = Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C23, 1, 284, null, System.Array.init([System.String, System.Array.type(System.String)], Function));
            var o2 = Bridge.cast(Bridge.Reflection.invokeCI(c2, System.Array.init(["a", System.Array.init(["b", "c"], System.String)], System.Object)), Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C23);
            Bridge.Test.NUnit.Assert.areEqual$1("a", Bridge.unbox(o2.a), "o1.a");
            Bridge.Test.NUnit.Assert.areEqual$1(System.Array.init(["b", "c"], System.String), Bridge.unbox(o2.b), "o1.b");
        },
        memberTypeIsFieldForField: function () {
            Bridge.Test.NUnit.Assert.areEqual$1(4, Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C12, 4, 284, "F1").t, "Instance");
            Bridge.Test.NUnit.Assert.areEqual$1(4, Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C12, 4, 284, "F3").t, "Static");
        },
        declaringTypeIsCorrectForField: function () {
            Bridge.Test.NUnit.Assert.areEqual$1(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C12, Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C12, 4, 284, "F1").td, "Instance");
            Bridge.Test.NUnit.Assert.areEqual$1(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C12, Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C12, 4, 284, "F3").td, "Static");
        },
        nameIsCorrectForField: function () {
            Bridge.Test.NUnit.Assert.areEqual$1("F1", Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C12, 4, 284, "F1").n, "Instance");
            Bridge.Test.NUnit.Assert.areEqual$1("F3", Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C12, 4, 284, "F3").n, "Static");
        },
        isStaticIsCorrectForField: function () {
            Bridge.Test.NUnit.Assert.areEqual$1(false, (Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C12, 4, 284, "F1").is || false), "Instance 1");
            Bridge.Test.NUnit.Assert.areEqual$1(false, (Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C12, 4, 284, "F2").is || false), "Instance 2");
            Bridge.Test.NUnit.Assert.areEqual$1(true, (Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C12, 4, 284, "F3").is || false), "Static");
        },
        fieldTypeIsCorrectForField: function () {
            Bridge.Test.NUnit.Assert.areEqual$1(System.Int32, Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C12, 4, 284, "F1").rt, "Instance 1");
            Bridge.Test.NUnit.Assert.areEqual$1(System.DateTime, Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C12, 4, 284, "F2").rt, "Instance 2");
            Bridge.Test.NUnit.Assert.areEqual$1(System.String, Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C12, 4, 284, "F3").rt, "Static");
        },
        scriptNameIsCorrectForField: function () {
            Bridge.Test.NUnit.Assert.areEqual$1("F1", Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C12, 4, 284, "F1").sn, "F1");
            Bridge.Test.NUnit.Assert.areEqual$1("renamedF2", Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C12, 4, 284, "F2").sn, "f2");
        },
        getValueWorksForInstanceField: function () {
            var c = Bridge.merge(new Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C12(), {
                F1: 42
            } );
            Bridge.Test.NUnit.Assert.areEqual(42, Bridge.unbox(Bridge.Reflection.fieldAccess(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C12, 4, 284, "F1"), c)));
        },
        getValueWorksForStaticField: function () {
            Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C12.F3 = "X_Test";
            Bridge.Test.NUnit.Assert.areEqual("X_Test", Bridge.unbox(Bridge.Reflection.fieldAccess(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C12, 4, 284, "F3"), null)));
        },
        setValueWorksForInstanceField: function () {
            var c = new Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C12();
            Bridge.Reflection.fieldAccess(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C12, 4, 284, "F1"), c, 14);
            Bridge.Test.NUnit.Assert.areEqual(14, c.F1);
        },
        setValueWorksForStaticField: function () {
            Bridge.Reflection.fieldAccess(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C12, 4, 284, "F3"), null, "Hello, world");
            Bridge.Test.NUnit.Assert.areEqual("Hello, world", Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C12.F3);
        },
        memberTypeIsEventForEvent: function () {
            Bridge.Test.NUnit.Assert.areEqual$1(2, Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C13, 2, 284, "E1").t, "Instance");
            Bridge.Test.NUnit.Assert.areEqual$1(2, Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C13, 2, 284, "E2").t, "Static");
        },
        declaringTypeIsCorrectForEvent: function () {
            Bridge.Test.NUnit.Assert.areEqual$1(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C13, Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C13, 2, 284, "E1").td, "Instance");
            Bridge.Test.NUnit.Assert.areEqual$1(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C13, Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C13, 2, 284, "E2").td, "Static");
        },
        nameIsCorrectForEvent: function () {
            Bridge.Test.NUnit.Assert.areEqual$1("E1", Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C13, 2, 284, "E1").n, "Instance");
            Bridge.Test.NUnit.Assert.areEqual$1("E2", Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C13, 2, 284, "E2").n, "Static");
        },
        isStaticIsCorrectForEvent: function () {
            Bridge.Test.NUnit.Assert.areEqual$1(false, (Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C13, 2, 284, "E1").is || false), "Instance");
            Bridge.Test.NUnit.Assert.areEqual$1(true, (Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C13, 2, 284, "E2").is || false), "Static");
        },
        addEventHandlerMethodWorksForInstanceEvent: function () {
            var i = 0;
            var handler = function () {
                Bridge.identity(i, (i = (i + 1) | 0));
            };
            var obj = new Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C13();
            var e = Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C13, 2, 284, "E1");
            Bridge.Reflection.midel(e.ad, obj)(handler);
            obj.raiseE1();
            Bridge.Test.NUnit.Assert.areEqual$1(1, i, "Event should have been raised");
        },
        addEventHandlerMethodWorksForInstanceEventWithInlineCodeAddMethod: function () {
            var i = 0;
            var handler = function () {
                Bridge.identity(i, (i = (i + 1) | 0));
            };
            var obj = new Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C13();
            var e = Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C13, 2, 284, "E3");
            Bridge.Reflection.midel(e.ad, obj)(handler);
            Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(obj.addedE3Handler, handler), "Event handler should have been added");
        },
        addEventHandlerMethodWorksForStaticEvent: function () {
            var i = 0;
            var handler = function () {
                Bridge.identity(i, (i = (i + 1) | 0));
            };
            var e = Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C13, 2, 284, "E2");
            Bridge.Reflection.midel(e.ad, null)(handler);
            Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C13.raiseE2();
            Bridge.Test.NUnit.Assert.areEqual$1(1, i, "Event should have been raised");
        },
        addEventHandlerMethodWorksForStaticEventWithInlineCodeAddMethod: function () {
            var i = 0;
            var handler = function () {
                Bridge.identity(i, (i = (i + 1) | 0));
            };
            var e = Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C13, 2, 284, "E4");
            Bridge.Reflection.midel(e.ad, null)(handler);
            Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C13.addedE4Handler, handler), "Event handler should have been added");
        },
        removeEventHandlerMethodWorksForInstanceEvent: function () {
            var i = 0;
            var handler = function () {
                Bridge.identity(i, (i = (i + 1) | 0));
            };
            var obj = new Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C13();
            obj.addE1(handler);
            obj.raiseE1();

            Bridge.Reflection.midel(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C13, 2, 284, "E1").r, obj)(handler);
            obj.raiseE1();

            Bridge.Test.NUnit.Assert.areEqual$1(1, i, "Event handler should have been removed");
        },
        removeEventHandlerMethodWorksForInstanceEventWithInlineCodeRemoveMethod: function () {
            var i = 0;
            var handler = function () {
                Bridge.identity(i, (i = (i + 1) | 0));
            };
            var obj = new Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C13();

            Bridge.Reflection.midel(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C13, 2, 284, "E3").r, obj)(handler);

            Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(obj.removedE3Handler, handler), "Event handler should have been removed");
        },
        removeEventHandlerMethodWorksForStaticEvent: function () {
            var i = 0;
            var handler = function () {
                Bridge.identity(i, (i = (i + 1) | 0));
            };
            Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C13.addE2(handler);
            Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C13.raiseE2();

            Bridge.Reflection.midel(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C13, 2, 284, "E2").r, null)(handler);
            Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C13.raiseE2();

            Bridge.Test.NUnit.Assert.areEqual$1(1, i, "Event handler should have been removed");
        },
        removeEventHandlerMethodWorksForStaticEventWithInlineCodeRemoveMethod: function () {
            var i = 0;
            var handler = function () {
                Bridge.identity(i, (i = (i + 1) | 0));
            };

            Bridge.Reflection.midel(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C13, 2, 284, "E4").r, null)(handler);

            Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C13.removedE4Handler, handler), "Event handler should have been removed");
        },
        propertiesForAddMethodAreCorrect: function () {
            var m1 = Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C13, 2, 284, "E1").ad;
            var m2 = Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C13, 2, 284, "E2").ad;

            Bridge.Test.NUnit.Assert.areEqual$1(8, m1.t, "m1.MemberType");
            Bridge.Test.NUnit.Assert.areEqual$1(8, m2.t, "m2.MemberType");
            Bridge.Test.NUnit.Assert.areEqual$1("add_E1", m1.n, "m1.Name");
            Bridge.Test.NUnit.Assert.areEqual$1("add_E2", m2.n, "m2.Name");
            Bridge.Test.NUnit.Assert.areEqual$1(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C13, m1.td, "m1.DeclaringType");
            Bridge.Test.NUnit.Assert.areEqual$1(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C13, m2.td, "m2.DeclaringType");
            Bridge.Test.NUnit.Assert.false$1((m1.is || false), "m1.IsStatic");
            Bridge.Test.NUnit.Assert.true$1((m2.is || false), "m2.IsStatic");
            Bridge.Test.NUnit.Assert.areEqual$1(System.Array.init([Function], Function), (m1.p || []), "m1.ParameterTypes");
            Bridge.Test.NUnit.Assert.areEqual$1(System.Array.init([Function], Function), (m2.p || []), "m2.ParameterTypes");
            Bridge.Test.NUnit.Assert.false$1((m1.t === 1), "m1.IsConstructor");
            Bridge.Test.NUnit.Assert.false$1((m2.t === 1), "m2.IsConstructor");
            Bridge.Test.NUnit.Assert.areEqual$1(System.Object, m1.rt, "m1.ReturnType");
            Bridge.Test.NUnit.Assert.areEqual$1(System.Object, m2.rt, "m2.ReturnType");
            Bridge.Test.NUnit.Assert.areEqual$1(0, (m1.tpc || 0), "m1.TypeParameterCount");
            Bridge.Test.NUnit.Assert.areEqual$1(0, (m2.tpc || 0), "m2.TypeParameterCount");
            Bridge.Test.NUnit.Assert.areEqual$1(false, (!!m1.tpc), "m1.IsGenericMethodDefinition");
            Bridge.Test.NUnit.Assert.areEqual$1(false, (!!m2.tpc), "m2.IsGenericMethodDefinition");

            var i1 = 0, i2 = 0;
            var obj = new Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C13();
            var handler1 = function () {
                Bridge.identity(i1, (i1 = (i1 + 1) | 0));
            }, handler2 = function () {
                Bridge.identity(i2, (i2 = (i2 + 1) | 0));
            };
            Bridge.Reflection.midel(m1, obj)(handler1);
            obj.raiseE1();
            Bridge.Test.NUnit.Assert.areEqual$1(1, i1, "m1.Invoke");

            Bridge.Reflection.midel(m2, null)(handler2);
            Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C13.raiseE2();
            Bridge.Test.NUnit.Assert.areEqual$1(1, i2, "m2.Invoke");
        },
        propertiesForRemoveMethodAreCorrect: function () {
            var m1 = Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C13, 2, 284, "E1").r;
            var m2 = Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C13, 2, 284, "E2").r;

            Bridge.Test.NUnit.Assert.areEqual$1(8, m1.t, "m1.MemberType");
            Bridge.Test.NUnit.Assert.areEqual$1(8, m2.t, "m2.MemberType");
            Bridge.Test.NUnit.Assert.areEqual$1("remove_E1", m1.n, "m1.Name");
            Bridge.Test.NUnit.Assert.areEqual$1("remove_E2", m2.n, "m2.Name");
            Bridge.Test.NUnit.Assert.areEqual$1(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C13, m1.td, "m1.DeclaringType");
            Bridge.Test.NUnit.Assert.areEqual$1(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C13, m2.td, "m2.DeclaringType");
            Bridge.Test.NUnit.Assert.false$1((m1.is || false), "m1.IsStatic");
            Bridge.Test.NUnit.Assert.true$1((m2.is || false), "m2.IsStatic");
            Bridge.Test.NUnit.Assert.areEqual$1(System.Array.init([Function], Function), (m1.p || []), "m1.ParameterTypes");
            Bridge.Test.NUnit.Assert.areEqual$1(System.Array.init([Function], Function), (m2.p || []), "m2.ParameterTypes");
            Bridge.Test.NUnit.Assert.false$1((m1.t === 1), "m1.IsConstructor");
            Bridge.Test.NUnit.Assert.false$1((m2.t === 1), "m2.IsConstructor");
            Bridge.Test.NUnit.Assert.areEqual$1(System.Object, m1.rt, "m1.ReturnType");
            Bridge.Test.NUnit.Assert.areEqual$1(System.Object, m2.rt, "m2.ReturnType");
            Bridge.Test.NUnit.Assert.areEqual$1(0, (m1.tpc || 0), "m1.TypeParameterCount");
            Bridge.Test.NUnit.Assert.areEqual$1(0, (m2.tpc || 0), "m2.TypeParameterCount");
            Bridge.Test.NUnit.Assert.areEqual$1(false, (!!m1.tpc), "m1.IsGenericMethodDefinition");
            Bridge.Test.NUnit.Assert.areEqual$1(false, (!!m2.tpc), "m2.IsGenericMethodDefinition");

            var i1 = 0, i2 = 0;
            var obj = new Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C13();
            var handler1 = function () {
                Bridge.identity(i1, (i1 = (i1 + 1) | 0));
            }, handler2 = function () {
                Bridge.identity(i2, (i2 = (i2 + 1) | 0));
            };
            obj.addE1(handler1);
            Bridge.Reflection.midel(m1, obj)(handler1);
            obj.raiseE1();
            Bridge.Test.NUnit.Assert.areEqual$1(0, i1, "m1.Invoke");

            Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C13.addE2(handler2);
            Bridge.Reflection.midel(m2, null)(handler2);
            Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C13.raiseE2();
            Bridge.Test.NUnit.Assert.areEqual$1(0, i2, "m2.Invoke");
        },
        memberTypeIsPropertyForProperty: function () {
            Bridge.Test.NUnit.Assert.areEqual$1(16, Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C14, 16, 284, "P1").t, "P1");
            Bridge.Test.NUnit.Assert.areEqual$1(16, Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C14, 16, 284, "P2").t, "P2");
            Bridge.Test.NUnit.Assert.areEqual$1(16, Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C14, 16, 284, "P3").t, "P3");
            Bridge.Test.NUnit.Assert.areEqual$1(16, Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C14, 16, 284, "P4").t, "P4");
        },
        scriptFieldNameIsCorrectForPropertiesImplementedAsFieldAndNullForOtherProperties: function () {
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C14, 16, 284, "P1").fn == null, "P1");
            Bridge.Test.NUnit.Assert.areEqual$1("P2", Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C14, 16, 284, "P2").fn, "P2");
        },
        memberTypeIsPropertyForIndexer: function () {
            Bridge.Test.NUnit.Assert.areEqual(16, Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C15, 16, 284, "Item").t);
            Bridge.Test.NUnit.Assert.areEqual(16, Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C24, 16, 284, "Item").t);
        },
        declaringTypeIsCorrectForProperty: function () {
            Bridge.Test.NUnit.Assert.areEqual$1(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C14, Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C14, 16, 284, "P1").td, "P1");
            Bridge.Test.NUnit.Assert.areEqual$1(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C14, Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C14, 16, 284, "P2").td, "P2");
            Bridge.Test.NUnit.Assert.areEqual$1(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C14, Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C14, 16, 284, "P3").td, "P3");
            Bridge.Test.NUnit.Assert.areEqual$1(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C14, Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C14, 16, 284, "P4").td, "P4");
        },
        declaringTypeIsCorrectForIndexer: function () {
            Bridge.Test.NUnit.Assert.areEqual(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C15, Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C15, 16, 284, "Item").td);
            Bridge.Test.NUnit.Assert.areEqual(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C24, Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C24, 16, 284, "Item").td);
        },
        nameIsCorrectForProperty: function () {
            Bridge.Test.NUnit.Assert.areEqual("P1", Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C14, 16, 284, "P1").n);
            Bridge.Test.NUnit.Assert.areEqual("P2", Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C14, 16, 284, "P2").n);
            Bridge.Test.NUnit.Assert.areEqual("P3", Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C14, 16, 284, "P3").n);
            Bridge.Test.NUnit.Assert.areEqual("P4", Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C14, 16, 284, "P4").n);
        },
        nameIsCorrectForIndexer: function () {
            Bridge.Test.NUnit.Assert.areEqual("Item", Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C15, 16, 284, "Item").n);
            Bridge.Test.NUnit.Assert.areEqual("Item", Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C24, 16, 284, "Item").n);
        },
        isStaticIsCorrectForProperty: function () {
            Bridge.Test.NUnit.Assert.areEqual$1(false, (Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C14, 16, 284, "P1").is || false), "P1");
            Bridge.Test.NUnit.Assert.areEqual$1(false, (Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C14, 16, 284, "P2").is || false), "P2");
            Bridge.Test.NUnit.Assert.areEqual$1(true, (Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C14, 16, 284, "P3").is || false), "P3");
            Bridge.Test.NUnit.Assert.areEqual$1(true, (Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C14, 16, 284, "P4").is || false), "P4");
        },
        isStaticIsFalseForIndexer: function () {
            Bridge.Test.NUnit.Assert.areEqual(false, (Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C15, 16, 284, "Item").is || false));
            Bridge.Test.NUnit.Assert.areEqual(false, (Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C24, 16, 284, "Item").is || false));
        },
        propertyTypeIsCorrectForProperty: function () {
            Bridge.Test.NUnit.Assert.areEqual$1(System.Int32, Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C14, 16, 284, "P1").rt, "P1");
            Bridge.Test.NUnit.Assert.areEqual$1(System.String, Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C14, 16, 284, "P2").rt, "P2");
            Bridge.Test.NUnit.Assert.areEqual$1(System.DateTime, Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C14, 16, 284, "P3").rt, "P3");
            Bridge.Test.NUnit.Assert.areEqual$1(System.Double, Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C14, 16, 284, "P4").rt, "P4");
        },
        propertyTypeIsCorrectForIndexer: function () {
            Bridge.Test.NUnit.Assert.areEqual(System.String, Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C15, 16, 284, "Item").rt);
            Bridge.Test.NUnit.Assert.areEqual(System.String, Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C24, 16, 284, "Item").rt);
        },
        indexParameterTypesAreEmptyForProperty: function () {
            Bridge.Test.NUnit.Assert.areEqual$1(System.Array.init(0, null, Function), (Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C14, 16, 284, "P1").p || []), "P1");
            Bridge.Test.NUnit.Assert.areEqual$1(System.Array.init(0, null, Function), (Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C14, 16, 284, "P2").p || []), "P2");
            Bridge.Test.NUnit.Assert.areEqual$1(System.Array.init(0, null, Function), (Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C14, 16, 284, "P3").p || []), "P3");
            Bridge.Test.NUnit.Assert.areEqual$1(System.Array.init(0, null, Function), (Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C14, 16, 284, "P4").p || []), "P4");
        },
        indexParameterTypesAreCorrectForIndexer: function () {
            Bridge.Test.NUnit.Assert.areEqual(System.Array.init([System.Int32, System.String], Function), (Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C15, 16, 284, "Item").p || []));
            Bridge.Test.NUnit.Assert.areEqual(System.Array.init([System.Int32, System.String], Function), (Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C24, 16, 284, "Item").p || []));
        },
        propertiesForGetMethodAreCorrectForPropertyImplementedAsGetAndSetMethods: function () {
            var m1 = Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C14, 16, 284, "P1").g;
            var m2 = Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C14, 16, 284, "P3").g;
            var m3 = Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C14, 16, 284, "P13").g;
            var m4 = Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C14, 16, 284, "P14").g;

            Bridge.Test.NUnit.Assert.areEqual$1(8, m1.t, "m1.MemberType");
            Bridge.Test.NUnit.Assert.areEqual$1(8, m2.t, "m2.MemberType");
            Bridge.Test.NUnit.Assert.areEqual$1(8, m3.t, "m3.MemberType");
            Bridge.Test.NUnit.Assert.areEqual$1("get_P1", m1.n, "m1.Name");
            Bridge.Test.NUnit.Assert.areEqual$1("get_P3", m2.n, "m2.Name");
            Bridge.Test.NUnit.Assert.areEqual$1("get_P13", m3.n, "m3.Name");
            Bridge.Test.NUnit.Assert.areEqual$1(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C14, m1.td, "m1.DeclaringType");
            Bridge.Test.NUnit.Assert.areEqual$1(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C14, m2.td, "m2.DeclaringType");
            Bridge.Test.NUnit.Assert.areEqual$1(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C14, m3.td, "m3.DeclaringType");
            Bridge.Test.NUnit.Assert.false$1((m1.is || false), "m1.IsStatic");
            Bridge.Test.NUnit.Assert.true$1((m2.is || false), "m2.IsStatic");
            Bridge.Test.NUnit.Assert.false$1((m3.is || false), "m3.IsStatic");
            Bridge.Test.NUnit.Assert.areEqual$1(0, (m1.p || []).length, "m1.ParameterTypes");
            Bridge.Test.NUnit.Assert.areEqual$1(0, (m2.p || []).length, "m2.ParameterTypes");
            Bridge.Test.NUnit.Assert.areEqual$1(0, (m3.p || []).length, "m3.ParameterTypes");
            Bridge.Test.NUnit.Assert.false$1((m1.t === 1), "m1.IsConstructor");
            Bridge.Test.NUnit.Assert.false$1((m2.t === 1), "m2.IsConstructor");
            Bridge.Test.NUnit.Assert.false$1((m3.t === 1), "m3.IsConstructor");
            Bridge.Test.NUnit.Assert.areEqual$1(System.Int32, m1.rt, "m1.ReturnType");
            Bridge.Test.NUnit.Assert.areEqual$1(System.DateTime, m2.rt, "m2.ReturnType");
            Bridge.Test.NUnit.Assert.areEqual$1(System.Int32, m3.rt, "m3.ReturnType");
            Bridge.Test.NUnit.Assert.areEqual$1(0, (m1.tpc || 0), "m1.TypeParameterCount");
            Bridge.Test.NUnit.Assert.areEqual$1(0, (m2.tpc || 0), "m2.TypeParameterCount");
            Bridge.Test.NUnit.Assert.areEqual$1(0, (m3.tpc || 0), "m3.TypeParameterCount");
            Bridge.Test.NUnit.Assert.areEqual$1(false, (!!m1.tpc), "m1.IsGenericMethodDefinition");
            Bridge.Test.NUnit.Assert.areEqual$1(false, (!!m2.tpc), "m2.IsGenericMethodDefinition");
            Bridge.Test.NUnit.Assert.areEqual$1(false, (!!m3.tpc), "m3.IsGenericMethodDefinition");

            var c = Bridge.merge(new Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C14(), {
                P1: 78
            } );
            var p1 = Bridge.Reflection.midel(m1, c)(null);
            Bridge.Test.NUnit.Assert.areEqual$1(78, Bridge.unbox(p1), "m1.Invoke");

            Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C14.P3 = new Date(2012, 4 - 1, 2);
            var p2 = Bridge.Reflection.midel(m2, null)(null);
            Bridge.Test.NUnit.Assert.areEqual$1(new Date(2012, 4 - 1, 2), Bridge.unbox(p2), "m2.Invoke");

            c = Bridge.merge(new Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C14(), {
                p13Field: 13
            } );
            var p3 = Bridge.Reflection.midel(m3, c)(null);
            Bridge.Test.NUnit.Assert.areEqual$1(13, Bridge.unbox(p3), "m3.Invoke");

            Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C14.p14Field = 124;
            var p4 = Bridge.Reflection.midel(m4, null)(null);
            Bridge.Test.NUnit.Assert.areEqual$1(124, Bridge.unbox(p4), "m4.Invoke");
        },
        propertiesForSetMethodAreCorrectForPropertyImplementedAsGetAndSetMethods: function () {
            var m1 = Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C14, 16, 284, "P1").s;
            var m2 = Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C14, 16, 284, "P3").s;
            var m3 = Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C14, 16, 284, "P13").s;
            var m4 = Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C14, 16, 284, "P14").s;

            Bridge.Test.NUnit.Assert.areEqual$1(8, m1.t, "m1.MemberType");
            Bridge.Test.NUnit.Assert.areEqual$1(8, m2.t, "m2.MemberType");
            Bridge.Test.NUnit.Assert.areEqual$1(8, m3.t, "m3.MemberType");
            Bridge.Test.NUnit.Assert.areEqual$1("set_P1", m1.n, "m1.Name");
            Bridge.Test.NUnit.Assert.areEqual$1("set_P3", m2.n, "m2.Name");
            Bridge.Test.NUnit.Assert.areEqual$1("set_P13", m3.n, "m2.Name");
            Bridge.Test.NUnit.Assert.areEqual$1(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C14, m1.td, "m1.DeclaringType");
            Bridge.Test.NUnit.Assert.areEqual$1(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C14, m2.td, "m2.DeclaringType");
            Bridge.Test.NUnit.Assert.areEqual$1(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C14, m3.td, "m3.DeclaringType");
            Bridge.Test.NUnit.Assert.false$1((m1.is || false), "m1.IsStatic");
            Bridge.Test.NUnit.Assert.true$1((m2.is || false), "m2.IsStatic");
            Bridge.Test.NUnit.Assert.false$1((m3.is || false), "m3.IsStatic");
            Bridge.Test.NUnit.Assert.areEqual$1(System.Array.init([System.Int32], Function), (m1.p || []), "m1.ParameterTypes");
            Bridge.Test.NUnit.Assert.areEqual$1(System.Array.init([System.DateTime], Function), (m2.p || []), "m2.ParameterTypes");
            Bridge.Test.NUnit.Assert.areEqual$1(System.Array.init([System.Int32], Function), (m3.p || []), "m3.ParameterTypes");
            Bridge.Test.NUnit.Assert.false$1((m1.t === 1), "m1.IsConstructor");
            Bridge.Test.NUnit.Assert.false$1((m2.t === 1), "m2.IsConstructor");
            Bridge.Test.NUnit.Assert.false$1((m3.t === 1), "m3.IsConstructor");
            Bridge.Test.NUnit.Assert.areEqual$1(System.Object, m1.rt, "m1.ReturnType");
            Bridge.Test.NUnit.Assert.areEqual$1(System.Object, m2.rt, "m2.ReturnType");
            Bridge.Test.NUnit.Assert.areEqual$1(System.Object, m3.rt, "m3.ReturnType");
            Bridge.Test.NUnit.Assert.areEqual$1(0, (m1.tpc || 0), "m1.TypeParameterCount");
            Bridge.Test.NUnit.Assert.areEqual$1(0, (m2.tpc || 0), "m2.TypeParameterCount");
            Bridge.Test.NUnit.Assert.areEqual$1(0, (m3.tpc || 0), "m3.TypeParameterCount");
            Bridge.Test.NUnit.Assert.areEqual$1(false, (!!m1.tpc), "m1.IsGenericMethodDefinition");
            Bridge.Test.NUnit.Assert.areEqual$1(false, (!!m2.tpc), "m2.IsGenericMethodDefinition");
            Bridge.Test.NUnit.Assert.areEqual$1(false, (!!m2.tpc), "m3.IsGenericMethodDefinition");

            var c = new Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C14();
            Bridge.Reflection.midel(m1, c)(42);
            Bridge.Test.NUnit.Assert.areEqual$1(42, c.P1, "m1.Invoke");

            Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C14.P3 = new Date(2010, 1 - 1, 1);
            Bridge.Reflection.midel(m2, null)(new Date(2012, 2 - 1, 3));
            Bridge.Test.NUnit.Assert.areEqual$1(new Date(2012, 2 - 1, 3), Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C14.P3, "m2.Invoke");

            c = new Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C14();
            Bridge.Reflection.midel(m3, c)(422);
            Bridge.Test.NUnit.Assert.areEqual$1(422, c.p13Field, "m3.Invoke");

            Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C14.p14Field = 11;
            Bridge.Reflection.midel(m4, null)(52);
            Bridge.Test.NUnit.Assert.areEqual$1(52, Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C14.p14Field, "m4.Invoke");
        },
        propertiesForGetMethodAreCorrectForPropertyImplementedAsFields: function () {
            var m1 = Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C14, 16, 284, "P2").g;
            var m2 = Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C14, 16, 284, "P4").g;

            Bridge.Test.NUnit.Assert.areEqual$1(8, m1.t, "m1.MemberType");
            Bridge.Test.NUnit.Assert.areEqual$1(8, m2.t, "m2.MemberType");
            Bridge.Test.NUnit.Assert.areEqual$1("get_P2", m1.n, "m1.Name");
            Bridge.Test.NUnit.Assert.areEqual$1("get_P4", m2.n, "m2.Name");
            Bridge.Test.NUnit.Assert.areEqual$1(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C14, m1.td, "m1.DeclaringType");
            Bridge.Test.NUnit.Assert.areEqual$1(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C14, m2.td, "m2.DeclaringType");
            Bridge.Test.NUnit.Assert.false$1((m1.is || false), "m1.IsStatic");
            Bridge.Test.NUnit.Assert.true$1((m2.is || false), "m2.IsStatic");
            Bridge.Test.NUnit.Assert.areEqual$1(0, (m1.p || []).length, "m1.ParameterTypes");
            Bridge.Test.NUnit.Assert.areEqual$1(0, (m2.p || []).length, "m2.ParameterTypes");
            Bridge.Test.NUnit.Assert.false$1((m1.t === 1), "m1.IsConstructor");
            Bridge.Test.NUnit.Assert.false$1((m2.t === 1), "m2.IsConstructor");
            Bridge.Test.NUnit.Assert.areEqual$1(System.String, m1.rt, "m1.ReturnType");
            Bridge.Test.NUnit.Assert.areEqual$1(System.Double, m2.rt, "m2.ReturnType");
            Bridge.Test.NUnit.Assert.areEqual$1(0, (m1.tpc || 0), "m1.TypeParameterCount");
            Bridge.Test.NUnit.Assert.areEqual$1(0, (m2.tpc || 0), "m2.TypeParameterCount");
            Bridge.Test.NUnit.Assert.areEqual$1(false, (!!m1.tpc), "m1.IsGenericMethodDefinition");
            Bridge.Test.NUnit.Assert.areEqual$1(false, (!!m2.tpc), "m2.IsGenericMethodDefinition");

            var c = Bridge.merge(new Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C14(), {
                P2: "Hello, world"
            } );
            var p1 = Bridge.Reflection.midel(m1, c)(null);
            Bridge.Test.NUnit.Assert.areEqual$1("Hello, world", Bridge.unbox(p1), "m1.Invoke");

            Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C14.P4 = 3.5;
            var p2 = Bridge.Reflection.midel(m2, null)(null);
            Bridge.Test.NUnit.Assert.areEqual$1(3.5, Bridge.unbox(p2), "m2.Invoke");
        },
        propertiesForSetMethodAreCorrectForPropertyImplementedAsFields: function () {
            var m1 = Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C14, 16, 284, "P2").s;
            var m2 = Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C14, 16, 284, "P4").s;

            Bridge.Test.NUnit.Assert.areEqual$1(8, m1.t, "m1.MemberType");
            Bridge.Test.NUnit.Assert.areEqual$1(8, m2.t, "m2.MemberType");
            Bridge.Test.NUnit.Assert.areEqual$1("set_P2", m1.n, "m1.Name");
            Bridge.Test.NUnit.Assert.areEqual$1("set_P4", m2.n, "m2.Name");
            Bridge.Test.NUnit.Assert.areEqual$1(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C14, m1.td, "m1.DeclaringType");
            Bridge.Test.NUnit.Assert.areEqual$1(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C14, m2.td, "m2.DeclaringType");
            Bridge.Test.NUnit.Assert.false$1((m1.is || false), "m1.IsStatic");
            Bridge.Test.NUnit.Assert.true$1((m2.is || false), "m2.IsStatic");
            Bridge.Test.NUnit.Assert.areEqual$1(System.Array.init([System.String], Function), (m1.p || []), "m1.ParameterTypes");
            Bridge.Test.NUnit.Assert.areEqual$1(System.Array.init([System.Double], Function), (m2.p || []), "m2.ParameterTypes");
            Bridge.Test.NUnit.Assert.false$1((m1.t === 1), "m1.IsConstructor");
            Bridge.Test.NUnit.Assert.false$1((m2.t === 1), "m2.IsConstructor");
            Bridge.Test.NUnit.Assert.areEqual$1(System.Object, m1.rt, "m1.ReturnType");
            Bridge.Test.NUnit.Assert.areEqual$1(System.Object, m2.rt, "m2.ReturnType");
            Bridge.Test.NUnit.Assert.areEqual$1(0, (m1.tpc || 0), "m1.TypeParameterCount");
            Bridge.Test.NUnit.Assert.areEqual$1(0, (m2.tpc || 0), "m2.TypeParameterCount");
            Bridge.Test.NUnit.Assert.areEqual$1(false, (!!m1.tpc), "m1.IsGenericMethodDefinition");
            Bridge.Test.NUnit.Assert.areEqual$1(false, (!!m2.tpc), "m2.IsGenericMethodDefinition");

            var c = new Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C14();
            Bridge.Reflection.midel(m1, c)("Something");
            Bridge.Test.NUnit.Assert.areEqual$1("Something", c.P2, "m1.Invoke");

            Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C14.P4 = 7.5;
            Bridge.Reflection.midel(m2, null)(2.5);
            Bridge.Test.NUnit.Assert.areEqual$1(2.5, Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C14.P4, "m2.Invoke");
        },
        propertiesForGetMethodAreCorrectForIndexer: function () {
            var m1 = Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C15, 16, 284, "Item").g;
            var m2 = Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C24, 16, 284, "Item").g;

            Bridge.Test.NUnit.Assert.areEqual$1(8, m1.t, "m1.MemberType");
            Bridge.Test.NUnit.Assert.areEqual$1(8, m2.t, "m2.MemberType");
            Bridge.Test.NUnit.Assert.areEqual$1("get_Item", m1.n, "m1.Name");
            Bridge.Test.NUnit.Assert.areEqual$1("get_Item", m2.n, "m2.Name");
            Bridge.Test.NUnit.Assert.areEqual$1(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C15, m1.td, "m1.DeclaringType");
            Bridge.Test.NUnit.Assert.areEqual$1(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C24, m2.td, "m2.DeclaringType");
            Bridge.Test.NUnit.Assert.false$1((m1.is || false), "m1.IsStatic");
            Bridge.Test.NUnit.Assert.false$1((m2.is || false), "m2.IsStatic");
            Bridge.Test.NUnit.Assert.areEqual$1(System.Array.init([System.Int32, System.String], Function), (m1.p || []), "m1.ParameterTypes");
            Bridge.Test.NUnit.Assert.areEqual$1(System.Array.init([System.Int32, System.String], Function), (m2.p || []), "m2.ParameterTypes");
            Bridge.Test.NUnit.Assert.false$1((m1.t === 1), "m1.IsConstructor");
            Bridge.Test.NUnit.Assert.false$1((m2.t === 1), "m2.IsConstructor");
            Bridge.Test.NUnit.Assert.areEqual$1(System.String, m1.rt, "m1.ReturnType");
            Bridge.Test.NUnit.Assert.areEqual$1(System.String, m2.rt, "m2.ReturnType");
            Bridge.Test.NUnit.Assert.areEqual$1(0, (m1.tpc || 0), "m1.TypeParameterCount");
            Bridge.Test.NUnit.Assert.areEqual$1(0, (m2.tpc || 0), "m2.TypeParameterCount");
            Bridge.Test.NUnit.Assert.areEqual$1(false, (!!m1.tpc), "m1.IsGenericMethodDefinition");
            Bridge.Test.NUnit.Assert.areEqual$1(false, (!!m2.tpc), "m2.IsGenericMethodDefinition");

            var c1 = Bridge.merge(new Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C15(), {
                v: "X"
            } );
            var v1 = Bridge.Reflection.midel(m1, c1)(42, "Hello");
            Bridge.Test.NUnit.Assert.areEqual$1("X 42 Hello", Bridge.unbox(v1), "m1.Invoke");

            var c2 = Bridge.merge(new Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C24(), {
                v: "Y"
            } );
            var v2 = Bridge.Reflection.midel(m2, c2)(24, "World");
            Bridge.Test.NUnit.Assert.areEqual$1("Y 24 World", Bridge.unbox(v2), "m2.Invoke");
        },
        propertiesForSetMethodAreCorrectForIndexer: function () {
            var m1 = Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C15, 16, 284, "Item").s;
            var m2 = Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C24, 16, 284, "Item").s;

            Bridge.Test.NUnit.Assert.areEqual$1(8, m1.t, "m1.MemberType");
            Bridge.Test.NUnit.Assert.areEqual$1(8, m1.t, "m2.MemberType");
            Bridge.Test.NUnit.Assert.areEqual$1("set_Item", m1.n, "m1.Name");
            Bridge.Test.NUnit.Assert.areEqual$1("set_Item", m2.n, "m2.Name");
            Bridge.Test.NUnit.Assert.areEqual$1(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C15, m1.td, "m1.DeclaringType");
            Bridge.Test.NUnit.Assert.areEqual$1(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C24, m2.td, "m2.DeclaringType");
            Bridge.Test.NUnit.Assert.false$1((m1.is || false), "m1.IsStatic");
            Bridge.Test.NUnit.Assert.false$1((m2.is || false), "m2.IsStatic");
            Bridge.Test.NUnit.Assert.areEqual$1(System.Array.init([System.Int32, System.String, System.String], Function), (m1.p || []), "m1.ParameterTypes");
            Bridge.Test.NUnit.Assert.areEqual$1(System.Array.init([System.Int32, System.String, System.String], Function), (m2.p || []), "m2.ParameterTypes");
            Bridge.Test.NUnit.Assert.false$1((m1.t === 1), "m1.IsConstructor");
            Bridge.Test.NUnit.Assert.false$1((m2.t === 1), "m2.IsConstructor");
            Bridge.Test.NUnit.Assert.areEqual$1(System.Object, m1.rt, "m1.ReturnType");
            Bridge.Test.NUnit.Assert.areEqual$1(System.Object, m2.rt, "m2.ReturnType");
            Bridge.Test.NUnit.Assert.areEqual$1(0, (m1.tpc || 0), "m1.TypeParameterCount");
            Bridge.Test.NUnit.Assert.areEqual$1(0, (m2.tpc || 0), "m2.TypeParameterCount");
            Bridge.Test.NUnit.Assert.areEqual$1(false, (!!m1.tpc), "m1.IsGenericMethodDefinition");
            Bridge.Test.NUnit.Assert.areEqual$1(false, (!!m2.tpc), "m2.IsGenericMethodDefinition");

            var c1 = new Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C15();
            Bridge.Reflection.midel(m1, c1)(42, "Hello", "The_value");

            Bridge.Test.NUnit.Assert.areEqual$1(42, c1.x, "m1.Invoke (x)");
            Bridge.Test.NUnit.Assert.areEqual$1("Hello", c1.s, "m1.Invoke (s)");
            Bridge.Test.NUnit.Assert.areEqual$1("The_value", c1.v, "m1.Invoke (value)");

            var c2 = new Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C24();
            Bridge.Reflection.midel(m2, c2)(234, "World", "Other_value");

            Bridge.Test.NUnit.Assert.areEqual$1(234, c2.x, "m2.Invoke (x)");
            Bridge.Test.NUnit.Assert.areEqual$1("World", c2.s, "m2.Invoke (s)");
            Bridge.Test.NUnit.Assert.areEqual$1("Other_value", c2.v, "m2.Invoke (value)");
        },
        canReadAndWriteAndPropertiesWithOnlyOneAccessor: function () {
            Bridge.Test.NUnit.Assert.areEqual$1(true, (!!Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C14, 16, 284, "P1").g), "P1.CanRead");
            Bridge.Test.NUnit.Assert.areEqual$1(true, (!!Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C14, 16, 284, "P1").s), "P1.CanWrite");
            Bridge.Test.NUnit.Assert.areEqual$1(true, (!!Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C14, 16, 284, "P2").g), "P2.CanRead");
            Bridge.Test.NUnit.Assert.areEqual$1(true, (!!Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C14, 16, 284, "P2").s), "P2.CanWrite");
            Bridge.Test.NUnit.Assert.areEqual$1(true, (!!Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C14, 16, 284, "P3").g), "P3.CanRead");
            Bridge.Test.NUnit.Assert.areEqual$1(true, (!!Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C14, 16, 284, "P3").s), "P3.CanWrite");
            Bridge.Test.NUnit.Assert.areEqual$1(true, (!!Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C14, 16, 284, "P4").g), "P4.CanRead");
            Bridge.Test.NUnit.Assert.areEqual$1(true, (!!Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C14, 16, 284, "P4").s), "P4.CanWrite");
            Bridge.Test.NUnit.Assert.areEqual$1(true, (!!Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C14, 16, 284, "P5").g), "P5.CanRead");
            Bridge.Test.NUnit.Assert.areEqual$1(false, (!!Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C14, 16, 284, "P5").s), "P5.CanWrite");
            Bridge.Test.NUnit.Assert.areEqual$1(true, (!!Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C14, 16, 284, "P6").g), "P6.CanRead");
            Bridge.Test.NUnit.Assert.areEqual$1(true, (!!Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C14, 16, 284, "P6").s), "P6.CanWrite");
            Bridge.Test.NUnit.Assert.areEqual$1(true, (!!Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C14, 16, 284, "P7").g), "P7.CanRead");
            Bridge.Test.NUnit.Assert.areEqual$1(false, (!!Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C14, 16, 284, "P7").s), "P7.CanWrite");
            Bridge.Test.NUnit.Assert.areEqual$1(true, (!!Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C14, 16, 284, "P8").g), "P8.CanRead");
            Bridge.Test.NUnit.Assert.areEqual$1(true, (!!Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C14, 16, 284, "P8").s), "P8.CanWrite");
            Bridge.Test.NUnit.Assert.areEqual$1(false, (!!Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C14, 16, 284, "P9").g), "P9.CanRead");
            Bridge.Test.NUnit.Assert.areEqual$1(true, (!!Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C14, 16, 284, "P9").s), "P9.CanWrite");
            Bridge.Test.NUnit.Assert.areEqual$1(true, (!!Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C14, 16, 284, "P10").g), "P10.CanRead");
            Bridge.Test.NUnit.Assert.areEqual$1(true, (!!Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C14, 16, 284, "P10").s), "P10.CanWrite");
            Bridge.Test.NUnit.Assert.areEqual$1(false, (!!Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C14, 16, 284, "P11").g), "P11.CanRead");
            Bridge.Test.NUnit.Assert.areEqual$1(true, (!!Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C14, 16, 284, "P11").s), "P11.CanWrite");
            Bridge.Test.NUnit.Assert.areEqual$1(true, (!!Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C14, 16, 284, "P12").g), "P12.CanRead");
            Bridge.Test.NUnit.Assert.areEqual$1(true, (!!Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C14, 16, 284, "P12").s), "P12.CanWrite");

            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C14, 16, 284, "P1").g != null, "P1.GetMethod");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C14, 16, 284, "P1").s != null, "P1.SetMethod");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C14, 16, 284, "P2").g != null, "P2.GetMethod");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C14, 16, 284, "P2").s != null, "P2.SetMethod");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C14, 16, 284, "P3").g != null, "P3.GetMethod");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C14, 16, 284, "P3").s != null, "P3.SetMethod");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C14, 16, 284, "P4").g != null, "P4.GetMethod");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C14, 16, 284, "P4").s != null, "P4.SetMethod");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C14, 16, 284, "P5").g != null, "P5.GetMethod");
            Bridge.Test.NUnit.Assert.false$1(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C14, 16, 284, "P5").s != null, "P5.SetMethod");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C14, 16, 284, "P6").g != null, "P6.GetMethod");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C14, 16, 284, "P6").s != null, "P6.SetMethod");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C14, 16, 284, "P7").g != null, "P7.GetMethod");
            Bridge.Test.NUnit.Assert.false$1(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C14, 16, 284, "P7").s != null, "P7.SetMethod");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C14, 16, 284, "P8").g != null, "P8.GetMethod");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C14, 16, 284, "P8").s != null, "P8.SetMethod");
            Bridge.Test.NUnit.Assert.false$1(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C14, 16, 284, "P9").g != null, "P9.GetMethod");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C14, 16, 284, "P9").s != null, "P9.SetMethod");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C14, 16, 284, "P10").g != null, "P10.GetMethod");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C14, 16, 284, "P10").s != null, "P10.SetMethod");
            Bridge.Test.NUnit.Assert.false$1(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C14, 16, 284, "P11").g != null, "P11.GetMethod");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C14, 16, 284, "P11").s != null, "P11.SetMethod");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C14, 16, 284, "P12").g != null, "P12.GetMethod");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C14, 16, 284, "P12").s != null, "P12.SetMethod");
        },
        canReadAndWriteAndIndexersWithOnlyOneAccessor: function () {
            Bridge.Test.NUnit.Assert.areEqual$1(true, (!!Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C15, 16, 284, "Item").g), "C15.CanRead");
            Bridge.Test.NUnit.Assert.areEqual$1(true, (!!Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C15, 16, 284, "Item").s), "C15.CanWrite");
            Bridge.Test.NUnit.Assert.areEqual$1(true, (!!Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C16, 16, 284, "Item").g), "C16.CanRead");
            Bridge.Test.NUnit.Assert.areEqual$1(false, (!!Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C16, 16, 284, "Item").s), "C16.CanWrite");
            Bridge.Test.NUnit.Assert.areEqual$1(false, (!!Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C17, 16, 284, "Item").g), "C17.CanRead");
            Bridge.Test.NUnit.Assert.areEqual$1(true, (!!Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C17, 16, 284, "Item").s), "C17.CanWrite");

            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C15, 16, 284, "Item").g != null, "C15.GetMethod");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C15, 16, 284, "Item").s != null, "C15.SetMethod");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C16, 16, 284, "Item").g != null, "C16.GetMethod");
            Bridge.Test.NUnit.Assert.false$1(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C16, 16, 284, "Item").s != null, "C16.SetMethod");
            Bridge.Test.NUnit.Assert.false$1(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C17, 16, 284, "Item").g != null, "C17.GetMethod");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C17, 16, 284, "Item").s != null, "C17.SetMethod");
        },
        propertyInfoGetValueWorks: function () {
            var p1 = Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C14, 16, 284, "P1");
            var p2 = Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C14, 16, 284, "P2");
            var p3 = Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C14, 16, 284, "P3");
            var p4 = Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C14, 16, 284, "P4");
            var i = Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C15, 16, 284, "Item");

            var c14 = Bridge.merge(new Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C14(), {
                P1: 42,
                P2: "Hello, world!"
            } );
            Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C14.P3 = new Date(2013, 3 - 1, 5);
            Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C14.P4 = 7.5;
            Bridge.Test.NUnit.Assert.areEqual$1(42, Bridge.unbox(Bridge.Reflection.midel(p1.g, c14)()), "P1.GetValue");
            Bridge.Test.NUnit.Assert.areEqual$1("Hello, world!", Bridge.unbox(Bridge.Reflection.midel(p2.g, c14)()), "P2.GetValue");
            Bridge.Test.NUnit.Assert.areEqual$1(new Date(2013, 3 - 1, 5), Bridge.unbox(Bridge.Reflection.midel(p3.g, null)()), "P3.GetValue");
            Bridge.Test.NUnit.Assert.areEqual$1(7.5, Bridge.unbox(Bridge.Reflection.midel(p4.g, null)()), "P4.GetValue");

            var c15 = Bridge.merge(new Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C15(), {
                v: "X"
            } );
            Bridge.Test.NUnit.Assert.areEqual$1("X 42 Hello", Bridge.unbox(Bridge.Reflection.midel(i.g, c15).apply(null, System.Array.init([Bridge.box(42, System.Int32), "Hello"], System.Object))), "Item.GetValue");
        },
        propertyInfoSetValueWorks: function () {
            var p1 = Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C14, 16, 284, "P1");
            var p2 = Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C14, 16, 284, "P2");
            var p3 = Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C14, 16, 284, "P3");
            var p4 = Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C14, 16, 284, "P4");
            var i = Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C15, 16, 284, "Item");

            var c14 = new Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C14();
            Bridge.Reflection.midel(p1.s, c14)(42);
            Bridge.Reflection.midel(p2.s, c14)("Hello, world!");
            Bridge.Reflection.midel(p3.s, null)(new Date(2013, 3 - 1, 5));
            Bridge.Reflection.midel(p4.s, null)(7.5);

            Bridge.Test.NUnit.Assert.areEqual$1(42, c14.P1, "P1.SetValue");
            Bridge.Test.NUnit.Assert.areEqual$1("Hello, world!", c14.P2, "P2.SetValue");
            Bridge.Test.NUnit.Assert.areEqual$1(new Date(2013, 3 - 1, 5), Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C14.P3, "P3.SetValue");
            Bridge.Test.NUnit.Assert.areEqual$1(7.5, Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C14.P4, "P4.SetValue");

            var c15 = Bridge.merge(new Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C15(), {
                v: "X"
            } );
            Bridge.Reflection.midel(i.s, c15).apply(null, System.Array.init([Bridge.box(378, System.Int32), "X"], System.Object).concat("The_value"));
            Bridge.Test.NUnit.Assert.areEqual$1("X", c15.s, "Item.SetValue.s");
            Bridge.Test.NUnit.Assert.areEqual$1(378, c15.x, "Item.SetValue.x");
            Bridge.Test.NUnit.Assert.areEqual$1("The_value", c15.v, "Item.SetValue.value");
        },
        testMemberAttribute: function (member, expectedA1) {
            var all = System.Attribute.getCustomAttributes(member, false);
            Bridge.Test.NUnit.Assert.areEqual(2, all.length);
            Bridge.Test.NUnit.Assert.true(Bridge.is(all[System.Array.index(0, all)], Bridge.ClientTest.Batch4.Reflection.ReflectionTests.A1Attribute) || Bridge.is(all[System.Array.index(1, all)], Bridge.ClientTest.Batch4.Reflection.ReflectionTests.A1Attribute));
            Bridge.Test.NUnit.Assert.true(Bridge.is(all[System.Array.index(0, all)], Bridge.ClientTest.Batch4.Reflection.ReflectionTests.A3Attribute) || Bridge.is(all[System.Array.index(1, all)], Bridge.ClientTest.Batch4.Reflection.ReflectionTests.A3Attribute));
            Bridge.Test.NUnit.Assert.areEqual(expectedA1, Bridge.cast((Bridge.is(all[System.Array.index(0, all)], Bridge.ClientTest.Batch4.Reflection.ReflectionTests.A1Attribute) ? all[System.Array.index(0, all)] : all[System.Array.index(1, all)]), Bridge.ClientTest.Batch4.Reflection.ReflectionTests.A1Attribute).X);

            all = System.Attribute.getCustomAttributes(member, false, true);
            Bridge.Test.NUnit.Assert.areEqual(2, all.length);
            Bridge.Test.NUnit.Assert.true(Bridge.is(all[System.Array.index(0, all)], Bridge.ClientTest.Batch4.Reflection.ReflectionTests.A1Attribute) || Bridge.is(all[System.Array.index(1, all)], Bridge.ClientTest.Batch4.Reflection.ReflectionTests.A1Attribute));
            Bridge.Test.NUnit.Assert.true(Bridge.is(all[System.Array.index(0, all)], Bridge.ClientTest.Batch4.Reflection.ReflectionTests.A3Attribute) || Bridge.is(all[System.Array.index(1, all)], Bridge.ClientTest.Batch4.Reflection.ReflectionTests.A3Attribute));
            Bridge.Test.NUnit.Assert.areEqual(expectedA1, Bridge.cast((Bridge.is(all[System.Array.index(0, all)], Bridge.ClientTest.Batch4.Reflection.ReflectionTests.A1Attribute) ? all[System.Array.index(0, all)] : all[System.Array.index(1, all)]), Bridge.ClientTest.Batch4.Reflection.ReflectionTests.A1Attribute).X);

            all = System.Attribute.getCustomAttributes(member, Bridge.ClientTest.Batch4.Reflection.ReflectionTests.A1Attribute);
            Bridge.Test.NUnit.Assert.areEqual(1, all.length);
            Bridge.Test.NUnit.Assert.true(Bridge.is(all[System.Array.index(0, all)], Bridge.ClientTest.Batch4.Reflection.ReflectionTests.A1Attribute));
            Bridge.Test.NUnit.Assert.areEqual(expectedA1, Bridge.cast(all[System.Array.index(0, all)], Bridge.ClientTest.Batch4.Reflection.ReflectionTests.A1Attribute).X);

            all = System.Attribute.getCustomAttributes(member, Bridge.ClientTest.Batch4.Reflection.ReflectionTests.A1Attribute, false);
            Bridge.Test.NUnit.Assert.areEqual(1, all.length);
            Bridge.Test.NUnit.Assert.true(Bridge.is(all[System.Array.index(0, all)], Bridge.ClientTest.Batch4.Reflection.ReflectionTests.A1Attribute));
            Bridge.Test.NUnit.Assert.areEqual(expectedA1, Bridge.cast(all[System.Array.index(0, all)], Bridge.ClientTest.Batch4.Reflection.ReflectionTests.A1Attribute).X);

            Bridge.Test.NUnit.Assert.areEqual(0, System.Attribute.getCustomAttributes(member, Bridge.ClientTest.Batch4.Reflection.ReflectionTests.A4Attribute).length);
            Bridge.Test.NUnit.Assert.areEqual(0, System.Attribute.getCustomAttributes(member, Bridge.ClientTest.Batch4.Reflection.ReflectionTests.A4Attribute, false).length);
        },
        memberAttributesWork: function () {
            this.testMemberAttribute(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C18, 1, 284, null, System.Array.init(0, null, Function)), 1);
            this.testMemberAttribute(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C18, 8, 284, "M"), 2);
            this.testMemberAttribute(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C18, 4, 284, "F"), 3);
            this.testMemberAttribute(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C18, 16, 284, "P"), 4);
            this.testMemberAttribute(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C18, 16, 284, "P").g, 5);
            this.testMemberAttribute(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C18, 16, 284, "P").s, 6);
            this.testMemberAttribute(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C18, 2, 284, "E"), 7);
            this.testMemberAttribute(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C18, 2, 284, "E").ad, 8);
            this.testMemberAttribute(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C18, 2, 284, "E").r, 9);

            Bridge.Test.NUnit.Assert.areEqual(0, System.Attribute.getCustomAttributes(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C2, 8, 284, "M1"), false).length);
        },
        membersReflectableAttributeWorks: function () {
            var c25 = Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C25;
            var c26 = Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C26;
            var c27 = Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C27;
            var c28 = Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C28;

            Bridge.Test.NUnit.Assert.null$1(Bridge.Reflection.getMembers(c25, 4, 284, "A1"), "C25.A1");
            Bridge.Test.NUnit.Assert.notNull$1(Bridge.Reflection.getMembers(c25, 4, 284, "B1"), "C25.B1");
            Bridge.Test.NUnit.Assert.notNull$1(Bridge.Reflection.getMembers(c25, 4, 284, "C1"), "C25.C1");
            Bridge.Test.NUnit.Assert.null$1(Bridge.Reflection.getMembers(c25, 4, 284, "D1"), "C25.D1");
            Bridge.Test.NUnit.Assert.null$1(Bridge.Reflection.getMembers(c25, 4, 284, "A2"), "C25.A2");
            Bridge.Test.NUnit.Assert.notNull$1(Bridge.Reflection.getMembers(c25, 4, 284, "B2"), "C25.B2");
            Bridge.Test.NUnit.Assert.notNull$1(Bridge.Reflection.getMembers(c25, 4, 284, "C2"), "C25.C2");
            Bridge.Test.NUnit.Assert.null$1(Bridge.Reflection.getMembers(c25, 4, 284, "D2"), "C25.D2");
            Bridge.Test.NUnit.Assert.null$1(Bridge.Reflection.getMembers(c25, 4, 284, "A3"), "C25.A3");
            Bridge.Test.NUnit.Assert.notNull$1(Bridge.Reflection.getMembers(c25, 4, 284, "B3"), "C25.B3");
            Bridge.Test.NUnit.Assert.notNull$1(Bridge.Reflection.getMembers(c25, 4, 284, "C3"), "C25.C3");
            Bridge.Test.NUnit.Assert.null$1(Bridge.Reflection.getMembers(c25, 4, 284, "D3"), "C25.D3");
            Bridge.Test.NUnit.Assert.null$1(Bridge.Reflection.getMembers(c25, 4, 284, "A4"), "C25.A4");
            Bridge.Test.NUnit.Assert.notNull$1(Bridge.Reflection.getMembers(c25, 4, 284, "B4"), "C25.B4");
            Bridge.Test.NUnit.Assert.notNull$1(Bridge.Reflection.getMembers(c25, 4, 284, "C4"), "C25.C4");
            Bridge.Test.NUnit.Assert.null$1(Bridge.Reflection.getMembers(c25, 4, 284, "D4"), "C25.D4");
            Bridge.Test.NUnit.Assert.null$1(Bridge.Reflection.getMembers(c25, 4, 284, "A5"), "C25.A5");
            Bridge.Test.NUnit.Assert.notNull$1(Bridge.Reflection.getMembers(c25, 4, 284, "B5"), "C25.B5");
            Bridge.Test.NUnit.Assert.notNull$1(Bridge.Reflection.getMembers(c25, 4, 284, "C5"), "C25.C5");
            Bridge.Test.NUnit.Assert.null$1(Bridge.Reflection.getMembers(c25, 4, 284, "D5"), "C25.D5");

            Bridge.Test.NUnit.Assert.notNull$1(Bridge.Reflection.getMembers(c26, 4, 284, "A1"), "C26.A1");
            Bridge.Test.NUnit.Assert.notNull$1(Bridge.Reflection.getMembers(c26, 4, 284, "B1"), "C26.B1");
            Bridge.Test.NUnit.Assert.notNull$1(Bridge.Reflection.getMembers(c26, 4, 284, "C1"), "C26.C1");
            Bridge.Test.NUnit.Assert.null$1(Bridge.Reflection.getMembers(c26, 4, 284, "D1"), "C26.D1");
            Bridge.Test.NUnit.Assert.null$1(Bridge.Reflection.getMembers(c26, 4, 284, "A2"), "C26.A2");
            Bridge.Test.NUnit.Assert.notNull$1(Bridge.Reflection.getMembers(c26, 4, 284, "B2"), "C26.B2");
            Bridge.Test.NUnit.Assert.notNull$1(Bridge.Reflection.getMembers(c26, 4, 284, "C2"), "C26.C2");
            Bridge.Test.NUnit.Assert.null$1(Bridge.Reflection.getMembers(c26, 4, 284, "D2"), "C26.D2");
            Bridge.Test.NUnit.Assert.notNull$1(Bridge.Reflection.getMembers(c26, 4, 284, "A3"), "C26.A3");
            Bridge.Test.NUnit.Assert.notNull$1(Bridge.Reflection.getMembers(c26, 4, 284, "B3"), "C26.B3");
            Bridge.Test.NUnit.Assert.notNull$1(Bridge.Reflection.getMembers(c26, 4, 284, "C3"), "C26.C3");
            Bridge.Test.NUnit.Assert.null$1(Bridge.Reflection.getMembers(c26, 4, 284, "D3"), "C26.D3");
            Bridge.Test.NUnit.Assert.notNull$1(Bridge.Reflection.getMembers(c26, 4, 284, "A4"), "C26.A4");
            Bridge.Test.NUnit.Assert.notNull$1(Bridge.Reflection.getMembers(c26, 4, 284, "B4"), "C26.B4");
            Bridge.Test.NUnit.Assert.notNull$1(Bridge.Reflection.getMembers(c26, 4, 284, "C4"), "C26.C4");
            Bridge.Test.NUnit.Assert.null$1(Bridge.Reflection.getMembers(c26, 4, 284, "D4"), "C26.D4");
            Bridge.Test.NUnit.Assert.null$1(Bridge.Reflection.getMembers(c26, 4, 284, "A5"), "C26.A5");
            Bridge.Test.NUnit.Assert.notNull$1(Bridge.Reflection.getMembers(c26, 4, 284, "B5"), "C26.B5");
            Bridge.Test.NUnit.Assert.notNull$1(Bridge.Reflection.getMembers(c26, 4, 284, "C5"), "C26.C5");
            Bridge.Test.NUnit.Assert.null$1(Bridge.Reflection.getMembers(c26, 4, 284, "D5"), "C26.D5");

            Bridge.Test.NUnit.Assert.notNull$1(Bridge.Reflection.getMembers(c27, 4, 284, "A1"), "C27.A1");
            Bridge.Test.NUnit.Assert.notNull$1(Bridge.Reflection.getMembers(c27, 4, 284, "B1"), "C27.B1");
            Bridge.Test.NUnit.Assert.notNull$1(Bridge.Reflection.getMembers(c27, 4, 284, "C1"), "C27.C1");
            Bridge.Test.NUnit.Assert.null$1(Bridge.Reflection.getMembers(c27, 4, 284, "D1"), "C27.D1");
            Bridge.Test.NUnit.Assert.notNull$1(Bridge.Reflection.getMembers(c27, 4, 284, "A2"), "C27.A2");
            Bridge.Test.NUnit.Assert.notNull$1(Bridge.Reflection.getMembers(c27, 4, 284, "B2"), "C27.B2");
            Bridge.Test.NUnit.Assert.notNull$1(Bridge.Reflection.getMembers(c27, 4, 284, "C2"), "C27.C2");
            Bridge.Test.NUnit.Assert.null$1(Bridge.Reflection.getMembers(c27, 4, 284, "D2"), "C27.D2");
            Bridge.Test.NUnit.Assert.notNull$1(Bridge.Reflection.getMembers(c27, 4, 284, "A3"), "C27.A3");
            Bridge.Test.NUnit.Assert.notNull$1(Bridge.Reflection.getMembers(c27, 4, 284, "B3"), "C27.B3");
            Bridge.Test.NUnit.Assert.notNull$1(Bridge.Reflection.getMembers(c27, 4, 284, "C3"), "C27.C3");
            Bridge.Test.NUnit.Assert.null$1(Bridge.Reflection.getMembers(c27, 4, 284, "D3"), "C27.D3");
            Bridge.Test.NUnit.Assert.notNull$1(Bridge.Reflection.getMembers(c27, 4, 284, "A4"), "C27.A4");
            Bridge.Test.NUnit.Assert.notNull$1(Bridge.Reflection.getMembers(c27, 4, 284, "B4"), "C27.B4");
            Bridge.Test.NUnit.Assert.notNull$1(Bridge.Reflection.getMembers(c27, 4, 284, "C4"), "C27.C4");
            Bridge.Test.NUnit.Assert.null$1(Bridge.Reflection.getMembers(c27, 4, 284, "D4"), "C27.D4");
            Bridge.Test.NUnit.Assert.null$1(Bridge.Reflection.getMembers(c27, 4, 284, "A5"), "C27.A5");
            Bridge.Test.NUnit.Assert.notNull$1(Bridge.Reflection.getMembers(c27, 4, 284, "B5"), "C27.B5");
            Bridge.Test.NUnit.Assert.notNull$1(Bridge.Reflection.getMembers(c27, 4, 284, "C5"), "C27.C5");
            Bridge.Test.NUnit.Assert.null$1(Bridge.Reflection.getMembers(c27, 4, 284, "D5"), "C27.D5");

            Bridge.Test.NUnit.Assert.notNull$1(Bridge.Reflection.getMembers(c28, 4, 284, "A1"), "C28.A1");
            Bridge.Test.NUnit.Assert.notNull$1(Bridge.Reflection.getMembers(c28, 4, 284, "B1"), "C28.B1");
            Bridge.Test.NUnit.Assert.notNull$1(Bridge.Reflection.getMembers(c28, 4, 284, "C1"), "C28.C1");
            Bridge.Test.NUnit.Assert.null$1(Bridge.Reflection.getMembers(c28, 4, 284, "D1"), "C28.D1");
            Bridge.Test.NUnit.Assert.notNull$1(Bridge.Reflection.getMembers(c28, 4, 284, "A2"), "C28.A2");
            Bridge.Test.NUnit.Assert.notNull$1(Bridge.Reflection.getMembers(c28, 4, 284, "B2"), "C28.B2");
            Bridge.Test.NUnit.Assert.notNull$1(Bridge.Reflection.getMembers(c28, 4, 284, "C2"), "C28.C2");
            Bridge.Test.NUnit.Assert.null$1(Bridge.Reflection.getMembers(c28, 4, 284, "D2"), "C28.D2");
            Bridge.Test.NUnit.Assert.notNull$1(Bridge.Reflection.getMembers(c28, 4, 284, "A3"), "C28.A3");
            Bridge.Test.NUnit.Assert.notNull$1(Bridge.Reflection.getMembers(c28, 4, 284, "B3"), "C28.B3");
            Bridge.Test.NUnit.Assert.notNull$1(Bridge.Reflection.getMembers(c28, 4, 284, "C3"), "C28.C3");
            Bridge.Test.NUnit.Assert.null$1(Bridge.Reflection.getMembers(c28, 4, 284, "D3"), "C28.D3");
            Bridge.Test.NUnit.Assert.notNull$1(Bridge.Reflection.getMembers(c28, 4, 284, "A4"), "C28.A4");
            Bridge.Test.NUnit.Assert.notNull$1(Bridge.Reflection.getMembers(c28, 4, 284, "B4"), "C28.B4");
            Bridge.Test.NUnit.Assert.notNull$1(Bridge.Reflection.getMembers(c28, 4, 284, "C4"), "C28.C4");
            Bridge.Test.NUnit.Assert.null$1(Bridge.Reflection.getMembers(c28, 4, 284, "D4"), "C28.D4");
            Bridge.Test.NUnit.Assert.notNull$1(Bridge.Reflection.getMembers(c28, 4, 284, "A5"), "C28.A5");
            Bridge.Test.NUnit.Assert.notNull$1(Bridge.Reflection.getMembers(c28, 4, 284, "B5"), "C28.B5");
            Bridge.Test.NUnit.Assert.notNull$1(Bridge.Reflection.getMembers(c28, 4, 284, "C5"), "C28.C5");
            Bridge.Test.NUnit.Assert.null$1(Bridge.Reflection.getMembers(c28, 4, 284, "D5"), "C28.D5");
        }
    });

    Bridge.ns("Bridge.ClientTest.Batch4.Reflection.ReflectionTests", $asm.$);

    Bridge.apply($asm.$.Bridge.ClientTest.Batch4.Reflection.ReflectionTests, {
        f1: function (m) {
            return Bridge.referenceEquals(m.n, "M");
        },
        f2: function (p) {
            return Bridge.Reflection.getTypeName(p);
        },
        f3: function (m) {
            return (Bridge.cast(m, System.Reflection.ConstructorInfo).p || []).length === 1;
        },
        f4: function (m) {
            return (Bridge.cast(m, System.Reflection.ConstructorInfo).p || []).length === 2;
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.Reflection.ReflectionTests.A1Attribute", {
        inherits: [System.Attribute],
        config: {
            properties: {
                X: 0
            }
        },
        ctor: function () {
            this.$initialize();
            System.Attribute.ctor.call(this);
        },
        $ctor1: function (x) {
            this.$initialize();
            System.Attribute.ctor.call(this);
            this.X = x;
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.Reflection.ReflectionTests.A3Attribute", {
        inherits: [System.Attribute]
    });

    Bridge.define("Bridge.ClientTest.Batch4.Reflection.ReflectionTests.A4Attribute", {
        inherits: [System.Attribute]
    });

    Bridge.define("Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C1", {
        M1: function () {
        },
        M2: function () {
        },
        M3: function () {
        },
        M4: function () {
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C10", {
        x: 0,
        s: null,
        ctor: function (x) {
            this.$initialize();
            this.x = x;
            this.s = "X";
        },
        $ctor1: function (x, s) {
            this.$initialize();
            this.x = x;
            this.s = s;
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C11", {
        config: {
            init: function () {
                this.D = System.DateTime.getDefaultValue();
            }
        },
        ctor: function (dt) {
            this.$initialize();
            this.D = dt;
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C12", {
        statics: {
            F3: null
        },
        F1: 0,
        config: {
            init: function () {
                this.renamedF2 = System.DateTime.getDefaultValue();
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C13", {
        statics: {
            addedE4Handler: null,
            removedE4Handler: null,
            config: {
                events: {
                    E2: null
                }
            },
            addE4: function (value) {
            },
            removeE4: function (value) {
            },
            raiseE2: function () {
                if (!Bridge.staticEquals(Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C13.E2, null)) {
                    Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C13.E2();
                }
            }
        },
        addedE3Handler: null,
        removedE3Handler: null,
        config: {
            events: {
                E1: null
            }
        },
        addE3: function (value) {
        },
        removeE3: function (value) {
        },
        raiseE1: function () {
            if (!Bridge.staticEquals(this.E1, null)) {
                this.E1();
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C14", {
        statics: {
            p14Field: 0,
            config: {
                properties: {
                    P3: null,
                    P4: 0,
                    P7: {
                        get: function () {
                            return Bridge.getDefaultValue(System.DateTime);
                        }
                    },
                    P8: 0,
                    P11: {
                        set: function (value) {
                        }
                    },
                    P12: 0
                },
                init: function () {
                    this.P3 = System.DateTime.getDefaultValue();
                }
            }
        },
        p13Field: 0,
        config: {
            properties: {
                P1: 0,
                P2: null,
                P5: {
                    get: function () {
                        return 0;
                    }
                },
                P6: null,
                P9: {
                    set: function (value) {
                    }
                },
                P10: null
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C15", {
        x: 0,
        s: null,
        v: null,
        getItem: function (x, s) {
            return System.String.concat(this.v, " ", x, " ", s);
        },
        setItem: function (x, s, value) {
            this.x = x;
            this.s = s;
            this.v = value;
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C16", {
        getItem: function (x, s) {
            return null;
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C17", {
        setItem: function (x, s, value) {
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C18", {
        f: 0,
        config: {
            properties: {
                P: 0
            }
        },
        ctor: function () {
            this.$initialize();
        },
        addE: function (value) {
        },
        removeE: function (value) {
        },
        m: function () {
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C19", {
        A: 0,
        B: null,
        ctor: function (a, b) {
            this.$initialize();
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C2", {
        statics: {
            M2: function () {
            }
        },
        M1: function () {
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C20", {
        A: 0,
        B: null
    });

    Bridge.define("Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C21", {
        X: 0,
        ctor: function (x) {
            this.$initialize();
            this.X = x;
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C22", {
        a: null,
        b: null,
        ctor: function (a, b) {
            if (b === void 0) { b = []; }

            this.$initialize();
            this.a = Bridge.box(a, System.Int32);
            this.b = b;
        },
        $ctor1: function (a, b) {
            b = Array.prototype.slice.call(arguments, 1);

            this.$initialize();
            this.a = a;
            this.b = b;
        },
        M1: function (a, b) {
            if (b === void 0) { b = []; }
            return System.Array.init([Bridge.box(a, System.Int32), b], System.Object);
        },
        M2: function (a, b) {
            b = Array.prototype.slice.call(arguments, 1);
            return System.Array.init([Bridge.box(a, System.Int32), b], System.Object);
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C23", {
        a: null,
        b: null,
        ctor: function (a, b) {
            if (b === void 0) { b = []; }

            this.$initialize();
            this.a = Bridge.box(a, System.Int32);
            this.b = b;
        },
        $ctor1: function (a, b) {
            b = Array.prototype.slice.call(arguments, 1);

            this.$initialize();
            this.a = a;
            this.b = b;
        },
        M1: function (a, b) {
            if (b === void 0) { b = []; }
            return System.Array.init([Bridge.box(a, System.Int32), b], System.Object);
        },
        M2: function (a, b) {
            b = Array.prototype.slice.call(arguments, 1);
            return System.Array.init([Bridge.box(a, System.Int32), b], System.Object);
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C24", {
        x: 0,
        s: null,
        v: null,
        getItem: function (x, s) {
            return null;
        },
        setItem: function (x, s, value) {
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C25", {
        A1: 0,
        B1: 0,
        C1: 0,
        D1: 0,
        A2: 0,
        B2: 0,
        C2: 0,
        D2: 0,
        A3: 0,
        B3: 0,
        C3: 0,
        D3: 0,
        A4: 0,
        B4: 0,
        C4: 0,
        D4: 0,
        A5: 0,
        B5: 0,
        C5: 0,
        D5: 0
    });

    Bridge.define("Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C26", {
        A1: 0,
        B1: 0,
        C1: 0,
        D1: 0,
        A2: 0,
        B2: 0,
        C2: 0,
        D2: 0,
        A3: 0,
        B3: 0,
        C3: 0,
        D3: 0,
        A4: 0,
        B4: 0,
        C4: 0,
        D4: 0,
        A5: 0,
        B5: 0,
        C5: 0,
        D5: 0
    });

    Bridge.define("Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C27", {
        A1: 0,
        B1: 0,
        C1: 0,
        D1: 0,
        A2: 0,
        B2: 0,
        C2: 0,
        D2: 0,
        A3: 0,
        B3: 0,
        C3: 0,
        D3: 0,
        A4: 0,
        B4: 0,
        C4: 0,
        D4: 0,
        A5: 0,
        B5: 0,
        C5: 0,
        D5: 0
    });

    Bridge.define("Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C28", {
        A1: 0,
        B1: 0,
        C1: 0,
        D1: 0,
        A2: 0,
        B2: 0,
        C2: 0,
        D2: 0,
        A3: 0,
        B3: 0,
        C3: 0,
        D3: 0,
        A4: 0,
        B4: 0,
        C4: 0,
        D4: 0,
        A5: 0,
        B5: 0,
        C5: 0,
        D5: 0
    });

    Bridge.define("Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C3", {
        M1: function () {
            return 0;
        },
        M2: function (x) {
            return 0;
        },
        M3: function (x, y) {
            return 0;
        },
        M4: function () {
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C4", {
        m: function () {
        },
        m$1: function (i) {
        },
        x: function (i, s) {
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C5$2", function (T1, T2) { return {
        m: function (t2, s) {
            return Bridge.getDefaultValue(T1);
        },
        M2: function () {
            return null;
        }
    }; });

    Bridge.define("Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C6", {
        M1: function (T1, T2, t2, s) {
            return Bridge.getDefaultValue(T1);
        },
        M2: function (T1, s) {
            return Bridge.getDefaultValue(T1);
        },
        M3: function (s) {
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C7", {
        statics: {
            M2: function (x) {
            }
        },
        x: 0,
        M1: function (x) {
            return ((this.x + x) | 0);
        },
        M3: function (T1, T2, s) {
            return System.String.concat(this.x.toString(), " ", Bridge.Reflection.getTypeFullName(T1), " ", Bridge.Reflection.getTypeFullName(T2), " ", s);
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C8", {
        statics: {
            M2: function (a, b) {
                return System.String.concat(a, " ", b);
            },
            M4: function (T1, T2, a) {
                return System.String.concat(Bridge.Reflection.getTypeFullName(T1), " ", Bridge.Reflection.getTypeFullName(T2), " ", a);
            }
        },
        s: null,
        ctor: function (s) {
            this.$initialize();
            this.s = s;
        },
        M1: function (a, b) {
            return System.String.concat(this.s, " ", a, " ", b);
        },
        M3: function (T1, T2, a) {
            return System.String.concat(this.s, " ", Bridge.Reflection.getTypeFullName(T1), " ", Bridge.Reflection.getTypeFullName(T2), " ", a);
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C9$2", function (T1, T2) { return {
        statics: {
            m: function (a) {
                return System.String.concat(Bridge.Reflection.getTypeFullName(T1), " ", Bridge.Reflection.getTypeFullName(T2), " ", a);
            }
        }
    }; });

    Bridge.define("Bridge.ClientTest.Batch4.Reflection.ReflectionTests.S1", {
        $kind: "struct",
        statics: {
            getDefaultValue: function () { return new Bridge.ClientTest.Batch4.Reflection.ReflectionTests.S1(); }
        },
        ctor: function () {
            this.$initialize();
        },
        M1: function () {
        },
        M2: function () {
        },
        M3: function () {
        },
        M4: function () {
        },
        $clone: function (to) { return this; }
    });

    Bridge.define("Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests", {
        statics: {
            canConvert: function (T, arg) {
                try { /// The variable `x' is assigned but its value is never used


                    var x = Bridge.cast(Bridge.unbox(arg), T);
                    return true;
                }
                catch ($e1) {
                    $e1 = System.Exception.create($e1);
                    return false;
                }
            }
        },
        typeIsWorksForReferenceTypes: function () {
            Bridge.Test.NUnit.Assert.false$1(Bridge.is({  }, Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.C1), "#1");
            Bridge.Test.NUnit.Assert.true$1(Bridge.hasValue(new Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.C1()), "#2");
            Bridge.Test.NUnit.Assert.false$1(Bridge.is({  }, Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I1), "#3");
            Bridge.Test.NUnit.Assert.false$1(Bridge.is(new Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.C1(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.D1), "#4");
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(new Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.D1(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.C1), "#5");
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(new Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.D1(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I1), "#6");
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.D2$1(System.Int32))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.C2$1(System.Int32)), "#7");
            Bridge.Test.NUnit.Assert.false$1(Bridge.is(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.D2$1(System.Int32))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.C2$1(System.String)), "#8");
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.D2$1(System.Int32))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I2$1(System.Int32)), "#9");
            Bridge.Test.NUnit.Assert.false$1(Bridge.is(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.D2$1(System.Int32))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I2$1(System.String)), "#10");
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.D2$1(System.Int32))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I1), "#11");
            Bridge.Test.NUnit.Assert.false$1(Bridge.is(new Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.D3(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.C2$1(System.String)), "#12");
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(new Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.D3(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.C2$1(System.Int32)), "#13");
            Bridge.Test.NUnit.Assert.false$1(Bridge.is(new Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.D3(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I2$1(System.Int32)), "#14");
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(new Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.D3(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I2$1(System.String)), "#15");
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(new Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.D4(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I1), "#16");
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(new Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.D4(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I3), "#17");
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(new Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.D4(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I4), "#18");
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(new Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I1), "#19");
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(Bridge.box((0), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.E2, $box_.Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.E2.toString), System.Int32), "#20");
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(Bridge.box((0), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.E1, $box_.Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.E1.toString), System.Int32), "#21");
            Bridge.Test.NUnit.Assert.true$1(Bridge.hasValue(Bridge.box((0), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.E1, $box_.Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.E1.toString)), "#22");
            Bridge.Test.NUnit.Assert.false$1(Bridge.is(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y1$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1)), "#23");
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y1$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1)), "#24");
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(new Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y1X1(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1)), "#25");
            Bridge.Test.NUnit.Assert.false$1(Bridge.is(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y1$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2)), "#26");
            Bridge.Test.NUnit.Assert.false$1(Bridge.is(new Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y1X1(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2)), "#27");
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y1$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1)), "#28");
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(new Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y1X2(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1)), "#29");
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y1$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2)), "#30");
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(new Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y1X2(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2)), "#31");
            Bridge.Test.NUnit.Assert.false$1(Bridge.is(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y2$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1)), "#32");
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y2$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1)), "#33");
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(new Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y2X1(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1)), "#34");
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y2$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2)), "#35");
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(new Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y2X1(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2)), "#36");
            Bridge.Test.NUnit.Assert.false$1(Bridge.is(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y2$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1)), "#37");
            Bridge.Test.NUnit.Assert.false$1(Bridge.is(new Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y2X2(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1)), "#38");
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y2$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2)), "#39");
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(new Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y2X2(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2)), "#40");
            Bridge.Test.NUnit.Assert.false$1(Bridge.is(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y3$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I1), "#41");
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y3$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1)), "#42");
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(new Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y3X1X1(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1)), "#43");
            Bridge.Test.NUnit.Assert.false$1(Bridge.is(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y3$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1)), "#44");
            Bridge.Test.NUnit.Assert.false$1(Bridge.is(new Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y3X1X2(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1)), "#45");
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y3$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1)), "#46");
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(new Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y3X2X1(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1)), "#47");
            Bridge.Test.NUnit.Assert.false$1(Bridge.is(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y3$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1)), "#48");
            Bridge.Test.NUnit.Assert.false$1(Bridge.is(new Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y3X2X2(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1)), "#49");
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y3$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2)), "#50");
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(new Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y3X1X1(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2)), "#51");
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y3$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2)), "#52");
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(new Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y3X1X2(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2)), "#53");
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y3$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2)), "#54");
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(new Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y3X2X1(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2)), "#55");
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y3$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2)), "#56");
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(new Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y3X2X2(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2)), "#57");
            Bridge.Test.NUnit.Assert.false$1(Bridge.is(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y3$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1)), "#58");
            Bridge.Test.NUnit.Assert.false$1(Bridge.is(new Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y3X1X1(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1)), "#59");
            Bridge.Test.NUnit.Assert.false$1(Bridge.is(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y3$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1)), "#60");
            Bridge.Test.NUnit.Assert.false$1(Bridge.is(new Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y3X1X2(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1)), "#61");
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y3$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1)), "#62");
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(new Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y3X2X1(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1)), "#63");
            Bridge.Test.NUnit.Assert.false$1(Bridge.is(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y3$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1)), "#64");
            Bridge.Test.NUnit.Assert.false$1(Bridge.is(new Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y3X2X2(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1)), "#65");
            Bridge.Test.NUnit.Assert.false$1(Bridge.is(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y3$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2)), "#66");
            Bridge.Test.NUnit.Assert.false$1(Bridge.is(new Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y3X1X1(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2)), "#67");
            Bridge.Test.NUnit.Assert.false$1(Bridge.is(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y3$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2)), "#68");
            Bridge.Test.NUnit.Assert.false$1(Bridge.is(new Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y3X1X2(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2)), "#69");
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y3$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2)), "#70");
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(new Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y3X2X1(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2)), "#71");
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y3$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2)), "#72");
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(new Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y3X2X2(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2)), "#73");
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y4$2(System.String,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I9$2(System.String,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1)), "#74");
            Bridge.Test.NUnit.Assert.false$1(Bridge.is(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y4$2(System.String,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I9$2(System.Object,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1)), "#75");
            Bridge.Test.NUnit.Assert.false$1(Bridge.is(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y4$2(System.Object,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I9$2(System.String,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1)), "#76");
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y4$2(System.Object,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I9$2(System.Object,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1)), "#77");
            Bridge.Test.NUnit.Assert.false$1(Bridge.is(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y4$2(System.String,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I9$2(System.String,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2)), "#78");
            Bridge.Test.NUnit.Assert.false$1(Bridge.is(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y4$2(System.String,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I9$2(System.Object,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2)), "#79");
            Bridge.Test.NUnit.Assert.false$1(Bridge.is(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y4$2(System.Object,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I9$2(System.String,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2)), "#80");
            Bridge.Test.NUnit.Assert.false$1(Bridge.is(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y4$2(System.Object,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I9$2(System.Object,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2)), "#81");
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y4$2(System.String,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I9$2(System.String,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1)), "#82");
            Bridge.Test.NUnit.Assert.false$1(Bridge.is(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y4$2(System.String,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I9$2(System.Object,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1)), "#83");
            Bridge.Test.NUnit.Assert.false$1(Bridge.is(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y4$2(System.Object,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I9$2(System.String,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1)), "#84");
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y4$2(System.Object,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I9$2(System.Object,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1)), "#85");
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y4$2(System.String,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I9$2(System.String,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2)), "#86");
            Bridge.Test.NUnit.Assert.false$1(Bridge.is(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y4$2(System.String,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I9$2(System.Object,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2)), "#87");
            Bridge.Test.NUnit.Assert.false$1(Bridge.is(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y4$2(System.Object,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I9$2(System.String,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2)), "#88");
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y4$2(System.Object,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I9$2(System.Object,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2)), "#89");
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y5$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1))), "#90");
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y5$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1))), "#91");
            Bridge.Test.NUnit.Assert.false$1(Bridge.is(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y5$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2))), "#92");
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y5$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2))), "#93");
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y5$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1))), "#94");
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y5$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2))), "#95");
            Bridge.Test.NUnit.Assert.false$1(Bridge.is(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y5$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1))), "#96");
            Bridge.Test.NUnit.Assert.false$1(Bridge.is(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y5$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2))), "#97");
            Bridge.Test.NUnit.Assert.false$1(Bridge.is(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y5$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I10$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1))), "#98");
            Bridge.Test.NUnit.Assert.false$1(Bridge.is(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y5$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I10$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2))), "#99");
            Bridge.Test.NUnit.Assert.false$1(Bridge.is(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y5$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I10$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1))), "#100");
            Bridge.Test.NUnit.Assert.false$1(Bridge.is(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y5$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I10$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2))), "#101");
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y5$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1))), "#102");
            Bridge.Test.NUnit.Assert.false$1(Bridge.is(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y5$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1))), "#103");
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y5$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2))), "#104");
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y5$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2))), "#105");
            Bridge.Test.NUnit.Assert.false$1(Bridge.is(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y5$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1))), "#106");
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y5$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2))), "#107");
            Bridge.Test.NUnit.Assert.false$1(Bridge.is(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y5$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1))), "#108");
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y5$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2))), "#109");
            Bridge.Test.NUnit.Assert.false$1(Bridge.is(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y5$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I10$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1))), "#110");
            Bridge.Test.NUnit.Assert.false$1(Bridge.is(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y5$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I10$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2))), "#111");
            Bridge.Test.NUnit.Assert.false$1(Bridge.is(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y5$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I10$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1))), "#112");
            Bridge.Test.NUnit.Assert.false$1(Bridge.is(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y5$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I10$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2))), "#113");
            Bridge.Test.NUnit.Assert.false$1(Bridge.is(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y6$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1))), "#114");
            Bridge.Test.NUnit.Assert.false$1(Bridge.is(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y6$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1))), "#115");
            Bridge.Test.NUnit.Assert.false$1(Bridge.is(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y6$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2))), "#116");
            Bridge.Test.NUnit.Assert.false$1(Bridge.is(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y6$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2))), "#117");
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y6$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1))), "#118");
            Bridge.Test.NUnit.Assert.false$1(Bridge.is(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y6$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2))), "#119");
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y6$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1))), "#120");
            Bridge.Test.NUnit.Assert.false$1(Bridge.is(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y6$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2))), "#121");
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y6$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I10$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1))), "#122");
            Bridge.Test.NUnit.Assert.false$1(Bridge.is(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y6$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I10$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2))), "#123");
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y6$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I10$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1))), "#124");
            Bridge.Test.NUnit.Assert.false$1(Bridge.is(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y6$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I10$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2))), "#125");
            Bridge.Test.NUnit.Assert.false$1(Bridge.is(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y6$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1))), "#126");
            Bridge.Test.NUnit.Assert.false$1(Bridge.is(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y6$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1))), "#127");
            Bridge.Test.NUnit.Assert.false$1(Bridge.is(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y6$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2))), "#128");
            Bridge.Test.NUnit.Assert.false$1(Bridge.is(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y6$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2))), "#129");
            Bridge.Test.NUnit.Assert.false$1(Bridge.is(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y6$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1))), "#130");
            Bridge.Test.NUnit.Assert.false$1(Bridge.is(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y6$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2))), "#131");
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y6$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1))), "#132");
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y6$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2))), "#133");
            Bridge.Test.NUnit.Assert.false$1(Bridge.is(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y6$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I10$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1))), "#134");
            Bridge.Test.NUnit.Assert.false$1(Bridge.is(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y6$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I10$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2))), "#135");
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y6$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I10$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1))), "#136");
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y6$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I10$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2))), "#137");
            Bridge.Test.NUnit.Assert.false$1(Bridge.hasValue(null), "#138");
        },
        typeAsWorksForReferenceTypes: function () {
            Bridge.Test.NUnit.Assert.false$1((Bridge.as({  }, Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.C1)) != null, "#1");
            Bridge.Test.NUnit.Assert.true$1((new Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.C1()) != null, "#2");
            Bridge.Test.NUnit.Assert.false$1((Bridge.as({  }, Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I1)) != null, "#3");
            Bridge.Test.NUnit.Assert.false$1((Bridge.as(new Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.C1(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.D1)) != null, "#4");
            Bridge.Test.NUnit.Assert.true$1((Bridge.as(new Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.D1(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.C1)) != null, "#5");
            Bridge.Test.NUnit.Assert.true$1((Bridge.as(new Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.D1(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I1)) != null, "#6");
            Bridge.Test.NUnit.Assert.true$1((Bridge.as(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.D2$1(System.Int32))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.C2$1(System.Int32))) != null, "#7");
            Bridge.Test.NUnit.Assert.false$1((Bridge.as(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.D2$1(System.Int32))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.C2$1(System.String))) != null, "#8");
            Bridge.Test.NUnit.Assert.true$1((Bridge.as(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.D2$1(System.Int32))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I2$1(System.Int32))) != null, "#9");
            Bridge.Test.NUnit.Assert.false$1((Bridge.as(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.D2$1(System.Int32))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I2$1(System.String))) != null, "#10");
            Bridge.Test.NUnit.Assert.true$1((Bridge.as(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.D2$1(System.Int32))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I1)) != null, "#11");
            Bridge.Test.NUnit.Assert.false$1((Bridge.as(new Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.D3(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.C2$1(System.String))) != null, "#12");
            Bridge.Test.NUnit.Assert.true$1((Bridge.as(new Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.D3(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.C2$1(System.Int32))) != null, "#13");
            Bridge.Test.NUnit.Assert.false$1((Bridge.as(new Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.D3(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I2$1(System.Int32))) != null, "#14");
            Bridge.Test.NUnit.Assert.true$1((Bridge.as(new Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.D3(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I2$1(System.String))) != null, "#15");
            Bridge.Test.NUnit.Assert.true$1((Bridge.as(new Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.D4(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I1)) != null, "#16");
            Bridge.Test.NUnit.Assert.true$1((Bridge.as(new Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.D4(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I3)) != null, "#17");
            Bridge.Test.NUnit.Assert.true$1((Bridge.as(new Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.D4(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I4)) != null, "#18");
            Bridge.Test.NUnit.Assert.true$1((Bridge.as(new Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I1)) != null, "#19");
            Bridge.Test.NUnit.Assert.true$1((Bridge.as(Bridge.box((0), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.E2, $box_.Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.E2.toString), System.Int32, true)) != null, "#20");
            Bridge.Test.NUnit.Assert.true$1((Bridge.as(Bridge.box((0), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.E1, $box_.Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.E1.toString), System.Int32, true)) != null, "#21");
            Bridge.Test.NUnit.Assert.true$1((Bridge.box((0), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.E1, $box_.Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.E1.toString)) != null, "#22");
            Bridge.Test.NUnit.Assert.false$1((Bridge.as(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y1$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1))) != null, "#23");
            Bridge.Test.NUnit.Assert.true$1((Bridge.as(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y1$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1))) != null, "#24");
            Bridge.Test.NUnit.Assert.true$1((Bridge.as(new Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y1X1(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1))) != null, "#25");
            Bridge.Test.NUnit.Assert.false$1((Bridge.as(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y1$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2))) != null, "#26");
            Bridge.Test.NUnit.Assert.false$1((Bridge.as(new Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y1X1(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2))) != null, "#27");
            Bridge.Test.NUnit.Assert.true$1((Bridge.as(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y1$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1))) != null, "#28");
            Bridge.Test.NUnit.Assert.true$1((Bridge.as(new Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y1X2(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1))) != null, "#29");
            Bridge.Test.NUnit.Assert.true$1((Bridge.as(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y1$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2))) != null, "#30");
            Bridge.Test.NUnit.Assert.true$1((Bridge.as(new Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y1X2(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2))) != null, "#31");
            Bridge.Test.NUnit.Assert.false$1((Bridge.as(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y2$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1))) != null, "#32");
            Bridge.Test.NUnit.Assert.true$1((Bridge.as(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y2$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1))) != null, "#33");
            Bridge.Test.NUnit.Assert.true$1((Bridge.as(new Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y2X1(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1))) != null, "#34");
            Bridge.Test.NUnit.Assert.true$1((Bridge.as(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y2$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2))) != null, "#35");
            Bridge.Test.NUnit.Assert.true$1((Bridge.as(new Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y2X1(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2))) != null, "#36");
            Bridge.Test.NUnit.Assert.false$1((Bridge.as(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y2$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1))) != null, "#37");
            Bridge.Test.NUnit.Assert.false$1((Bridge.as(new Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y2X2(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1))) != null, "#38");
            Bridge.Test.NUnit.Assert.true$1((Bridge.as(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y2$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2))) != null, "#39");
            Bridge.Test.NUnit.Assert.true$1((Bridge.as(new Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y2X2(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2))) != null, "#40");
            Bridge.Test.NUnit.Assert.false$1((Bridge.as(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y3$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I1)) != null, "#41");
            Bridge.Test.NUnit.Assert.true$1((Bridge.as(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y3$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1))) != null, "#42");
            Bridge.Test.NUnit.Assert.true$1((Bridge.as(new Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y3X1X1(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1))) != null, "#43");
            Bridge.Test.NUnit.Assert.false$1((Bridge.as(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y3$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1))) != null, "#44");
            Bridge.Test.NUnit.Assert.false$1((Bridge.as(new Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y3X1X2(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1))) != null, "#45");
            Bridge.Test.NUnit.Assert.true$1((Bridge.as(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y3$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1))) != null, "#46");
            Bridge.Test.NUnit.Assert.true$1((Bridge.as(new Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y3X2X1(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1))) != null, "#47");
            Bridge.Test.NUnit.Assert.false$1((Bridge.as(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y3$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1))) != null, "#48");
            Bridge.Test.NUnit.Assert.false$1((Bridge.as(new Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y3X2X2(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1))) != null, "#49");
            Bridge.Test.NUnit.Assert.true$1((Bridge.as(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y3$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2))) != null, "#50");
            Bridge.Test.NUnit.Assert.true$1((Bridge.as(new Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y3X1X1(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2))) != null, "#51");
            Bridge.Test.NUnit.Assert.true$1((Bridge.as(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y3$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2))) != null, "#52");
            Bridge.Test.NUnit.Assert.true$1((Bridge.as(new Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y3X1X2(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2))) != null, "#53");
            Bridge.Test.NUnit.Assert.true$1((Bridge.as(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y3$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2))) != null, "#54");
            Bridge.Test.NUnit.Assert.true$1((Bridge.as(new Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y3X2X1(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2))) != null, "#55");
            Bridge.Test.NUnit.Assert.true$1((Bridge.as(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y3$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2))) != null, "#56");
            Bridge.Test.NUnit.Assert.true$1((Bridge.as(new Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y3X2X2(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2))) != null, "#57");
            Bridge.Test.NUnit.Assert.false$1((Bridge.as(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y3$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1))) != null, "#58");
            Bridge.Test.NUnit.Assert.false$1((Bridge.as(new Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y3X1X1(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1))) != null, "#59");
            Bridge.Test.NUnit.Assert.false$1((Bridge.as(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y3$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1))) != null, "#60");
            Bridge.Test.NUnit.Assert.false$1((Bridge.as(new Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y3X1X2(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1))) != null, "#61");
            Bridge.Test.NUnit.Assert.true$1((Bridge.as(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y3$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1))) != null, "#62");
            Bridge.Test.NUnit.Assert.true$1((Bridge.as(new Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y3X2X1(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1))) != null, "#63");
            Bridge.Test.NUnit.Assert.false$1((Bridge.as(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y3$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1))) != null, "#64");
            Bridge.Test.NUnit.Assert.false$1((Bridge.as(new Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y3X2X2(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1))) != null, "#65");
            Bridge.Test.NUnit.Assert.false$1((Bridge.as(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y3$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2))) != null, "#66");
            Bridge.Test.NUnit.Assert.false$1((Bridge.as(new Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y3X1X1(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2))) != null, "#67");
            Bridge.Test.NUnit.Assert.false$1((Bridge.as(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y3$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2))) != null, "#68");
            Bridge.Test.NUnit.Assert.false$1((Bridge.as(new Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y3X1X2(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2))) != null, "#69");
            Bridge.Test.NUnit.Assert.true$1((Bridge.as(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y3$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2))) != null, "#70");
            Bridge.Test.NUnit.Assert.true$1((Bridge.as(new Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y3X2X1(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2))) != null, "#71");
            Bridge.Test.NUnit.Assert.true$1((Bridge.as(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y3$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2))) != null, "#72");
            Bridge.Test.NUnit.Assert.true$1((Bridge.as(new Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y3X2X2(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2))) != null, "#73");
            Bridge.Test.NUnit.Assert.true$1((Bridge.as(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y4$2(System.String,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I9$2(System.String,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1))) != null, "#74");
            Bridge.Test.NUnit.Assert.false$1((Bridge.as(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y4$2(System.String,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I9$2(System.Object,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1))) != null, "#75");
            Bridge.Test.NUnit.Assert.false$1((Bridge.as(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y4$2(System.Object,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I9$2(System.String,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1))) != null, "#76");
            Bridge.Test.NUnit.Assert.true$1((Bridge.as(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y4$2(System.Object,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I9$2(System.Object,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1))) != null, "#77");
            Bridge.Test.NUnit.Assert.false$1((Bridge.as(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y4$2(System.String,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I9$2(System.String,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2))) != null, "#78");
            Bridge.Test.NUnit.Assert.false$1((Bridge.as(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y4$2(System.String,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I9$2(System.Object,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2))) != null, "#79");
            Bridge.Test.NUnit.Assert.false$1((Bridge.as(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y4$2(System.Object,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I9$2(System.String,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2))) != null, "#80");
            Bridge.Test.NUnit.Assert.false$1((Bridge.as(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y4$2(System.Object,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I9$2(System.Object,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2))) != null, "#81");
            Bridge.Test.NUnit.Assert.true$1((Bridge.as(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y4$2(System.String,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I9$2(System.String,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1))) != null, "#82");
            Bridge.Test.NUnit.Assert.false$1((Bridge.as(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y4$2(System.String,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I9$2(System.Object,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1))) != null, "#83");
            Bridge.Test.NUnit.Assert.false$1((Bridge.as(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y4$2(System.Object,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I9$2(System.String,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1))) != null, "#84");
            Bridge.Test.NUnit.Assert.true$1((Bridge.as(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y4$2(System.Object,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I9$2(System.Object,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1))) != null, "#85");
            Bridge.Test.NUnit.Assert.true$1((Bridge.as(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y4$2(System.String,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I9$2(System.String,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2))) != null, "#86");
            Bridge.Test.NUnit.Assert.false$1((Bridge.as(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y4$2(System.String,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I9$2(System.Object,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2))) != null, "#87");
            Bridge.Test.NUnit.Assert.false$1((Bridge.as(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y4$2(System.Object,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I9$2(System.String,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2))) != null, "#88");
            Bridge.Test.NUnit.Assert.true$1((Bridge.as(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y4$2(System.Object,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I9$2(System.Object,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2))) != null, "#89");
            Bridge.Test.NUnit.Assert.true$1((Bridge.as(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y5$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1)))) != null, "#90");
            Bridge.Test.NUnit.Assert.true$1((Bridge.as(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y5$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1)))) != null, "#91");
            Bridge.Test.NUnit.Assert.false$1((Bridge.as(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y5$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2)))) != null, "#92");
            Bridge.Test.NUnit.Assert.true$1((Bridge.as(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y5$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2)))) != null, "#93");
            Bridge.Test.NUnit.Assert.true$1((Bridge.as(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y5$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1)))) != null, "#94");
            Bridge.Test.NUnit.Assert.true$1((Bridge.as(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y5$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2)))) != null, "#95");
            Bridge.Test.NUnit.Assert.false$1((Bridge.as(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y5$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1)))) != null, "#96");
            Bridge.Test.NUnit.Assert.false$1((Bridge.as(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y5$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2)))) != null, "#97");
            Bridge.Test.NUnit.Assert.false$1((Bridge.as(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y5$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I10$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1)))) != null, "#98");
            Bridge.Test.NUnit.Assert.false$1((Bridge.as(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y5$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I10$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2)))) != null, "#99");
            Bridge.Test.NUnit.Assert.false$1((Bridge.as(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y5$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I10$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1)))) != null, "#100");
            Bridge.Test.NUnit.Assert.false$1((Bridge.as(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y5$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I10$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2)))) != null, "#101");
            Bridge.Test.NUnit.Assert.true$1((Bridge.as(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y5$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1)))) != null, "#102");
            Bridge.Test.NUnit.Assert.false$1((Bridge.as(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y5$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1)))) != null, "#103");
            Bridge.Test.NUnit.Assert.true$1((Bridge.as(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y5$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2)))) != null, "#104");
            Bridge.Test.NUnit.Assert.true$1((Bridge.as(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y5$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2)))) != null, "#105");
            Bridge.Test.NUnit.Assert.false$1((Bridge.as(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y5$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1)))) != null, "#106");
            Bridge.Test.NUnit.Assert.true$1((Bridge.as(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y5$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2)))) != null, "#107");
            Bridge.Test.NUnit.Assert.false$1((Bridge.as(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y5$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1)))) != null, "#108");
            Bridge.Test.NUnit.Assert.true$1((Bridge.as(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y5$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2)))) != null, "#109");
            Bridge.Test.NUnit.Assert.false$1((Bridge.as(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y5$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I10$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1)))) != null, "#110");
            Bridge.Test.NUnit.Assert.false$1((Bridge.as(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y5$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I10$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2)))) != null, "#111");
            Bridge.Test.NUnit.Assert.false$1((Bridge.as(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y5$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I10$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1)))) != null, "#112");
            Bridge.Test.NUnit.Assert.false$1((Bridge.as(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y5$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I10$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2)))) != null, "#113");
            Bridge.Test.NUnit.Assert.false$1((Bridge.as(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y6$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1)))) != null, "#114");
            Bridge.Test.NUnit.Assert.false$1((Bridge.as(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y6$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1)))) != null, "#115");
            Bridge.Test.NUnit.Assert.false$1((Bridge.as(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y6$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2)))) != null, "#116");
            Bridge.Test.NUnit.Assert.false$1((Bridge.as(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y6$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2)))) != null, "#117");
            Bridge.Test.NUnit.Assert.true$1((Bridge.as(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y6$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1)))) != null, "#118");
            Bridge.Test.NUnit.Assert.false$1((Bridge.as(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y6$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2)))) != null, "#119");
            Bridge.Test.NUnit.Assert.true$1((Bridge.as(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y6$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1)))) != null, "#120");
            Bridge.Test.NUnit.Assert.false$1((Bridge.as(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y6$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2)))) != null, "#121");
            Bridge.Test.NUnit.Assert.true$1((Bridge.as(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y6$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I10$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1)))) != null, "#122");
            Bridge.Test.NUnit.Assert.false$1((Bridge.as(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y6$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I10$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2)))) != null, "#123");
            Bridge.Test.NUnit.Assert.true$1((Bridge.as(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y6$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I10$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1)))) != null, "#124");
            Bridge.Test.NUnit.Assert.false$1((Bridge.as(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y6$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I10$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2)))) != null, "#125");
            Bridge.Test.NUnit.Assert.false$1((Bridge.as(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y6$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1)))) != null, "#126");
            Bridge.Test.NUnit.Assert.false$1((Bridge.as(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y6$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1)))) != null, "#127");
            Bridge.Test.NUnit.Assert.false$1((Bridge.as(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y6$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2)))) != null, "#128");
            Bridge.Test.NUnit.Assert.false$1((Bridge.as(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y6$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2)))) != null, "#129");
            Bridge.Test.NUnit.Assert.false$1((Bridge.as(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y6$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1)))) != null, "#130");
            Bridge.Test.NUnit.Assert.false$1((Bridge.as(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y6$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2)))) != null, "#131");
            Bridge.Test.NUnit.Assert.true$1((Bridge.as(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y6$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1)))) != null, "#132");
            Bridge.Test.NUnit.Assert.true$1((Bridge.as(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y6$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2)))) != null, "#133");
            Bridge.Test.NUnit.Assert.false$1((Bridge.as(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y6$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I10$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1)))) != null, "#134");
            Bridge.Test.NUnit.Assert.false$1((Bridge.as(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y6$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I10$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2)))) != null, "#135");
            Bridge.Test.NUnit.Assert.true$1((Bridge.as(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y6$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I10$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1)))) != null, "#136");
            Bridge.Test.NUnit.Assert.true$1((Bridge.as(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y6$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I10$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2)))) != null, "#137");
            Bridge.Test.NUnit.Assert.false$1((null) != null, "#138");
        },
        castWorksForReferenceTypes: function () {
            Bridge.Test.NUnit.Assert.false$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.C1, {  }), "#1");
            Bridge.Test.NUnit.Assert.true$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.canConvert(System.Object, new Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.C1()), "#2");
            Bridge.Test.NUnit.Assert.false$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I1, {  }), "#3");
            Bridge.Test.NUnit.Assert.false$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.D1, new Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.C1()), "#4");
            Bridge.Test.NUnit.Assert.true$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.C1, new Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.D1()), "#5");
            Bridge.Test.NUnit.Assert.true$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I1, new Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.D1()), "#6");
            Bridge.Test.NUnit.Assert.true$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.C2$1(System.Int32), new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.D2$1(System.Int32))()), "#7");
            Bridge.Test.NUnit.Assert.false$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.C2$1(System.String), new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.D2$1(System.Int32))()), "#8");
            Bridge.Test.NUnit.Assert.true$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I2$1(System.Int32), new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.D2$1(System.Int32))()), "#9");
            Bridge.Test.NUnit.Assert.false$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I2$1(System.String), new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.D2$1(System.Int32))()), "#10");
            Bridge.Test.NUnit.Assert.true$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I1, new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.D2$1(System.Int32))()), "#11");
            Bridge.Test.NUnit.Assert.false$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.C2$1(System.String), new Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.D3()), "#12");
            Bridge.Test.NUnit.Assert.true$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.C2$1(System.Int32), new Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.D3()), "#13");
            Bridge.Test.NUnit.Assert.false$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I2$1(System.Int32), new Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.D3()), "#14");
            Bridge.Test.NUnit.Assert.true$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I2$1(System.String), new Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.D3()), "#15");
            Bridge.Test.NUnit.Assert.true$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I1, new Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.D4()), "#16");
            Bridge.Test.NUnit.Assert.true$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I3, new Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.D4()), "#17");
            Bridge.Test.NUnit.Assert.true$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I4, new Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.D4()), "#18");
            Bridge.Test.NUnit.Assert.true$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I1, new Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2()), "#19");
            Bridge.Test.NUnit.Assert.true$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.E1, Bridge.box((0), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.E2, $box_.Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.E2.toString)), "#20");
            Bridge.Test.NUnit.Assert.true$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.canConvert(System.Int32, Bridge.box((0), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.E1, $box_.Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.E1.toString)), "#21");
            Bridge.Test.NUnit.Assert.true$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.canConvert(System.Object, Bridge.box((0), Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.E1, $box_.Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.E1.toString)), "#22");
            Bridge.Test.NUnit.Assert.false$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1), new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y1$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1))()), "#23");
            Bridge.Test.NUnit.Assert.true$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1), new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y1$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1))()), "#24");
            Bridge.Test.NUnit.Assert.true$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1), new Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y1X1()), "#25");
            Bridge.Test.NUnit.Assert.false$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2), new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y1$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1))()), "#26");
            Bridge.Test.NUnit.Assert.false$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2), new Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y1X1()), "#27");
            Bridge.Test.NUnit.Assert.true$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1), new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y1$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2))()), "#28");
            Bridge.Test.NUnit.Assert.true$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1), new Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y1X2()), "#29");
            Bridge.Test.NUnit.Assert.true$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2), new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y1$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2))()), "#30");
            Bridge.Test.NUnit.Assert.true$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2), new Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y1X2()), "#31");
            Bridge.Test.NUnit.Assert.false$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1), new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y2$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1))()), "#32");
            Bridge.Test.NUnit.Assert.true$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1), new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y2$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1))()), "#33");
            Bridge.Test.NUnit.Assert.true$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1), new Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y2X1()), "#34");
            Bridge.Test.NUnit.Assert.true$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2), new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y2$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1))()), "#35");
            Bridge.Test.NUnit.Assert.true$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2), new Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y2X1()), "#36");
            Bridge.Test.NUnit.Assert.false$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1), new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y2$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2))()), "#37");
            Bridge.Test.NUnit.Assert.false$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1), new Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y2X2()), "#38");
            Bridge.Test.NUnit.Assert.true$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2), new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y2$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2))()), "#39");
            Bridge.Test.NUnit.Assert.true$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2), new Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y2X2()), "#40");
            Bridge.Test.NUnit.Assert.false$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I1, new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y3$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1))()), "#41");
            Bridge.Test.NUnit.Assert.true$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1), new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y3$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1))()), "#42");
            Bridge.Test.NUnit.Assert.true$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1), new Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y3X1X1()), "#43");
            Bridge.Test.NUnit.Assert.false$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1), new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y3$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2))()), "#44");
            Bridge.Test.NUnit.Assert.false$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1), new Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y3X1X2()), "#45");
            Bridge.Test.NUnit.Assert.true$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1), new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y3$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1))()), "#46");
            Bridge.Test.NUnit.Assert.true$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1), new Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y3X2X1()), "#47");
            Bridge.Test.NUnit.Assert.false$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1), new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y3$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2))()), "#48");
            Bridge.Test.NUnit.Assert.false$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1), new Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y3X2X2()), "#49");
            Bridge.Test.NUnit.Assert.true$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2), new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y3$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1))()), "#50");
            Bridge.Test.NUnit.Assert.true$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2), new Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y3X1X1()), "#51");
            Bridge.Test.NUnit.Assert.true$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2), new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y3$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2))()), "#52");
            Bridge.Test.NUnit.Assert.true$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2), new Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y3X1X2()), "#53");
            Bridge.Test.NUnit.Assert.true$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2), new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y3$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1))()), "#54");
            Bridge.Test.NUnit.Assert.true$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2), new Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y3X2X1()), "#55");
            Bridge.Test.NUnit.Assert.true$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2), new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y3$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2))()), "#56");
            Bridge.Test.NUnit.Assert.true$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2), new Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y3X2X2()), "#57");
            Bridge.Test.NUnit.Assert.false$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1), new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y3$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1))()), "#58");
            Bridge.Test.NUnit.Assert.false$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1), new Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y3X1X1()), "#59");
            Bridge.Test.NUnit.Assert.false$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1), new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y3$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2))()), "#60");
            Bridge.Test.NUnit.Assert.false$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1), new Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y3X1X2()), "#61");
            Bridge.Test.NUnit.Assert.true$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1), new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y3$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1))()), "#62");
            Bridge.Test.NUnit.Assert.true$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1), new Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y3X2X1()), "#63");
            Bridge.Test.NUnit.Assert.false$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1), new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y3$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2))()), "#64");
            Bridge.Test.NUnit.Assert.false$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1), new Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y3X2X2()), "#65");
            Bridge.Test.NUnit.Assert.false$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2), new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y3$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1))()), "#66");
            Bridge.Test.NUnit.Assert.false$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2), new Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y3X1X1()), "#67");
            Bridge.Test.NUnit.Assert.false$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2), new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y3$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2))()), "#68");
            Bridge.Test.NUnit.Assert.false$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2), new Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y3X1X2()), "#69");
            Bridge.Test.NUnit.Assert.true$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2), new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y3$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1))()), "#70");
            Bridge.Test.NUnit.Assert.true$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2), new Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y3X2X1()), "#71");
            Bridge.Test.NUnit.Assert.true$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2), new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y3$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2))()), "#72");
            Bridge.Test.NUnit.Assert.true$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2), new Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y3X2X2()), "#73");
            Bridge.Test.NUnit.Assert.true$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I9$2(System.String,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1), new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y4$2(System.String,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1))()), "#74");
            Bridge.Test.NUnit.Assert.false$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I9$2(System.Object,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1), new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y4$2(System.String,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1))()), "#75");
            Bridge.Test.NUnit.Assert.false$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I9$2(System.String,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1), new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y4$2(System.Object,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1))()), "#76");
            Bridge.Test.NUnit.Assert.true$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I9$2(System.Object,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1), new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y4$2(System.Object,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1))()), "#77");
            Bridge.Test.NUnit.Assert.false$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I9$2(System.String,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2), new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y4$2(System.String,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1))()), "#78");
            Bridge.Test.NUnit.Assert.false$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I9$2(System.Object,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2), new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y4$2(System.String,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1))()), "#79");
            Bridge.Test.NUnit.Assert.false$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I9$2(System.String,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2), new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y4$2(System.Object,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1))()), "#80");
            Bridge.Test.NUnit.Assert.false$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I9$2(System.Object,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2), new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y4$2(System.Object,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1))()), "#81");
            Bridge.Test.NUnit.Assert.true$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I9$2(System.String,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1), new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y4$2(System.String,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2))()), "#82");
            Bridge.Test.NUnit.Assert.false$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I9$2(System.Object,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1), new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y4$2(System.String,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2))()), "#83");
            Bridge.Test.NUnit.Assert.false$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I9$2(System.String,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1), new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y4$2(System.Object,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2))()), "#84");
            Bridge.Test.NUnit.Assert.true$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I9$2(System.Object,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1), new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y4$2(System.Object,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2))()), "#85");
            Bridge.Test.NUnit.Assert.true$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I9$2(System.String,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2), new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y4$2(System.String,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2))()), "#86");
            Bridge.Test.NUnit.Assert.false$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I9$2(System.Object,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2), new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y4$2(System.String,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2))()), "#87");
            Bridge.Test.NUnit.Assert.false$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I9$2(System.String,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2), new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y4$2(System.Object,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2))()), "#88");
            Bridge.Test.NUnit.Assert.true$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I9$2(System.Object,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2), new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y4$2(System.Object,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2))()), "#89");
            Bridge.Test.NUnit.Assert.true$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1)), new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y5$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1))()), "#90");
            Bridge.Test.NUnit.Assert.true$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1)), new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y5$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1))()), "#91");
            Bridge.Test.NUnit.Assert.false$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2)), new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y5$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1))()), "#92");
            Bridge.Test.NUnit.Assert.true$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2)), new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y5$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1))()), "#93");
            Bridge.Test.NUnit.Assert.true$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1)), new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y5$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1))()), "#94");
            Bridge.Test.NUnit.Assert.true$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2)), new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y5$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1))()), "#95");
            Bridge.Test.NUnit.Assert.false$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1)), new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y5$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1))()), "#96");
            Bridge.Test.NUnit.Assert.false$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2)), new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y5$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1))()), "#97");
            Bridge.Test.NUnit.Assert.false$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I10$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1)), new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y5$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1))()), "#98");
            Bridge.Test.NUnit.Assert.false$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I10$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2)), new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y5$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1))()), "#99");
            Bridge.Test.NUnit.Assert.false$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I10$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1)), new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y5$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1))()), "#100");
            Bridge.Test.NUnit.Assert.false$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I10$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2)), new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y5$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1))()), "#101");
            Bridge.Test.NUnit.Assert.true$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1)), new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y5$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2))()), "#102");
            Bridge.Test.NUnit.Assert.false$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1)), new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y5$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2))()), "#103");
            Bridge.Test.NUnit.Assert.true$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2)), new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y5$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2))()), "#104");
            Bridge.Test.NUnit.Assert.true$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2)), new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y5$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2))()), "#105");
            Bridge.Test.NUnit.Assert.false$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1)), new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y5$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2))()), "#106");
            Bridge.Test.NUnit.Assert.true$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2)), new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y5$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2))()), "#107");
            Bridge.Test.NUnit.Assert.false$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1)), new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y5$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2))()), "#108");
            Bridge.Test.NUnit.Assert.true$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2)), new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y5$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2))()), "#109");
            Bridge.Test.NUnit.Assert.false$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I10$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1)), new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y5$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2))()), "#110");
            Bridge.Test.NUnit.Assert.false$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I10$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2)), new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y5$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2))()), "#111");
            Bridge.Test.NUnit.Assert.false$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I10$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1)), new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y5$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2))()), "#112");
            Bridge.Test.NUnit.Assert.false$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I10$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2)), new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y5$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2))()), "#113");
            Bridge.Test.NUnit.Assert.false$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1)), new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y6$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1))()), "#114");
            Bridge.Test.NUnit.Assert.false$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1)), new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y6$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1))()), "#115");
            Bridge.Test.NUnit.Assert.false$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2)), new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y6$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1))()), "#116");
            Bridge.Test.NUnit.Assert.false$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2)), new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y6$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1))()), "#117");
            Bridge.Test.NUnit.Assert.true$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1)), new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y6$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1))()), "#118");
            Bridge.Test.NUnit.Assert.false$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2)), new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y6$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1))()), "#119");
            Bridge.Test.NUnit.Assert.true$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1)), new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y6$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1))()), "#120");
            Bridge.Test.NUnit.Assert.false$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2)), new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y6$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1))()), "#121");
            Bridge.Test.NUnit.Assert.true$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I10$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1)), new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y6$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1))()), "#122");
            Bridge.Test.NUnit.Assert.false$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I10$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2)), new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y6$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1))()), "#123");
            Bridge.Test.NUnit.Assert.true$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I10$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1)), new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y6$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1))()), "#124");
            Bridge.Test.NUnit.Assert.false$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I10$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2)), new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y6$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1))()), "#125");
            Bridge.Test.NUnit.Assert.false$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1)), new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y6$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2))()), "#126");
            Bridge.Test.NUnit.Assert.false$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1)), new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y6$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2))()), "#127");
            Bridge.Test.NUnit.Assert.false$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2)), new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y6$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2))()), "#128");
            Bridge.Test.NUnit.Assert.false$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2)), new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y6$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2))()), "#129");
            Bridge.Test.NUnit.Assert.false$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1)), new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y6$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2))()), "#130");
            Bridge.Test.NUnit.Assert.false$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2)), new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y6$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2))()), "#131");
            Bridge.Test.NUnit.Assert.true$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1)), new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y6$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2))()), "#132");
            Bridge.Test.NUnit.Assert.true$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2)), new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y6$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2))()), "#133");
            Bridge.Test.NUnit.Assert.false$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I10$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1)), new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y6$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2))()), "#134");
            Bridge.Test.NUnit.Assert.false$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I10$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2)), new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y6$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2))()), "#135");
            Bridge.Test.NUnit.Assert.true$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I10$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1)), new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y6$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2))()), "#136");
            Bridge.Test.NUnit.Assert.true$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I10$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2)), new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y6$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2))()), "#137");
            Bridge.Test.NUnit.Assert.false$1(Bridge.hasValue(null), "#138");
        },
        getTypeWorksOnObjects: function () {
            var a = $asm.$.Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.f1;
            Bridge.Test.NUnit.Assert.areEqual("Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests+C1", Bridge.Reflection.getTypeFullName(Bridge.getType(new Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.C1())));
            Bridge.Test.NUnit.Assert.areEqual("Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests+C2`1[[System.Int32, mscorlib]]", Bridge.Reflection.getTypeFullName(Bridge.getType(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.C2$1(System.Int32))())));
            Bridge.Test.NUnit.Assert.areEqual("Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests+C2`1[[System.String, mscorlib]]", Bridge.Reflection.getTypeFullName(Bridge.getType(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.C2$1(System.String))())));
            Bridge.Test.NUnit.Assert.areEqual("System.Int32", Bridge.Reflection.getTypeFullName(System.Int32));
            Bridge.Test.NUnit.Assert.areEqual("System.String", Bridge.Reflection.getTypeFullName(System.String));
            Bridge.Test.NUnit.Assert.areEqual("Function", Bridge.Reflection.getTypeFullName(Function));
            Bridge.Test.NUnit.Assert.areEqual("System.Object", Bridge.Reflection.getTypeFullName(Bridge.getType({  })));
            Bridge.Test.NUnit.Assert.areEqual("System.Int32[]", Bridge.Reflection.getTypeFullName(Bridge.getType(System.Array.init([1, 2], System.Int32))));
        },
        getTypeOnNullInstanceThrowsException: function () {
            Bridge.Test.NUnit.Assert.throws($asm.$.Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.f2);
        },
        cast: function (T, o) {
            return Bridge.cast(Bridge.unbox(o), T);
        },
        castOperatorForSerializableTypeWithoutTypeCheckCodeAlwaysSucceedsGeneric: function () {
            var o = {  };
            var b = this.cast(System.Object, o);
            Bridge.Test.NUnit.Assert.true(Bridge.referenceEquals(o, b));
        },
        typeCheckForSubTypeOfGenericType: function () {
            var c12 = new Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.C12();
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(c12, Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.C12), "#1");
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(c12, Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.C11$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.K)), "#2");
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(c12, Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.C10$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.K)), "#3");
        }
    });

    Bridge.ns("Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests", $asm.$);

    Bridge.apply($asm.$.Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests, {
        f1: function () {
        },
        f2: function () {
            Bridge.getType(null);
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.BS", {
        X: 0,
        ctor: function (x) {
            this.$initialize();
            this.X = x;
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.C1");

    Bridge.define("Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.K");

    Bridge.define("Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.C2$1", function (T) { return {

    }; });

    Bridge.define("Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.CI");

    Bridge.define("Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I1", {
        $kind: "interface"
    });

    Bridge.definei("Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I2$1", function (T1) { return {
        $kind: "interface"
    }; });

    Bridge.define("Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I4", {
        $kind: "interface"
    });

    Bridge.define("Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.E1", {
        $kind: "enum"
    });

    Bridge.define("Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.E2", {
        $kind: "enum"
    });

    Bridge.definei("Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I7$1", function (T) { return {
        $kind: "interface",
        $variance: [2]
    }; });

    Bridge.definei("Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I6$1", function (T) { return {
        $kind: "interface",
        $variance: [1]
    }; });

    Bridge.definei("Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I9$2", function (T1, T2) { return {
        $kind: "interface",
        $variance: [0,1]
    }; });

    Bridge.define("Bridge.ClientTest.Batch4.Reflection.TypeSystemTests", {
        config: {
            properties: {
                AssemblyWithVersion: {
                    get: function () {
                        return "Bridge.ClientTest.Batch4";
                    }
                }
            }
        },
        fullNamePropertyReturnsTheNameWithTheNamespace: function () {
            Bridge.Test.NUnit.Assert.areEqual("Bridge.ClientTest.Batch4.Reflection.TypeSystemTests", Bridge.Reflection.getTypeFullName(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests));
        },
        assemblyQualifiedNameReturnsTheNameWithTheNamespaceAndAssemblyName: function () {
            Bridge.Test.NUnit.Assert.areEqual("Bridge.ClientTest.Batch4.Reflection.TypeSystemTests, Bridge.ClientTest.Batch4", Bridge.Reflection.getTypeQName(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests));
            Bridge.Test.NUnit.Assert.areEqual("Bridge.ClientTest.Batch4.Reflection.TypeSystemTests+BX`1, Bridge.ClientTest.Batch4", Bridge.Reflection.getTypeQName(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.BX$1));
            Bridge.Test.NUnit.Assert.areEqual("Bridge.ClientTest.Batch4.Reflection.TypeSystemTests+BX`1[[System.Int32, mscorlib]], Bridge.ClientTest.Batch4", Bridge.Reflection.getTypeQName(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.BX$1(System.Int32)));
        },
        assemblyPropertyWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual(this.AssemblyWithVersion, Bridge.Reflection.getTypeAssembly(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.B).name);
            Bridge.Test.NUnit.Assert.areEqual(this.AssemblyWithVersion, Bridge.Reflection.getTypeAssembly(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.I1).name);
            Bridge.Test.NUnit.Assert.areEqual(this.AssemblyWithVersion, Bridge.Reflection.getTypeAssembly(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IG$1).name);
            Bridge.Test.NUnit.Assert.areEqual(this.AssemblyWithVersion, Bridge.Reflection.getTypeAssembly(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.BX$1).name);
            Bridge.Test.NUnit.Assert.areEqual(this.AssemblyWithVersion, Bridge.Reflection.getTypeAssembly(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IG$1(System.Int32)).name);
            Bridge.Test.NUnit.Assert.areEqual(this.AssemblyWithVersion, Bridge.Reflection.getTypeAssembly(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.BX$1(System.Int32)).name);
            Bridge.Test.NUnit.Assert.areEqual(this.AssemblyWithVersion, Bridge.Reflection.getTypeAssembly(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.E1).name);
        },
        namespacePropertyReturnsTheNamespaceWithoutTheName: function () {
            Bridge.Test.NUnit.Assert.areEqual("Bridge.ClientTest.Batch4.Reflection", Bridge.Reflection.getTypeNamespace(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests));
            Bridge.Test.NUnit.Assert.areEqual("Bridge.ClientTest.Batch4.Reflection", Bridge.Reflection.getTypeNamespace(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.DS2));
        },
        instantiatingClassWithConstructorThatNeedsToBeAppliedWorks: function () {
            var args = $asm.$.Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.f1(new (System.Collections.Generic.List$1(System.Object))());
            var obj = Bridge.Reflection.applyConstructor(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.ClassWithExpandParamsCtor, args.toArray());

            Bridge.Test.NUnit.Assert.areEqual(Bridge.unbox(args.toArray()), Bridge.unbox(obj.ctorArgs));
            Bridge.Test.NUnit.Assert.areEqual(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.ClassWithExpandParamsCtor, Bridge.getType(obj));
        },
        namePropertyRemovesTheNamespace: function () {
            Bridge.Test.NUnit.Assert.areEqual$1(Bridge.Reflection.getTypeName(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests), "TypeSystemTests", "non-generic");
            Bridge.Test.NUnit.Assert.areEqual$1(Bridge.Reflection.getTypeName(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.G$2(System.Int32,System.String)), "G`2", "generic");
            Bridge.Test.NUnit.Assert.areEqual$1(Bridge.Reflection.getTypeName(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.G$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.BX$1(System.Double),System.String)), "G`2", "nested generic");
        },
        gettingBaseTypeWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual(System.Object, Bridge.Reflection.getBaseType(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.B));
            Bridge.Test.NUnit.Assert.areEqual(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.B, Bridge.Reflection.getBaseType(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.C));
            Bridge.Test.NUnit.Assert.areEqual(null, Bridge.Reflection.getBaseType(System.Object));
        },
        gettingImplementedInterfacesWorks: function () {
            var ifs = Bridge.Reflection.getInterfaces(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.C);
            Bridge.Test.NUnit.Assert.areEqual(4, ifs.length);
            Bridge.Test.NUnit.Assert.true(System.Array.contains(ifs, Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.I1, Function));
            Bridge.Test.NUnit.Assert.true(System.Array.contains(ifs, Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.I2, Function));
            Bridge.Test.NUnit.Assert.true(System.Array.contains(ifs, Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.I3, Function));
            Bridge.Test.NUnit.Assert.true(System.Array.contains(ifs, Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.I4, Function));
        },
        typeOfAnOpenGenericClassWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual("Bridge.ClientTest.Batch4.Reflection.TypeSystemTests+G`2", Bridge.Reflection.getTypeFullName(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.G$2));
        },
        typeOfAnOpenGenericInterfaceWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual("Bridge.ClientTest.Batch4.Reflection.TypeSystemTests+IG`1", Bridge.Reflection.getTypeFullName(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IG$1));
        },
        typeOfInstantiatedGenericClassWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual("Bridge.ClientTest.Batch4.Reflection.TypeSystemTests+G`2[[System.Int32, mscorlib],[Bridge.ClientTest.Batch4.Reflection.TypeSystemTests+C, Bridge.ClientTest.Batch4]]", Bridge.Reflection.getTypeFullName(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.G$2(System.Int32,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.C)));
        },
        typeOfInstantiatedGenericInterfaceWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual("Bridge.ClientTest.Batch4.Reflection.TypeSystemTests+IG`1[[System.Int32, mscorlib]]", Bridge.Reflection.getTypeFullName(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IG$1(System.Int32)));
        },
        constructingAGenericTypeTwiceWithTheSameArgumentsReturnsTheSameInstance: function () {
            var t1 = Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.G$2(System.Int32,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.C);
            var t2 = Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.G$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.C,System.Int32);
            var t3 = Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.G$2(System.Int32,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.C);
            Bridge.Test.NUnit.Assert.false(Bridge.referenceEquals(t1, t2));
            Bridge.Test.NUnit.Assert.true(Bridge.referenceEquals(t1, t3));
        },
        accessingAStaticMemberInAGenericClassWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual("System.Int32 Bridge.ClientTest.Batch4.Reflection.TypeSystemTests+C", Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.G$2(System.Int32,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.C).field);
            Bridge.Test.NUnit.Assert.areEqual("Bridge.ClientTest.Batch4.Reflection.TypeSystemTests+C System.Int32", Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.G$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.C,System.Int32).field);
            Bridge.Test.NUnit.Assert.areEqual("Bridge.ClientTest.Batch4.Reflection.TypeSystemTests+G`2[[Bridge.ClientTest.Batch4.Reflection.TypeSystemTests+C, Bridge.ClientTest.Batch4],[System.Int32, mscorlib]] Bridge.ClientTest.Batch4.Reflection.TypeSystemTests+G`2[[System.String, mscorlib],[Bridge.ClientTest.Batch4.Reflection.TypeSystemTests+C, Bridge.ClientTest.Batch4]]", Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.G$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.G$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.C,System.Int32),Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.G$2(System.String,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.C)).field);
        },
        typeOfNestedGenericClassWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual("Bridge.ClientTest.Batch4.Reflection.TypeSystemTests+G`2[[System.Int32, mscorlib],[Bridge.ClientTest.Batch4.Reflection.TypeSystemTests+G`2[[Bridge.ClientTest.Batch4.Reflection.TypeSystemTests+C, Bridge.ClientTest.Batch4],[Bridge.ClientTest.Batch4.Reflection.TypeSystemTests+IG`1[[System.String, mscorlib]], Bridge.ClientTest.Batch4]], Bridge.ClientTest.Batch4]]", Bridge.Reflection.getTypeFullName(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.G$2(System.Int32,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.G$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.C,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IG$1(System.String)))));
        },
        baseTypeAndImplementedInterfacesForGenericTypeWorks: function () {
            var $t;
            Bridge.Test.NUnit.Assert.areEqual("Bridge.ClientTest.Batch4.Reflection.TypeSystemTests+BX`1[[Bridge.ClientTest.Batch4.Reflection.TypeSystemTests+G`2[[System.Int32, mscorlib],[Bridge.ClientTest.Batch4.Reflection.TypeSystemTests+C, Bridge.ClientTest.Batch4]], Bridge.ClientTest.Batch4]]", Bridge.Reflection.getTypeFullName(Bridge.Reflection.getBaseType(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.G$2(System.Int32,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.G$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.C,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IG$1(System.String))))));
            Bridge.Test.NUnit.Assert.areEqual("Bridge.ClientTest.Batch4.Reflection.TypeSystemTests+IG`1[[Bridge.ClientTest.Batch4.Reflection.TypeSystemTests+G`2[[Bridge.ClientTest.Batch4.Reflection.TypeSystemTests+G`2[[Bridge.ClientTest.Batch4.Reflection.TypeSystemTests+C, Bridge.ClientTest.Batch4],[Bridge.ClientTest.Batch4.Reflection.TypeSystemTests+IG`1[[System.String, mscorlib]], Bridge.ClientTest.Batch4]], Bridge.ClientTest.Batch4],[System.String, mscorlib]], Bridge.ClientTest.Batch4]]", Bridge.Reflection.getTypeFullName(($t = Bridge.Reflection.getInterfaces(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.G$2(System.Int32,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.G$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.C,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IG$1(System.String)))))[System.Array.index(0, $t)]));
        },
        isGenericTypeDefinitionWorksAsExpected: function () {
            Bridge.Test.NUnit.Assert.true(Bridge.Reflection.isGenericTypeDefinition(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.G$2));
            Bridge.Test.NUnit.Assert.false(Bridge.Reflection.isGenericTypeDefinition(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.G$2(System.Int32,System.String)));
            Bridge.Test.NUnit.Assert.false(Bridge.Reflection.isGenericTypeDefinition(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.C));
            Bridge.Test.NUnit.Assert.true(Bridge.Reflection.isGenericTypeDefinition(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IG$1));
            Bridge.Test.NUnit.Assert.false(Bridge.Reflection.isGenericTypeDefinition(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IG$1(System.Int32)));
            Bridge.Test.NUnit.Assert.false(Bridge.Reflection.isGenericTypeDefinition(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.I2));
            Bridge.Test.NUnit.Assert.false(Bridge.Reflection.isGenericTypeDefinition(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.E1));
        },
        genericParameterCountReturnsZeroForConstructedTypesAndNonZeroForOpenOnes: function () {
            Bridge.Test.NUnit.Assert.areEqual(2, Bridge.Reflection.getGenericParameterCount(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.G$2));
            Bridge.Test.NUnit.Assert.areEqual(0, Bridge.Reflection.getGenericParameterCount(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.G$2(System.Int32,System.String)));
            Bridge.Test.NUnit.Assert.areEqual(0, Bridge.Reflection.getGenericParameterCount(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.C));
            Bridge.Test.NUnit.Assert.areEqual(1, Bridge.Reflection.getGenericParameterCount(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IG$1));
            Bridge.Test.NUnit.Assert.areEqual(0, Bridge.Reflection.getGenericParameterCount(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IG$1(System.Int32)));
            Bridge.Test.NUnit.Assert.areEqual(0, Bridge.Reflection.getGenericParameterCount(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.I2));
            Bridge.Test.NUnit.Assert.areEqual(0, Bridge.Reflection.getGenericParameterCount(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.E1));
        },
        getGenericArgumentsReturnsTheCorrectTypesForConstructedTypesOtherwiseNull: function () {
            Bridge.Test.NUnit.Assert.areEqual(2, Bridge.Reflection.getGenericArguments(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.G$2).length);
            Bridge.Test.NUnit.Assert.areEqual(Bridge.Reflection.getGenericArguments(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.G$2(System.Int32,System.String)), System.Array.init([System.Int32, System.String], Function));
            Bridge.Test.NUnit.Assert.areEqual(0, Bridge.Reflection.getGenericArguments(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.C).length);
            Bridge.Test.NUnit.Assert.areEqual(1, Bridge.Reflection.getGenericArguments(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IG$1).length);
            Bridge.Test.NUnit.Assert.areEqual(Bridge.Reflection.getGenericArguments(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IG$1(System.String)), System.Array.init([System.String], Function));
            Bridge.Test.NUnit.Assert.areEqual(0, Bridge.Reflection.getGenericArguments(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.I2).length);
            Bridge.Test.NUnit.Assert.areEqual(0, Bridge.Reflection.getGenericArguments(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.E1).length);
        },
        getGenericTypeDefinitionReturnsTheGenericTypeDefinitionForConstructedTypeOtherwiseNull: function () {
            //Assert.AreEqual(null, typeof(G<,>).GetGenericTypeDefinition());
            Bridge.Test.NUnit.Assert.areEqual(Bridge.Reflection.getGenericTypeDefinition(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.G$2), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.G$2);
            //Assert.AreEqual(typeof(G<,>), typeof(G<int, string>).GetGenericTypeDefinition());
            Bridge.Test.NUnit.Assert.areEqual(Bridge.Reflection.getGenericTypeDefinition(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.G$2(System.Int32,System.String)), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.G$2);
            //Assert.AreEqual(null, typeof(C).GetGenericTypeDefinition());
            Bridge.Test.NUnit.Assert.throws$6(System.InvalidOperationException, $asm.$.Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.f2);
            //Assert.AreEqual(null, typeof(IG<>).GetGenericTypeDefinition());
            Bridge.Test.NUnit.Assert.areEqual(Bridge.Reflection.getGenericTypeDefinition(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IG$1), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IG$1);
            //Assert.AreEqual(typeof(IG<>), typeof(IG<string>).GetGenericTypeDefinition());
            Bridge.Test.NUnit.Assert.areEqual(Bridge.Reflection.getGenericTypeDefinition(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IG$1(System.String)), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IG$1);
            //Assert.AreEqual(null, typeof(I2).GetGenericTypeDefinition());
            Bridge.Test.NUnit.Assert.throws$6(System.InvalidOperationException, $asm.$.Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.f3);
            //Assert.AreEqual(null, typeof(E1).GetGenericTypeDefinition());
            Bridge.Test.NUnit.Assert.throws$6(System.InvalidOperationException, $asm.$.Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.f4);
        },
        isAssignableFromWorks: function () {
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.C1, Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.C1), "#1");
            Bridge.Test.NUnit.Assert.false$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.C1, System.Object), "#2");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.isAssignableFrom(System.Object, Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.C1), "#3");
            Bridge.Test.NUnit.Assert.false$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I1, System.Object), "#4");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.isAssignableFrom(System.Object, Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I1), "#5");
            Bridge.Test.NUnit.Assert.false$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I3, Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I1), "#6");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I1, Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I3), "#7");
            Bridge.Test.NUnit.Assert.false$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.D1, Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.C1), "#8");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.C1, Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.D1), "#9");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I1, Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.D1), "#10");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.C2$1(System.Int32), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.D2$1(System.Int32)), "#11");
            Bridge.Test.NUnit.Assert.false$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.C2$1(System.String), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.D2$1(System.Int32)), "#12");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I2$1(System.Int32), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.D2$1(System.Int32)), "#13");
            Bridge.Test.NUnit.Assert.false$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I2$1(System.String), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.D2$1(System.Int32)), "#14");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I1, Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.D2$1(System.Int32)), "#15");
            Bridge.Test.NUnit.Assert.false$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.C2$1(System.String), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.D3), "#16");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.C2$1(System.Int32), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.D3), "#17");
            Bridge.Test.NUnit.Assert.false$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I2$1(System.Int32), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.D3), "#18");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I2$1(System.String), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.D3), "#19");
            Bridge.Test.NUnit.Assert.false$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I2$1(System.Int32), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I5$1(System.String)), "#20");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I2$1(System.Int32), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I5$1(System.Int32)), "#21");
            Bridge.Test.NUnit.Assert.false$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I5$1(System.Int32), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I2$1(System.Int32)), "#22");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I1, Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.D4), "#23");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I3, Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.D4), "#24");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I4, Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.D4), "#25");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I1, Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2), "#26");
            Bridge.Test.NUnit.Assert.false$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I2$1, Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I5$1), "#27");
            Bridge.Test.NUnit.Assert.false$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.C2$1, Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.D2$1), "#28");
            Bridge.Test.NUnit.Assert.false$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.C2$1, Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.D3), "#29");
            Bridge.Test.NUnit.Assert.false$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.E1, Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.E2), "#30");
            Bridge.Test.NUnit.Assert.false$1(Bridge.Reflection.isAssignableFrom(System.Int32, Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.E1), "#31");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.isAssignableFrom(System.Object, Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.E1), "#32");
            Bridge.Test.NUnit.Assert.false$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I7$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I6$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), "#33");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I6$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I6$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), "#34");
            Bridge.Test.NUnit.Assert.false$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I6$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I6$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), "#35");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I6$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I6$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), "#36");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I6$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I6$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), "#37");
            Bridge.Test.NUnit.Assert.false$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I7$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y1$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), "#38");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I6$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y1$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), "#39");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I6$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y1X1), "#40");
            Bridge.Test.NUnit.Assert.false$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I6$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y1$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), "#41");
            Bridge.Test.NUnit.Assert.false$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I6$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y1X1), "#42");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I6$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y1$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), "#43");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I6$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y1X2), "#44");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I6$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y1$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), "#45");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I6$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y1X2), "#46");
            Bridge.Test.NUnit.Assert.false$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I6$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I7$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), "#47");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I7$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I7$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), "#48");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I7$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I7$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), "#49");
            Bridge.Test.NUnit.Assert.false$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I7$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I7$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), "#50");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I7$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I7$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), "#51");
            Bridge.Test.NUnit.Assert.false$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I6$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y2$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), "#52");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I7$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y2$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), "#53");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I7$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y2X1), "#54");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I7$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y2$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), "#55");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I7$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y2X1), "#56");
            Bridge.Test.NUnit.Assert.false$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I7$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y2$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), "#57");
            Bridge.Test.NUnit.Assert.false$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I7$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y2X2), "#58");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I7$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y2$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), "#59");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I7$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y2X2), "#60");
            Bridge.Test.NUnit.Assert.false$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I1, Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), "#61");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), "#62");
            Bridge.Test.NUnit.Assert.false$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), "#63");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), "#64");
            Bridge.Test.NUnit.Assert.false$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), "#65");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), "#66");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), "#67");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), "#68");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), "#69");
            Bridge.Test.NUnit.Assert.false$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), "#70");
            Bridge.Test.NUnit.Assert.false$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), "#71");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), "#72");
            Bridge.Test.NUnit.Assert.false$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), "#73");
            Bridge.Test.NUnit.Assert.false$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), "#74");
            Bridge.Test.NUnit.Assert.false$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), "#75");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), "#76");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), "#77");
            Bridge.Test.NUnit.Assert.false$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I1, Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y3$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), "#78");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y3$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), "#79");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y3X1X1), "#80");
            Bridge.Test.NUnit.Assert.false$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y3$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), "#81");
            Bridge.Test.NUnit.Assert.false$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y3X1X2), "#82");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y3$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), "#83");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y3X2X1), "#84");
            Bridge.Test.NUnit.Assert.false$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y3$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), "#85");
            Bridge.Test.NUnit.Assert.false$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y3X2X2), "#86");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y3$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), "#87");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y3X1X1), "#88");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y3$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), "#89");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y3X1X2), "#90");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y3$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), "#91");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y3X2X1), "#92");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y3$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), "#93");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y3X2X2), "#94");
            Bridge.Test.NUnit.Assert.false$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y3$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), "#95");
            Bridge.Test.NUnit.Assert.false$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y3X1X1), "#96");
            Bridge.Test.NUnit.Assert.false$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y3$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), "#97");
            Bridge.Test.NUnit.Assert.false$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y3X1X2), "#98");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y3$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), "#99");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y3X2X1), "#100");
            Bridge.Test.NUnit.Assert.false$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y3$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), "#101");
            Bridge.Test.NUnit.Assert.false$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y3X2X2), "#102");
            Bridge.Test.NUnit.Assert.false$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y3$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), "#103");
            Bridge.Test.NUnit.Assert.false$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y3X1X1), "#104");
            Bridge.Test.NUnit.Assert.false$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y3$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), "#105");
            Bridge.Test.NUnit.Assert.false$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y3X1X2), "#106");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y3$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), "#107");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y3X2X1), "#108");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y3$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), "#109");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y3X2X2), "#110");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I9$2(System.String,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I9$2(System.String,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), "#111");
            Bridge.Test.NUnit.Assert.false$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I9$2(System.Object,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I9$2(System.String,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), "#112");
            Bridge.Test.NUnit.Assert.false$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I9$2(System.String,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I9$2(System.Object,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), "#113");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I9$2(System.Object,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I9$2(System.Object,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), "#114");
            Bridge.Test.NUnit.Assert.false$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I9$2(System.String,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I9$2(System.String,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), "#115");
            Bridge.Test.NUnit.Assert.false$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I9$2(System.Object,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I9$2(System.String,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), "#116");
            Bridge.Test.NUnit.Assert.false$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I9$2(System.String,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I9$2(System.Object,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), "#117");
            Bridge.Test.NUnit.Assert.false$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I9$2(System.Object,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I9$2(System.Object,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), "#118");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I9$2(System.String,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I9$2(System.String,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), "#119");
            Bridge.Test.NUnit.Assert.false$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I9$2(System.Object,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I9$2(System.String,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), "#120");
            Bridge.Test.NUnit.Assert.false$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I9$2(System.String,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I9$2(System.Object,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), "#121");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I9$2(System.Object,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I9$2(System.Object,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), "#122");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I9$2(System.String,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I9$2(System.String,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), "#123");
            Bridge.Test.NUnit.Assert.false$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I9$2(System.Object,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I9$2(System.String,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), "#124");
            Bridge.Test.NUnit.Assert.false$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I9$2(System.String,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I9$2(System.Object,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), "#125");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I9$2(System.Object,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I9$2(System.Object,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), "#126");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I9$2(System.String,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y4$2(System.String,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), "#127");
            Bridge.Test.NUnit.Assert.false$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I9$2(System.Object,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y4$2(System.String,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), "#128");
            Bridge.Test.NUnit.Assert.false$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I9$2(System.String,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y4$2(System.Object,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), "#129");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I9$2(System.Object,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y4$2(System.Object,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), "#130");
            Bridge.Test.NUnit.Assert.false$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I9$2(System.String,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y4$2(System.String,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), "#131");
            Bridge.Test.NUnit.Assert.false$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I9$2(System.Object,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y4$2(System.String,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), "#132");
            Bridge.Test.NUnit.Assert.false$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I9$2(System.String,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y4$2(System.Object,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), "#133");
            Bridge.Test.NUnit.Assert.false$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I9$2(System.Object,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y4$2(System.Object,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), "#134");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I9$2(System.String,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y4$2(System.String,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), "#135");
            Bridge.Test.NUnit.Assert.false$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I9$2(System.Object,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y4$2(System.String,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), "#136");
            Bridge.Test.NUnit.Assert.false$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I9$2(System.String,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y4$2(System.Object,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), "#137");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I9$2(System.Object,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y4$2(System.Object,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), "#138");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I9$2(System.String,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y4$2(System.String,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), "#139");
            Bridge.Test.NUnit.Assert.false$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I9$2(System.Object,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y4$2(System.String,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), "#140");
            Bridge.Test.NUnit.Assert.false$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I9$2(System.String,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y4$2(System.Object,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), "#141");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I9$2(System.Object,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y4$2(System.Object,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), "#142");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I6$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I6$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y5$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), "#143");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I6$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I7$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y5$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), "#144");
            Bridge.Test.NUnit.Assert.false$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I6$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I6$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y5$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), "#145");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I6$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I7$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y5$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), "#146");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I6$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y5$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), "#147");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I6$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y5$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), "#148");
            Bridge.Test.NUnit.Assert.false$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I6$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y5$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), "#149");
            Bridge.Test.NUnit.Assert.false$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I6$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y5$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), "#150");
            Bridge.Test.NUnit.Assert.false$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I6$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I10$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y5$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), "#151");
            Bridge.Test.NUnit.Assert.false$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I6$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I10$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y5$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), "#152");
            Bridge.Test.NUnit.Assert.false$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I6$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I10$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y5$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), "#153");
            Bridge.Test.NUnit.Assert.false$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I6$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I10$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y5$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), "#154");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I6$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I6$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y5$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), "#155");
            Bridge.Test.NUnit.Assert.false$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I6$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I7$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y5$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), "#156");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I6$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I6$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y5$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), "#157");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I6$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I7$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y5$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), "#158");
            Bridge.Test.NUnit.Assert.false$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I6$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y5$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), "#159");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I6$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y5$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), "#160");
            Bridge.Test.NUnit.Assert.false$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I6$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y5$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), "#161");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I6$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y5$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), "#162");
            Bridge.Test.NUnit.Assert.false$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I6$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I10$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y5$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), "#163");
            Bridge.Test.NUnit.Assert.false$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I6$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I10$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y5$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), "#164");
            Bridge.Test.NUnit.Assert.false$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I6$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I10$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y5$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), "#165");
            Bridge.Test.NUnit.Assert.false$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I6$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I10$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y5$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), "#166");
            Bridge.Test.NUnit.Assert.false$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I7$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I6$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y6$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), "#167");
            Bridge.Test.NUnit.Assert.false$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I7$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I7$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y6$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), "#168");
            Bridge.Test.NUnit.Assert.false$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I7$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I6$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y6$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), "#169");
            Bridge.Test.NUnit.Assert.false$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I7$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I7$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y6$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), "#170");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I7$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y6$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), "#171");
            Bridge.Test.NUnit.Assert.false$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I7$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y6$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), "#172");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I7$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y6$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), "#173");
            Bridge.Test.NUnit.Assert.false$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I7$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y6$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), "#174");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I7$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I10$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y6$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), "#175");
            Bridge.Test.NUnit.Assert.false$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I7$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I10$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y6$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), "#176");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I7$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I10$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y6$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), "#177");
            Bridge.Test.NUnit.Assert.false$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I7$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I10$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y6$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), "#178");
            Bridge.Test.NUnit.Assert.false$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I7$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I6$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y6$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), "#179");
            Bridge.Test.NUnit.Assert.false$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I7$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I7$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y6$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), "#180");
            Bridge.Test.NUnit.Assert.false$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I7$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I6$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y6$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), "#181");
            Bridge.Test.NUnit.Assert.false$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I7$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I7$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y6$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), "#182");
            Bridge.Test.NUnit.Assert.false$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I7$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y6$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), "#183");
            Bridge.Test.NUnit.Assert.false$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I7$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y6$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), "#184");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I7$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y6$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), "#185");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I7$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y6$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), "#186");
            Bridge.Test.NUnit.Assert.false$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I7$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I10$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y6$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), "#187");
            Bridge.Test.NUnit.Assert.false$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I7$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I10$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y6$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), "#188");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I7$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I10$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y6$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), "#189");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I7$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I10$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y6$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), "#190");
        },
        isSubclassOfWorks: function () {
            Bridge.Test.NUnit.Assert.false$1((Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsSubclassOfTypes.C1.prototype instanceof Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsSubclassOfTypes.C1), "#1");
            Bridge.Test.NUnit.Assert.true$1((Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsSubclassOfTypes.C1.prototype instanceof System.Object), "#2");
            Bridge.Test.NUnit.Assert.false$1((System.Object.prototype instanceof Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsSubclassOfTypes.C1), "#3");
            Bridge.Test.NUnit.Assert.true$1((Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsSubclassOfTypes.D1.prototype instanceof Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsSubclassOfTypes.C1), "#4");
            Bridge.Test.NUnit.Assert.false$1((Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsSubclassOfTypes.C1.prototype instanceof Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsSubclassOfTypes.D1), "#5");
            Bridge.Test.NUnit.Assert.true$1((Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsSubclassOfTypes.D1.prototype instanceof System.Object), "#6");
            Bridge.Test.NUnit.Assert.true$1((Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsSubclassOfTypes.D2$1(System.Int32).prototype instanceof Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsSubclassOfTypes.C2$1(System.Int32)), "#7");
            Bridge.Test.NUnit.Assert.false$1((Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsSubclassOfTypes.D2$1(System.String).prototype instanceof Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsSubclassOfTypes.C2$1(System.Int32)), "#8");
            Bridge.Test.NUnit.Assert.false$1((Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsSubclassOfTypes.D3.prototype instanceof Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsSubclassOfTypes.C2$1(System.String)), "#9");
            Bridge.Test.NUnit.Assert.true$1((Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsSubclassOfTypes.D3.prototype instanceof Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsSubclassOfTypes.C2$1(System.Int32)), "#10");
            Bridge.Test.NUnit.Assert.false$1((Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsSubclassOfTypes.D2$1.prototype instanceof Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsSubclassOfTypes.C2$1), "#11");
            Bridge.Test.NUnit.Assert.false$1((Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsSubclassOfTypes.D3.prototype instanceof Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsSubclassOfTypes.C2$1), "#12");
        },
        isClassWorks: function () {
            Bridge.Test.NUnit.Assert.false(Bridge.Reflection.isClass(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.E1));
            Bridge.Test.NUnit.Assert.false(Bridge.Reflection.isClass(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.E2));
            Bridge.Test.NUnit.Assert.true(Bridge.Reflection.isClass(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.C));
            Bridge.Test.NUnit.Assert.true(Bridge.Reflection.isClass(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.G$2));
            Bridge.Test.NUnit.Assert.true(Bridge.Reflection.isClass(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.G$2(System.Int32,System.String)));
            Bridge.Test.NUnit.Assert.false(Bridge.Reflection.isClass(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.I1));
            Bridge.Test.NUnit.Assert.false(Bridge.Reflection.isClass(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IG$1));
            Bridge.Test.NUnit.Assert.false(Bridge.Reflection.isClass(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IG$1(System.Int32)));
        },
        isEnumWorks: function () {
            Bridge.Test.NUnit.Assert.true(Bridge.Reflection.isEnum(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.E1));
            Bridge.Test.NUnit.Assert.true(Bridge.Reflection.isEnum(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.E2));
            Bridge.Test.NUnit.Assert.false(Bridge.Reflection.isEnum(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.C));
            Bridge.Test.NUnit.Assert.false(Bridge.Reflection.isEnum(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.G$2));
            Bridge.Test.NUnit.Assert.false(Bridge.Reflection.isEnum(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.G$2(System.Int32,System.String)));
            Bridge.Test.NUnit.Assert.false(Bridge.Reflection.isEnum(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.I1));
            Bridge.Test.NUnit.Assert.false(Bridge.Reflection.isEnum(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IG$1));
            Bridge.Test.NUnit.Assert.false(Bridge.Reflection.isEnum(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IG$1(System.Int32)));
        },
        isArrayWorks: function () {
            var array = System.Array.init(5, 0, System.Int32);
            Bridge.Test.NUnit.Assert.true(Bridge.isArray(null, Bridge.getType(array)));
            Bridge.Test.NUnit.Assert.true(Bridge.isArray(null, System.Array.type(System.Object)));
            Bridge.Test.NUnit.Assert.true(Bridge.isArray(null, System.Array.type(System.Int32)));
            Bridge.Test.NUnit.Assert.false(Bridge.isArray(null, Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.C));
            //TODO Assert.False(typeof(List<int>).IsArray);
            //TODO Assert.False(typeof(Array).IsArray);
        },
        isFlagsWorks: function () {
            Bridge.Test.NUnit.Assert.false(Bridge.Reflection.isFlags(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.E1));
            Bridge.Test.NUnit.Assert.true(Bridge.Reflection.isFlags(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.E2));
            Bridge.Test.NUnit.Assert.false(Bridge.Reflection.isFlags(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.C));
            Bridge.Test.NUnit.Assert.false(Bridge.Reflection.isFlags(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.G$2));
            Bridge.Test.NUnit.Assert.false(Bridge.Reflection.isFlags(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.G$2(System.Int32,System.String)));
            Bridge.Test.NUnit.Assert.false(Bridge.Reflection.isFlags(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.I1));
            Bridge.Test.NUnit.Assert.false(Bridge.Reflection.isFlags(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IG$1));
            Bridge.Test.NUnit.Assert.false(Bridge.Reflection.isFlags(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IG$1(System.Int32)));
        },
        isInterfaceWorks: function () {
            Bridge.Test.NUnit.Assert.false(Bridge.Reflection.isInterface(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.E1));
            Bridge.Test.NUnit.Assert.false(Bridge.Reflection.isInterface(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.E2));
            Bridge.Test.NUnit.Assert.false(Bridge.Reflection.isInterface(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.C));
            Bridge.Test.NUnit.Assert.false(Bridge.Reflection.isInterface(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.G$2));
            Bridge.Test.NUnit.Assert.false(Bridge.Reflection.isInterface(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.G$2(System.Int32,System.String)));
            Bridge.Test.NUnit.Assert.true(Bridge.Reflection.isInterface(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.I1));
            Bridge.Test.NUnit.Assert.true(Bridge.Reflection.isInterface(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IG$1));
            Bridge.Test.NUnit.Assert.true(Bridge.Reflection.isInterface(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IG$1(System.Int32)));
        },
        isInstanceOfTypeWorksForReferenceTypes: function () {
            Bridge.Test.NUnit.Assert.false$1(Bridge.Reflection.isInstanceOfType({  }, Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.C1), "#1");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.isInstanceOfType(new Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.C1(), System.Object), "#2");
            Bridge.Test.NUnit.Assert.false$1(Bridge.Reflection.isInstanceOfType({  }, Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I1), "#3");
            Bridge.Test.NUnit.Assert.false$1(Bridge.Reflection.isInstanceOfType(new Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.C1(), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.D1), "#4");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.isInstanceOfType(new Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.D1(), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.C1), "#5");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.isInstanceOfType(new Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.D1(), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I1), "#6");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.isInstanceOfType(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.D2$1(System.Int32))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.C2$1(System.Int32)), "#7");
            Bridge.Test.NUnit.Assert.false$1(Bridge.Reflection.isInstanceOfType(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.D2$1(System.Int32))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.C2$1(System.String)), "#8");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.isInstanceOfType(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.D2$1(System.Int32))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I2$1(System.Int32)), "#9");
            Bridge.Test.NUnit.Assert.false$1(Bridge.Reflection.isInstanceOfType(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.D2$1(System.Int32))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I2$1(System.String)), "#0");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.isInstanceOfType(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.D2$1(System.Int32))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I1), "#11");
            Bridge.Test.NUnit.Assert.false$1(Bridge.Reflection.isInstanceOfType(new Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.D3(), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.C2$1(System.String)), "#12");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.isInstanceOfType(new Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.D3(), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.C2$1(System.Int32)), "#13");
            Bridge.Test.NUnit.Assert.false$1(Bridge.Reflection.isInstanceOfType(new Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.D3(), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I2$1(System.Int32)), "#14");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.isInstanceOfType(new Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.D3(), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I2$1(System.String)), "#15");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.isInstanceOfType(new Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.D4(), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I1), "#16");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.isInstanceOfType(new Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.D4(), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I3), "#17");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.isInstanceOfType(new Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.D4(), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I4), "#18");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.isInstanceOfType(new Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2(), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I1), "#19");
            Bridge.Test.NUnit.Assert.false$1(Bridge.Reflection.isInstanceOfType(new Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.D3(), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.C2$1), "#10");
            Bridge.Test.NUnit.Assert.false$1(Bridge.Reflection.isInstanceOfType(Bridge.box((0), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.E2, $box_.Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.E2.toString), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.E1), "#21");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.isInstanceOfType(Bridge.box((0), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.E1, $box_.Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.E1.toString), System.Int32), "#22");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.isInstanceOfType(Bridge.box((0), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.E1, $box_.Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.E1.toString), System.Object), "#23");
            Bridge.Test.NUnit.Assert.false$1(Bridge.Reflection.isInstanceOfType(null, System.Object), "#24");

            Bridge.Test.NUnit.Assert.false$1(Bridge.Reflection.isInstanceOfType({  }, Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.C1), "#25");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.isInstanceOfType(new Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.C1(), System.Object), "#26");
            Bridge.Test.NUnit.Assert.false$1(Bridge.Reflection.isInstanceOfType({  }, Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I1), "#27");
            Bridge.Test.NUnit.Assert.false$1(Bridge.Reflection.isInstanceOfType(new Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.C1(), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.D1), "#28");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.isInstanceOfType(new Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.D1(), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.C1), "#29");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.isInstanceOfType(new Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.D1(), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I1), "#30");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.isInstanceOfType(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.D2$1(System.Int32))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.C2$1(System.Int32)), "#31");
            Bridge.Test.NUnit.Assert.false$1(Bridge.Reflection.isInstanceOfType(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.D2$1(System.Int32))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.C2$1(System.String)), "#32");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.isInstanceOfType(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.D2$1(System.Int32))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I2$1(System.Int32)), "#33");
            Bridge.Test.NUnit.Assert.false$1(Bridge.Reflection.isInstanceOfType(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.D2$1(System.Int32))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I2$1(System.String)), "#34");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.isInstanceOfType(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.D2$1(System.Int32))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I1), "#35");
            Bridge.Test.NUnit.Assert.false$1(Bridge.Reflection.isInstanceOfType(new Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.D3(), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.C2$1(System.String)), "#36");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.isInstanceOfType(new Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.D3(), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.C2$1(System.Int32)), "#37");
            Bridge.Test.NUnit.Assert.false$1(Bridge.Reflection.isInstanceOfType(new Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.D3(), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I2$1(System.Int32)), "#38");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.isInstanceOfType(new Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.D3(), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I2$1(System.String)), "#39");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.isInstanceOfType(new Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.D4(), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I1), "#40");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.isInstanceOfType(new Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.D4(), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I3), "#41");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.isInstanceOfType(new Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.D4(), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I4), "#42");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.isInstanceOfType(new Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2(), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I1), "#43");
            Bridge.Test.NUnit.Assert.false$1(Bridge.Reflection.isInstanceOfType(new Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.D3(), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.C2$1), "#44");
            Bridge.Test.NUnit.Assert.false$1(Bridge.Reflection.isInstanceOfType(Bridge.box((0), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.E2, $box_.Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.E2.toString), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.E1), "#45");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.isInstanceOfType(Bridge.box((0), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.E1, $box_.Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.E1.toString), System.Int32), "#46");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.isInstanceOfType(Bridge.box((0), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.E1, $box_.Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.E1.toString), System.Object), "#47");
            Bridge.Test.NUnit.Assert.false$1(Bridge.Reflection.isInstanceOfType(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y1$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I7$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), "#48");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.isInstanceOfType(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y1$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I6$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), "#49");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.isInstanceOfType(new Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y1X1(), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I6$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), "#50");
            Bridge.Test.NUnit.Assert.false$1(Bridge.Reflection.isInstanceOfType(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y1$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I6$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), "#51");
            Bridge.Test.NUnit.Assert.false$1(Bridge.Reflection.isInstanceOfType(new Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y1X1(), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I6$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), "#52");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.isInstanceOfType(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y1$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I6$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), "#53");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.isInstanceOfType(new Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y1X2(), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I6$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), "#54");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.isInstanceOfType(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y1$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I6$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), "#55");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.isInstanceOfType(new Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y1X2(), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I6$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), "#56");
            Bridge.Test.NUnit.Assert.false$1(Bridge.Reflection.isInstanceOfType(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y2$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I6$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), "#57");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.isInstanceOfType(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y2$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I7$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), "#58");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.isInstanceOfType(new Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y2X1(), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I7$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), "#59");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.isInstanceOfType(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y2$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I7$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), "#60");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.isInstanceOfType(new Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y2X1(), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I7$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), "#61");
            Bridge.Test.NUnit.Assert.false$1(Bridge.Reflection.isInstanceOfType(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y2$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I7$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), "#62");
            Bridge.Test.NUnit.Assert.false$1(Bridge.Reflection.isInstanceOfType(new Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y2X2(), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I7$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), "#63");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.isInstanceOfType(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y2$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I7$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), "#64");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.isInstanceOfType(new Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y2X2(), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I7$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), "#65");
            Bridge.Test.NUnit.Assert.false$1(Bridge.Reflection.isInstanceOfType(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y3$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I1), "#66");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.isInstanceOfType(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y3$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), "#67");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.isInstanceOfType(new Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y3X1X1(), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), "#68");
            Bridge.Test.NUnit.Assert.false$1(Bridge.Reflection.isInstanceOfType(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y3$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), "#69");
            Bridge.Test.NUnit.Assert.false$1(Bridge.Reflection.isInstanceOfType(new Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y3X1X2(), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), "#70");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.isInstanceOfType(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y3$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), "#71");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.isInstanceOfType(new Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y3X2X1(), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), "#72");
            Bridge.Test.NUnit.Assert.false$1(Bridge.Reflection.isInstanceOfType(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y3$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), "#73");
            Bridge.Test.NUnit.Assert.false$1(Bridge.Reflection.isInstanceOfType(new Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y3X2X2(), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), "#74");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.isInstanceOfType(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y3$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), "#75");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.isInstanceOfType(new Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y3X1X1(), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), "#76");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.isInstanceOfType(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y3$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), "#77");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.isInstanceOfType(new Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y3X1X2(), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), "#78");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.isInstanceOfType(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y3$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), "#79");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.isInstanceOfType(new Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y3X2X1(), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), "#80");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.isInstanceOfType(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y3$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), "#81");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.isInstanceOfType(new Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y3X2X2(), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), "#82");
            Bridge.Test.NUnit.Assert.false$1(Bridge.Reflection.isInstanceOfType(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y3$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), "#83");
            Bridge.Test.NUnit.Assert.false$1(Bridge.Reflection.isInstanceOfType(new Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y3X1X1(), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), "#84");
            Bridge.Test.NUnit.Assert.false$1(Bridge.Reflection.isInstanceOfType(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y3$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), "#85");
            Bridge.Test.NUnit.Assert.false$1(Bridge.Reflection.isInstanceOfType(new Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y3X1X2(), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), "#86");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.isInstanceOfType(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y3$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), "#87");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.isInstanceOfType(new Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y3X2X1(), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), "#88");
            Bridge.Test.NUnit.Assert.false$1(Bridge.Reflection.isInstanceOfType(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y3$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), "#89");
            Bridge.Test.NUnit.Assert.false$1(Bridge.Reflection.isInstanceOfType(new Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y3X2X2(), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), "#90");
            Bridge.Test.NUnit.Assert.false$1(Bridge.Reflection.isInstanceOfType(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y3$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), "#91");
            Bridge.Test.NUnit.Assert.false$1(Bridge.Reflection.isInstanceOfType(new Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y3X1X1(), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), "#92");
            Bridge.Test.NUnit.Assert.false$1(Bridge.Reflection.isInstanceOfType(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y3$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), "#93");
            Bridge.Test.NUnit.Assert.false$1(Bridge.Reflection.isInstanceOfType(new Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y3X1X2(), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), "#94");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.isInstanceOfType(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y3$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), "#95");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.isInstanceOfType(new Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y3X2X1(), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), "#96");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.isInstanceOfType(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y3$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), "#97");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.isInstanceOfType(new Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y3X2X2(), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), "#98");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.isInstanceOfType(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y4$2(System.String,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I9$2(System.String,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), "#99");
            Bridge.Test.NUnit.Assert.false$1(Bridge.Reflection.isInstanceOfType(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y4$2(System.String,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I9$2(System.Object,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), "#100");
            Bridge.Test.NUnit.Assert.false$1(Bridge.Reflection.isInstanceOfType(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y4$2(System.Object,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I9$2(System.String,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), "#101");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.isInstanceOfType(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y4$2(System.Object,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I9$2(System.Object,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), "#102");
            Bridge.Test.NUnit.Assert.false$1(Bridge.Reflection.isInstanceOfType(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y4$2(System.String,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I9$2(System.String,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), "#103");
            Bridge.Test.NUnit.Assert.false$1(Bridge.Reflection.isInstanceOfType(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y4$2(System.String,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I9$2(System.Object,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), "#104");
            Bridge.Test.NUnit.Assert.false$1(Bridge.Reflection.isInstanceOfType(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y4$2(System.Object,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I9$2(System.String,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), "#105");
            Bridge.Test.NUnit.Assert.false$1(Bridge.Reflection.isInstanceOfType(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y4$2(System.Object,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I9$2(System.Object,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), "#106");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.isInstanceOfType(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y4$2(System.String,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I9$2(System.String,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), "#107");
            Bridge.Test.NUnit.Assert.false$1(Bridge.Reflection.isInstanceOfType(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y4$2(System.String,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I9$2(System.Object,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), "#108");
            Bridge.Test.NUnit.Assert.false$1(Bridge.Reflection.isInstanceOfType(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y4$2(System.Object,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I9$2(System.String,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), "#109");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.isInstanceOfType(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y4$2(System.Object,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I9$2(System.Object,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), "#110");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.isInstanceOfType(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y4$2(System.String,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I9$2(System.String,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), "#111");
            Bridge.Test.NUnit.Assert.false$1(Bridge.Reflection.isInstanceOfType(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y4$2(System.String,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I9$2(System.Object,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), "#112");
            Bridge.Test.NUnit.Assert.false$1(Bridge.Reflection.isInstanceOfType(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y4$2(System.Object,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I9$2(System.String,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), "#113");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.isInstanceOfType(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y4$2(System.Object,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I9$2(System.Object,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), "#114");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.isInstanceOfType(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y5$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I6$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I6$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1))), "#115");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.isInstanceOfType(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y5$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I6$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I7$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1))), "#116");
            Bridge.Test.NUnit.Assert.false$1(Bridge.Reflection.isInstanceOfType(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y5$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I6$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I6$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2))), "#117");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.isInstanceOfType(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y5$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I6$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I7$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2))), "#118");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.isInstanceOfType(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y5$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I6$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1))), "#119");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.isInstanceOfType(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y5$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I6$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2))), "#120");
            Bridge.Test.NUnit.Assert.false$1(Bridge.Reflection.isInstanceOfType(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y5$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I6$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1))), "#121");
            Bridge.Test.NUnit.Assert.false$1(Bridge.Reflection.isInstanceOfType(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y5$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I6$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2))), "#122");
            Bridge.Test.NUnit.Assert.false$1(Bridge.Reflection.isInstanceOfType(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y5$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I6$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I10$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1))), "#123");
            Bridge.Test.NUnit.Assert.false$1(Bridge.Reflection.isInstanceOfType(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y5$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I6$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I10$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2))), "#124");
            Bridge.Test.NUnit.Assert.false$1(Bridge.Reflection.isInstanceOfType(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y5$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I6$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I10$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1))), "#125");
            Bridge.Test.NUnit.Assert.false$1(Bridge.Reflection.isInstanceOfType(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y5$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I6$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I10$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2))), "#126");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.isInstanceOfType(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y5$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I6$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I6$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1))), "#127");
            Bridge.Test.NUnit.Assert.false$1(Bridge.Reflection.isInstanceOfType(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y5$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I6$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I7$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1))), "#128");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.isInstanceOfType(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y5$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I6$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I6$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2))), "#129");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.isInstanceOfType(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y5$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I6$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I7$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2))), "#130");
            Bridge.Test.NUnit.Assert.false$1(Bridge.Reflection.isInstanceOfType(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y5$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I6$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1))), "#131");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.isInstanceOfType(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y5$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I6$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2))), "#132");
            Bridge.Test.NUnit.Assert.false$1(Bridge.Reflection.isInstanceOfType(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y5$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I6$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1))), "#133");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.isInstanceOfType(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y5$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I6$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2))), "#134");
            Bridge.Test.NUnit.Assert.false$1(Bridge.Reflection.isInstanceOfType(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y5$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I6$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I10$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1))), "#135");
            Bridge.Test.NUnit.Assert.false$1(Bridge.Reflection.isInstanceOfType(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y5$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I6$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I10$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2))), "#136");
            Bridge.Test.NUnit.Assert.false$1(Bridge.Reflection.isInstanceOfType(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y5$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I6$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I10$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1))), "#137");
            Bridge.Test.NUnit.Assert.false$1(Bridge.Reflection.isInstanceOfType(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y5$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I6$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I10$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2))), "#138");
            Bridge.Test.NUnit.Assert.false$1(Bridge.Reflection.isInstanceOfType(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y6$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I7$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I6$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1))), "#139");
            Bridge.Test.NUnit.Assert.false$1(Bridge.Reflection.isInstanceOfType(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y6$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I7$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I7$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1))), "#140");
            Bridge.Test.NUnit.Assert.false$1(Bridge.Reflection.isInstanceOfType(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y6$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I7$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I6$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2))), "#141");
            Bridge.Test.NUnit.Assert.false$1(Bridge.Reflection.isInstanceOfType(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y6$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I7$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I7$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2))), "#142");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.isInstanceOfType(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y6$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I7$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1))), "#143");
            Bridge.Test.NUnit.Assert.false$1(Bridge.Reflection.isInstanceOfType(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y6$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I7$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2))), "#144");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.isInstanceOfType(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y6$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I7$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1))), "#145");
            Bridge.Test.NUnit.Assert.false$1(Bridge.Reflection.isInstanceOfType(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y6$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I7$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2))), "#146");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.isInstanceOfType(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y6$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I7$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I10$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1))), "#147");
            Bridge.Test.NUnit.Assert.false$1(Bridge.Reflection.isInstanceOfType(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y6$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I7$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I10$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2))), "#148");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.isInstanceOfType(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y6$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I7$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I10$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1))), "#149");
            Bridge.Test.NUnit.Assert.false$1(Bridge.Reflection.isInstanceOfType(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y6$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I7$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I10$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2))), "#150");
            Bridge.Test.NUnit.Assert.false$1(Bridge.Reflection.isInstanceOfType(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y6$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I7$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I6$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1))), "#151");
            Bridge.Test.NUnit.Assert.false$1(Bridge.Reflection.isInstanceOfType(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y6$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I7$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I7$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1))), "#152");
            Bridge.Test.NUnit.Assert.false$1(Bridge.Reflection.isInstanceOfType(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y6$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I7$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I6$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2))), "#153");
            Bridge.Test.NUnit.Assert.false$1(Bridge.Reflection.isInstanceOfType(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y6$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I7$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I7$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2))), "#154");
            Bridge.Test.NUnit.Assert.false$1(Bridge.Reflection.isInstanceOfType(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y6$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I7$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1))), "#155");
            Bridge.Test.NUnit.Assert.false$1(Bridge.Reflection.isInstanceOfType(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y6$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I7$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2))), "#156");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.isInstanceOfType(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y6$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I7$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1))), "#157");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.isInstanceOfType(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y6$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I7$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2))), "#158");
            Bridge.Test.NUnit.Assert.false$1(Bridge.Reflection.isInstanceOfType(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y6$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I7$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I10$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1))), "#159");
            Bridge.Test.NUnit.Assert.false$1(Bridge.Reflection.isInstanceOfType(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y6$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I7$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I10$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2))), "#160");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.isInstanceOfType(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y6$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I7$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I10$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1))), "#161");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.isInstanceOfType(new (Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y6$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2))(), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I7$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I10$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2))), "#162");
            Bridge.Test.NUnit.Assert.false$1(Bridge.Reflection.isInstanceOfType(null, System.Object), "#163");
        },
        invokingBaseUnnamedConstructorWithoutArgumentsWorks: function () {
            var d = new Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.BaseUnnamedConstructorWithoutArgumentsTypes.D();
            Bridge.Test.NUnit.Assert.areEqual("X|Y", System.String.concat(d.messageB, "|", d.messageD));
        },
        invokingBaseUnnamedConstructorWithArgumentsWorks: function () {
            var d = new Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.BaseUnnamedConstructorWithArgumentsTypes.D(5, 8);
            Bridge.Test.NUnit.Assert.areEqual("6 9|5 8", System.String.concat(d.messageB, "|", d.messageD));
        },
        invokingBaseNamedConstructorWithoutArgumentsWorks: function () {
            var d = new Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.BaseNamedConstructorWithoutArgumentsTypes.D();
            Bridge.Test.NUnit.Assert.areEqual("X|Y", System.String.concat(d.messageB, "|", d.messageD));
        },
        invokingBaseNamedConstructorWithArgumentsWorks: function () {
            var d = new Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.BaseNamedConstructorWithArgumentsTypes.D(5, 8);
            Bridge.Test.NUnit.Assert.areEqual("6 9|5 8", System.String.concat(d.messageB, "|", d.messageD));
        },
        constructingInstanceWithNamedConstructorWorks: function () {
            var d = new Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.ConstructingInstanceWithNamedConstructorTypes.D();
            Bridge.Test.NUnit.Assert.areEqual(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.ConstructingInstanceWithNamedConstructorTypes.D, Bridge.getType(d));
            Bridge.Test.NUnit.Assert.true(Bridge.is(d, Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.ConstructingInstanceWithNamedConstructorTypes.D));
            Bridge.Test.NUnit.Assert.areEqual("The message from ctor", d.getMessage());
        },
        constructingInstanceWithNamedConstructorWorks2: function () {
            var d = new Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.ConstructingInstanceWithNamedConstructorTypes.E();
            var t = Bridge.getType(d);
            Bridge.Test.NUnit.Assert.areEqual$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.ConstructingInstanceWithNamedConstructorTypes.E, t, "#1");
            Bridge.Test.NUnit.Assert.areEqual$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.ConstructingInstanceWithNamedConstructorTypes.D, Bridge.Reflection.getBaseType(t), "#2");
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(d, Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.ConstructingInstanceWithNamedConstructorTypes.E), "#3");
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(d, Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.ConstructingInstanceWithNamedConstructorTypes.D), "#4");
            Bridge.Test.NUnit.Assert.areEqual("The message from ctor and derived ctor", d.getMessage());
        },
        invokingBaseMethodWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual(2, new Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.BaseMethodInvocationTypes.D().doIt(5, 3));
        },
        invokingGenericBaseMethodWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual(2, new Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.BaseMethodInvocationTypes.D().doItGeneric(5, 3));
        },
        methodGroupConversionWorks: function () {
            var f = new Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.MethodGroupConversionTypes.C(4).getF();
            Bridge.Test.NUnit.Assert.areEqual(12, f(5, 3));
        },
        methodGroupConversionOnGenericMethodWorks: function () {
            var f = new Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.MethodGroupConversionTypes.C(4).getG();
            Bridge.Test.NUnit.Assert.areEqual("12String", f(5, 3));
        },
        methodGroupConversionOnBaseMethodWorks: function () {
            var f = new Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.MethodGroupConversionTypes.D(4).getF();
            Bridge.Test.NUnit.Assert.areEqual(12, f(3, 5));
        },
        methodGroupConversionOnGenericBaseMethodWorks: function () {
            var g = new Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.MethodGroupConversionTypes.C(4).getG();
            Bridge.Test.NUnit.Assert.areEqual("12String", g(5, 3));
        },
        importedInterfaceAppearsAsObjectWhenUsedAsGenericArgument: function () {
            Bridge.Test.NUnit.Assert.areEqual(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.BX$1(System.Object), Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.BX$1(System.Object));
        },
        falseIsFunctionShouldReturnFalse: function () {
            Bridge.Test.NUnit.Assert.false(Bridge.is(Bridge.box(false, System.Boolean, $box_.System.Boolean.toString), Function));
        },
        castingUndefinedToOtherTypeShouldReturnUndefined: function () {
            Bridge.Test.NUnit.Assert.areEqual("undefined", (typeof Bridge.cast(undefined, Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.C)));
        },
        nonSerializableTypeCanInheritFromSerializableType: function () {
            var d = new Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.DS(42);
            Bridge.Test.NUnit.Assert.areEqual$1(42, d.X, "d.X");
            Bridge.Test.NUnit.Assert.areEqual$1(42, d.getX(), "d.GetX");
        },
        inheritingFromRecordWorks: function () {
            var c = Bridge.merge(new Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.CS2(), {
                x: 42
            } );
            Bridge.Test.NUnit.Assert.areEqual(42, c.x);
        },
        instanceOfWorksForSerializableTypesWithCustomTypeCheckCode: function () {
            var o1 = new $asm.$AnonymousType$3(1);
            var o2 = new $asm.$AnonymousType$4(1, 2);
            Bridge.Test.NUnit.Assert.false$1(Bridge.Reflection.isInstanceOfType(o1, Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.DS2), "o1 should not be of type");
            //Assert.True (typeof(DS2).IsInstanceOfType(o2), "o2 should be of type");
        },
        staticGetTypeMethodWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests, Bridge.Reflection.getType("Bridge.ClientTest.Batch4.Reflection.TypeSystemTests"), "#1");
            Bridge.Test.NUnit.Assert.areEqual$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests, Bridge.Reflection.getType("Bridge.ClientTest.Batch4.Reflection.TypeSystemTests, Bridge.ClientTest.Batch4"), "#2");
            Bridge.Test.NUnit.Assert.areEqual$1(null, Bridge.Reflection.getType("Bridge.ClientTest.Batch4.Reflection.TypeSystemTests, mscorlib"), "#3");
            Bridge.Test.NUnit.Assert.areEqual$1(System.Collections.Generic.Dictionary$2, Bridge.Reflection.getType("System.Collections.Generic.Dictionary$2, mscorlib"), "#4");
            Bridge.Test.NUnit.Assert.areEqual$1(null, Bridge.Reflection.getType("System.Collections.Generic.Dictionary$2, NotLoaded.Assembly"), "#5");
        },
        staticGetTypeMethodWithGenericsWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual$1(System.Collections.Generic.Dictionary$2(System.String,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests), Bridge.Reflection.getType("System.Collections.Generic.Dictionary$2[[System.String],[Bridge.ClientTest.Batch4.Reflection.TypeSystemTests, Bridge.ClientTest.Batch4]]"), "#1");
            Bridge.Test.NUnit.Assert.areEqual$1(System.Collections.Generic.Dictionary$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests,System.String), Bridge.Reflection.getType("System.Collections.Generic.Dictionary$2[[Bridge.ClientTest.Batch4.Reflection.TypeSystemTests, Bridge.ClientTest.Batch4],[System.String]]"), "#2");
            Bridge.Test.NUnit.Assert.areEqual$1(System.Collections.Generic.Dictionary$2(System.Int32,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests), Bridge.Reflection.getType("System.Collections.Generic.Dictionary$2[[System.Int32, mscorlib],[Bridge.ClientTest.Batch4.Reflection.TypeSystemTests, Bridge.ClientTest.Batch4]]"), "#3");
            Bridge.Test.NUnit.Assert.areEqual$1(System.Collections.Generic.Dictionary$2(System.String,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests), Bridge.Reflection.getType("System.Collections.Generic.Dictionary$2[[System.String],[Bridge.ClientTest.Batch4.Reflection.TypeSystemTests, Bridge.ClientTest.Batch4]], mscorlib"), "#4");
            Bridge.Test.NUnit.Assert.areEqual$1(System.Collections.Generic.Dictionary$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests,System.String), Bridge.Reflection.getType("System.Collections.Generic.Dictionary$2[[Bridge.ClientTest.Batch4.Reflection.TypeSystemTests, Bridge.ClientTest.Batch4],[System.String]], mscorlib"), "#5");
            Bridge.Test.NUnit.Assert.areEqual$1(System.Collections.Generic.Dictionary$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests), Bridge.Reflection.getType("System.Collections.Generic.Dictionary$2[[Bridge.ClientTest.Batch4.Reflection.TypeSystemTests, Bridge.ClientTest.Batch4],[Bridge.ClientTest.Batch4.Reflection.TypeSystemTests, Bridge.ClientTest.Batch4]], mscorlib"), "#6");
            Bridge.Test.NUnit.Assert.areEqual$1(System.Collections.Generic.Dictionary$2(System.String,System.Collections.Generic.Dictionary$2(System.Collections.Generic.Dictionary$2(System.Int32,System.DateTime),System.Collections.Generic.Dictionary$2(System.Int32,System.Double))), Bridge.Reflection.getType("System.Collections.Generic.Dictionary$2[[System.String],[System.Collections.Generic.Dictionary$2[[System.Collections.Generic.Dictionary$2[[System.Int32, mscorlib],[System.DateTime]], mscorlib],[System.Collections.Generic.Dictionary$2[[System.Int32, mscorlib],[System.Double]], mscorlib]], mscorlib]], mscorlib"), "#7");
        },
        doesItThrow: function (a) {
            try {
                a();
                return false;
            }
            catch ($e1) {
                $e1 = System.Exception.create($e1);
                return true;
            }
        },
        isOfType: function (T, o) {
            return Bridge.is(o, T);
        },
        getDefault: function (T) {
            return Bridge.getDefaultValue(T);
        },
        castingToNamedValuesEnumCastsToString: function () {
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(Bridge.box("firstValue", Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.NamedValuesEnum, $box_.Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.NamedValuesEnum.toString), System.String), "#1");
            Bridge.Test.NUnit.Assert.true$1(Bridge.is("firstValue", System.String), "#2");
            Bridge.Test.NUnit.Assert.false$1(Bridge.is(Bridge.box(0, System.Int32), System.String), "#3");
            Bridge.Test.NUnit.Assert.false$1(this.doesItThrow($asm.$.Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.f5), "#4");
            Bridge.Test.NUnit.Assert.true$1(this.doesItThrow($asm.$.Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.f6), "#5");

            Bridge.Test.NUnit.Assert.notNull$1(Bridge.as(Bridge.box("firstValue", Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.NamedValuesEnum, $box_.Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.NamedValuesEnum.toString), System.String, true), "#6");
            Bridge.Test.NUnit.Assert.notNull$1(Bridge.as("firstValue", System.String, true), "#7");
            Bridge.Test.NUnit.Assert.null$1(Bridge.as(Bridge.box(0, System.Int32), System.String, true), "#8");

            Bridge.Test.NUnit.Assert.true$1(this.isOfType(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.NamedValuesEnum, Bridge.box("firstValue", Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.NamedValuesEnum, $box_.Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.NamedValuesEnum.toString)), "#9");
            Bridge.Test.NUnit.Assert.true$1(this.isOfType(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.NamedValuesEnum, "firstValue"), "#10");
            Bridge.Test.NUnit.Assert.false$1(this.isOfType(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.NamedValuesEnum, Bridge.box(0, System.Int32)), "#11");
        },
        castingToImportedNamedValuesEnumCastsToString: function () {
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(Bridge.box("firstValue", Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.ImportedNamedValuesEnum, $box_.Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.ImportedNamedValuesEnum.toString), System.String), "#1");
            Bridge.Test.NUnit.Assert.true$1(Bridge.is("firstValue", System.String), "#2");
            Bridge.Test.NUnit.Assert.false$1(Bridge.is(Bridge.box(0, System.Int32), System.String), "#3");
            Bridge.Test.NUnit.Assert.false$1(this.doesItThrow($asm.$.Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.f5), "#4");
            Bridge.Test.NUnit.Assert.true$1(this.doesItThrow($asm.$.Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.f6), "#5");

            Bridge.Test.NUnit.Assert.notNull$1(Bridge.as(Bridge.box("firstValue", Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.ImportedNamedValuesEnum, $box_.Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.ImportedNamedValuesEnum.toString), System.String, true), "#6");
            Bridge.Test.NUnit.Assert.notNull$1(Bridge.as("firstValue", System.String, true), "#7");
            Bridge.Test.NUnit.Assert.null$1(Bridge.as(Bridge.box(0, System.Int32), System.String, true), "#8");
        },
        defaultValueOfNamedValuesEnumIsNull: function () {
            Bridge.Test.NUnit.Assert.null$1(null, "#1");
            Bridge.Test.NUnit.Assert.null$1(this.getDefault(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.NamedValuesEnum), "#2");
        },
        defaultValueOfImportedNamedValuesEnumIsNull: function () {
            Bridge.Test.NUnit.Assert.null$1(null, "#1");
            Bridge.Test.NUnit.Assert.null$1(this.getDefault(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.ImportedNamedValuesEnum), "#2");
        }
    });

    Bridge.define("$AnonymousType$3", $asm, {
        $kind: "anonymous",
        ctor: function (x) {
            this.x = x;
        },
        equals: function (o) {
            if (!Bridge.is(o, $asm.$AnonymousType$3)) {
                return false;
            }
            return Bridge.equals(this.x, o.x);
        },
        getHashCode: function () {
            var h = Bridge.addHash([7550196188, this.x]);
            return h;
        },
        toJSON: function () {
            return {
                x : this.x
            };
        },
        statics : {
            $metadata : function () { return {"m":[{"a":2,"n":"x","t":16,"rt":System.Int32,"g":{"a":2,"n":"get_x","t":8,"rt":System.Int32,"fg":"x"},"fn":"x"}]}; }
        }
    });

    Bridge.define("$AnonymousType$4", $asm, {
        $kind: "anonymous",
        ctor: function (x, y) {
            this.x = x;
            this.y = y;
        },
        equals: function (o) {
            if (!Bridge.is(o, $asm.$AnonymousType$4)) {
                return false;
            }
            return Bridge.equals(this.x, o.x) && Bridge.equals(this.y, o.y);
        },
        getHashCode: function () {
            var h = Bridge.addHash([7550196189, this.x, this.y]);
            return h;
        },
        toJSON: function () {
            return {
                x : this.x,
                y : this.y
            };
        },
        statics : {
            $metadata : function () { return {"m":[{"a":2,"n":"x","t":16,"rt":System.Int32,"g":{"a":2,"n":"get_x","t":8,"rt":System.Int32,"fg":"x"},"fn":"x"},{"a":2,"n":"y","t":16,"rt":System.Int32,"g":{"a":2,"n":"get_y","t":8,"rt":System.Int32,"fg":"y"},"fn":"y"}]}; }
        }
    });

    Bridge.ns("Bridge.ClientTest.Batch4.Reflection.TypeSystemTests", $asm.$);

    Bridge.apply($asm.$.Bridge.ClientTest.Batch4.Reflection.TypeSystemTests, {
        f1: function (_o71) {
            _o71.add(Bridge.box(42, System.Int32));
            _o71.add("x");
            _o71.add(Bridge.box(18, System.Int32));
            return _o71;
        },
        f2: function () {
            Bridge.Reflection.getGenericTypeDefinition(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.C);
        },
        f3: function () {
            Bridge.Reflection.getGenericTypeDefinition(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.I2);
        },
        f4: function () {
            Bridge.Reflection.getGenericTypeDefinition(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.E1);
        },
        f5: function () {
            var x = Bridge.cast(Bridge.unbox("firstValue"), System.String);
        },
        f6: function () {
            var x = Bridge.cast(Bridge.unbox(Bridge.box(0, System.Int32)), System.String);
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.I1", {
        $kind: "interface"
    });

    Bridge.define("Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.BaseMethodInvocationTypes");

    Bridge.define("Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.BaseMethodInvocationTypes.B", {
        f: function (x, y) {
            return ((x - y) | 0);
        },
        g: function (T, x, y) {
            return ((x - y) | 0);
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.BaseNamedConstructorWithArgumentsTypes");

    Bridge.define("Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.BaseNamedConstructorWithArgumentsTypes.B", {
        messageB: null,
        ctor: function (x, y) {
            this.$initialize();
            this.messageB = x + " " + y;
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.BaseNamedConstructorWithoutArgumentsTypes");

    Bridge.define("Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.BaseNamedConstructorWithoutArgumentsTypes.B", {
        messageB: null,
        ctor: function () {
            this.$initialize();
            this.messageB = "X";
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.BaseUnnamedConstructorWithArgumentsTypes");

    Bridge.define("Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.BaseUnnamedConstructorWithArgumentsTypes.B", {
        messageB: null,
        ctor: function (x, y) {
            this.$initialize();
            this.messageB = x + " " + y;
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.BaseUnnamedConstructorWithoutArgumentsTypes");

    Bridge.define("Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.BaseUnnamedConstructorWithoutArgumentsTypes.B", {
        messageB: null,
        ctor: function () {
            this.$initialize();
            this.messageB = "X";
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.BS", {
        X: 0,
        ctor: function (x) {
            this.$initialize();
            this.X = x;
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.BX$1", function (T) { return {

    }; });

    Bridge.define("Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.I3", {
        $kind: "interface"
    });

    Bridge.define("Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.ClassWithExpandParamsCtor", {
        ctorArgs: null,
        ctor: function (args) {
            args = Array.prototype.slice.call(arguments, 0);

            this.$initialize();
            this.ctorArgs = args;
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.ConstructingInstanceWithNamedConstructorTypes");

    Bridge.define("Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.ConstructingInstanceWithNamedConstructorTypes.D", {
        f: null,
        ctor: function () {
            this.$initialize();
            this.f = "from ctor";
        },
        getMessage: function () {
            return System.String.concat("The message ", this.f);
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.CS2", {
        x: 0
    });

    Bridge.define("Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.E1", {
        $kind: "enum"
    });

    Bridge.define("Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.E2", {
        $kind: "enum",
        $flags: true
    });

    Bridge.definei("Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IG$1", function (T) { return {
        $kind: "interface"
    }; });

    Bridge.define("Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.ImportedNamedValuesEnum", {
        $kind: "enum",
        statics: {
            firstValue: "firstValue",
            secondValue: "secondValue"
        },
        $utype: System.String
    });

    Bridge.define("Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes");

    Bridge.define("Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.C1");

    Bridge.define("Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.C2$1", function (T) { return {

    }; });

    Bridge.define("Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I1", {
        $kind: "interface"
    });

    Bridge.definei("Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I2$1", function (T1) { return {
        $kind: "interface"
    }; });

    Bridge.define("Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I4", {
        $kind: "interface"
    });

    Bridge.definei("Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I7$1", function (T) { return {
        $kind: "interface",
        $variance: [2]
    }; });

    Bridge.definei("Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I6$1", function (T) { return {
        $kind: "interface",
        $variance: [1]
    }; });

    Bridge.definei("Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I9$2", function (T1, T2) { return {
        $kind: "interface",
        $variance: [0,1]
    }; });

    Bridge.define("Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsSubclassOfTypes");

    Bridge.define("Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsSubclassOfTypes.C1");

    Bridge.define("Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsSubclassOfTypes.C2$1", function (T) { return {

    }; });

    Bridge.define("Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.MethodGroupConversionTypes");

    Bridge.define("Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.MethodGroupConversionTypes.B", {
        m: 0,
        ctor: function (m) {
            this.$initialize();
            this.m = m;
        },
        f: function (x, y) {
            return ((((x + y) | 0) + this.m) | 0);
        },
        g: function (T, x, y) {
            return System.String.concat(((((x + y) | 0) + this.m) | 0), Bridge.Reflection.getTypeName(T));
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.MethodGroupConversionTypes.C", {
        m: 0,
        ctor: function (m) {
            this.$initialize();
            this.m = m;
        },
        f: function (x, y) {
            return ((((x + y) | 0) + this.m) | 0);
        },
        g: function (T, x, y) {
            return System.String.concat(((((x + y) | 0) + this.m) | 0), Bridge.Reflection.getTypeName(T));
        },
        getF: function () {
            return Bridge.fn.cacheBind(this, this.f);
        },
        getG: function () {
            return Bridge.fn.bind(this, function (x, y) { return this.g(System.String, x, y); });
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.NamedValuesEnum", {
        $kind: "enum",
        statics: {
            firstValue: "firstValue",
            secondValue: "secondValue"
        },
        $utype: System.String
    });

    Bridge.define("Bridge.ClientTest.Batch4.RefParameterTests", {
        refTestMethod: function (r, expectBefore, write, expectAfter, writeAfter, a) {
            Bridge.Test.NUnit.Assert.areEqual(expectBefore, r.v);
            r.v = write;
            Bridge.Test.NUnit.Assert.areEqual(write, r.v);
            a();
            Bridge.Test.NUnit.Assert.areEqual(expectAfter, r.v);
            r.v = writeAfter;
        },
        canUseReferenceToLocalVariables: function () {
            var i = { v : 14 };
            this.refTestMethod(i, 14, 17, 21, 24, function () {
                Bridge.Test.NUnit.Assert.areEqual(17, i.v);
                i.v = 21;
            });
            Bridge.Test.NUnit.Assert.areEqual(24, i.v);
        },
        canUseReferenceToField: function () {
            var c1 = Bridge.merge(new Bridge.ClientTest.Batch4.RefParameterTests.C(), {
                i: 14
            } );
            var c2 = c1;
            this.refTestMethod(Bridge.ref(c1, "i"), 14, 17, 21, 24, function () {
                Bridge.Test.NUnit.Assert.areEqual(17, c1.i);
                c1.i = 21;
                c1 = Bridge.merge(new Bridge.ClientTest.Batch4.RefParameterTests.C(), {
                    i: 10
                } );
            });
            Bridge.Test.NUnit.Assert.areEqual(24, c2.i);
            Bridge.Test.NUnit.Assert.areEqual(10, c1.i);
        },
        canUseReferenceToOneDimensionalArray: function () {
            var a1 = System.Array.init([3, 7, 14, 1], System.Int32);
            var a2 = a1;
            this.refTestMethod(Bridge.ref(a1, 2), 14, 17, 21, 24, function () {
                Bridge.Test.NUnit.Assert.areEqual(17, a1[System.Array.index(2, a1)]);
                a1[System.Array.index(2, a1)] = 21;
                a1 = System.Array.init([8, 9, 10, 11, 12], System.Int32);
            });
            Bridge.Test.NUnit.Assert.areEqual(24, a2[System.Array.index(2, a2)]);
            Bridge.Test.NUnit.Assert.areEqual(10, a1[System.Array.index(2, a1)]);
        },
        canUseReferenceToMultiDimensionalArray: function () {
            var a1 = System.Array.create(0, [[1, 3, 7], [1, 2, 3], [1, 14, 1]], System.Int32, 3, 3);
            var a2 = a1;
            this.refTestMethod(Bridge.ref(a1, [2, 1]), 14, 17, 21, 24, function () {
                Bridge.Test.NUnit.Assert.areEqual(17, a1.get([2, 1]));
                a1.set([2, 1], 21);
                a1 = System.Array.create(0, [[1, 2, 3], [4, 5, 6], [7, 8, 9]], System.Int32, 3, 3);
            });
            Bridge.Test.NUnit.Assert.areEqual(24, a2.get([2, 1]));
            Bridge.Test.NUnit.Assert.areEqual(8, a1.get([2, 1]));
        },
        canUseReferenceToThis_SPI_1569: function () {
            // #1569
            new Bridge.ClientTest.Batch4.RefParameterTests.S.ctor().refThisTest();
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.RefParameterTests.C", {
        i: 0
    });

    Bridge.define("Bridge.ClientTest.Batch4.RefParameterTests.S", {
        $kind: "struct",
        statics: {
            m: function (s) {
                // Test restructure to keep assertion count correct (prevent uncaught test exception)
                // copy var required as C# cannot use ref vars in lambdas
                var copy = new Bridge.ClientTest.Batch4.RefParameterTests.S();
                try {
                    copy = s.v.$clone();
                }
                catch ($e1) {
                    $e1 = System.Exception.create($e1);
                    copy = Bridge.getDefaultValue(Bridge.ClientTest.Batch4.RefParameterTests.S);
                }

                var r1 = 0;
                Bridge.ClientTest.Batch4.TestHelper.safe(function () {
                    r1 = copy.i;
                });
                Bridge.Test.NUnit.Assert.areEqual(11, r1);

                var r2 = 0;
                Bridge.ClientTest.Batch4.TestHelper.safe(function () {
                    r2 = copy.j;
                });
                Bridge.Test.NUnit.Assert.areEqual(12, r2);

                s.v = new Bridge.ClientTest.Batch4.RefParameterTests.S.$ctor1(42, 43);

                var copy2 = Bridge.getDefaultValue(Bridge.ClientTest.Batch4.RefParameterTests.S);
                try {
                    copy2 = s.v.$clone();
                }
                catch ($e2) {
                    $e2 = System.Exception.create($e2);
                    copy2 = Bridge.getDefaultValue(Bridge.ClientTest.Batch4.RefParameterTests.S);
                }

                var r3 = 0;
                Bridge.ClientTest.Batch4.TestHelper.safe(function () {
                    r3 = copy2.i;
                });
                Bridge.Test.NUnit.Assert.areEqual(42, r3);

                var r4 = 0;
                Bridge.ClientTest.Batch4.TestHelper.safe(function () {
                    r4 = copy2.j;
                });
                Bridge.Test.NUnit.Assert.areEqual(43, r4);
            },
            getDefaultValue: function () { return new Bridge.ClientTest.Batch4.RefParameterTests.S(); }
        },
        i: 0,
        j: 0,
        $ctor1: function (i, j) {
            this.$initialize();
            this.i = i;
            this.j = j;
        },
        ctor: function () {
            this.$initialize();
        },
        refThisTest: function () {
            this.i = 11;
            this.j = 12;
            Bridge.ClientTest.Batch4.RefParameterTests.S.m(Bridge.ref(this));
            Bridge.Test.NUnit.Assert.areEqual(42, this.i);
            Bridge.Test.NUnit.Assert.areEqual(43, this.j);
        },
        getHashCode: function () {
            var h = Bridge.addHash([83, this.i, this.j]);
            return h;
        },
        equals: function (o) {
            if (!Bridge.is(o, Bridge.ClientTest.Batch4.RefParameterTests.S)) {
                return false;
            }
            return Bridge.equals(this.i, o.i) && Bridge.equals(this.j, o.j);
        },
        $clone: function (to) {
            var s = to || new Bridge.ClientTest.Batch4.RefParameterTests.S();
            s.i = this.i;
            s.j = this.j;
            return s;
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.Runtime.CompilerServices.RuntimeHelpersTests", {
        getHashCodeWoksForObject_SPI_1570: function () {
            // #1570
            var o1 = {  }, o2 = {  };
            Bridge.Test.NUnit.Assert.areEqual(Bridge.getHashCode(o1), Bridge.getHashCode(o1));
            Bridge.Test.NUnit.Assert.areEqual(Bridge.getHashCode(o2), Bridge.getHashCode(o2));
        },
        getHashCodeCallsGetHashCodeNonVirtually_SPI_1570: function () {
            // #1570
            var isOK = false;
            for (var i = 0; i < 3; i = (i + 1) | 0) {
                // Since we might be unlucky and roll a 0 hash code, try 3 times.
                var c = new Bridge.ClientTest.Batch4.Runtime.CompilerServices.RuntimeHelpersTests.C();
                if (Bridge.getHashCode(c) !== 0) {
                    isOK = true;
                    break;
                }
            }
            Bridge.Test.NUnit.Assert.true$1(isOK, "GetHashCode should be invoked non-virtually");
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.Runtime.CompilerServices.RuntimeHelpersTests.C", {
        getHashCode: function () {
            return 0;
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.ScriptTests", {
        evalWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual(5, Bridge.unbox(eval("2 + 3")));
        },
        typeOfWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual$1("undefined", (typeof Bridge.unbox(undefined)), "#1");
            Bridge.Test.NUnit.Assert.areEqual$1("object", (typeof null), "#2");
            Bridge.Test.NUnit.Assert.areEqual$1("boolean", (typeof true), "#3");
            Bridge.Test.NUnit.Assert.areEqual$1("number", (typeof 0), "#4");
            Bridge.Test.NUnit.Assert.areEqual$1("number", (typeof System.Double.max), "#5");
            Bridge.Test.NUnit.Assert.areEqual$1("string", (typeof "X"), "#6");
            // #1620
            Bridge.Test.NUnit.Assert.areEqual$1("function", (typeof new Function("", "")), "#7");
            Bridge.Test.NUnit.Assert.areEqual$1("object", (typeof new $asm.$AnonymousType$5()), "#8");
        },
        deleteWorks_SPI_1571: function () {
            // #1571
            var c = null;
            Bridge.ClientTest.Batch4.TestHelper.safe(function () {
                c = new Bridge.ClientTest.Batch4.ScriptTests.TestType();
            });
            var i1 = 0;
            Bridge.ClientTest.Batch4.TestHelper.safe(function () {
                i1 = c.i;
            });
            Bridge.Test.NUnit.Assert.areEqual(42, i1);
            //Script.Delete(c, "i");
            var ui = null;
            Bridge.ClientTest.Batch4.TestHelper.safe(function () {
                ui = Bridge.box(c.i, System.Int32);
            });
            Bridge.Test.NUnit.Assert.areEqual("undefined", (typeof Bridge.unbox(ui)));

            var c2 = null;
            Bridge.ClientTest.Batch4.TestHelper.safe(function () {
                c2 = Bridge.merge(new Bridge.ClientTest.Batch4.ScriptTests.TestType(), {
                    i: 43
                } );
            });

            var i2 = 0;
            Bridge.ClientTest.Batch4.TestHelper.safe(function () {
                i1 = c2.i;
            });
            Bridge.Test.NUnit.Assert.areEqual(43, i2);
            // Gets incorrect js code delete c2;
            // Script.Delete(c2);
            Bridge.Test.NUnit.Assert.areEqual("undefined", (typeof c2));
        },
        parseIntWithoutRadixWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual(234, parseInt("234"));
        },
        parseIntWithRadixWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual(564, parseInt("234", 16));
        }
    });

    Bridge.define("$AnonymousType$5", $asm, {
        $kind: "anonymous",
        ctor: function () {
        },
        equals: function (o) {
            if (!Bridge.is(o, $asm.$AnonymousType$5)) {
                return false;
            }
            return ;
        },
        getHashCode: function () {
            var h = Bridge.addHash([7550196190]);
            return h;
        },
        toJSON: function () {
            return {

            };
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.ScriptTests.TestType", {
        statics: {
            StaticMethod: function () {
            }
        },
        i: 0,
        config: {
            events: {
                Evt: null
            },
            properties: {
                P: 0,
                P2: {
                    get: function () {
                        return 0;
                    }
                },
                P3: {
                    set: function (value) {
                    }
                }
            }
        },
        ctor: function () {
            this.$initialize();
            this.i = 42;
            this.P = 42;
        },
        raise: function () {
            if (!Bridge.staticEquals(this.Evt, null)) {
                this.Evt(this, null);
            }
        },
        InstanceMethod: function () {
        },
        F1: function () {
            return 42;
        },
        F2: function (i) {
            return ((i + 10) | 0);
        },
        F3: function (i, j) {
            return ((i + j) | 0);
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.Serialization.JsonTests", {
        nonGenericParseWorks_SPI_1574: function () {
            // #1574
            // Test restructure to keep assertion count correct (prevent uncaught test exception)
            var o = null;
            Bridge.ClientTest.Batch4.TestHelper.safe(function () {
                o = Bridge.cast(JSON.parse("{ \"i\": 3, \"s\": \"test\" }"), Bridge.ClientTest.Batch4.Serialization.JsonTests.TestClass2);
            });

            var i = 0;
            Bridge.ClientTest.Batch4.TestHelper.safe(function () {
                i = o.i;
            });
            Bridge.Test.NUnit.Assert.areEqual(3, i);

            var vs = null;
            Bridge.ClientTest.Batch4.TestHelper.safe(function () {
                vs = o.s;
            });
            Bridge.Test.NUnit.Assert.areEqual("test", vs);
        },
        genericParseWorks: function () {
            var o = Bridge.cast(JSON.parse("{ \"i\": 3, \"s\": \"test\" }"), Bridge.ClientTest.Batch4.Serialization.JsonTests.TestClass2);
            Bridge.Test.NUnit.Assert.areEqual(3, o.i);
            Bridge.Test.NUnit.Assert.areEqual("test", o.s);
        },
        nonGenericParseWithCallbackWorks_SPI_1574: function () {
            // #1574
            // Test restructure to keep assertion count correct (prevent uncaught test exception)

            var o = null;

            Bridge.ClientTest.Batch4.TestHelper.safe(function () {
                o = Bridge.cast(JSON.parse("{ \"i\": 3, \"s\": \"test\" }", $asm.$.Bridge.ClientTest.Batch4.Serialization.JsonTests.f1), Bridge.ClientTest.Batch4.Serialization.JsonTests.TestClass2);
            });

            var i = 0;
            Bridge.ClientTest.Batch4.TestHelper.safe(function () {
                i = o.i;
            });
            Bridge.Test.NUnit.Assert.areEqual(100, i);

            var vs = null;
            Bridge.ClientTest.Batch4.TestHelper.safe(function () {
                vs = o.s;
            });
            Bridge.Test.NUnit.Assert.areEqual("test", vs);
        },
        genericParseWithCallbackWorks_SPI_1574: function () {
            // #1574
            // Test restructure to keep assertion count correct (prevent uncaught test exception)
            var o = null;
            Bridge.ClientTest.Batch4.TestHelper.safe(function () {
                o = Bridge.cast(JSON.parse("{ \"i\": 3, \"s\": \"test\" }", $asm.$.Bridge.ClientTest.Batch4.Serialization.JsonTests.f1), Bridge.ClientTest.Batch4.Serialization.JsonTests.TestClass2);
            });

            var i = 0;
            Bridge.ClientTest.Batch4.TestHelper.safe(function () {
                i = o.i;
            });
            Bridge.Test.NUnit.Assert.areEqual(100, i);

            var vs = null;
            Bridge.ClientTest.Batch4.TestHelper.safe(function () {
                vs = o.s;
            });
            Bridge.Test.NUnit.Assert.areEqual("test", vs);
        },
        stringifyWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual("{\"i\":3}", JSON.stringify(Bridge.merge(new Bridge.ClientTest.Batch4.Serialization.JsonTests.TestClass1(), {
                i: 3
            } )));
        },
        stringifyWithSerializableMembersArrayWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual("{\"i\":3}", JSON.stringify(Bridge.merge(new Bridge.ClientTest.Batch4.Serialization.JsonTests.TestClass2(), {
                i: 3,
                s: "test"
            } ), System.Array.init(["i"], System.String)));
        },
        stringifyWithSerializableMembersArrayAndIntentCountWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual("{\n    \"i\": 3\n}", JSON.stringify(Bridge.merge(new Bridge.ClientTest.Batch4.Serialization.JsonTests.TestClass2(), {
                i: 3,
                s: "test"
            } ), System.Array.init(["i"], System.String), 4));
        },
        stringifyWithSerializableMembersArrayAndIntentTextWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual("{\n    \"i\": 3\n}", JSON.stringify(Bridge.merge(new Bridge.ClientTest.Batch4.Serialization.JsonTests.TestClass2(), {
                i: 3,
                s: "test"
            } ), System.Array.init(["i"], System.String), "    "));
        },
        stringifyWithCallbackWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual("{\"i\":3}", JSON.stringify(Bridge.merge(new Bridge.ClientTest.Batch4.Serialization.JsonTests.TestClass2(), {
                i: 3,
                s: "test"
            } ), $asm.$.Bridge.ClientTest.Batch4.Serialization.JsonTests.f2));
        },
        stringifyWithCallbackAndIndentCountWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual("{\n    \"i\": 3\n}", JSON.stringify(Bridge.merge(new Bridge.ClientTest.Batch4.Serialization.JsonTests.TestClass2(), {
                i: 3,
                s: "test"
            } ), $asm.$.Bridge.ClientTest.Batch4.Serialization.JsonTests.f2, 4));
        },
        stringifyWithCallbackAndIndentTextWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual("{\n    \"i\": 3\n}", JSON.stringify(Bridge.merge(new Bridge.ClientTest.Batch4.Serialization.JsonTests.TestClass2(), {
                i: 3,
                s: "test"
            } ), $asm.$.Bridge.ClientTest.Batch4.Serialization.JsonTests.f2, "    "));
        }
    });

    Bridge.ns("Bridge.ClientTest.Batch4.Serialization.JsonTests", $asm.$);

    Bridge.apply($asm.$.Bridge.ClientTest.Batch4.Serialization.JsonTests, {
        f1: function (s, x) {
            Bridge.cast(x, Bridge.ClientTest.Batch4.Serialization.JsonTests.TestClass2).i = 100;
            return x;
        },
        f2: function (key, value) {
            return Bridge.referenceEquals(key, "s") ? undefined : value;
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.Serialization.JsonTests.TestClass1", {
        i: 0
    });

    Bridge.define("Bridge.ClientTest.Batch4.Serialization.JsonTests.TestClass2", {
        i: 0,
        s: null
    });

    Bridge.define("Bridge.ClientTest.Batch4.SimpleTypes.BooleanTests", {
        typePropertiesAreCorrect_SPI_1575: function () {
            Bridge.Test.NUnit.Assert.true(Bridge.is(Bridge.box(true, System.Boolean, $box_.System.Boolean.toString), System.Boolean));
            Bridge.Test.NUnit.Assert.areEqual("System.Boolean", Bridge.Reflection.getTypeFullName(System.Boolean));
            // #1575
            Bridge.Test.NUnit.Assert.areEqual(System.Object, Bridge.Reflection.getBaseType(System.Boolean));
            Bridge.Test.NUnit.Assert.false(Bridge.Reflection.isClass(System.Boolean));
            Bridge.Test.NUnit.Assert.true(Bridge.Reflection.isAssignableFrom(System.IComparable$1(System.Boolean), System.Boolean));
            Bridge.Test.NUnit.Assert.true(Bridge.Reflection.isAssignableFrom(System.IEquatable$1(System.Boolean), System.Boolean));

            var b = Bridge.box(false, System.Boolean, $box_.System.Boolean.toString);
            Bridge.Test.NUnit.Assert.true(Bridge.is(b, System.IComparable$1(System.Boolean)));
            Bridge.Test.NUnit.Assert.true(Bridge.is(b, System.IEquatable$1(System.Boolean)));

            var interfaces = Bridge.Reflection.getInterfaces(System.Boolean);
            Bridge.Test.NUnit.Assert.areEqual(3, interfaces.length);
            Bridge.Test.NUnit.Assert.true(System.Array.contains(interfaces, System.IComparable$1(System.Boolean), Function));
            Bridge.Test.NUnit.Assert.true(System.Array.contains(interfaces, System.IEquatable$1(System.Boolean), Function));
        },
        getDefaultValue: function (T) {
            return Bridge.getDefaultValue(T);
        },
        defaultValueIsFalse: function () {
            Bridge.Test.NUnit.Assert.areStrictEqual(false, this.getDefaultValue(System.Boolean));
        },
        creatingInstanceReturnsFalse: function () {
            Bridge.Test.NUnit.Assert.areStrictEqual(false, Bridge.createInstance(System.Boolean));
        },
        defaultConstructorReturnsFalse_SPI_1576: function () {
            // #1576
            Bridge.Test.NUnit.Assert.areStrictEqual(false, false);
        },
        parseWorks: function () {
            Bridge.Test.NUnit.Assert.areStrictEqual$1(true, System.Boolean.parse("true"), "true");
            Bridge.Test.NUnit.Assert.areStrictEqual$1(true, System.Boolean.parse("TRue"), "TRue");
            Bridge.Test.NUnit.Assert.areStrictEqual$1(true, System.Boolean.parse("TRUE"), "TRUE");
            Bridge.Test.NUnit.Assert.areStrictEqual$1(true, System.Boolean.parse("  true\t"), "true with spaces");

            Bridge.Test.NUnit.Assert.areStrictEqual$1(false, System.Boolean.parse("false"), "false");
            Bridge.Test.NUnit.Assert.areStrictEqual$1(false, System.Boolean.parse("FAlse"), "FAlse");
            Bridge.Test.NUnit.Assert.areStrictEqual$1(false, System.Boolean.parse("FALSE"), "FALSE");
            Bridge.Test.NUnit.Assert.areStrictEqual$1(false, System.Boolean.parse("  false\t"), "false with spaces");
        },
        getHashCodeWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual(Bridge.getHashCode((true)), Bridge.getHashCode((true)));
            Bridge.Test.NUnit.Assert.areEqual(Bridge.getHashCode((false)), Bridge.getHashCode((false)));
            Bridge.Test.NUnit.Assert.areNotEqual(Bridge.getHashCode((true)), Bridge.getHashCode((false)));
        },
        objectEqualsWorks: function () {
            Bridge.Test.NUnit.Assert.true(Bridge.equals((true), Bridge.box(true, System.Boolean, $box_.System.Boolean.toString)));
            Bridge.Test.NUnit.Assert.false(Bridge.equals((true), Bridge.box(false, System.Boolean, $box_.System.Boolean.toString)));
            Bridge.Test.NUnit.Assert.false(Bridge.equals((false), Bridge.box(true, System.Boolean, $box_.System.Boolean.toString)));
            Bridge.Test.NUnit.Assert.true(Bridge.equals((false), Bridge.box(false, System.Boolean, $box_.System.Boolean.toString)));
        },
        iEquatableEqualsWorks: function () {
            Bridge.Test.NUnit.Assert.true((true) === true);
            Bridge.Test.NUnit.Assert.false((true) === false);
            Bridge.Test.NUnit.Assert.false((false) === true);
            Bridge.Test.NUnit.Assert.true((false) === false);

            Bridge.Test.NUnit.Assert.true(Bridge.equalsT(true, true, System.Boolean));
            Bridge.Test.NUnit.Assert.false(Bridge.equalsT(true, false, System.Boolean));
            Bridge.Test.NUnit.Assert.false(Bridge.equalsT(false, true, System.Boolean));
            Bridge.Test.NUnit.Assert.true(Bridge.equalsT(false, false, System.Boolean));
        },
        compareToWorks: function () {
            Bridge.Test.NUnit.Assert.true(Bridge.compare((true), true) === 0);
            Bridge.Test.NUnit.Assert.true(Bridge.compare((true), false) > 0);
            Bridge.Test.NUnit.Assert.true(Bridge.compare((false), true) < 0);
            Bridge.Test.NUnit.Assert.true(Bridge.compare((false), false) === 0);
        },
        iComparableCompareToWorks: function () {
            Bridge.Test.NUnit.Assert.true(Bridge.compare(true, true, false, System.Boolean) === 0);
            Bridge.Test.NUnit.Assert.true(Bridge.compare(true, false, false, System.Boolean) > 0);
            Bridge.Test.NUnit.Assert.true(Bridge.compare(false, true, false, System.Boolean) < 0);
            Bridge.Test.NUnit.Assert.true(Bridge.compare(false, false, false, System.Boolean) === 0);
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.SimpleTypes.ByteTests", {
        typePropertiesAreCorrect_SPI_1717: function () {
            Bridge.Test.NUnit.Assert.true(Bridge.is(Bridge.box(0, System.Byte), System.Byte));
            Bridge.Test.NUnit.Assert.false(Bridge.is(Bridge.box(0.5, System.Double, $box_.System.Double.toString), System.Byte));
            Bridge.Test.NUnit.Assert.false(Bridge.is(Bridge.box(-1, System.Int32), System.Byte));
            Bridge.Test.NUnit.Assert.false(Bridge.is(Bridge.box(256, System.Int32), System.Byte));
            Bridge.Test.NUnit.Assert.areEqual("System.Byte", Bridge.Reflection.getTypeFullName(System.Byte));
            Bridge.Test.NUnit.Assert.false(Bridge.Reflection.isClass(System.Byte));
            Bridge.Test.NUnit.Assert.true(Bridge.Reflection.isAssignableFrom(System.IComparable$1(System.Byte), System.Byte));
            Bridge.Test.NUnit.Assert.true(Bridge.Reflection.isAssignableFrom(System.IEquatable$1(System.Byte), System.Byte));
            Bridge.Test.NUnit.Assert.true(Bridge.Reflection.isAssignableFrom(System.IFormattable, System.Byte));
            var b = Bridge.box(0, System.Byte);
            Bridge.Test.NUnit.Assert.true(Bridge.is(b, System.Byte));
            Bridge.Test.NUnit.Assert.true(Bridge.is(b, System.IComparable$1(System.Byte)));
            Bridge.Test.NUnit.Assert.true(Bridge.is(b, System.IEquatable$1(System.Byte)));
            Bridge.Test.NUnit.Assert.true(Bridge.is(b, System.IFormattable));

            var interfaces = Bridge.Reflection.getInterfaces(System.Byte);
            Bridge.Test.NUnit.Assert.areEqual(4, interfaces.length);
            Bridge.Test.NUnit.Assert.true(System.Array.contains(interfaces, System.IComparable$1(System.Byte), Function));
            Bridge.Test.NUnit.Assert.true(System.Array.contains(interfaces, System.IEquatable$1(System.Byte), Function));
            Bridge.Test.NUnit.Assert.true(System.Array.contains(interfaces, System.IFormattable, Function));
        },
        castsWork: function () {
            var i1 = -1, i2 = 0, i3 = 234, i4 = 255, i5 = 256;
            var ni1 = -1, ni2 = 0, ni3 = 234, ni4 = 255, ni5 = 256, ni6 = null;

            Bridge.Test.NUnit.Assert.areStrictEqual$1(255, (i1 & 255), "-1 unchecked");
            Bridge.Test.NUnit.Assert.areStrictEqual$1(0, (i2 & 255), "0 unchecked");
            Bridge.Test.NUnit.Assert.areStrictEqual$1(234, (i3 & 255), "234 unchecked");
            Bridge.Test.NUnit.Assert.areStrictEqual$1(255, (i4 & 255), "255 unchecked");
            Bridge.Test.NUnit.Assert.areStrictEqual$1(0, (i5 & 255), "256 unchecked");

            Bridge.Test.NUnit.Assert.areStrictEqual$1(255, Bridge.Int.clipu8(ni1), "nullable -1 unchecked");
            Bridge.Test.NUnit.Assert.areStrictEqual$1(0, Bridge.Int.clipu8(ni2), "nullable 0 unchecked");
            Bridge.Test.NUnit.Assert.areStrictEqual$1(234, Bridge.Int.clipu8(ni3), "nullable 234 unchecked");
            Bridge.Test.NUnit.Assert.areStrictEqual$1(255, Bridge.Int.clipu8(ni4), "nullable 255 unchecked");
            Bridge.Test.NUnit.Assert.areStrictEqual$1(0, Bridge.Int.clipu8(ni5), "nullable 256 unchecked");
            Bridge.Test.NUnit.Assert.areStrictEqual$1(null, Bridge.Int.clipu8(ni6), "null unchecked");

            Bridge.Test.NUnit.Assert.throws$7(System.OverflowException, function () {
                var x = Bridge.Int.check(i1, System.Byte);
            }, "-1 checked");
            Bridge.Test.NUnit.Assert.areStrictEqual$1(0, Bridge.Int.check(i2, System.Byte), "0 checked");
            Bridge.Test.NUnit.Assert.areStrictEqual$1(234, Bridge.Int.check(i3, System.Byte), "234 checked");
            Bridge.Test.NUnit.Assert.areStrictEqual$1(255, Bridge.Int.check(i4, System.Byte), "256 checked");
            Bridge.Test.NUnit.Assert.throws$7(System.OverflowException, function () {
                var x = Bridge.Int.check(i5, System.Byte);
            }, "256 checked");

            Bridge.Test.NUnit.Assert.throws$7(System.OverflowException, function () {
                var x = Bridge.Int.check(ni1, System.Byte);
            }, "nullable -1 checked");
            Bridge.Test.NUnit.Assert.areStrictEqual$1(0, Bridge.Int.check(ni2, System.Byte), "nullable 0 checked");
            Bridge.Test.NUnit.Assert.areStrictEqual$1(234, Bridge.Int.check(ni3, System.Byte), "nullable 234 checked");
            Bridge.Test.NUnit.Assert.areStrictEqual$1(255, Bridge.Int.check(ni4, System.Byte), "nullable 255 checked");
            Bridge.Test.NUnit.Assert.throws$7(System.OverflowException, function () {
                var x = Bridge.Int.check(ni5, System.Byte);
            }, "nullable 256 checked");
            Bridge.Test.NUnit.Assert.areStrictEqual$1(null, Bridge.Int.check(ni6, System.Byte), "null checked");
        },
        getDefaultValue: function (T) {
            return Bridge.getDefaultValue(T);
        },
        defaultValueIs0: function () {
            Bridge.Test.NUnit.Assert.areStrictEqual(0, this.getDefaultValue(System.Byte));
        },
        defaultConstructorReturnsZero: function () {
            Bridge.Test.NUnit.Assert.areStrictEqual(0, Number());
        },
        creatingInstanceReturnsZero: function () {
            Bridge.Test.NUnit.Assert.areStrictEqual(0, Bridge.createInstance(System.Byte));
        },
        constantsWork: function () {
            Bridge.Test.NUnit.Assert.areEqual(0, 0);
            Bridge.Test.NUnit.Assert.areEqual(255, 255);
        },
        formatWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual("12", System.Byte.format((18), "x"));
        },
        toStringWithFormatWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual("12", System.Byte.format((18), "x"));
        },
        toStringWithFormatAndProviderWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual("12", System.Byte.format((18), "x", System.Globalization.CultureInfo.invariantCulture));
        },
        iFormattableToStringWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual("12", Bridge.format(18, "x", System.Globalization.CultureInfo.invariantCulture));
        },
        tryParseWorks_SPI_1592: function () {
            var numberResult = { };
            var result = System.Byte.tryParse("234", numberResult);
            Bridge.Test.NUnit.Assert.true(result);
            Bridge.Test.NUnit.Assert.areEqual(234, numberResult.v);

            result = System.Byte.tryParse("", numberResult);
            Bridge.Test.NUnit.Assert.false(result);
            Bridge.Test.NUnit.Assert.areEqual(0, numberResult.v);

            result = System.Byte.tryParse(null, numberResult);
            Bridge.Test.NUnit.Assert.false(result);
            Bridge.Test.NUnit.Assert.areEqual(0, numberResult.v);

            result = System.Byte.tryParse("notanumber", numberResult);
            Bridge.Test.NUnit.Assert.false(result);
            Bridge.Test.NUnit.Assert.areEqual(0, numberResult.v);

            result = System.Byte.tryParse("54768", numberResult);
            Bridge.Test.NUnit.Assert.false(result);
            // #1592
            Bridge.Test.NUnit.Assert.areEqual(0, numberResult.v);

            result = System.Byte.tryParse("-1", numberResult);
            Bridge.Test.NUnit.Assert.false(result);
            // #1592
            Bridge.Test.NUnit.Assert.areEqual(0, numberResult.v);

            result = System.Byte.tryParse("2.5", numberResult);
            Bridge.Test.NUnit.Assert.false(result);
            Bridge.Test.NUnit.Assert.areEqual(0, numberResult.v);
        },
        parseWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual(234, System.Byte.parse("234"));
            Bridge.Test.NUnit.Assert.throws$6(System.FormatException, $asm.$.Bridge.ClientTest.Batch4.SimpleTypes.ByteTests.f1);
            Bridge.Test.NUnit.Assert.throws$6(System.ArgumentNullException, $asm.$.Bridge.ClientTest.Batch4.SimpleTypes.ByteTests.f2);
            Bridge.Test.NUnit.Assert.throws$6(System.FormatException, $asm.$.Bridge.ClientTest.Batch4.SimpleTypes.ByteTests.f3);
            Bridge.Test.NUnit.Assert.throws$6(System.OverflowException, $asm.$.Bridge.ClientTest.Batch4.SimpleTypes.ByteTests.f4);
            Bridge.Test.NUnit.Assert.throws$6(System.OverflowException, $asm.$.Bridge.ClientTest.Batch4.SimpleTypes.ByteTests.f5);
            Bridge.Test.NUnit.Assert.throws$6(System.FormatException, $asm.$.Bridge.ClientTest.Batch4.SimpleTypes.ByteTests.f6);
        },
        toStringWithoutRadixWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual("123", (123).toString());
        },
        toStringWithRadixWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual("123", (123).toString(10));
            Bridge.Test.NUnit.Assert.areEqual("12", (18).toString(16));
        },
        getHashCodeWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual(Bridge.getHashCode((0)), Bridge.getHashCode((0)));
            Bridge.Test.NUnit.Assert.areEqual(Bridge.getHashCode((1)), Bridge.getHashCode((1)));
            Bridge.Test.NUnit.Assert.areNotEqual(Bridge.getHashCode((1)), Bridge.getHashCode((0)));
        },
        equalsWorks: function () {
            Bridge.Test.NUnit.Assert.true(System.Byte.equals((0), Bridge.box(0, System.Byte)));
            Bridge.Test.NUnit.Assert.false(System.Byte.equals((1), Bridge.box(0, System.Byte)));
            Bridge.Test.NUnit.Assert.false(System.Byte.equals((0), Bridge.box(1, System.Byte)));
            Bridge.Test.NUnit.Assert.true(System.Byte.equals((1), Bridge.box(1, System.Byte)));
        },
        iEquatableEqualsWorks: function () {
            Bridge.Test.NUnit.Assert.true((0) === 0);
            Bridge.Test.NUnit.Assert.false((1) === 0);
            Bridge.Test.NUnit.Assert.false((0) === 1);
            Bridge.Test.NUnit.Assert.true((1) === 1);

            Bridge.Test.NUnit.Assert.true(Bridge.equalsT(0, 0, System.Byte));
            Bridge.Test.NUnit.Assert.false(Bridge.equalsT(1, 0, System.Byte));
            Bridge.Test.NUnit.Assert.false(Bridge.equalsT(0, 1, System.Byte));
            Bridge.Test.NUnit.Assert.true(Bridge.equalsT(1, 1, System.Byte));
        },
        compareToWorks: function () {
            Bridge.Test.NUnit.Assert.true(Bridge.compare((0), 0) === 0);
            Bridge.Test.NUnit.Assert.true(Bridge.compare((1), 0) > 0);
            Bridge.Test.NUnit.Assert.true(Bridge.compare((0), 1) < 0);
        },
        iComparableCompareToWorks: function () {
            Bridge.Test.NUnit.Assert.true(Bridge.compare(0, 0, false, System.Byte) === 0);
            Bridge.Test.NUnit.Assert.true(Bridge.compare(1, 0, false, System.Byte) > 0);
            Bridge.Test.NUnit.Assert.true(Bridge.compare(0, 1, false, System.Byte) < 0);
        }
    });

    Bridge.ns("Bridge.ClientTest.Batch4.SimpleTypes.ByteTests", $asm.$);

    Bridge.apply($asm.$.Bridge.ClientTest.Batch4.SimpleTypes.ByteTests, {
        f1: function () {
            System.Byte.parse("");
        },
        f2: function () {
            System.Byte.parse(null);
        },
        f3: function () {
            System.Byte.parse("notanumber");
        },
        f4: function () {
            System.Byte.parse("54768");
        },
        f5: function () {
            System.Byte.parse("-1");
        },
        f6: function () {
            System.Byte.parse("2.5");
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.SimpleTypes.CharTests", {
        typePropertiesAreInt32_SPI_1603: function () {
            Bridge.Test.NUnit.Assert.false(Bridge.is(Bridge.box(0, System.Int32), System.Char));
            Bridge.Test.NUnit.Assert.false(Bridge.is(Bridge.box(0.5, System.Double, $box_.System.Double.toString), System.Char));
            Bridge.Test.NUnit.Assert.false(Bridge.is(Bridge.box(-1, System.Int32), System.Char));
            Bridge.Test.NUnit.Assert.false(Bridge.is(Bridge.box(65536, System.Int32), System.Char));
            Bridge.Test.NUnit.Assert.areEqual("System.Char", Bridge.Reflection.getTypeFullName(System.Char));
            Bridge.Test.NUnit.Assert.false(Bridge.Reflection.isClass(System.Char));
            Bridge.Test.NUnit.Assert.false(Bridge.Reflection.isAssignableFrom(System.IComparable$1(System.Byte), System.Char));
            Bridge.Test.NUnit.Assert.false(Bridge.Reflection.isAssignableFrom(System.IEquatable$1(System.Byte), System.Char));
            // #1603
            Bridge.Test.NUnit.Assert.false(Bridge.Reflection.isAssignableFrom(System.IFormattable, System.Char));
            var interfaces = Bridge.Reflection.getInterfaces(System.Char);
            Bridge.Test.NUnit.Assert.areEqual(4, interfaces.length);
            Bridge.Test.NUnit.Assert.true(System.Array.contains(interfaces, System.IComparable$1(System.Char), Function));
            Bridge.Test.NUnit.Assert.true(System.Array.contains(interfaces, System.IEquatable$1(System.Char), Function));
            Bridge.Test.NUnit.Assert.false(System.Array.contains(interfaces, System.IFormattable, Function));
        },
        castsWork: function () {
            var i1 = -1, i2 = 0, i3 = 234, i4 = 65535, i5 = 65536;
            var ni1 = -1, ni2 = 0, ni3 = 234, ni4 = 65535, ni5 = 65536, ni6 = null;

            Bridge.Test.NUnit.Assert.areStrictEqual$1(65535, (i1 & 65535), "-1 unchecked");
            Bridge.Test.NUnit.Assert.areStrictEqual$1(0, (i2 & 65535), "0 unchecked");
            Bridge.Test.NUnit.Assert.areStrictEqual$1(234, (i3 & 65535), "234 unchecked");
            Bridge.Test.NUnit.Assert.areStrictEqual$1(65535, (i4 & 65535), "65535 unchecked");
            Bridge.Test.NUnit.Assert.areStrictEqual$1(0, (i5 & 65535), "65536 unchecked");

            Bridge.Test.NUnit.Assert.areStrictEqual$1(65535, Bridge.Int.clipu16(ni1), "nullable -1 unchecked");
            Bridge.Test.NUnit.Assert.areStrictEqual$1(0, Bridge.Int.clipu16(ni2), "nullable 0 unchecked");
            Bridge.Test.NUnit.Assert.areStrictEqual$1(234, Bridge.Int.clipu16(ni3), "nullable 234 unchecked");
            Bridge.Test.NUnit.Assert.areStrictEqual$1(65535, Bridge.Int.clipu16(ni4), "nullable 65535 unchecked");
            Bridge.Test.NUnit.Assert.areStrictEqual$1(0, Bridge.Int.clipu16(ni5), "nullable 65536 unchecked");
            Bridge.Test.NUnit.Assert.areStrictEqual$1(null, Bridge.Int.clipu16(ni6), "null unchecked");

            Bridge.Test.NUnit.Assert.throws$7(System.OverflowException, function () {
                var x = Bridge.Int.check(i1, System.Char);
            }, "-1 checked");
            Bridge.Test.NUnit.Assert.areStrictEqual$1(0, Bridge.Int.check(i2, System.Char), "0 checked");
            Bridge.Test.NUnit.Assert.areStrictEqual$1(234, Bridge.Int.check(i3, System.Char), "234 checked");
            Bridge.Test.NUnit.Assert.areStrictEqual$1(65535, Bridge.Int.check(i4, System.Char), "65535 checked");
            Bridge.Test.NUnit.Assert.throws$7(System.OverflowException, function () {
                var x = Bridge.Int.check(i5, System.Char);
            }, "65536 checked");

            Bridge.Test.NUnit.Assert.throws$7(System.OverflowException, function () {
                var x = Bridge.Int.check(ni1, System.Char);
            }, "nullable -1 checked");
            Bridge.Test.NUnit.Assert.areStrictEqual$1(0, Bridge.Int.check(ni2, System.Char), "nullable 0 checked");
            Bridge.Test.NUnit.Assert.areStrictEqual$1(234, Bridge.Int.check(ni3, System.Char), "nullable 234 checked");
            Bridge.Test.NUnit.Assert.areStrictEqual$1(65535, Bridge.Int.check(ni4, System.Char), "nullable 65535 checked");
            Bridge.Test.NUnit.Assert.throws$7(System.OverflowException, function () {
                var x = Bridge.Int.check(ni5, System.Char);
            }, "nullable 65536 checked");
            Bridge.Test.NUnit.Assert.areStrictEqual$1(null, Bridge.Int.check(ni6, System.Char), "null checked");
        },
        getDefaultValue: function (T) {
            return Bridge.getDefaultValue(T);
        },
        defaultValueWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual(0, this.getDefaultValue(System.Char));
        },
        defaultConstructorReturnsZero: function () {
            Bridge.Test.NUnit.Assert.areStrictEqual(0, Number());
        },
        creatingInstanceReturnsZero: function () {
            Bridge.Test.NUnit.Assert.areStrictEqual(0, Bridge.createInstance(System.Char));
        },
        constantsWork: function () {
            Bridge.Test.NUnit.Assert.areEqual(0, 0);
            Bridge.Test.NUnit.Assert.areEqual(65535, 65535);
        },
        charComparisonWorks: function () {
            var a = 97, a2 = 97, b = 98;
            Bridge.Test.NUnit.Assert.true(a === a2);
            Bridge.Test.NUnit.Assert.false(a === b);
            Bridge.Test.NUnit.Assert.false(a !== a2);
            Bridge.Test.NUnit.Assert.true(a !== b);
            Bridge.Test.NUnit.Assert.false(a < a2);
            Bridge.Test.NUnit.Assert.true(a < b);
        },
        parseWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual(97, System.Char.charCodeAt("a", 0));
            Bridge.Test.NUnit.Assert.throws$6(System.ArgumentNullException, $asm.$.Bridge.ClientTest.Batch4.SimpleTypes.CharTests.f1);
            Bridge.Test.NUnit.Assert.throws$6(System.FormatException, $asm.$.Bridge.ClientTest.Batch4.SimpleTypes.CharTests.f2);
            Bridge.Test.NUnit.Assert.throws$6(System.FormatException, $asm.$.Bridge.ClientTest.Batch4.SimpleTypes.CharTests.f3);
        },
        formatWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual("0023", System.Char.format((35), "x4"));
        },
        iFormattableToStringWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual("0023", System.Char.format((35), "x4"));
        },
        toStringWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual("A", String.fromCharCode((65)));
        },
        getHashCodeWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual(System.Char.getHashCode((48)), System.Char.getHashCode((48)));
            Bridge.Test.NUnit.Assert.areEqual(System.Char.getHashCode((49)), System.Char.getHashCode((49)));
            Bridge.Test.NUnit.Assert.areNotEqual(System.Char.getHashCode((49)), System.Char.getHashCode((48)));
        },
        equalsWorks: function () {
            Bridge.Test.NUnit.Assert.false(System.Char.equals((48), Bridge.box(48, System.Int32)));
            Bridge.Test.NUnit.Assert.false(System.Char.equals((49), Bridge.box(48, System.Int32)));
            Bridge.Test.NUnit.Assert.false(System.Char.equals((48), Bridge.box(49, System.Int32)));
            Bridge.Test.NUnit.Assert.false(System.Char.equals((49), Bridge.box(49, System.Int32)));
        },
        iEquatableEqualsWorks: function () {
            Bridge.Test.NUnit.Assert.true((48) === 48);
            Bridge.Test.NUnit.Assert.false((49) === 48);
            Bridge.Test.NUnit.Assert.false((48) === 49);
            Bridge.Test.NUnit.Assert.true((49) === 49);
        },
        compareToWorks: function () {
            Bridge.Test.NUnit.Assert.true(Bridge.compare((49), 48) > 0);
            Bridge.Test.NUnit.Assert.true(Bridge.compare((48), 49) < 0);
            Bridge.Test.NUnit.Assert.true(Bridge.compare((48), 48) === 0);
            Bridge.Test.NUnit.Assert.true(Bridge.compare((49), 49) === 0);
        },
        isLowerWorks: function () {
            Bridge.Test.NUnit.Assert.true$1(Bridge.isLower(97), "#1");
            Bridge.Test.NUnit.Assert.false$1(Bridge.isLower(65), "#2");
            Bridge.Test.NUnit.Assert.false$1(Bridge.isLower(51), "#3");
        },
        isUpperWorks: function () {
            Bridge.Test.NUnit.Assert.true$1(Bridge.isUpper(65), "#1");
            Bridge.Test.NUnit.Assert.false$1(Bridge.isUpper(97), "#2");
            Bridge.Test.NUnit.Assert.false$1(Bridge.isUpper(51), "#3");
        },
        toLowerWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual(97, String.fromCharCode(65).toLowerCase().charCodeAt(0));
            Bridge.Test.NUnit.Assert.areEqual(97, String.fromCharCode(97).toLowerCase().charCodeAt(0));
            Bridge.Test.NUnit.Assert.areEqual(51, String.fromCharCode(51).toLowerCase().charCodeAt(0));
        },
        toUpperWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual(65, String.fromCharCode(65).toUpperCase().charCodeAt(0));
            Bridge.Test.NUnit.Assert.areEqual(65, String.fromCharCode(97).toUpperCase().charCodeAt(0));
            Bridge.Test.NUnit.Assert.areEqual(51, String.fromCharCode(51).toUpperCase().charCodeAt(0));
        },
        isDigitWorks: function () {
            Bridge.Test.NUnit.Assert.true$1(System.Char.isDigit(48), "#1");
            Bridge.Test.NUnit.Assert.false$1(System.Char.isDigit(46), "#2");
            Bridge.Test.NUnit.Assert.false$1(System.Char.isDigit(65), "#3");
        },
        isWhiteSpaceWorks: function () {
            Bridge.Test.NUnit.Assert.true$1(System.Char.isWhiteSpace(String.fromCharCode(32)), "#1");
            Bridge.Test.NUnit.Assert.true$1(System.Char.isWhiteSpace(String.fromCharCode(10)), "#2");
            Bridge.Test.NUnit.Assert.false$1(System.Char.isWhiteSpace(String.fromCharCode(65)), "#3");
        },
        isDigitWithStringAndIndexWorks: function () {
            Bridge.Test.NUnit.Assert.true$1(System.Char.isDigit("abc0def".charCodeAt(3)), "#1");
            Bridge.Test.NUnit.Assert.true$1(System.Char.isDigit("1".charCodeAt(0)), "#2");
            Bridge.Test.NUnit.Assert.true$1(System.Char.isDigit("abcdef5".charCodeAt(6)), "#3");
            Bridge.Test.NUnit.Assert.true$1(System.Char.isDigit("9abcdef".charCodeAt(0)), "#4");
            Bridge.Test.NUnit.Assert.false$1(System.Char.isDigit(".012345".charCodeAt(0)), "#5");
            Bridge.Test.NUnit.Assert.false$1(System.Char.isDigit("012345.".charCodeAt(6)), "#6");
            Bridge.Test.NUnit.Assert.false$1(System.Char.isDigit("012.345".charCodeAt(3)), "#7");
        },
        isWhiteSpaceWithStringAndIndexWorks: function () {
            Bridge.Test.NUnit.Assert.true$1(System.Char.isWhiteSpace("abc def".charAt(3)), "#1");
            Bridge.Test.NUnit.Assert.true$1(System.Char.isWhiteSpace("\t".charAt(0)), "#2");
            Bridge.Test.NUnit.Assert.true$1(System.Char.isWhiteSpace("abcdef\r".charAt(6)), "#3");
            Bridge.Test.NUnit.Assert.true$1(System.Char.isWhiteSpace("\nabcdef".charAt(0)), "#4");
            Bridge.Test.NUnit.Assert.false$1(System.Char.isWhiteSpace(".\r\n     ".charAt(0)), "#5");
            Bridge.Test.NUnit.Assert.false$1(System.Char.isWhiteSpace("\r\n    .".charAt(6)), "#6");
            Bridge.Test.NUnit.Assert.false$1(System.Char.isWhiteSpace("\r  .\n  ".charAt(3)), "#7");
        }
    });

    Bridge.ns("Bridge.ClientTest.Batch4.SimpleTypes.CharTests", $asm.$);

    Bridge.apply($asm.$.Bridge.ClientTest.Batch4.SimpleTypes.CharTests, {
        f1: function () {
            System.Char.charCodeAt(null, 0);
        },
        f2: function () {
            System.Char.charCodeAt("", 0);
        },
        f3: function () {
            System.Char.charCodeAt("ab", 0);
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.SimpleTypes.DateTests", {
        statics: {
            addTimezoneMinutesOffset: function (dt) {
                return new Date(dt.getTime() - ((dt.getTimezoneOffset() * 60000) | 0));
            }
        },
        typePropertiesAreCorrect_SPI_1608_1609: function () {
            Bridge.Test.NUnit.Assert.areEqual("Date", Bridge.Reflection.getTypeFullName(Date));
            //Assert.True(typeof(Date).IsClass);
            Bridge.Test.NUnit.Assert.true(Bridge.Reflection.isAssignableFrom(System.IComparable$1(Date), Date));
            Bridge.Test.NUnit.Assert.true(Bridge.Reflection.isAssignableFrom(System.IEquatable$1(Date), Date));
            var o = new Date();
            Bridge.Test.NUnit.Assert.true(Bridge.is(o, Date));
            Bridge.Test.NUnit.Assert.true(Bridge.is(o, System.IComparable$1(Date)));
            Bridge.Test.NUnit.Assert.true(Bridge.is(o, System.IEquatable$1(Date)));

            var interfaces = Bridge.Reflection.getInterfaces(Date);
            Bridge.Test.NUnit.Assert.areEqual(4, interfaces.length);
            Bridge.Test.NUnit.Assert.true(System.Array.contains(interfaces, System.IComparable$1(Date), Function));
            Bridge.Test.NUnit.Assert.true(System.Array.contains(interfaces, System.IEquatable$1(Date), Function));
        },
        defaultConstructorReturnsTodaysDate: function () {
            var dt = new Date();
            Bridge.Test.NUnit.Assert.true(dt.getFullYear() > 2011);
        },
        creatingInstanceReturnsTodaysDate_SPI_1604: function () {
            var fullYear = Bridge.createInstance(Date).getFullYear();
            Bridge.Test.NUnit.Assert.true$1(fullYear > 2011, fullYear + " > 2011");
        },
        millisecondSinceEpochConstructorWorks: function () {
            var dt = new Date(43200000000.0);
            Bridge.Test.NUnit.Assert.areEqual(1971, dt.getFullYear());
        },
        stringConstructorWorks: function () {
            var dt = new Date("Aug 12, 2012");
            Bridge.Test.NUnit.Assert.areEqual(2012, dt.getFullYear());
            Bridge.Test.NUnit.Assert.areEqual(7, dt.getMonth());
            Bridge.Test.NUnit.Assert.areEqual(12, dt.getDate());
        },
        yMDConstructorWorks: function () {
            var dt = new Date(2011, 7, 12);
            Bridge.Test.NUnit.Assert.areEqual(2011, dt.getFullYear());
            Bridge.Test.NUnit.Assert.areEqual(7, dt.getMonth());
            Bridge.Test.NUnit.Assert.areEqual(12, dt.getDate());
        },
        yMDHConstructorWorks: function () {
            var dt = new Date(2011, 7, 12, 13);
            Bridge.Test.NUnit.Assert.areEqual(2011, dt.getFullYear());
            Bridge.Test.NUnit.Assert.areEqual(7, dt.getMonth());
            Bridge.Test.NUnit.Assert.areEqual(12, dt.getDate());
            Bridge.Test.NUnit.Assert.areEqual(13, dt.getHours());
        },
        yMDHNConstructorWorks: function () {
            var dt = new Date(2011, 7, 12, 13, 42);
            Bridge.Test.NUnit.Assert.areEqual(2011, dt.getFullYear());
            Bridge.Test.NUnit.Assert.areEqual(7, dt.getMonth());
            Bridge.Test.NUnit.Assert.areEqual(12, dt.getDate());
            Bridge.Test.NUnit.Assert.areEqual(13, dt.getHours());
            Bridge.Test.NUnit.Assert.areEqual(42, dt.getMinutes());
        },
        yMDHNSConstructorWorks: function () {
            var dt = new Date(2011, 7, 12, 13, 42, 56);
            Bridge.Test.NUnit.Assert.areEqual(2011, dt.getFullYear());
            Bridge.Test.NUnit.Assert.areEqual(7, dt.getMonth());
            Bridge.Test.NUnit.Assert.areEqual(12, dt.getDate());
            Bridge.Test.NUnit.Assert.areEqual(13, dt.getHours());
            Bridge.Test.NUnit.Assert.areEqual(42, dt.getMinutes());
            Bridge.Test.NUnit.Assert.areEqual(56, dt.getSeconds());
        },
        yMDHNSUConstructorWorks: function () {
            var dt = new Date(2011, 7, 12, 13, 42, 56, 345);
            Bridge.Test.NUnit.Assert.areEqual(2011, dt.getFullYear());
            Bridge.Test.NUnit.Assert.areEqual(7, dt.getMonth());
            Bridge.Test.NUnit.Assert.areEqual(12, dt.getDate());
            Bridge.Test.NUnit.Assert.areEqual(13, dt.getHours());
            Bridge.Test.NUnit.Assert.areEqual(42, dt.getMinutes());
            Bridge.Test.NUnit.Assert.areEqual(56, dt.getSeconds());
            Bridge.Test.NUnit.Assert.areEqual(345, dt.getMilliseconds());
        },
        nowWorks_SPI_1624: function () {
            // #1624
            var d1 = new Date(Date.now());
            var d2 = System.DateTime.today();

            Bridge.Test.NUnit.Assert.areEqual(d1.getFullYear(), d2.getFullYear());
        },
        getFullYearWorks: function () {
            var dt = new Date(2011, 7, 12, 13, 42, 56, 345);
            Bridge.Test.NUnit.Assert.areEqual(2011, dt.getFullYear());
        },
        getMonthWorks: function () {
            var dt = new Date(2011, 7, 12, 13, 42, 56, 345);
            Bridge.Test.NUnit.Assert.areEqual(7, dt.getMonth());
        },
        getDateWorks: function () {
            var dt = new Date(2011, 7, 12, 13, 42, 56, 345);
            Bridge.Test.NUnit.Assert.areEqual(12, dt.getDate());
        },
        getHoursWorks: function () {
            var dt = new Date(2011, 7, 12, 13, 42, 56, 345);
            Bridge.Test.NUnit.Assert.areEqual(13, dt.getHours());
        },
        getMinutesWorks: function () {
            var dt = new Date(2011, 7, 12, 13, 42, 56, 345);
            Bridge.Test.NUnit.Assert.areEqual(42, dt.getMinutes());
        },
        getSecondsWorks: function () {
            var dt = new Date(2011, 7, 12, 13, 42, 56, 345);
            Bridge.Test.NUnit.Assert.areEqual(56, dt.getSeconds());
        },
        getMillisecondsWorks: function () {
            var dt = new Date(2011, 7, 12, 13, 42, 56, 345);
            Bridge.Test.NUnit.Assert.areEqual(345, dt.getMilliseconds());
        },
        getDayWorks: function () {
            var dt = new Date(2011, 7, 12, 13, 42, 56, 345);
            Bridge.Test.NUnit.Assert.areEqual(5, dt.getDay());
        },
        getTimeWorks: function () {
            var dt = new Date(1970, 0, 2);
            dt = Bridge.ClientTest.Batch4.SimpleTypes.DateTests.addTimezoneMinutesOffset(dt);
            Bridge.Test.NUnit.Assert.areEqual(86400000, dt.getTime());
        },
        valueOfWorks_SPI_1624: function () {
            var dt = new Date(1970, 0, 2);
            dt = Bridge.ClientTest.Batch4.SimpleTypes.DateTests.addTimezoneMinutesOffset(dt);
            Bridge.Test.NUnit.Assert.areEqual(86400000, dt.valueOf());
        },
        getTimezoneOffsetWorks: function () {
            var dt = new Date(0);
            Bridge.Test.NUnit.Assert.areEqual((new Date(1970, 0, 1).valueOf()) / 60000, dt.getTimezoneOffset());
        },
        getUtcFullYearWorks: function () {
            var dt = new Date(2011, 7, 12, 13, 42, 56, 345);
            Bridge.Test.NUnit.Assert.areEqual(2011, dt.getUTCFullYear());
        },
        getUtcMonthWorks: function () {
            var dt = new Date(2011, 7, 12, 13, 42, 56, 345);
            Bridge.Test.NUnit.Assert.areEqual(7, dt.getUTCMonth());
        },
        getUtcDateWorks: function () {
            var dt = new Date(2011, 7, 12, 13, 42, 56, 345);
            Bridge.Test.NUnit.Assert.areEqual(12, dt.getUTCDate());
        },
        getUtcHoursWorks: function () {
            var dt = new Date(2011, 7, 12, 13, 42, 56, 345);
            dt = Bridge.ClientTest.Batch4.SimpleTypes.DateTests.addTimezoneMinutesOffset(dt);
            Bridge.Test.NUnit.Assert.areEqual(13, dt.getUTCHours());
        },
        getUtcMinutesWorks: function () {
            var dt = new Date(2011, 7, 12, 13, 42, 56, 345);
            Bridge.Test.NUnit.Assert.areEqual(42, dt.getUTCMinutes());
        },
        getUtcSecondsWorks: function () {
            var dt = new Date(2011, 7, 12, 13, 42, 56, 345);
            Bridge.Test.NUnit.Assert.areEqual(56, dt.getUTCSeconds());
        },
        getUtcMillisecondsWorks: function () {
            var dt = new Date(2011, 7, 12, 13, 42, 56, 345);
            Bridge.Test.NUnit.Assert.areEqual(345, dt.getUTCMilliseconds());
        },
        getUtcDayWorks: function () {
            var dt = new Date(2011, 7, 12, 13, 42, 56, 345);
            Bridge.Test.NUnit.Assert.areEqual(5, dt.getUTCDay());
        },
        parseWorks_SPI_1624: function () {
            // #1624
            var utc = Date.UTC(2017, 7, 12);
            var local = (new Date(2017, 7, 12)).valueOf();
            var offset = utc - local;

            var d1 = Date.parse("Aug 12, 2012");
            var d2 = Date.parse("1970-01-01");
            var d3 = Date.parse("March 7, 2014");
            var d4 = Date.parse("Wed, 09 Aug 1995 00:00:00 GMT");
            var d5 = Date.parse("Thu, 01 Jan 1970 00:00:00 GMT-0400");

            Bridge.Test.NUnit.Assert.areEqual(1344729600000.0 - offset, d1);
            Bridge.Test.NUnit.Assert.areEqual(0.0, d2);
            Bridge.Test.NUnit.Assert.areEqual(1394150400000.0 - offset, d3);
            Bridge.Test.NUnit.Assert.areEqual(807926400000.0, d4);
            Bridge.Test.NUnit.Assert.areEqual(14400000.0, d5);
        },
        toLocaleDateStringIsWorking_1624: function () {
            var d1 = new Date(Date.UTC(2012, 11, 12, 3, 0, 0));

            // Tough to test because varies by timezone/location
            // Just testing that a string is generated
            Bridge.Test.NUnit.Assert.true(!System.String.isNullOrEmpty(d1.toLocaleDateString()));

            //var d2 = new Date(Date.UTC(2012, 11, 20, 3, 0, 0));


            //Assert.AreEqual("12/19/2012", d2.ToLocaleDateString("en-US")); // "12/19/2012"

            //Assert.AreEqual("20/12/2012", d2.ToLocaleDateString("en-GB")); // "20/12/2012"

            //Assert.AreEqual("2012. 12. 20.", d2.ToLocaleDateString("ko-KR")); // "2012. 12. 20."

            //Assert.AreEqual("24/12/20", d2.ToLocaleDateString("ja-JP-u-ca-japanese")); // "24/12/20"

            //Assert.AreEqual("20/12/2012", d2.ToLocaleDateString(new string[] { "ban", "id" })); // "20/12/2012"

            //var d3 = new Date(Date.UTC(2012, 11, 20, 3, 0, 0));

            //var options = new Date.ToLocaleStringOptions
            //{
            //    Weekday = "long",
            //    Year = "numeric",
            //    Month = "long",
            //    Day = "numeric"
            //};

            //Assert.AreEqual("Donnerstag, 20. Dezember 2012", d3.ToLocaleDateString("de-DE", options)); // "Donnerstag, 20. Dezember 2012"

            //options.TimeZone = "UTC";
            //options.TimeZoneName = "short";

            //Assert.AreEqual("Thursday, December 20, 2012, GMT", d3.ToLocaleDateString("en-US", options)); // "Thursday, December 20, 2012, GMT"
        },
        toDateStringWorks: function () {
            var dt = new Date(2011, 7, 12, 13, 42);
            var s = dt.toDateString();
            Bridge.Test.NUnit.Assert.true(System.String.indexOf(s, "2011") >= 0 && System.String.indexOf(s, "42") < 0);
        },
        toTimeStringWorks: function () {
            var dt = new Date(2011, 7, 12, 13, 42);
            var s = dt.toTimeString();
            Bridge.Test.NUnit.Assert.true(System.String.indexOf(s, "2011") < 0 && System.String.indexOf(s, "42") >= 0);
        },
        toUtcStringWorks: function () {
            var dt = new Date(2011, 7, 12, 13, 42);
            var s = dt.toUTCString();
            Bridge.Test.NUnit.Assert.true(System.String.indexOf(s, "2011") >= 0 && System.String.indexOf(s, "42") >= 0);
        },
        toLocaleDateStringWorks_SPI_1624: function () {
            var dt = new Date(2011, 7, 12, 13, 42);
            var s = dt.toLocaleDateString();
            Bridge.Test.NUnit.Assert.true(System.String.indexOf(s, "2011") >= 0 && System.String.indexOf(s, "42") < 0);
        },
        dateUTCIsWorking_SPI_1624: function () {
            var d = new Date();
            var year = 2017;
            var month = 1;
            var day = 12;
            var hour = 4;
            var minute = 36;
            var second = 55;
            var millisecond = 255;

            d.setUTCFullYear(year); // 2017
            d.setUTCMonth(month); // 1
            d.setUTCDate(day); // 12
            d.setUTCHours(hour); // 4
            d.setUTCMinutes(minute); // 36
            d.setUTCSeconds(second); // 55
            d.setUTCMilliseconds(millisecond); // 255

            var utc1 = Date.UTC(year, month); // 1485907200000
            var utc2 = Date.UTC(year, month, day); // 1486857600000
            var utc3 = Date.UTC(year, month, day, hour); // 1486872000000
            var utc4 = Date.UTC(year, month, day, hour, minute); // 1486874160000
            var utc5 = Date.UTC(year, month, day, hour, minute, second); // 1486874215000
            var utc6 = Date.UTC(year, month, day, hour, minute, second, millisecond); // 1486874215255

            Bridge.Test.NUnit.Assert.areEqual(1485907200000.0, utc1);
            Bridge.Test.NUnit.Assert.areEqual(1486857600000.0, utc2);
            Bridge.Test.NUnit.Assert.areEqual(1486872000000.0, utc3);
            Bridge.Test.NUnit.Assert.areEqual(1486874160000.0, utc4);
            Bridge.Test.NUnit.Assert.areEqual(1486874215000.0, utc5);
            Bridge.Test.NUnit.Assert.areEqual(1486874215255.0, utc6);
        },
        toLocaleTimeStringWorks: function () {
            var dt = new Date(2011, 7, 12, 13, 42);
            var s = dt.toLocaleTimeString();
            Bridge.Test.NUnit.Assert.true(System.String.indexOf(s, "2011") < 0 && System.String.indexOf(s, "42") >= 0);
        },
        assertDateUtc: function (dt, year, month, day, hours, minutes, seconds, milliseconds) {
            Bridge.Test.NUnit.Assert.areEqual(year, dt.getUTCFullYear());
            Bridge.Test.NUnit.Assert.areEqual(month, dt.getUTCMonth());
            Bridge.Test.NUnit.Assert.areEqual(day, dt.getUTCDate());
            Bridge.Test.NUnit.Assert.areEqual(hours, dt.getUTCHours());
            Bridge.Test.NUnit.Assert.areEqual(minutes, dt.getUTCMinutes());
            Bridge.Test.NUnit.Assert.areEqual(seconds, dt.getUTCSeconds());
            Bridge.Test.NUnit.Assert.areEqual(milliseconds, dt.getUTCMilliseconds());
        },
        subtractingDatesWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual(86400000, new Date(2011, 7, 12) - new Date(2011, 7, 11));
        },
        dateEqualityWorks: function () {
            Bridge.Test.NUnit.Assert.true(Bridge.equals(new Date(2011, 7, 12), new Date(2011, 7, 12)));
            Bridge.Test.NUnit.Assert.false(Bridge.equals(new Date(2011, 7, 12), new Date(2011, 7, 13)));
            Bridge.Test.NUnit.Assert.areStrictEqual(false, Bridge.equals(new Date(2011, 7, 12), null));
            Bridge.Test.NUnit.Assert.areStrictEqual(false, Bridge.equals(null, new Date(2011, 7, 12)));
            Bridge.Test.NUnit.Assert.areStrictEqual(true, Bridge.equals(null, null));
        },
        dateInequalityWorks: function () {
            Bridge.Test.NUnit.Assert.false(!Bridge.equals(new Date(2011, 7, 12), new Date(2011, 7, 12)));
            Bridge.Test.NUnit.Assert.true(!Bridge.equals(new Date(2011, 7, 12), new Date(2011, 7, 13)));
            Bridge.Test.NUnit.Assert.areStrictEqual(true, !Bridge.equals(new Date(2011, 7, 12), null));
            Bridge.Test.NUnit.Assert.areStrictEqual(true, !Bridge.equals(null, new Date(2011, 7, 12)));
            Bridge.Test.NUnit.Assert.areStrictEqual(false, !Bridge.equals(null, null));
        },
        dateLessThanWorks: function () {
            Bridge.Test.NUnit.Assert.true(new Date(2011, 7, 11) < new Date(2011, 7, 12));
            Bridge.Test.NUnit.Assert.false(new Date(2011, 7, 12) < new Date(2011, 7, 12));
            Bridge.Test.NUnit.Assert.false(new Date(2011, 7, 13) < new Date(2011, 7, 12));
        },
        dateLessEqualWorks: function () {
            Bridge.Test.NUnit.Assert.true(new Date(2011, 7, 11) <= new Date(2011, 7, 12));
            Bridge.Test.NUnit.Assert.true(new Date(2011, 7, 12) <= new Date(2011, 7, 12));
            Bridge.Test.NUnit.Assert.false(new Date(2011, 7, 13) <= new Date(2011, 7, 12));
        },
        dateGreaterThanWorks: function () {
            Bridge.Test.NUnit.Assert.false(new Date(2011, 7, 11) > new Date(2011, 7, 12));
            Bridge.Test.NUnit.Assert.false(new Date(2011, 7, 12) > new Date(2011, 7, 12));
            Bridge.Test.NUnit.Assert.true(new Date(2011, 7, 13) > new Date(2011, 7, 12));
        },
        dateGreaterEqualWorks: function () {
            Bridge.Test.NUnit.Assert.false(new Date(2011, 7, 11) >= new Date(2011, 7, 12));
            Bridge.Test.NUnit.Assert.true(new Date(2011, 7, 12) >= new Date(2011, 7, 12));
            Bridge.Test.NUnit.Assert.true(new Date(2011, 7, 13) >= new Date(2011, 7, 12));
        },
        setFullYearWithOneParameterWorks: function () {
            var dt = new Date(2000, 0, 1);
            dt.setFullYear(2021);
            Bridge.Test.NUnit.Assert.areEqual(2021, dt.getFullYear());
        },
        setFullYearWithTwoParametersWorks: function () {
            var dt = new Date(2000, 0, 1);
            dt.setFullYear(2021, 7);
            Bridge.Test.NUnit.Assert.areEqual(2021, dt.getFullYear());
            Bridge.Test.NUnit.Assert.areEqual(7, dt.getMonth());
        },
        setFullYearWithThreeParametersWorks: function () {
            var dt = new Date(2000, 0, 1);
            dt.setFullYear(2021, 7, 13);
            Bridge.Test.NUnit.Assert.areEqual(2021, dt.getFullYear());
            Bridge.Test.NUnit.Assert.areEqual(7, dt.getMonth());
            Bridge.Test.NUnit.Assert.areEqual(13, dt.getDate());
        },
        setMonthWorks: function () {
            var dt = new Date(2000, 0, 1);
            dt.setMonth(3);
            Bridge.Test.NUnit.Assert.areEqual(3, dt.getMonth());
        },
        setDateWorks: function () {
            var dt = new Date(2000, 0, 1);
            dt.setDate(12);
            Bridge.Test.NUnit.Assert.areEqual(12, dt.getDate());
        },
        setHoursWorks: function () {
            var dt = new Date(2000, 0, 1);
            dt.setHours(11);
            Bridge.Test.NUnit.Assert.areEqual(11, dt.getHours());
        },
        setMinutesWorks: function () {
            var dt = new Date(2000, 0, 1);
            dt.setMinutes(34);
            Bridge.Test.NUnit.Assert.areEqual(34, dt.getMinutes());
        },
        setSecondsWorks: function () {
            var dt = new Date(2000, 0, 1);
            dt.setSeconds(23);
            Bridge.Test.NUnit.Assert.areEqual(23, dt.getSeconds());
        },
        setMillisecondsWorks: function () {
            var dt = new Date(2000, 0, 1);
            dt.setMilliseconds(435);
            Bridge.Test.NUnit.Assert.areEqual(435, dt.getMilliseconds());
        },
        setTimeWorks: function () {
            var dt = new Date();
            dt.setTime(System.Int64([-2095997006,814]));
            Bridge.Test.NUnit.Assert.areEqual(3498302349234.0, dt.getTime());
        },
        setTimeAsDoubleWorks: function () {
            var dt = new Date();
            dt.setTime(3498302349234.0);
            Bridge.Test.NUnit.Assert.areEqual(3498302349234.0, dt.getTime());
        },
        setUtcFullYearWithOneParameterWorks: function () {
            var dt = new Date(2000, 0, 1);
            dt.setUTCFullYear(2021);
            Bridge.Test.NUnit.Assert.areEqual(2021, dt.getUTCFullYear());
        },
        setUtcFullYearWithTwoParametersWorks: function () {
            var dt = new Date(2000, 0, 1);
            dt.setUTCFullYear(2021, 7);
            Bridge.Test.NUnit.Assert.areEqual(2021, dt.getUTCFullYear());
            Bridge.Test.NUnit.Assert.areEqual(7, dt.getUTCMonth());
        },
        setUtcFullYearWithThreeParametersWorks: function () {
            var dt = new Date(2000, 0, 1);
            dt.setUTCFullYear(2021, 7, 13);
            Bridge.Test.NUnit.Assert.areEqual(2021, dt.getUTCFullYear());
            Bridge.Test.NUnit.Assert.areEqual(7, dt.getUTCMonth());
            Bridge.Test.NUnit.Assert.areEqual(13, dt.getUTCDate());
        },
        setUtcMonthWorks: function () {
            var dt = new Date(2000, 0, 1);
            dt = Bridge.ClientTest.Batch4.SimpleTypes.DateTests.addTimezoneMinutesOffset(dt);

            dt.setUTCMonth(3);
            Bridge.Test.NUnit.Assert.areEqual(3, dt.getUTCMonth());
        },
        setUtcDateWorks: function () {
            var dt = new Date(2000, 0, 1);
            dt.setUTCDate(12);
            Bridge.Test.NUnit.Assert.areEqual(12, dt.getUTCDate());
        },
        setUtcHoursWorks: function () {
            var dt = new Date(2000, 0, 1);
            dt.setUTCHours(11);
            Bridge.Test.NUnit.Assert.areEqual(11, dt.getUTCHours());
        },
        setUtcMinutesWorks: function () {
            var dt = new Date(2000, 0, 1);
            dt.setUTCMinutes(34);
            Bridge.Test.NUnit.Assert.areEqual(34, dt.getUTCMinutes());
        },
        setUtcSecondsWorks: function () {
            var dt = new Date(2000, 0, 1);
            dt.setUTCSeconds(23);
            Bridge.Test.NUnit.Assert.areEqual(23, dt.getUTCSeconds());
        },
        setUtcMillisecondsWorks: function () {
            var dt = new Date(2000, 0, 1);
            dt.setUTCMilliseconds(435);
            Bridge.Test.NUnit.Assert.areEqual(435, dt.getUTCMilliseconds());
        },
        getHashCodeWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual(Bridge.getHashCode(new Date(0)), Bridge.getHashCode(new Date(0)));
            Bridge.Test.NUnit.Assert.areEqual(Bridge.getHashCode(new Date(1)), Bridge.getHashCode(new Date(1)));
            Bridge.Test.NUnit.Assert.areNotEqual(Bridge.getHashCode(new Date(1)), Bridge.getHashCode(new Date(0)));
            Bridge.Test.NUnit.Assert.true(System.Int64(Bridge.getHashCode(new Date(3000, 1, 1))).lt(System.Int64([-1,0])));
        },
        equalsWorks: function () {
            Bridge.Test.NUnit.Assert.true(Bridge.equals(new Date(0), new Date(0)));
            Bridge.Test.NUnit.Assert.false(Bridge.equals(new Date(1), new Date(0)));
            Bridge.Test.NUnit.Assert.false(Bridge.equals(new Date(0), new Date(1)));
            Bridge.Test.NUnit.Assert.true(Bridge.equals(new Date(1), new Date(1)));
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.SimpleTypes.DateTimeTests", {
        typePropertiesAreCorrect_SPI_1607_1608_1609: function () {
            Bridge.Test.NUnit.Assert.areEqual("System.DateTime", Bridge.Reflection.getTypeFullName(System.DateTime));
            Bridge.Test.NUnit.Assert.false(Bridge.Reflection.isClass(System.DateTime));
            // #1607 #1608 #1609
            Bridge.Test.NUnit.Assert.true(Bridge.Reflection.isAssignableFrom(System.IComparable$1(System.DateTime), System.DateTime));
            Bridge.Test.NUnit.Assert.true(Bridge.Reflection.isAssignableFrom(System.IEquatable$1(System.DateTime), System.DateTime));
            Bridge.Test.NUnit.Assert.true(Bridge.Reflection.isAssignableFrom(System.IFormattable, System.DateTime));

            var d = Bridge.box(System.DateTime.getDefaultValue(), System.DateTime, $box_.System.DateTime.toString);
            Bridge.Test.NUnit.Assert.true(Bridge.is(d, System.DateTime));
            // #1609
            Bridge.Test.NUnit.Assert.true(Bridge.is(d, System.IComparable$1(System.DateTime)));
            // #1608
            Bridge.Test.NUnit.Assert.true(Bridge.is(d, System.IEquatable$1(System.DateTime)));

            Bridge.Test.NUnit.Assert.true(Bridge.is(d, System.IFormattable));

            var interfaces = Bridge.Reflection.getInterfaces(System.DateTime);
            Bridge.Test.NUnit.Assert.areEqual(4, interfaces.length);
            Bridge.Test.NUnit.Assert.true(System.Array.contains(interfaces, System.IComparable$1(System.DateTime), Function));
            Bridge.Test.NUnit.Assert.true(System.Array.contains(interfaces, System.IEquatable$1(System.DateTime), Function));
            Bridge.Test.NUnit.Assert.true(System.Array.contains(interfaces, System.IFormattable, Function));
        },
        defaultConstructorWorks_SPI_1606: function () {
            var dt = System.DateTime.getDefaultValue();
            // #1606
            Bridge.Test.NUnit.Assert.areEqual(1, dt.getFullYear());
        },
        defaultValueWorks_SPI_1606: function () {
            var dt = Bridge.getDefaultValue(System.DateTime);
            // #1606
            Bridge.Test.NUnit.Assert.areEqual(1, dt.getFullYear());
        },
        creatingInstanceReturnsDateWithZeroValue_SPI_1606: function () {
            var dt = Bridge.createInstance(System.DateTime);
            // #1606
            Bridge.Test.NUnit.Assert.areEqual(1, dt.getFullYear());
        },
        millisecondSinceEpochConstructorWorks: function () {
            var dt = System.DateTime.fromTicks(System.Int64([250327040,10]));
            Bridge.Test.NUnit.Assert.areEqual(1, new Date(dt.valueOf() + Math.round((1) * 864e5)).getFullYear());
        },
        stringConstructorWorks: function () {
            var dt = new Date("Aug 12, 2012");
            Bridge.Test.NUnit.Assert.areEqual(2012, dt.getFullYear());
            Bridge.Test.NUnit.Assert.areEqual(8, (dt.getMonth() + 1));
            Bridge.Test.NUnit.Assert.areEqual(12, dt.getDate());
        },
        yMDConstructorWorks: function () {
            var dt = new Date(2011, 7 - 1, 12);
            Bridge.Test.NUnit.Assert.areEqual(2011, dt.getFullYear());
            Bridge.Test.NUnit.Assert.areEqual(7, (dt.getMonth() + 1));
            Bridge.Test.NUnit.Assert.areEqual(12, dt.getDate());
        },
        yMDHConstructorWorks: function () {
            var dt = new Date(2011, 7 - 1, 12, 13);
            Bridge.Test.NUnit.Assert.areEqual(2011, dt.getFullYear());
            Bridge.Test.NUnit.Assert.areEqual(7, (dt.getMonth() + 1));
            Bridge.Test.NUnit.Assert.areEqual(12, dt.getDate());
            Bridge.Test.NUnit.Assert.areEqual(13, dt.getHours());
        },
        yMDHNConstructorWorks: function () {
            var dt = new Date(2011, 7 - 1, 12, 13, 42);
            Bridge.Test.NUnit.Assert.areEqual(2011, dt.getFullYear());
            Bridge.Test.NUnit.Assert.areEqual(7, (dt.getMonth() + 1));
            Bridge.Test.NUnit.Assert.areEqual(12, dt.getDate());
            Bridge.Test.NUnit.Assert.areEqual(13, dt.getHours());
            Bridge.Test.NUnit.Assert.areEqual(42, dt.getMinutes());
        },
        yMDHNSConstructorWorks: function () {
            var dt = new Date(2011, 7 - 1, 12, 13, 42, 56);
            Bridge.Test.NUnit.Assert.areEqual(2011, dt.getFullYear());
            Bridge.Test.NUnit.Assert.areEqual(7, (dt.getMonth() + 1));
            Bridge.Test.NUnit.Assert.areEqual(12, dt.getDate());
            Bridge.Test.NUnit.Assert.areEqual(13, dt.getHours());
            Bridge.Test.NUnit.Assert.areEqual(42, dt.getMinutes());
            Bridge.Test.NUnit.Assert.areEqual(56, dt.getSeconds());
        },
        yMDHNSUConstructorWorks: function () {
            var dt = new Date(2011, 7 - 1, 12, 13, 42, 56, 345);
            Bridge.Test.NUnit.Assert.areEqual(2011, dt.getFullYear());
            Bridge.Test.NUnit.Assert.areEqual(7, (dt.getMonth() + 1));
            Bridge.Test.NUnit.Assert.areEqual(12, dt.getDate());
            Bridge.Test.NUnit.Assert.areEqual(13, dt.getHours());
            Bridge.Test.NUnit.Assert.areEqual(42, dt.getMinutes());
            Bridge.Test.NUnit.Assert.areEqual(56, dt.getSeconds());
            Bridge.Test.NUnit.Assert.areEqual(345, dt.getMilliseconds());
        },
        nowWorks: function () {
            var dt = new Date();
            Bridge.Test.NUnit.Assert.true(dt.getFullYear() > 2011);
        },
        utcNowWorks: function () {
            var utc = System.DateTime.utcNow();
            var local = new Date();
            var date = new Date(local.getUTCFullYear(), (local.getUTCMonth() + 1) - 1, local.getUTCDate(), local.getUTCHours(), local.getUTCMinutes(), local.getUTCSeconds(), local.getUTCMilliseconds());
            var diff = System.DateTime.subdd(date, utc);
            Bridge.Test.NUnit.Assert.true(Math.abs(diff.getSeconds()) < 1000);
        },
        toUniversalWorks: function () {
            var dt = new Date(2011, 7 - 1, 12, 13, 42, 56, 345);
            var utc = System.DateTime.toUTC(dt);
            Bridge.Test.NUnit.Assert.areEqual(utc.getFullYear(), dt.getUTCFullYear());
            Bridge.Test.NUnit.Assert.areEqual((utc.getMonth() + 1), (dt.getUTCMonth() + 1));
            Bridge.Test.NUnit.Assert.areEqual(utc.getDate(), dt.getUTCDate());
            Bridge.Test.NUnit.Assert.areEqual(utc.getHours(), dt.getUTCHours());
            Bridge.Test.NUnit.Assert.areEqual(utc.getMinutes(), dt.getUTCMinutes());
            Bridge.Test.NUnit.Assert.areEqual(utc.getSeconds(), dt.getUTCSeconds());
            Bridge.Test.NUnit.Assert.areEqual(utc.getMilliseconds(), dt.getUTCMilliseconds());
        },
        toLocalWorks: function () {
            var utc = new Date(2011, 7 - 1, 12, 13, 42, 56, 345);
            var dt = System.DateTime.toLocal(utc);
            Bridge.Test.NUnit.Assert.areEqual(utc.getFullYear(), dt.getUTCFullYear());
            Bridge.Test.NUnit.Assert.areEqual((utc.getMonth() + 1), (dt.getUTCMonth() + 1));
            Bridge.Test.NUnit.Assert.areEqual(utc.getDate(), dt.getUTCDate());
            Bridge.Test.NUnit.Assert.areEqual(utc.getHours(), dt.getUTCHours());
            Bridge.Test.NUnit.Assert.areEqual(utc.getMinutes(), dt.getUTCMinutes());
            Bridge.Test.NUnit.Assert.areEqual(utc.getSeconds(), dt.getUTCSeconds());
            Bridge.Test.NUnit.Assert.areEqual(utc.getMilliseconds(), dt.getUTCMilliseconds());
        },
        todayWorks: function () {
            var dt = System.DateTime.today();
            Bridge.Test.NUnit.Assert.true(dt.getFullYear() > 2011);
            Bridge.Test.NUnit.Assert.areEqual(0, dt.getHours());
            Bridge.Test.NUnit.Assert.areEqual(0, dt.getMinutes());
            Bridge.Test.NUnit.Assert.areEqual(0, dt.getSeconds());
            Bridge.Test.NUnit.Assert.areEqual(0, dt.getMilliseconds());
        },
        formatWorks: function () {
            var dt = new Date(2011, 7 - 1, 12, 13);
            Bridge.Test.NUnit.Assert.areEqual("2011-07-12", System.DateTime.format(dt, "yyyy-MM-dd"));
        },
        toStringWithFormatWorks: function () {
            var dt = new Date(2011, 7 - 1, 12);
            Bridge.Test.NUnit.Assert.areEqual("2011-07-12", System.DateTime.format(dt, "yyyy-MM-dd"));
        },
        toStringWithFormatAndProviderWorks: function () {
            var dt = new Date(2011, 7 - 1, 12);
            Bridge.Test.NUnit.Assert.areEqual("2011-07-12", System.DateTime.format(dt, "yyyy-MM-dd", System.Globalization.CultureInfo.invariantCulture));
        },
        iFormattableToStringWorks: function () {
            var dt = new Date(2011, 7 - 1, 12);
            Bridge.Test.NUnit.Assert.areEqual("2011-07-12", Bridge.format(Bridge.cast(Bridge.box(dt, System.DateTime, $box_.System.DateTime.toString), System.IFormattable), "yyyy-MM-dd", System.Globalization.CultureInfo.invariantCulture));
        },
        getFullYearWorks: function () {
            var dt = new Date(2011, 7 - 1, 12, 13, 42, 56, 345);
            Bridge.Test.NUnit.Assert.areEqual(2011, dt.getFullYear());
        },
        getMonthWorks: function () {
            var dt = new Date(2011, 7 - 1, 12, 13, 42, 56, 345);
            Bridge.Test.NUnit.Assert.areEqual(7, (dt.getMonth() + 1));
        },
        getDateWorks: function () {
            var dt = new Date(2011, 7 - 1, 12, 13, 42, 56, 345);
            Bridge.Test.NUnit.Assert.areEqual(12, dt.getDate());
        },
        getHoursWorks: function () {
            var dt = new Date(2011, 7 - 1, 12, 13, 42, 56, 345);
            Bridge.Test.NUnit.Assert.areEqual(13, dt.getHours());
        },
        getMinutesWorks: function () {
            var dt = new Date(2011, 7 - 1, 12, 13, 42, 56, 345);
            Bridge.Test.NUnit.Assert.areEqual(42, dt.getMinutes());
        },
        getSecondsWorks: function () {
            var dt = new Date(2011, 7 - 1, 12, 13, 42, 56, 345);
            Bridge.Test.NUnit.Assert.areEqual(56, dt.getSeconds());
        },
        getMillisecondsWorks: function () {
            var dt = new Date(2011, 7 - 1, 12, 13, 42, 56, 345);
            Bridge.Test.NUnit.Assert.areEqual(345, dt.getMilliseconds());
        },
        getDayWorks: function () {
            var dt = new Date(2011, 8 - 1, 12, 13, 42, 56, 345);
            Bridge.Test.NUnit.Assert.areEqual(5, dt.getDay());
        },
        getTimeWorks: function () {
            var dt = System.DateTime.fromTicks(System.DateTime.utc(1000, 1, 2));
            Bridge.Test.NUnit.Assert.areEqual((System.Int64([94318592,-7127])).toString(), dt.getTime().toString());
        },
        valueOfWorks: function () {
            var dt = System.DateTime.fromTicks(System.DateTime.utc(1000, 1, 2));
            Bridge.Test.NUnit.Assert.areEqual((System.Int64([94318592,-7127])).toString(), dt.valueOf().toString());
        },
        getUtcFullYearWorks: function () {
            var dt = System.DateTime.fromTicks(System.DateTime.utc(2011, 7, 12, 13, 42, 56, 345));
            Bridge.Test.NUnit.Assert.areEqual(2011, dt.getUTCFullYear());
        },
        getUtcMonthWorks: function () {
            var dt = System.DateTime.fromTicks(System.DateTime.utc(2011, 7, 12, 13, 42, 56, 345));
            Bridge.Test.NUnit.Assert.areEqual(7, (dt.getUTCMonth() + 1));
        },
        getUtcDateWorks: function () {
            var dt = System.DateTime.fromTicks(System.DateTime.utc(2011, 7, 12, 13, 42, 56, 345));
            Bridge.Test.NUnit.Assert.areEqual(12, dt.getUTCDate());
        },
        getUtcHoursWorks: function () {
            var dt = System.DateTime.fromTicks(System.DateTime.utc(2011, 7, 12, 13, 42, 56, 345));
            Bridge.Test.NUnit.Assert.areEqual(13, dt.getUTCHours());
        },
        getUtcMinutesWorks: function () {
            var dt = System.DateTime.fromTicks(System.DateTime.utc(2011, 7, 12, 13, 42, 56, 345));
            Bridge.Test.NUnit.Assert.areEqual(42, dt.getUTCMinutes());
        },
        getUtcSecondsWorks: function () {
            var dt = System.DateTime.fromTicks(System.DateTime.utc(2011, 7, 12, 13, 42, 56, 345));
            Bridge.Test.NUnit.Assert.areEqual(56, dt.getUTCSeconds());
        },
        getUtcMillisecondsWorks: function () {
            var dt = System.DateTime.fromTicks(System.DateTime.utc(2011, 7, 12, 13, 42, 56, 345));
            Bridge.Test.NUnit.Assert.areEqual(345, dt.getUTCMilliseconds());
        },
        getUtcDayWorks: function () {
            var dt = System.DateTime.fromTicks(System.DateTime.utc(2011, 8, 12, 13, 42, 56, 345));
            Bridge.Test.NUnit.Assert.areEqual(5, dt.getUTCDay());
        },
        parseWorks: function () {
            var dt = System.DateTime.parse("Aug 12, 2012");
            Bridge.Test.NUnit.Assert.areEqual(2012, dt.getFullYear());
            Bridge.Test.NUnit.Assert.areEqual(8, (dt.getMonth() + 1));
            Bridge.Test.NUnit.Assert.areEqual(12, dt.getDate());
        },
        parseExactWorks: function () {
            var dt = System.DateTime.parseExact("2012-12-08", "yyyy-dd-MM");
            // Not C# API
            //Assert.True(dt.HasValue);
            Bridge.Test.NUnit.Assert.areEqual(2012, dt.getFullYear());
            Bridge.Test.NUnit.Assert.areEqual(8, (dt.getMonth() + 1));
            Bridge.Test.NUnit.Assert.areEqual(12, dt.getDate());
        },
        parseExactReturnsNullIfTheInputIsInvalid: function () {
            Bridge.Test.NUnit.Assert.throws$6(System.FormatException, $asm.$.Bridge.ClientTest.Batch4.SimpleTypes.DateTimeTests.f1);
        },
        parseExactWithCultureWorks: function () {
            var dt = System.DateTime.parseExact("2012-12-08", "yyyy-dd-MM", System.Globalization.CultureInfo.invariantCulture);
            // Not C# API
            //Assert.True(dt.HasValue);
            Bridge.Test.NUnit.Assert.areEqual(2012, dt.getFullYear());
            Bridge.Test.NUnit.Assert.areEqual(8, (dt.getMonth() + 1));
            Bridge.Test.NUnit.Assert.areEqual(12, dt.getDate());
        },
        parseExactWithCultureReturnsNullIfTheInputIsInvalid: function () {
            Bridge.Test.NUnit.Assert.throws$6(System.FormatException, $asm.$.Bridge.ClientTest.Batch4.SimpleTypes.DateTimeTests.f2);
        },
        parseExactUtcWorks: function () {
            var dt = System.DateTime.parseExact("2012-12-08", "yyyy-dd-MM", null, true);
            // Not C# API
            //Assert.True(dt.HasValue);
            Bridge.Test.NUnit.Assert.areEqual(2012, dt.getUTCFullYear());
            Bridge.Test.NUnit.Assert.areEqual(8, (dt.getUTCMonth() + 1));
            Bridge.Test.NUnit.Assert.areEqual(12, dt.getUTCDate());
        },
        parseExactUtcReturnsNullIfTheInputIsInvalid: function () {
            Bridge.Test.NUnit.Assert.throws$6(System.FormatException, $asm.$.Bridge.ClientTest.Batch4.SimpleTypes.DateTimeTests.f3);
        },
        parseExactUtcWithCultureWorks: function () {
            var dt = System.DateTime.parseExact("2012-12-08", "yyyy-dd-MM", System.Globalization.CultureInfo.invariantCulture, true);
            // Not C# API
            //Assert.True(dt.HasValue);
            Bridge.Test.NUnit.Assert.areEqual(2012, dt.getUTCFullYear());
            Bridge.Test.NUnit.Assert.areEqual(8, (dt.getUTCMonth() + 1));
            Bridge.Test.NUnit.Assert.areEqual(12, dt.getUTCDate());
        },
        parseExactUtcWithCultureReturnsNullIfTheInputIsInvalid: function () {
            Bridge.Test.NUnit.Assert.throws$6(System.FormatException, $asm.$.Bridge.ClientTest.Batch4.SimpleTypes.DateTimeTests.f4);
        },
        toDateStringWorks: function () {
            var dt = new Date(2011, 7 - 1, 12, 13, 42);
            var s = dt.toDateString();
            Bridge.Test.NUnit.Assert.true(System.String.indexOf(s, "2011") >= 0 && System.String.indexOf(s, "42") < 0);
        },
        toTimeStringWorks: function () {
            var dt = new Date(2011, 7 - 1, 12, 13, 42);
            var s = dt.toTimeString();
            Bridge.Test.NUnit.Assert.true(System.String.indexOf(s, "2011") < 0 && System.String.indexOf(s, "42") >= 0);
        },
        toUtcStringWorks: function () {
            var dt = new Date(2011, 7 - 1, 12, 13, 42);
            var s = dt.toUTCString();
            Bridge.Test.NUnit.Assert.true(System.String.indexOf(s, "2011") >= 0 && System.String.indexOf(s, "42") >= 0);
        },
        toLocaleDateStringWorks: function () {
            var dt = new Date(2011, 7 - 1, 12, 13, 42);
            var s = dt.toLocaleDateString();
            Bridge.Test.NUnit.Assert.true(System.String.indexOf(s, "2011") >= 0 && System.String.indexOf(s, "42") < 0);
        },
        toLocaleTimeStringWorks: function () {
            var dt = new Date(2011, 7 - 1, 12, 13, 42);
            var s = dt.toLocaleTimeString();
            Bridge.Test.NUnit.Assert.true(System.String.indexOf(s, "2011") < 0 && System.String.indexOf(s, "42") >= 0);
        },
        assertDateUtc: function (dt, year, month, day, hours, minutes, seconds, milliseconds) {
            Bridge.Test.NUnit.Assert.areEqual(year, dt.getUTCFullYear());
            Bridge.Test.NUnit.Assert.areEqual(month, (dt.getUTCMonth() + 1));
            Bridge.Test.NUnit.Assert.areEqual(day, dt.getUTCDate());
            Bridge.Test.NUnit.Assert.areEqual(hours, dt.getUTCHours());
            Bridge.Test.NUnit.Assert.areEqual(minutes, dt.getUTCMinutes());
            Bridge.Test.NUnit.Assert.areEqual(seconds, dt.getUTCSeconds());
            Bridge.Test.NUnit.Assert.areEqual(milliseconds, dt.getUTCMilliseconds());
        },
        utcYMDWorks: function () {
            this.assertDateUtc(System.DateTime.fromTicks(System.DateTime.utc(2011, 7, 12)), 2011, 7, 12, 0, 0, 0, 0);
        },
        utcYMDHWorks: function () {
            this.assertDateUtc(System.DateTime.fromTicks(System.DateTime.utc(2011, 7, 12, 13)), 2011, 7, 12, 13, 0, 0, 0);
        },
        utcYMDHNWorks: function () {
            this.assertDateUtc(System.DateTime.fromTicks(System.DateTime.utc(2011, 7, 12, 13, 42)), 2011, 7, 12, 13, 42, 0, 0);
        },
        utcYMDHNSWorks: function () {
            this.assertDateUtc(System.DateTime.fromTicks(System.DateTime.utc(2011, 7, 12, 13, 42, 56)), 2011, 7, 12, 13, 42, 56, 0);
        },
        utcYMDHNSUWorks: function () {
            this.assertDateUtc(System.DateTime.fromTicks(System.DateTime.utc(2011, 7, 12, 13, 42, 56, 345)), 2011, 7, 12, 13, 42, 56, 345);
        },
        subtractingDatesWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual(86400000, (System.DateTime.subdd(new Date(2011, 7 - 1, 12), new Date(2011, 7 - 1, 11))).getTotalMilliseconds());
        },
        subtractMethodReturningTimeSpanWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual(new System.TimeSpan(1, 0, 0, 0), System.DateTime.subdd(new Date(2011, 7 - 1, 12), new Date(2011, 7 - 1, 11)));
            Bridge.Test.NUnit.Assert.areEqual(new System.TimeSpan(1, 2, 0, 0), System.DateTime.subdd(new Date(2011, 7 - 1, 12, 15, 0, 0), new Date(2011, 7 - 1, 11, 13, 0, 0)));
        },
        dateEqualityWorks: function () {
            Bridge.Test.NUnit.Assert.true(Bridge.equals(new Date(2011, 7 - 1, 12), new Date(2011, 7 - 1, 12)));
            Bridge.Test.NUnit.Assert.false(Bridge.equals(new Date(2011, 7 - 1, 12), new Date(2011, 7 - 1, 13)));
            Bridge.Test.NUnit.Assert.areStrictEqual(false, Bridge.equals(new Date(2011, 7 - 1, 12), null));
            Bridge.Test.NUnit.Assert.areStrictEqual(false, Bridge.equals(null, new Date(2011, 7 - 1, 12)));
            Bridge.Test.NUnit.Assert.areStrictEqual(true, Bridge.equals(null, null));
        },
        dateInequalityWorks: function () {
            Bridge.Test.NUnit.Assert.false(!Bridge.equals(new Date(2011, 7 - 1, 12), new Date(2011, 7 - 1, 12)));
            Bridge.Test.NUnit.Assert.true(!Bridge.equals(new Date(2011, 7 - 1, 12), new Date(2011, 7 - 1, 13)));
            Bridge.Test.NUnit.Assert.areStrictEqual(true, !Bridge.equals(new Date(2011, 7 - 1, 12), null));
            Bridge.Test.NUnit.Assert.areStrictEqual(true, !Bridge.equals(null, new Date(2011, 7 - 1, 12)));
            Bridge.Test.NUnit.Assert.areStrictEqual(false, !Bridge.equals(null, null));
        },
        dateLessThanWorks: function () {
            Bridge.Test.NUnit.Assert.true(System.DateTime.lt(new Date(2011, 7 - 1, 11), new Date(2011, 7 - 1, 12)));
            Bridge.Test.NUnit.Assert.false(System.DateTime.lt(new Date(2011, 7 - 1, 12), new Date(2011, 7 - 1, 12)));
            Bridge.Test.NUnit.Assert.false(System.DateTime.lt(new Date(2011, 7 - 1, 13), new Date(2011, 7 - 1, 12)));
        },
        dateLessEqualWorks: function () {
            Bridge.Test.NUnit.Assert.true(System.DateTime.lte(new Date(2011, 7 - 1, 11), new Date(2011, 7 - 1, 12)));
            Bridge.Test.NUnit.Assert.true(System.DateTime.lte(new Date(2011, 7 - 1, 12), new Date(2011, 7 - 1, 12)));
            Bridge.Test.NUnit.Assert.false(System.DateTime.lte(new Date(2011, 7 - 1, 13), new Date(2011, 7 - 1, 12)));
        },
        dateGreaterThanWorks: function () {
            Bridge.Test.NUnit.Assert.false(System.DateTime.gt(new Date(2011, 7 - 1, 11), new Date(2011, 7 - 1, 12)));
            Bridge.Test.NUnit.Assert.false(System.DateTime.gt(new Date(2011, 7 - 1, 12), new Date(2011, 7 - 1, 12)));
            Bridge.Test.NUnit.Assert.true(System.DateTime.gt(new Date(2011, 7 - 1, 13), new Date(2011, 7 - 1, 12)));
        },
        dateGreaterEqualWorks: function () {
            Bridge.Test.NUnit.Assert.false(System.DateTime.gte(new Date(2011, 7 - 1, 11), new Date(2011, 7 - 1, 12)));
            Bridge.Test.NUnit.Assert.true(System.DateTime.gte(new Date(2011, 7 - 1, 12), new Date(2011, 7 - 1, 12)));
            Bridge.Test.NUnit.Assert.true(System.DateTime.gte(new Date(2011, 7 - 1, 13), new Date(2011, 7 - 1, 12)));
        },
        convertingDateToMutableDateReturnsANewButEqualInstance: function () {
            var dt = new Date(2011, 7 - 1, 12);
            var mdt = new Date(dt.valueOf());
            Bridge.Test.NUnit.Assert.false(Bridge.referenceEquals(Bridge.box(dt, System.DateTime, $box_.System.DateTime.toString), mdt));
            Bridge.Test.NUnit.Assert.areEqual(2011, mdt.getFullYear());
            Bridge.Test.NUnit.Assert.areEqual(6, mdt.getMonth());
            Bridge.Test.NUnit.Assert.areEqual(12, mdt.getDate());
        },
        convertingMutableDateToDateReturnsANewButEqualInstance: function () {
            var mdt = new Date(2011, 7, 12);
            var dt = new Date(mdt.valueOf());
            Bridge.Test.NUnit.Assert.false(Bridge.referenceEquals(Bridge.box(dt, System.DateTime, $box_.System.DateTime.toString), mdt));
            Bridge.Test.NUnit.Assert.areEqual(2011, mdt.getFullYear());
            Bridge.Test.NUnit.Assert.areEqual(7, mdt.getMonth());
            Bridge.Test.NUnit.Assert.areEqual(12, mdt.getDate());
        },
        getHashCodeWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual(Bridge.getHashCode(System.DateTime.fromTicks(System.Int64(0))), Bridge.getHashCode(System.DateTime.fromTicks(System.Int64(0))));
            Bridge.Test.NUnit.Assert.areEqual(Bridge.getHashCode(System.DateTime.fromTicks(System.Int64(10000))), Bridge.getHashCode(System.DateTime.fromTicks(System.Int64(10000))));
            Bridge.Test.NUnit.Assert.areNotEqual(Bridge.getHashCode(System.DateTime.fromTicks(System.Int64(10000))), Bridge.getHashCode(System.DateTime.fromTicks(System.Int64(0))));
            Bridge.Test.NUnit.Assert.true(System.Int64(Bridge.getHashCode(new Date(3000, 1 - 1, 1))).lt(System.Int64([-1,0])));
        },
        equalsWorks: function () {
            Bridge.Test.NUnit.Assert.true(Bridge.equals(System.DateTime.fromTicks(System.Int64(0)), Bridge.box(System.DateTime.fromTicks(System.Int64(0)), System.DateTime, $box_.System.DateTime.toString)));
            Bridge.Test.NUnit.Assert.false(Bridge.equals(System.DateTime.fromTicks(System.Int64(10000)), Bridge.box(System.DateTime.fromTicks(System.Int64(0)), System.DateTime, $box_.System.DateTime.toString)));
            Bridge.Test.NUnit.Assert.false(Bridge.equals(System.DateTime.fromTicks(System.Int64(0)), Bridge.box(System.DateTime.fromTicks(System.Int64(10000)), System.DateTime, $box_.System.DateTime.toString)));
            Bridge.Test.NUnit.Assert.true(Bridge.equals(System.DateTime.fromTicks(System.Int64(10000)), Bridge.box(System.DateTime.fromTicks(System.Int64(10000)), System.DateTime, $box_.System.DateTime.toString)));
        },
        iEquatableEqualsWorks_SPI_1608: function () {
            Bridge.Test.NUnit.Assert.true(Bridge.equalsT(System.DateTime.fromTicks(System.Int64(0)), System.DateTime.fromTicks(System.Int64(0))));
            Bridge.Test.NUnit.Assert.false(Bridge.equalsT(System.DateTime.fromTicks(System.Int64(10000)), System.DateTime.fromTicks(System.Int64(0))));
            Bridge.Test.NUnit.Assert.false(Bridge.equalsT(System.DateTime.fromTicks(System.Int64(0)), System.DateTime.fromTicks(System.Int64(10000))));
            Bridge.Test.NUnit.Assert.true(Bridge.equalsT(System.DateTime.fromTicks(System.Int64(10000)), System.DateTime.fromTicks(System.Int64(10000))));

            Bridge.Test.NUnit.Assert.true(Bridge.equalsT(Bridge.cast(Bridge.box(System.DateTime.fromTicks(System.Int64(0)), System.DateTime, $box_.System.DateTime.toString), System.IEquatable$1(System.DateTime)), System.DateTime.fromTicks(System.Int64(0)), System.DateTime));
            Bridge.Test.NUnit.Assert.false(Bridge.equalsT(Bridge.cast(Bridge.box(System.DateTime.fromTicks(System.Int64(10000)), System.DateTime, $box_.System.DateTime.toString), System.IEquatable$1(System.DateTime)), System.DateTime.fromTicks(System.Int64(0)), System.DateTime));
            Bridge.Test.NUnit.Assert.false(Bridge.equalsT(Bridge.cast(Bridge.box(System.DateTime.fromTicks(System.Int64(0)), System.DateTime, $box_.System.DateTime.toString), System.IEquatable$1(System.DateTime)), System.DateTime.fromTicks(System.Int64(10000)), System.DateTime));
            Bridge.Test.NUnit.Assert.true(Bridge.equalsT(Bridge.cast(Bridge.box(System.DateTime.fromTicks(System.Int64(10000)), System.DateTime, $box_.System.DateTime.toString), System.IEquatable$1(System.DateTime)), System.DateTime.fromTicks(System.Int64(10000)), System.DateTime));
        },
        staticEqualsWorks: function () {
            Bridge.Test.NUnit.Assert.true(Bridge.equalsT(System.DateTime.fromTicks(System.Int64(0)), System.DateTime.fromTicks(System.Int64(0))));
            Bridge.Test.NUnit.Assert.false(Bridge.equalsT(System.DateTime.fromTicks(System.Int64(10000)), System.DateTime.fromTicks(System.Int64(0))));
            Bridge.Test.NUnit.Assert.false(Bridge.equalsT(System.DateTime.fromTicks(System.Int64(0)), System.DateTime.fromTicks(System.Int64(10000))));
            Bridge.Test.NUnit.Assert.true(Bridge.equalsT(System.DateTime.fromTicks(System.Int64(10000)), System.DateTime.fromTicks(System.Int64(10000))));
        },
        compareToWorks: function () {
            Bridge.Test.NUnit.Assert.true(Bridge.compare(System.DateTime.fromTicks(System.Int64(0)), System.DateTime.fromTicks(System.Int64(0))) === 0);
            Bridge.Test.NUnit.Assert.true(Bridge.compare(System.DateTime.fromTicks(System.Int64(10000)), System.DateTime.fromTicks(System.Int64(0))) > 0);
            Bridge.Test.NUnit.Assert.true(Bridge.compare(System.DateTime.fromTicks(System.Int64(0)), System.DateTime.fromTicks(System.Int64(10000))) < 0);
        },
        staticCompareWorks: function () {
            Bridge.Test.NUnit.Assert.true(Bridge.compare(System.DateTime.fromTicks(System.Int64(0)), System.DateTime.fromTicks(System.Int64(0))) === 0);
            Bridge.Test.NUnit.Assert.true(Bridge.compare(System.DateTime.fromTicks(System.Int64(10000)), System.DateTime.fromTicks(System.Int64(0))) > 0);
            Bridge.Test.NUnit.Assert.true(Bridge.compare(System.DateTime.fromTicks(System.Int64(0)), System.DateTime.fromTicks(System.Int64(10000))) < 0);
        },
        iComparableCompareToWorks_SPI_1609: function () {
            // #1609
            Bridge.Test.NUnit.Assert.true(Bridge.compare(Bridge.cast(Bridge.box(System.DateTime.fromTicks(System.Int64(0)), System.DateTime, $box_.System.DateTime.toString), System.IComparable$1(System.DateTime)), System.DateTime.fromTicks(System.Int64(0)), false, System.DateTime) === 0);
            Bridge.Test.NUnit.Assert.true(Bridge.compare(Bridge.cast(Bridge.box(System.DateTime.fromTicks(System.Int64(10000)), System.DateTime, $box_.System.DateTime.toString), System.IComparable$1(System.DateTime)), System.DateTime.fromTicks(System.Int64(0)), false, System.DateTime) > 0);
            Bridge.Test.NUnit.Assert.true(Bridge.compare(Bridge.cast(Bridge.box(System.DateTime.fromTicks(System.Int64(0)), System.DateTime, $box_.System.DateTime.toString), System.IComparable$1(System.DateTime)), System.DateTime.fromTicks(System.Int64(10000)), false, System.DateTime) < 0);
        },
        datePropertyWorks: function () {
            var dt = new Date(2012, 8 - 1, 12, 13, 14, 15, 16);
            Bridge.Test.NUnit.Assert.areEqual(new Date(2012, 8 - 1, 12), new Date(dt.getFullYear(), dt.getMonth(), dt.getDate()));
        },
        dayPropertyWorks: function () {
            var dt = new Date(2011, 7 - 1, 12, 13, 42, 56, 345);
            Bridge.Test.NUnit.Assert.areEqual(12, dt.getDate());
        },
        dayOfWeekPropertyWorks: function () {
            var dt = new Date(2011, 8 - 1, 12, 13, 42, 56, 345);
            Bridge.Test.NUnit.Assert.areEqual(System.DayOfWeek.Friday, dt.getDay());
        },
        dayOfYearPropertyWorks: function () {
            var dt = new Date(2011, 7 - 1, 12, 13, 42, 56, 345);
            Bridge.Test.NUnit.Assert.areEqual(193, Math.ceil((dt - new Date(dt.getFullYear(), 0, 1)) / 864e5));
        },
        hourPropertyWorks: function () {
            var dt = new Date(2011, 7 - 1, 12, 13, 42, 56, 345);
            Bridge.Test.NUnit.Assert.areEqual(13, dt.getHours());
        },
        millisecondPropertyWorks: function () {
            var dt = new Date(2011, 7 - 1, 12, 13, 42, 56, 345);
            Bridge.Test.NUnit.Assert.areEqual(345, dt.getMilliseconds());
        },
        minutePropertyWorks: function () {
            var dt = new Date(2011, 7 - 1, 12, 13, 42, 56, 345);
            Bridge.Test.NUnit.Assert.areEqual(42, dt.getMinutes());
        },
        monthPropertyWorks: function () {
            var dt = new Date(2011, 7 - 1, 12, 13, 42, 56, 345);
            Bridge.Test.NUnit.Assert.areEqual(7, (dt.getMonth() + 1));
        },
        secondPropertyWorks: function () {
            var dt = new Date(2011, 7 - 1, 12, 13, 42, 56, 345);
            Bridge.Test.NUnit.Assert.areEqual(56, dt.getSeconds());
        },
        yearPropertyWorks: function () {
            var dt = new Date(2011, 7 - 1, 12, 13, 42, 56, 345);
            Bridge.Test.NUnit.Assert.areEqual(2011, dt.getFullYear());
        },
        addDaysWorks: function () {
            var dt = new Date(2011, 7 - 1, 12, 2, 42, 56, 345);
            var actual = new Date(dt.valueOf() + Math.round((2.5) * 864e5));
            Bridge.Test.NUnit.Assert.areEqual(new Date(2011, 7 - 1, 14, 14, 42, 56, 345), actual);
            Bridge.Test.NUnit.Assert.areEqual(new Date(2011, 7 - 1, 12, 2, 42, 56, 345), dt);
        },
        addHoursWorks: function () {
            var dt = new Date(2011, 7 - 1, 12, 2, 42, 56, 345);
            var actual = new Date(dt.valueOf() + Math.round((2.5) * 36e5));
            Bridge.Test.NUnit.Assert.areEqual(new Date(2011, 7 - 1, 12, 5, 12, 56, 345), actual);
            Bridge.Test.NUnit.Assert.areEqual(new Date(2011, 7 - 1, 12, 2, 42, 56, 345), dt);
        },
        addMillisecondsWorks: function () {
            var dt = new Date(2011, 7 - 1, 12, 2, 42, 56, 345);
            var actual = new Date(dt.valueOf() + Math.round(250.4));
            Bridge.Test.NUnit.Assert.areEqual(new Date(2011, 7 - 1, 12, 2, 42, 56, 595), actual);
            Bridge.Test.NUnit.Assert.areEqual(new Date(2011, 7 - 1, 12, 2, 42, 56, 345), dt);
        },
        addMinutesWorks: function () {
            var dt = new Date(2011, 7 - 1, 12, 2, 42, 56, 345);
            var actual = new Date(dt.valueOf() + Math.round((2.5) * 6e4));
            Bridge.Test.NUnit.Assert.areEqual(new Date(2011, 7 - 1, 12, 2, 45, 26, 345), actual);
            Bridge.Test.NUnit.Assert.areEqual(new Date(2011, 7 - 1, 12, 2, 42, 56, 345), dt);
        },
        addMonthsWorks: function () {
            var dt = new Date(2011, 7 - 1, 12, 2, 42, 56, 345);
            var actual = new Date(dt.getFullYear(), dt.getMonth() + 6, dt.getDate(), dt.getHours(), dt.getMinutes(), dt.getSeconds(), dt.getMilliseconds());
            Bridge.Test.NUnit.Assert.areEqual(new Date(2012, 1 - 1, 12, 2, 42, 56, 345), actual);
            Bridge.Test.NUnit.Assert.areEqual(new Date(2011, 7 - 1, 12, 2, 42, 56, 345), dt);
        },
        addSecondsWorks: function () {
            var dt = new Date(2011, 7 - 1, 12, 2, 42, 56, 345);
            var actual = new Date(dt.valueOf() + Math.round((2.5) * 1e3));
            Bridge.Test.NUnit.Assert.areEqual(new Date(2011, 7 - 1, 12, 2, 42, 58, 845), actual);
            Bridge.Test.NUnit.Assert.areEqual(new Date(2011, 7 - 1, 12, 2, 42, 56, 345), dt);
        },
        addYearsWorks: function () {
            var dt = new Date(2011, 7 - 1, 12, 2, 42, 56, 345);
            var actual = new Date(dt.getFullYear() + 3, dt.getMonth(), dt.getDate(), dt.getHours(), dt.getMinutes(), dt.getSeconds(), dt.getMilliseconds());
            Bridge.Test.NUnit.Assert.areEqual(new Date(2014, 7 - 1, 12, 2, 42, 56, 345), actual);
            Bridge.Test.NUnit.Assert.areEqual(new Date(2011, 7 - 1, 12, 2, 42, 56, 345), dt);
        },
        daysInMonthWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual(31, (new Date(2013, 1, -1).getDate() + 1));
            Bridge.Test.NUnit.Assert.areEqual(28, (new Date(2013, 2, -1).getDate() + 1));
            Bridge.Test.NUnit.Assert.areEqual(31, (new Date(2013, 3, -1).getDate() + 1));
            Bridge.Test.NUnit.Assert.areEqual(30, (new Date(2013, 4, -1).getDate() + 1));
            Bridge.Test.NUnit.Assert.areEqual(31, (new Date(2013, 5, -1).getDate() + 1));
            Bridge.Test.NUnit.Assert.areEqual(30, (new Date(2013, 6, -1).getDate() + 1));
            Bridge.Test.NUnit.Assert.areEqual(31, (new Date(2013, 7, -1).getDate() + 1));
            Bridge.Test.NUnit.Assert.areEqual(31, (new Date(2013, 8, -1).getDate() + 1));
            Bridge.Test.NUnit.Assert.areEqual(30, (new Date(2013, 9, -1).getDate() + 1));
            Bridge.Test.NUnit.Assert.areEqual(31, (new Date(2013, 10, -1).getDate() + 1));
            Bridge.Test.NUnit.Assert.areEqual(30, (new Date(2013, 11, -1).getDate() + 1));
            Bridge.Test.NUnit.Assert.areEqual(31, (new Date(2013, 12, -1).getDate() + 1));
            Bridge.Test.NUnit.Assert.areEqual(28, (new Date(2003, 2, -1).getDate() + 1));
            Bridge.Test.NUnit.Assert.areEqual(29, (new Date(2004, 2, -1).getDate() + 1));
        },
        isLeapYearWorks: function () {
            Bridge.Test.NUnit.Assert.true((new Date(2004, 2, -1).getDate() === 28));
            Bridge.Test.NUnit.Assert.true((new Date(2000, 2, -1).getDate() === 28));
            Bridge.Test.NUnit.Assert.false((new Date(2003, 2, -1).getDate() === 28));
        }
    });

    Bridge.ns("Bridge.ClientTest.Batch4.SimpleTypes.DateTimeTests", $asm.$);

    Bridge.apply($asm.$.Bridge.ClientTest.Batch4.SimpleTypes.DateTimeTests, {
        f1: function () {
            var dt = System.DateTime.parseExact("X", "yyyy-dd-MM");
        },
        f2: function () {
            var dt = System.DateTime.parseExact("X", "yyyy-dd-MM", System.Globalization.CultureInfo.invariantCulture);
        },
        f3: function () {
            var dt = System.DateTime.parseExact("X", "yyyy-dd-MM", null, true);
        },
        f4: function () {
            var dt = System.DateTime.parseExact("X", "yyyy-dd-MM", System.Globalization.CultureInfo.invariantCulture, true);
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.SimpleTypes.DecimalTests", {
        typePropertiesAreCorrect_SPI_1717: function () {
            Bridge.Test.NUnit.Assert.true(Bridge.is(System.Decimal(0.5), System.Decimal));
            Bridge.Test.NUnit.Assert.areEqual("System.Decimal", Bridge.Reflection.getTypeFullName(System.Decimal));
            Bridge.Test.NUnit.Assert.false(Bridge.Reflection.isClass(System.Decimal));
            Bridge.Test.NUnit.Assert.true(Bridge.Reflection.isAssignableFrom(System.IComparable$1(System.Decimal), System.Decimal));
            Bridge.Test.NUnit.Assert.true(Bridge.Reflection.isAssignableFrom(System.IEquatable$1(System.Decimal), System.Decimal));
            Bridge.Test.NUnit.Assert.true(Bridge.Reflection.isAssignableFrom(System.IFormattable, System.Decimal));
            var d = System.Decimal(0.0);
            Bridge.Test.NUnit.Assert.true(Bridge.is(d, System.Decimal));
            Bridge.Test.NUnit.Assert.true(Bridge.is(d, System.IComparable$1(System.Decimal)));
            Bridge.Test.NUnit.Assert.true(Bridge.is(d, System.IEquatable$1(System.Decimal)));
            Bridge.Test.NUnit.Assert.true(Bridge.is(d, System.IFormattable));

            var interfaces = Bridge.Reflection.getInterfaces(System.Decimal);
            Bridge.Test.NUnit.Assert.areEqual(4, interfaces.length);
            Bridge.Test.NUnit.Assert.true(System.Array.contains(interfaces, System.IComparable$1(System.Decimal), Function));
            Bridge.Test.NUnit.Assert.true(System.Array.contains(interfaces, System.IEquatable$1(System.Decimal), Function));
            Bridge.Test.NUnit.Assert.true(System.Array.contains(interfaces, System.IFormattable, Function));
        },
        getDefaultValue: function (T) {
            return Bridge.getDefaultValue(T);
        },
        assertIsDecimalAndEqualTo: function (v, d) {
            Bridge.Test.NUnit.Assert.true(Bridge.is(v, System.Decimal));
            Bridge.Test.NUnit.Assert.areStrictEqual(System.Double.format(d, 'G'), v.toString());
        },
        assertIsDecimalAndEqualTo$1: function (v, s) {
            Bridge.Test.NUnit.Assert.true(Bridge.is(v, System.Decimal));
            Bridge.Test.NUnit.Assert.areStrictEqual(s, v.toString());
        },
        defaultValueIsDecimal0: function () {
            this.assertIsDecimalAndEqualTo(this.getDefaultValue(System.Decimal), 0);
        },
        creatingInstanceReturnsZero: function () {
            this.assertIsDecimalAndEqualTo(Bridge.createInstance(System.Decimal), 0);
        },
        literalDecimalsWork_SPI_1590: function () {
            this.assertIsDecimalAndEqualTo(System.Decimal(1.0), 1);
            this.assertIsDecimalAndEqualTo(System.Decimal(-1.0), -1);

            // #1590
            this.assertIsDecimalAndEqualTo$1(System.Decimal("7922816251426433759354395033"), "7922816251426433759354395033");
            this.assertIsDecimalAndEqualTo$1(System.Decimal("-7922816251426433759354395033"), "-7922816251426433759354395033");
        },
        constantsWork_SPI_1590: function () {
            this.assertIsDecimalAndEqualTo(System.Decimal.One, 1);
            this.assertIsDecimalAndEqualTo(System.Decimal.Zero, 0);
            this.assertIsDecimalAndEqualTo(System.Decimal.MinusOne, -1);
            // #1590
            this.assertIsDecimalAndEqualTo$1(System.Decimal.MinValue, "-79228162514264337593543950335");
            this.assertIsDecimalAndEqualTo$1(System.Decimal.MaxValue, "79228162514264337593543950335");
        },
        defaultConstructorReturnsZero: function () {
            this.assertIsDecimalAndEqualTo(System.Decimal(0), 0);
        },
        convertingConstructorsWork: function () {
            this.assertIsDecimalAndEqualTo(System.Decimal(0.5), 0.5);
            this.assertIsDecimalAndEqualTo(System.Decimal(1.5), 1.5);
            this.assertIsDecimalAndEqualTo(System.Decimal(2), 2);
            this.assertIsDecimalAndEqualTo(System.Decimal(System.Int64(3)), 3);
            this.assertIsDecimalAndEqualTo(System.Decimal(4), 4);
            this.assertIsDecimalAndEqualTo(System.Decimal(System.UInt64(5)), 5);
        },
        formatWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual("123", Bridge.Int.format(System.Decimal(291.0), "x"));
        },
        toStringWithFormatWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual("123", Bridge.Int.format(System.Decimal(291.0), "x"));
        },
        toStringWithFormatAndProviderWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual("123", Bridge.Int.format(System.Decimal(291.0), "x", System.Globalization.CultureInfo.invariantCulture));
        },
        iFormattableToStringWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual("291", Bridge.format(System.Decimal(291.0), "", System.Globalization.CultureInfo.invariantCulture));
        },
        toStringWithoutRadixWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual("123", System.Decimal(123.0).toString());
        },
        conversionsToDecimalWork_SPI_1580: function () {
            var x = 0;
            this.assertIsDecimalAndEqualTo(System.Decimal(Bridge.Int.sxb((((x + 1) | 0)) & 255)), 1);
            this.assertIsDecimalAndEqualTo(System.Decimal(((((x + 2) | 0)) & 255)), 2);
            this.assertIsDecimalAndEqualTo(System.Decimal(Bridge.Int.sxs((((x + 3) | 0)) & 65535)), 3);
            this.assertIsDecimalAndEqualTo(System.Decimal(((((x + 4) | 0)) & 65535)), 4);
            this.assertIsDecimalAndEqualTo(System.Decimal(((((x + 5) | 0)) & 65535)), 5);
            this.assertIsDecimalAndEqualTo(System.Decimal(((x + 6) | 0)), 6);
            this.assertIsDecimalAndEqualTo(System.Decimal(((((x + 7) | 0)) >>> 0)), 7);
            this.assertIsDecimalAndEqualTo(System.Decimal(System.Int64(((x + 8) | 0))), 8);
            this.assertIsDecimalAndEqualTo(System.Decimal(Bridge.Int.clipu64(((x + 9) | 0))), 9);
            this.assertIsDecimalAndEqualTo(System.Decimal(x + 10.5, null, System.Single), 10.5);
            this.assertIsDecimalAndEqualTo(System.Decimal(x + 11.5, null, System.Double), 11.5);

            // #1580
            Bridge.Test.NUnit.Assert.throws$6(System.OverflowException, function () {
                var _ = System.Decimal(x + 7.92281625E+28, null, System.Single);
            });
            Bridge.Test.NUnit.Assert.throws$6(System.OverflowException, function () {
                var _ = System.Decimal(x - 7.92281625E+28, null, System.Single);
            });
            Bridge.Test.NUnit.Assert.throws$6(System.OverflowException, function () {
                var _ = System.Decimal(x + 7.9228162514264338E+28, null, System.Double);
            });
            Bridge.Test.NUnit.Assert.throws$6(System.OverflowException, function () {
                var _ = System.Decimal(x - 7.9228162514264338E+28, null, System.Double);
            });
        },
        nullableConversionsToDecimalWork_SPI_1580_1581_1587: function () {
            var x1 = 0, x2 = null;
            this.assertIsDecimalAndEqualTo(System.Decimal.lift(Bridge.Int.clip8(Bridge.Int.clip32(System.Nullable.add(x1, 1)))), 1);
            this.assertIsDecimalAndEqualTo(System.Decimal.lift(Bridge.Int.clipu8(Bridge.Int.clip32(System.Nullable.add(x1, 2)))), 2);
            this.assertIsDecimalAndEqualTo(System.Decimal.lift(Bridge.Int.clip16(Bridge.Int.clip32(System.Nullable.add(x1, 3)))), 3);
            this.assertIsDecimalAndEqualTo(System.Decimal.lift(Bridge.Int.clipu16(Bridge.Int.clip32(System.Nullable.add(x1, 4)))), 4);
            this.assertIsDecimalAndEqualTo(System.Decimal.lift(Bridge.Int.clipu16(Bridge.Int.clip32(System.Nullable.add(x1, 5)))), 5);
            this.assertIsDecimalAndEqualTo(System.Decimal.lift(Bridge.Int.clip32(System.Nullable.add(x1, 6))), 6);
            this.assertIsDecimalAndEqualTo(System.Decimal.lift(Bridge.Int.clipu32(Bridge.Int.clip32(System.Nullable.add(x1, 7)))), 7);
            this.assertIsDecimalAndEqualTo(System.Decimal.lift(System.Int64.lift(Bridge.Int.clip32(System.Nullable.add(x1, 8)))), 8);
            this.assertIsDecimalAndEqualTo(System.Decimal.lift(Bridge.Int.clipu64(Bridge.Int.clip32(System.Nullable.add(x1, 9)))), 9);
            this.assertIsDecimalAndEqualTo(System.Decimal(System.Nullable.add(x1, 10.5), null, System.Nullable$1(System.Single)), 10.5);
            this.assertIsDecimalAndEqualTo(System.Decimal(System.Nullable.add(x1, 11.5), null, System.Nullable$1(System.Double)), 11.5);
            Bridge.Test.NUnit.Assert.areEqual(null, System.Decimal.lift(Bridge.Int.clip8(x2)));
            Bridge.Test.NUnit.Assert.areEqual(null, System.Decimal.lift(Bridge.Int.clipu8(x2)));
            Bridge.Test.NUnit.Assert.areEqual(null, System.Decimal.lift(Bridge.Int.clip16(x2)));
            Bridge.Test.NUnit.Assert.areEqual(null, System.Decimal.lift(Bridge.Int.clipu16(x2)));
            Bridge.Test.NUnit.Assert.areEqual(null, System.Decimal.lift(Bridge.Int.clipu16(x2)));
            Bridge.Test.NUnit.Assert.areEqual(null, System.Decimal.lift(x2));
            Bridge.Test.NUnit.Assert.areEqual(null, System.Decimal.lift(Bridge.Int.clipu32(x2)));
            Bridge.Test.NUnit.Assert.areEqual(null, System.Decimal.lift(System.Int64.lift(x2)));
            Bridge.Test.NUnit.Assert.areEqual(null, System.Decimal.lift(Bridge.Int.clipu64(x2)));

            // #1587
            Bridge.Test.NUnit.Assert.areEqual(null, System.Decimal(x2, null, System.Nullable$1(System.Single)));
            Bridge.Test.NUnit.Assert.areEqual(null, System.Decimal(x2, null, System.Nullable$1(System.Double)));

            // #1581
            Bridge.Test.NUnit.Assert.throws$6(System.InvalidOperationException, function () {
                var _ = System.Decimal(Bridge.Int.clip8(x2), null, System.Nullable$1(System.SByte));
            });
            Bridge.Test.NUnit.Assert.throws$6(System.InvalidOperationException, function () {
                var _ = System.Decimal(Bridge.Int.clipu8(x2), null, System.Nullable$1(System.Byte));
            });
            Bridge.Test.NUnit.Assert.throws$6(System.InvalidOperationException, function () {
                var _ = System.Decimal(Bridge.Int.clip16(x2), null, System.Nullable$1(System.Int16));
            });
            Bridge.Test.NUnit.Assert.throws$6(System.InvalidOperationException, function () {
                var _ = System.Decimal(Bridge.Int.clipu16(x2), null, System.Nullable$1(System.UInt16));
            });
            Bridge.Test.NUnit.Assert.throws$6(System.InvalidOperationException, function () {
                var _ = System.Decimal(Bridge.Int.clipu16(x2), null, System.Nullable$1(System.Char));
            });
            Bridge.Test.NUnit.Assert.throws$6(System.InvalidOperationException, function () {
                var _ = System.Decimal(x2, null, System.Nullable$1(System.Int32));
            });
            Bridge.Test.NUnit.Assert.throws$6(System.InvalidOperationException, function () {
                var _ = System.Decimal(Bridge.Int.clipu32(x2), null, System.Nullable$1(System.UInt32));
            });
            Bridge.Test.NUnit.Assert.throws$6(System.InvalidOperationException, function () {
                var _ = System.Decimal(System.Int64.lift(x2), null, System.Nullable$1(System.Int64));
            });
            Bridge.Test.NUnit.Assert.throws$6(System.InvalidOperationException, function () {
                var _ = System.Decimal(Bridge.Int.clipu64(x2), null, System.Nullable$1(System.UInt64));
            });
            Bridge.Test.NUnit.Assert.throws$6(System.InvalidOperationException, function () {
                var _ = System.Decimal(x2, null, System.Nullable$1(System.Single));
            });
            Bridge.Test.NUnit.Assert.throws$6(System.InvalidOperationException, function () {
                var _ = System.Decimal(x2, null, System.Nullable$1(System.Double));
            });

            // #1580
            Bridge.Test.NUnit.Assert.throws$6(System.OverflowException, function () {
                var _ = System.Decimal(System.Nullable.add(x1, 7.92281625E+28), null, System.Nullable$1(System.Single));
            });
            Bridge.Test.NUnit.Assert.throws$6(System.OverflowException, function () {
                var _ = System.Decimal(System.Nullable.sub(x1, 7.92281625E+28), null, System.Nullable$1(System.Single));
            });
            Bridge.Test.NUnit.Assert.throws$6(System.OverflowException, function () {
                var _ = System.Decimal(System.Nullable.add(x1, 7.9228162514264338E+28), null, System.Nullable$1(System.Double));
            });
            Bridge.Test.NUnit.Assert.throws$6(System.OverflowException, function () {
                var _ = System.Decimal(System.Nullable.sub(x1, 7.9228162514264338E+28), null, System.Nullable$1(System.Double));
            });
        },
        decimalToSByte_SPI_1580: function () {
            var x = System.Decimal(0);
            Bridge.Test.NUnit.Assert.areEqual(-128, System.Decimal.toInt(x.sub(System.Decimal(128.9)), System.SByte));
            Bridge.Test.NUnit.Assert.areEqual(127, System.Decimal.toInt(x.add(System.Decimal(127.9)), System.SByte));
            Bridge.Test.NUnit.Assert.throws$6(System.OverflowException, function () {
                var _ = System.Decimal.toInt(x.sub(System.Decimal(129)), System.SByte);
            });
            Bridge.Test.NUnit.Assert.throws$6(System.OverflowException, function () {
                var _ = System.Decimal.toInt(x.add(System.Decimal(128)), System.SByte);
            });

            Bridge.Test.NUnit.Assert.areEqual(-128, System.Decimal.toInt(x.sub(System.Decimal(128.9))));
            Bridge.Test.NUnit.Assert.areEqual(127, System.Decimal.toInt(x.add(System.Decimal(127.9))));

            // #1580
            Bridge.Test.NUnit.Assert.throws$6(System.OverflowException, function () {
                var _ = System.Decimal.toInt(x.sub(System.Decimal(129)));
            });
            Bridge.Test.NUnit.Assert.throws$6(System.OverflowException, function () {
                var _ = System.Decimal.toInt(x.add(System.Decimal(128)));
            });
        },
        decimalToByte_SPI_1580: function () {
            var x = System.Decimal(0);
            Bridge.Test.NUnit.Assert.areEqual(0, System.Decimal.toInt(x.sub(System.Decimal(0.9)), System.Byte));
            Bridge.Test.NUnit.Assert.areEqual(255, System.Decimal.toInt(x.add(System.Decimal(255.9)), System.Byte));
            Bridge.Test.NUnit.Assert.throws$6(System.OverflowException, function () {
                var _ = System.Decimal.toInt(x.sub(System.Decimal(1)), System.Byte);
            });
            Bridge.Test.NUnit.Assert.throws$6(System.OverflowException, function () {
                var _ = System.Decimal.toInt(x.add(System.Decimal(256)), System.Byte);
            });

            Bridge.Test.NUnit.Assert.areEqual(0, System.Decimal.toInt(x.sub(System.Decimal(0.9))));
            Bridge.Test.NUnit.Assert.areEqual(255, System.Decimal.toInt(x.add(System.Decimal(255.9))));

            // #1580
            Bridge.Test.NUnit.Assert.throws$6(System.OverflowException, function () {
                var _ = System.Decimal.toInt(x.sub(System.Decimal(1)));
            });
            Bridge.Test.NUnit.Assert.throws$6(System.OverflowException, function () {
                var _ = System.Decimal.toInt(x.add(System.Decimal(256)));
            });
        },
        decimalToShort_SPI_1580: function () {
            var x = System.Decimal(0);
            Bridge.Test.NUnit.Assert.areEqual(-32768, System.Decimal.toInt(x.sub(System.Decimal(32768.9)), System.Int16));
            Bridge.Test.NUnit.Assert.areEqual(32767, System.Decimal.toInt(x.add(System.Decimal(32767.9)), System.Int16));
            Bridge.Test.NUnit.Assert.throws$6(System.OverflowException, function () {
                var _ = System.Decimal.toInt(x.sub(System.Decimal(32769)), System.Int16);
            });
            Bridge.Test.NUnit.Assert.throws$6(System.OverflowException, function () {
                var _ = System.Decimal.toInt(x.add(System.Decimal(32768)), System.Int16);
            });

            Bridge.Test.NUnit.Assert.areEqual(-32768, System.Decimal.toInt(x.sub(System.Decimal(32768.9))));
            Bridge.Test.NUnit.Assert.areEqual(32767, System.Decimal.toInt(x.add(System.Decimal(32767.9))));

            // #1580
            Bridge.Test.NUnit.Assert.throws$6(System.OverflowException, function () {
                var _ = System.Decimal.toInt(x.sub(System.Decimal(32769)));
            });
            Bridge.Test.NUnit.Assert.throws$6(System.OverflowException, function () {
                var _ = System.Decimal.toInt(x.add(System.Decimal(32768)));
            });
        },
        decimalToUShort_SPI_1580: function () {
            var x = System.Decimal(0);
            Bridge.Test.NUnit.Assert.areEqual(0, System.Decimal.toInt(x.sub(System.Decimal(0.9)), System.UInt16));
            Bridge.Test.NUnit.Assert.areEqual(65535, System.Decimal.toInt(x.add(System.Decimal(65535.9)), System.UInt16));
            Bridge.Test.NUnit.Assert.throws$6(System.OverflowException, function () {
                var _ = System.Decimal.toInt(x.sub(System.Decimal(1)), System.UInt16);
            });
            Bridge.Test.NUnit.Assert.throws$6(System.OverflowException, function () {
                var _ = System.Decimal.toInt(x.add(System.Decimal(65536)), System.UInt16);
            });

            Bridge.Test.NUnit.Assert.areEqual(0, System.Decimal.toInt(x.sub(System.Decimal(0.9))));
            Bridge.Test.NUnit.Assert.areEqual(65535, System.Decimal.toInt(x.add(System.Decimal(65535.9))));

            // #1580
            Bridge.Test.NUnit.Assert.throws$6(System.OverflowException, function () {
                var _ = System.Decimal.toInt(x.sub(System.Decimal(1)));
            });
            Bridge.Test.NUnit.Assert.throws$6(System.OverflowException, function () {
                var _ = System.Decimal.toInt(x.add(System.Decimal(65536)));
            });
        },
        decimalToChar: function () {
            var x = System.Decimal(0);
            Bridge.Test.NUnit.Assert.areEqual(0, System.Decimal.toInt(x.sub(System.Decimal(0.9)), System.Char));
            Bridge.Test.NUnit.Assert.areEqual(65535, System.Decimal.toInt(x.add(System.Decimal(65535.9)), System.Char));
            Bridge.Test.NUnit.Assert.throws$6(System.OverflowException, function () {
                var _ = System.Decimal.toInt(x.sub(System.Decimal(1)), System.Char);
            });
            Bridge.Test.NUnit.Assert.throws$6(System.OverflowException, function () {
                var _ = System.Decimal.toInt(x.add(System.Decimal(65536)), System.Char);
            });
        },
        decimalToInt_SPI_1580: function () {
            var x = System.Decimal(0);
            Bridge.Test.NUnit.Assert.areEqual(-2147483648, System.Decimal.toInt(x.sub(System.Decimal(2147483648.9)), System.Int32));
            Bridge.Test.NUnit.Assert.areEqual(2147483647, System.Decimal.toInt(x.add(System.Decimal(2147483647.9)), System.Int32));
            Bridge.Test.NUnit.Assert.throws$6(System.OverflowException, function () {
                var _ = System.Decimal.toInt(x.sub(System.Decimal(2147483649)), System.Int32);
            });
            Bridge.Test.NUnit.Assert.throws$6(System.OverflowException, function () {
                var _ = System.Decimal.toInt(x.add(System.Decimal(2147483648)), System.Int32);
            });

            Bridge.Test.NUnit.Assert.areEqual(-2147483648, System.Decimal.toInt(x.sub(System.Decimal(2147483648.9))));
            Bridge.Test.NUnit.Assert.areEqual(2147483647, System.Decimal.toInt(x.add(System.Decimal(2147483647.9))));

            // #1580
            Bridge.Test.NUnit.Assert.throws$6(System.OverflowException, function () {
                var _ = System.Decimal.toInt(x.sub(System.Decimal(2147483649)));
            });
            Bridge.Test.NUnit.Assert.throws$6(System.OverflowException, function () {
                var _ = System.Decimal.toInt(x.add(System.Decimal(2147483648)));
            });
        },
        decimalToUInt_SPI_1580: function () {
            var x = System.Decimal(0);
            Bridge.Test.NUnit.Assert.areEqual(0, System.Decimal.toInt(x.sub(System.Decimal(0.9)), System.UInt32));
            Bridge.Test.NUnit.Assert.areEqual(4294967295, System.Decimal.toInt(x.add(System.Decimal(4294967295.9)), System.UInt32));
            Bridge.Test.NUnit.Assert.throws$6(System.OverflowException, function () {
                var _ = System.Decimal.toInt(x.sub(System.Decimal(1)), System.UInt32);
            });
            Bridge.Test.NUnit.Assert.throws$6(System.OverflowException, function () {
                var _ = System.Decimal.toInt(x.add(System.Decimal(System.Int64([0,1]))), System.UInt32);
            });

            Bridge.Test.NUnit.Assert.areEqual(0, System.Decimal.toInt(x.sub(System.Decimal(0.9))));
            Bridge.Test.NUnit.Assert.areEqual(4294967295, System.Decimal.toInt(x.add(System.Decimal(4294967295.9))));

            // #1580
            Bridge.Test.NUnit.Assert.throws$6(System.OverflowException, function () {
                var _ = System.Decimal.toInt(x.sub(System.Decimal(1)));
            });
            Bridge.Test.NUnit.Assert.throws$6(System.OverflowException, function () {
                var _ = System.Decimal.toInt(x.add(System.Decimal(System.Int64([0,1]))));
            });
        },
        decimalToLong_SPI_1578: function () {
            var x = System.Decimal(0);
            Bridge.Test.NUnit.Assert.areEqual(System.Int64([0,-5]), System.Decimal.toInt(x.sub(System.Decimal(21474836480.9)), System.Int64));
            Bridge.Test.NUnit.Assert.areEqual(System.Int64([-10,4]), System.Decimal.toInt(x.add(System.Decimal(21474836470.9)), System.Int64));

            // #1578
            Bridge.Test.NUnit.Assert.areEqual(System.Int64([0,-5]), System.Decimal.toInt(x.sub(System.Decimal(21474836480.9))));
            Bridge.Test.NUnit.Assert.areEqual(System.Int64([-10,4]), System.Decimal.toInt(x.add(System.Decimal(21474836470.9))));
        },
        decimalToULong_SPI_1584_1585: function () {
            var x = System.Decimal(0);

            // #1585
            // Test restructure to keep assertion count correct(prevent uncaught test exception)
            var u1 = System.UInt64(0);
            Bridge.ClientTest.Batch4.TestHelper.safe(function () {
                u1 = System.Decimal.toInt(x.sub(System.Decimal(0.9)), System.UInt64);
            });
            Bridge.Test.NUnit.Assert.areEqual(System.UInt64(0), u1);

            var u2 = System.UInt64(0);
            Bridge.ClientTest.Batch4.TestHelper.safe(function () {
                u2 = System.Decimal.toInt(x.add(System.Decimal(42949672950.9)), System.UInt64);
            });
            Bridge.Test.NUnit.Assert.areEqual(System.UInt64([-10,9]), u2);
            Bridge.Test.NUnit.Assert.throws$6(System.OverflowException, function () {
                var _ = System.Decimal.toInt(x.sub(System.Decimal(1)), System.UInt64);
            });

            // #1584
            var u3 = System.UInt64(0);
            Bridge.ClientTest.Batch4.TestHelper.safe(function () {
                u3 = System.Decimal.toInt(x.sub(System.Decimal(0.9)));
            });
            Bridge.Test.NUnit.Assert.areEqual(System.UInt64(0), u3);

            var u4 = System.UInt64(0);
            Bridge.ClientTest.Batch4.TestHelper.safe(function () {
                u4 = System.Decimal.toInt(x.add(System.Decimal(42949672950.9)));
            });
            Bridge.Test.NUnit.Assert.areEqual(System.UInt64([-10,9]), u4);

            Bridge.Test.NUnit.Assert.throws$6(System.OverflowException, function () {
                var _ = System.Decimal.toInt(x.sub(System.Decimal(1)));
            });
        },
        decimalToFloat: function () {
            var x = System.Decimal(0);
            Bridge.Test.NUnit.Assert.areEqual(10.5, System.Decimal.toFloat(x.add(System.Decimal(10.5))));
            Bridge.Test.NUnit.Assert.areEqual(10.5, System.Decimal.toFloat(x.add(System.Decimal(10.5))));
        },
        decimalToDouble: function () {
            var x = System.Decimal(0);
            Bridge.Test.NUnit.Assert.areEqual(10.5, System.Decimal.toFloat(x.add(System.Decimal(10.5))));
            Bridge.Test.NUnit.Assert.areEqual(10.5, System.Decimal.toFloat(x.add(System.Decimal(10.5))));
        },
        nullableDecimalToSByte: function () {
            var x1 = System.Decimal(0), x2 = System.Decimal.lift(null);
            Bridge.Test.NUnit.Assert.areEqual(-128, System.Decimal.toInt(System.Nullable.lift2("sub", x1, System.Decimal(128)), System.Nullable$1(System.SByte)));
            Bridge.Test.NUnit.Assert.areEqual(127, System.Decimal.toInt(System.Nullable.lift2("add", x1, System.Decimal(127)), System.Nullable$1(System.SByte)));
            Bridge.Test.NUnit.Assert.areEqual(-128, System.Decimal.toInt(System.Nullable.getValue(System.Nullable.lift2("sub", x1, System.Decimal(128))), System.SByte));
            Bridge.Test.NUnit.Assert.areEqual(127, System.Decimal.toInt(System.Nullable.getValue(System.Nullable.lift2("add", x1, System.Decimal(127))), System.SByte));
            Bridge.Test.NUnit.Assert.areEqual(null, System.Decimal.toInt(x2, System.Nullable$1(System.SByte)));
            Bridge.Test.NUnit.Assert.throws$6(System.OverflowException, function () {
                var _ = System.Decimal.toInt(System.Nullable.lift2("sub", x1, System.Decimal(129)), System.Nullable$1(System.SByte));
            });
            Bridge.Test.NUnit.Assert.throws$6(System.OverflowException, function () {
                var _ = System.Decimal.toInt(System.Nullable.lift2("add", x1, System.Decimal(128)), System.Nullable$1(System.SByte));
            });
            Bridge.Test.NUnit.Assert.throws$6(System.OverflowException, function () {
                var _ = System.Decimal.toInt(System.Nullable.getValue(System.Nullable.lift2("sub", x1, System.Decimal(129))), System.SByte);
            });
            Bridge.Test.NUnit.Assert.throws$6(System.OverflowException, function () {
                var _ = System.Decimal.toInt(System.Nullable.getValue(System.Nullable.lift2("add", x1, System.Decimal(128))), System.SByte);
            });
            Bridge.Test.NUnit.Assert.throws$6(System.InvalidOperationException, function () {
                var _ = System.Decimal.toInt(System.Nullable.getValue(x2), System.SByte);
            });
        },
        nullableDecimalToByte: function () {
            var x1 = System.Decimal(0), x2 = System.Decimal.lift(null);
            Bridge.Test.NUnit.Assert.areEqual(0, System.Decimal.toInt(x1, System.Nullable$1(System.Byte)));
            Bridge.Test.NUnit.Assert.areEqual(255, System.Decimal.toInt(System.Nullable.lift2("add", x1, System.Decimal(255)), System.Nullable$1(System.Byte)));
            Bridge.Test.NUnit.Assert.areEqual(0, System.Decimal.toInt(System.Nullable.getValue(x1), System.Byte));
            Bridge.Test.NUnit.Assert.areEqual(255, System.Decimal.toInt(System.Nullable.getValue(System.Nullable.lift2("add", x1, System.Decimal(255))), System.Byte));
            Bridge.Test.NUnit.Assert.areEqual(null, System.Decimal.toInt(x2, System.Nullable$1(System.Byte)));
            Bridge.Test.NUnit.Assert.throws$6(System.OverflowException, function () {
                var _ = System.Decimal.toInt(System.Nullable.lift2("sub", x1, System.Decimal(1)), System.Nullable$1(System.Byte));
            });
            Bridge.Test.NUnit.Assert.throws$6(System.OverflowException, function () {
                var _ = System.Decimal.toInt(System.Nullable.lift2("add", x1, System.Decimal(256)), System.Nullable$1(System.Byte));
            });
            Bridge.Test.NUnit.Assert.throws$6(System.OverflowException, function () {
                var _ = System.Decimal.toInt(System.Nullable.getValue(System.Nullable.lift2("sub", x1, System.Decimal(1))), System.Byte);
            });
            Bridge.Test.NUnit.Assert.throws$6(System.OverflowException, function () {
                var _ = System.Decimal.toInt(System.Nullable.getValue(System.Nullable.lift2("add", x1, System.Decimal(256))), System.Byte);
            });
            Bridge.Test.NUnit.Assert.throws$6(System.InvalidOperationException, function () {
                var _ = System.Decimal.toInt(System.Nullable.getValue(x2), System.SByte);
            });
        },
        nullableDecimalToShort: function () {
            var x1 = System.Decimal(0), x2 = System.Decimal.lift(null);
            Bridge.Test.NUnit.Assert.areEqual(-32768, System.Decimal.toInt(System.Nullable.lift2("sub", x1, System.Decimal(32768)), System.Nullable$1(System.Int16)));
            Bridge.Test.NUnit.Assert.areEqual(32767, System.Decimal.toInt(System.Nullable.lift2("add", x1, System.Decimal(32767)), System.Nullable$1(System.Int16)));
            Bridge.Test.NUnit.Assert.areEqual(-32768, System.Decimal.toInt(System.Nullable.getValue(System.Nullable.lift2("sub", x1, System.Decimal(32768))), System.Int16));
            Bridge.Test.NUnit.Assert.areEqual(32767, System.Decimal.toInt(System.Nullable.getValue(System.Nullable.lift2("add", x1, System.Decimal(32767))), System.Int16));
            Bridge.Test.NUnit.Assert.areEqual(null, System.Decimal.toInt(x2, System.Nullable$1(System.Int16)));
            Bridge.Test.NUnit.Assert.throws$6(System.OverflowException, function () {
                var _ = System.Decimal.toInt(System.Nullable.lift2("sub", x1, System.Decimal(32769)), System.Nullable$1(System.Int16));
            });
            Bridge.Test.NUnit.Assert.throws$6(System.OverflowException, function () {
                var _ = System.Decimal.toInt(System.Nullable.lift2("add", x1, System.Decimal(32768)), System.Nullable$1(System.Int16));
            });
            Bridge.Test.NUnit.Assert.throws$6(System.OverflowException, function () {
                var _ = System.Decimal.toInt(System.Nullable.getValue(System.Nullable.lift2("sub", x1, System.Decimal(32769))), System.Int16);
            });
            Bridge.Test.NUnit.Assert.throws$6(System.OverflowException, function () {
                var _ = System.Decimal.toInt(System.Nullable.getValue(System.Nullable.lift2("add", x1, System.Decimal(32768))), System.Int16);
            });
            Bridge.Test.NUnit.Assert.throws$6(System.InvalidOperationException, function () {
                var _ = System.Decimal.toInt(System.Nullable.getValue(x2), System.Int16);
            });
        },
        nullableDecimalToUShort: function () {
            var x1 = System.Decimal(0), x2 = System.Decimal.lift(null);
            Bridge.Test.NUnit.Assert.areEqual(0, System.Decimal.toInt(x1, System.Nullable$1(System.UInt16)));
            Bridge.Test.NUnit.Assert.areEqual(65535, System.Decimal.toInt(System.Nullable.lift2("add", x1, System.Decimal(65535)), System.Nullable$1(System.UInt16)));
            Bridge.Test.NUnit.Assert.areEqual(0, System.Decimal.toInt(System.Nullable.getValue(x1), System.UInt16));
            Bridge.Test.NUnit.Assert.areEqual(65535, System.Decimal.toInt(System.Nullable.getValue(System.Nullable.lift2("add", x1, System.Decimal(65535))), System.UInt16));
            Bridge.Test.NUnit.Assert.areEqual(null, System.Decimal.toInt(x2, System.Nullable$1(System.UInt16)));
            Bridge.Test.NUnit.Assert.throws$6(System.OverflowException, function () {
                var _ = System.Decimal.toInt(System.Nullable.lift2("sub", x1, System.Decimal(1)), System.Nullable$1(System.UInt16));
            });
            Bridge.Test.NUnit.Assert.throws$6(System.OverflowException, function () {
                var _ = System.Decimal.toInt(System.Nullable.lift2("add", x1, System.Decimal(65536)), System.Nullable$1(System.UInt16));
            });
            Bridge.Test.NUnit.Assert.throws$6(System.OverflowException, function () {
                var _ = System.Decimal.toInt(System.Nullable.getValue(System.Nullable.lift2("sub", x1, System.Decimal(1))), System.UInt16);
            });
            Bridge.Test.NUnit.Assert.throws$6(System.OverflowException, function () {
                var _ = System.Decimal.toInt(System.Nullable.getValue(System.Nullable.lift2("add", x1, System.Decimal(65536))), System.UInt16);
            });
            Bridge.Test.NUnit.Assert.throws$6(System.InvalidOperationException, function () {
                var _ = System.Decimal.toInt(System.Nullable.getValue(x2), System.UInt16);
            });
        },
        nullableDecimalToChar: function () {
            var x1 = System.Decimal(0), x2 = System.Decimal.lift(null);
            Bridge.Test.NUnit.Assert.areEqual(0, System.Decimal.toInt(x1, System.Nullable$1(System.Char)));
            Bridge.Test.NUnit.Assert.areEqual(65535, System.Decimal.toInt(System.Nullable.lift2("add", x1, System.Decimal(65535)), System.Nullable$1(System.Char)));
            Bridge.Test.NUnit.Assert.areEqual(0, System.Decimal.toInt(System.Nullable.getValue(x1), System.Char));
            Bridge.Test.NUnit.Assert.areEqual(65535, System.Decimal.toInt(System.Nullable.getValue(System.Nullable.lift2("add", x1, System.Decimal(65535))), System.Char));
            Bridge.Test.NUnit.Assert.areEqual(null, System.Decimal.toInt(x2, System.Nullable$1(System.Char)));
            Bridge.Test.NUnit.Assert.throws$6(System.OverflowException, function () {
                var _ = System.Decimal.toInt(System.Nullable.lift2("sub", x1, System.Decimal(1)), System.Nullable$1(System.Char));
            });
            Bridge.Test.NUnit.Assert.throws$6(System.OverflowException, function () {
                var _ = System.Decimal.toInt(System.Nullable.lift2("add", x1, System.Decimal(65536)), System.Nullable$1(System.Char));
            });
            Bridge.Test.NUnit.Assert.throws$6(System.OverflowException, function () {
                var _ = System.Decimal.toInt(System.Nullable.getValue(System.Nullable.lift2("sub", x1, System.Decimal(1))), System.Char);
            });
            Bridge.Test.NUnit.Assert.throws$6(System.OverflowException, function () {
                var _ = System.Decimal.toInt(System.Nullable.getValue(System.Nullable.lift2("add", x1, System.Decimal(65536))), System.Char);
            });
            Bridge.Test.NUnit.Assert.throws$6(System.InvalidOperationException, function () {
                var _ = System.Decimal.toInt(System.Nullable.getValue(x2), System.Char);
            });
        },
        nullableDecimalToInt: function () {
            var x1 = System.Decimal(0), x2 = System.Decimal.lift(null);
            Bridge.Test.NUnit.Assert.areEqual(-2147483648, System.Decimal.toInt(System.Nullable.lift2("sub", x1, System.Decimal(2147483648)), System.Nullable$1(System.Int32)));
            Bridge.Test.NUnit.Assert.areEqual(2147483647, System.Decimal.toInt(System.Nullable.lift2("add", x1, System.Decimal(2147483647)), System.Nullable$1(System.Int32)));
            Bridge.Test.NUnit.Assert.areEqual(-2147483648, System.Decimal.toInt(System.Nullable.getValue(System.Nullable.lift2("sub", x1, System.Decimal(2147483648))), System.Int32));
            Bridge.Test.NUnit.Assert.areEqual(2147483647, System.Decimal.toInt(System.Nullable.getValue(System.Nullable.lift2("add", x1, System.Decimal(2147483647))), System.Int32));
            Bridge.Test.NUnit.Assert.areEqual(null, System.Decimal.toInt(x2, System.Nullable$1(System.Int32)));
            Bridge.Test.NUnit.Assert.throws$6(System.OverflowException, function () {
                var _ = System.Decimal.toInt(System.Nullable.lift2("sub", x1, System.Decimal(2147483649)), System.Nullable$1(System.Int32));
            });
            Bridge.Test.NUnit.Assert.throws$6(System.OverflowException, function () {
                var _ = System.Decimal.toInt(System.Nullable.lift2("add", x1, System.Decimal(2147483648)), System.Nullable$1(System.Int32));
            });
            Bridge.Test.NUnit.Assert.throws$6(System.OverflowException, function () {
                var _ = System.Decimal.toInt(System.Nullable.getValue(System.Nullable.lift2("sub", x1, System.Decimal(2147483649))), System.Int32);
            });
            Bridge.Test.NUnit.Assert.throws$6(System.OverflowException, function () {
                var _ = System.Decimal.toInt(System.Nullable.getValue(System.Nullable.lift2("add", x1, System.Decimal(2147483648))), System.Int32);
            });
            Bridge.Test.NUnit.Assert.throws$6(System.InvalidOperationException, function () {
                var _ = System.Decimal.toInt(System.Nullable.getValue(x2), System.Int32);
            });
        },
        nullableDecimalToUInt: function () {
            var x1 = System.Decimal(0), x2 = System.Decimal.lift(null);
            Bridge.Test.NUnit.Assert.areEqual(0, System.Decimal.toInt(x1, System.Nullable$1(System.UInt32)));
            Bridge.Test.NUnit.Assert.areEqual(4294967295, System.Decimal.toInt(System.Nullable.lift2("add", x1, System.Decimal(4294967295)), System.Nullable$1(System.UInt32)));
            Bridge.Test.NUnit.Assert.areEqual(0, System.Decimal.toInt(System.Nullable.getValue(x1), System.UInt32));
            Bridge.Test.NUnit.Assert.areEqual(4294967295, System.Decimal.toInt(System.Nullable.getValue(System.Nullable.lift2("add", x1, System.Decimal(4294967295))), System.UInt32));
            Bridge.Test.NUnit.Assert.areEqual(null, System.Decimal.toInt(x2, System.Nullable$1(System.UInt32)));
            Bridge.Test.NUnit.Assert.throws$6(System.OverflowException, function () {
                var _ = System.Decimal.toInt(System.Nullable.lift2("sub", x1, System.Decimal(1)), System.Nullable$1(System.UInt32));
            });
            Bridge.Test.NUnit.Assert.throws$6(System.OverflowException, function () {
                var _ = System.Decimal.toInt(System.Nullable.lift2("add", x1, System.Decimal(System.Int64([0,1]))), System.Nullable$1(System.UInt32));
            });
            Bridge.Test.NUnit.Assert.throws$6(System.OverflowException, function () {
                var _ = System.Decimal.toInt(System.Nullable.getValue(System.Nullable.lift2("sub", x1, System.Decimal(1))), System.UInt32);
            });
            Bridge.Test.NUnit.Assert.throws$6(System.OverflowException, function () {
                var _ = System.Decimal.toInt(System.Nullable.getValue(System.Nullable.lift2("add", x1, System.Decimal(System.Int64([0,1])))), System.UInt32);
            });
            Bridge.Test.NUnit.Assert.throws$6(System.InvalidOperationException, function () {
                var _ = System.Decimal.toInt(System.Nullable.getValue(x2), System.UInt32);
            });
        },
        nullableDecimalToLong_SPI_1582: function () {
            var x1 = System.Decimal(0), x2 = System.Decimal.lift(null);
            Bridge.Test.NUnit.Assert.areEqual(System.Int64([0,-5]), System.Decimal.toInt(System.Nullable.lift2("sub", x1, System.Decimal(System.Int64([0,5]))), System.Nullable$1(System.Int64)));
            Bridge.Test.NUnit.Assert.areEqual(System.Int64([-10,4]), System.Decimal.toInt(System.Nullable.lift2("add", x1, System.Decimal(System.Int64([-10,4]))), System.Nullable$1(System.Int64)));
            Bridge.Test.NUnit.Assert.areEqual(System.Int64([0,-5]), System.Decimal.toInt(System.Nullable.lift2("sub", x1, System.Decimal(System.Int64([0,5]))), System.Int64));
            Bridge.Test.NUnit.Assert.areEqual(System.Int64([-10,4]), System.Decimal.toInt(System.Nullable.lift2("add", x1, System.Decimal(System.Int64([-10,4]))), System.Int64));
            Bridge.Test.NUnit.Assert.areEqual(null, System.Decimal.toInt(x2, System.Nullable$1(System.Int64)));

            // #1582
            Bridge.Test.NUnit.Assert.throws$6(System.InvalidOperationException, function () {
                var _ = System.Decimal.toInt(x2, System.Int64);
            });
        },
        nullableDecimalToULong_SPI_1582: function () {
            var x1 = System.Decimal(0), x2 = System.Decimal.lift(null);
            Bridge.Test.NUnit.Assert.areEqual(System.UInt64(0), System.Decimal.toInt(x1, System.Nullable$1(System.UInt64)));
            Bridge.Test.NUnit.Assert.areEqual(System.UInt64([-10,9]), System.Decimal.toInt(System.Nullable.lift2("add", x1, System.Decimal(System.Int64([-10,9]))), System.Nullable$1(System.UInt64)));
            Bridge.Test.NUnit.Assert.areEqual(System.UInt64(0), System.Decimal.toInt(x1, System.UInt64));
            Bridge.Test.NUnit.Assert.areEqual(System.UInt64([-10,9]), System.Decimal.toInt(System.Nullable.lift2("add", x1, System.Decimal(System.Int64([-10,9]))), System.UInt64));
            Bridge.Test.NUnit.Assert.areEqual(null, System.Decimal.toInt(x2, System.Nullable$1(System.UInt64)));
            Bridge.Test.NUnit.Assert.throws$6(System.OverflowException, function () {
                var _ = System.Decimal.toInt(System.Nullable.lift2("sub", x1, System.Decimal(1)), System.Nullable$1(System.UInt64));
            });
            Bridge.Test.NUnit.Assert.throws$6(System.OverflowException, function () {
                var _ = System.Decimal.toInt(System.Nullable.lift2("sub", x1, System.Decimal(1)), System.UInt64);
            });

            // #1582
            Bridge.Test.NUnit.Assert.throws$6(System.InvalidOperationException, function () {
                var _ = System.Decimal.toInt(x2, System.UInt64);
            });
        },
        nullableDecimalToFloat_SPI_1579: function () {
            var x1 = System.Decimal(0), x2 = System.Decimal.lift(null);

            var f1 = null;
            Bridge.ClientTest.Batch4.TestHelper.safe(function () {
                f1 = System.Decimal.toFloat(System.Nullable.lift2("add", x1, System.Decimal(10.5)));
            });
            Bridge.Test.NUnit.Assert.areEqual(10.5, f1);
            // #1579
            // Test restructure to keep assertion count correct (prevent uncaught test exception)
            var f2 = 0;
            Bridge.ClientTest.Batch4.TestHelper.safe(function () {
                f2 = System.Decimal.toFloat(System.Nullable.getValue(System.Nullable.lift2("add", x1, System.Decimal(10.5))));
            });
            Bridge.Test.NUnit.Assert.areEqual(10.5, f2);

            var f3 = null;
            Bridge.ClientTest.Batch4.TestHelper.safe(function () {
                f3 = System.Decimal.toFloat(x2);
            });
            Bridge.Test.NUnit.Assert.areEqual(null, f3);
            Bridge.Test.NUnit.Assert.throws$6(System.InvalidOperationException, function () {
                var _ = System.Decimal.toFloat(System.Nullable.getValue(x2));
            });
        },
        nullableDecimalToDouble_SPI_1579: function () {
            var x1 = System.Decimal(0), x2 = System.Decimal.lift(null);
            Bridge.Test.NUnit.Assert.areEqual(10.5, System.Decimal.toFloat(System.Nullable.lift2("add", x1, System.Decimal(10.5))));

            // #1579
            // Test restructure to keep assertion count correct(prevent uncaught test exception)
            var d1 = 0;
            Bridge.ClientTest.Batch4.TestHelper.safe(function () {
                d1 = System.Decimal.toFloat(System.Nullable.getValue(System.Nullable.lift2("add", x1, System.Decimal(10.5))));
            });
            Bridge.Test.NUnit.Assert.areEqual(10.5, d1);

            var d2 = null;
            Bridge.ClientTest.Batch4.TestHelper.safe(function () {
                d2 = System.Decimal.toFloat(x2);
            });
            Bridge.Test.NUnit.Assert.areEqual(null, d2);
            Bridge.Test.NUnit.Assert.throws$6(System.InvalidOperationException, function () {
                var _ = System.Decimal.toFloat(System.Nullable.getValue(x2));
            });
        },
        operatorsWork_SPI_1583: function () {
            var $t;
            var x = System.Decimal(3);
            this.assertIsDecimalAndEqualTo(x.clone(), 3);
            this.assertIsDecimalAndEqualTo(x.neg(), -3);
            this.assertIsDecimalAndEqualTo(x.add(System.Decimal(4.0)), 7);
            this.assertIsDecimalAndEqualTo(x.sub(System.Decimal(2.0)), 1);
            this.assertIsDecimalAndEqualTo(($t = x, x = x.inc(), $t), 3);
            this.assertIsDecimalAndEqualTo(x, 4);
            this.assertIsDecimalAndEqualTo((x = x.inc()), 5);
            this.assertIsDecimalAndEqualTo(x, 5);
            this.assertIsDecimalAndEqualTo(($t = x, x = x.dec(), $t), 5);
            this.assertIsDecimalAndEqualTo(x, 4);
            this.assertIsDecimalAndEqualTo((x = x.dec()), 3);
            this.assertIsDecimalAndEqualTo(x, 3);
            this.assertIsDecimalAndEqualTo(x.mul(System.Decimal(3.0)), 9);
            this.assertIsDecimalAndEqualTo(x.div(System.Decimal(2.0)), 1.5);

            // #1583
            Bridge.Test.NUnit.Assert.throws$6(System.DivideByZeroException, function () {
                var _ = x.div(System.Decimal(0.0));
            });
            this.assertIsDecimalAndEqualTo(System.Decimal(14.0).mod(x), 2);
            Bridge.Test.NUnit.Assert.throws$6(System.DivideByZeroException, function () {
                var _ = x.mod(System.Decimal(0.0));
            });

            Bridge.Test.NUnit.Assert.true(x.equalsT(System.Decimal(3.0)));
            Bridge.Test.NUnit.Assert.false(x.equalsT(System.Decimal(4.0)));
            Bridge.Test.NUnit.Assert.false(x.ne(System.Decimal(3.0)));
            Bridge.Test.NUnit.Assert.true(x.ne(System.Decimal(4.0)));
            Bridge.Test.NUnit.Assert.true(x.gt(System.Decimal(1.0)));
            Bridge.Test.NUnit.Assert.false(x.gt(System.Decimal(3.0)));
            Bridge.Test.NUnit.Assert.true(x.gte(System.Decimal(3.0)));
            Bridge.Test.NUnit.Assert.false(x.gte(System.Decimal(4.0)));
            Bridge.Test.NUnit.Assert.true(x.lt(System.Decimal(4.0)));
            Bridge.Test.NUnit.Assert.false(x.lt(System.Decimal(3.0)));
            Bridge.Test.NUnit.Assert.true(x.lte(System.Decimal(3.0)));
            Bridge.Test.NUnit.Assert.false(x.lte(System.Decimal(2.0)));
        },
        liftedOperatorsWork_SPI_1583: function () {
            var $t;
            var x1 = System.Decimal(3), x2 = System.Decimal.lift(null);
            this.assertIsDecimalAndEqualTo(System.Nullable.lift1("clone", x1), 3);
            this.assertIsDecimalAndEqualTo(System.Nullable.lift1("neg", x1), -3);
            this.assertIsDecimalAndEqualTo(System.Nullable.lift2("add", x1, System.Decimal(4.0)), 7);
            this.assertIsDecimalAndEqualTo(System.Nullable.lift2("sub", x1, System.Decimal(2.0)), 1);
            this.assertIsDecimalAndEqualTo(Bridge.hasValue(x1) ? ($t = x1, x1 = System.Nullable.lift1('inc', x1), $t) : null, 3);
            this.assertIsDecimalAndEqualTo(x1, 4);
            this.assertIsDecimalAndEqualTo(Bridge.hasValue(x1) ? (x1 = System.Nullable.lift1('inc', x1)) : null, 5);
            this.assertIsDecimalAndEqualTo(x1, 5);
            this.assertIsDecimalAndEqualTo(Bridge.hasValue(x1) ? ($t = x1, x1 = System.Nullable.lift1('dec', x1), $t) : null, 5);
            this.assertIsDecimalAndEqualTo(x1, 4);
            this.assertIsDecimalAndEqualTo(Bridge.hasValue(x1) ? (x1 = System.Nullable.lift1('dec', x1)) : null, 3);
            this.assertIsDecimalAndEqualTo(x1, 3);
            this.assertIsDecimalAndEqualTo(System.Nullable.lift2("mul", x1, System.Decimal(3.0)), 9);
            this.assertIsDecimalAndEqualTo(System.Nullable.lift2("div", x1, System.Decimal(2.0)), 1.5);

            // #1583
            Bridge.Test.NUnit.Assert.throws$6(System.DivideByZeroException, function () {
                var _ = System.Nullable.lift2("div", x1, System.Decimal(0.0));
            });
            this.assertIsDecimalAndEqualTo(System.Nullable.lift2("mod", System.Decimal(14.0), x1), 2);
            Bridge.Test.NUnit.Assert.throws$6(System.DivideByZeroException, function () {
                var _ = System.Nullable.lift2("mod", x1, System.Decimal(0.0));
            });

            Bridge.Test.NUnit.Assert.areEqual(null, System.Nullable.lift1("clone", x2));
            Bridge.Test.NUnit.Assert.areEqual(null, System.Nullable.lift1("neg", x2));
            Bridge.Test.NUnit.Assert.areEqual(null, System.Nullable.lift2("add", x2, System.Decimal(4.0)));
            Bridge.Test.NUnit.Assert.areEqual(null, System.Nullable.lift2("add", System.Decimal(4.0), x2));
            Bridge.Test.NUnit.Assert.areEqual(null, System.Nullable.lift2("sub", x2, System.Decimal(2.0)));
            Bridge.Test.NUnit.Assert.areEqual(null, System.Nullable.lift2("sub", System.Decimal(2.0), x2));
            Bridge.Test.NUnit.Assert.areEqual(null, Bridge.hasValue(x2) ? ($t = x2, x2 = System.Nullable.lift1('inc', x2), $t) : null);
            Bridge.Test.NUnit.Assert.areEqual(null, x2);
            Bridge.Test.NUnit.Assert.areEqual(null, Bridge.hasValue(x2) ? (x2 = System.Nullable.lift1('inc', x2)) : null);
            Bridge.Test.NUnit.Assert.areEqual(null, x2);
            Bridge.Test.NUnit.Assert.areEqual(null, Bridge.hasValue(x2) ? ($t = x2, x2 = System.Nullable.lift1('dec', x2), $t) : null);
            Bridge.Test.NUnit.Assert.areEqual(null, x2);
            Bridge.Test.NUnit.Assert.areEqual(null, Bridge.hasValue(x2) ? (x2 = System.Nullable.lift1('dec', x2)) : null);
            Bridge.Test.NUnit.Assert.areEqual(null, x2);
            Bridge.Test.NUnit.Assert.areEqual(null, System.Nullable.lift2("mul", x2, System.Decimal(3.0)));
            Bridge.Test.NUnit.Assert.areEqual(null, System.Nullable.lift2("mul", System.Decimal(3.0), x2));
            Bridge.Test.NUnit.Assert.areEqual(null, System.Nullable.lift2("div", x2, System.Decimal(2.0)));
            Bridge.Test.NUnit.Assert.areEqual(null, System.Nullable.lift2("div", System.Decimal(2.0), x2));
            Bridge.Test.NUnit.Assert.areEqual(null, System.Nullable.lift2("div", x2, System.Decimal(0.0)));
            Bridge.Test.NUnit.Assert.areEqual(null, System.Nullable.lift2("mod", System.Decimal(14.0), x2));
            Bridge.Test.NUnit.Assert.areEqual(null, System.Nullable.lift2("mod", x2, System.Decimal(14.0)));
            Bridge.Test.NUnit.Assert.areEqual(null, System.Nullable.lift2("mod", x2, System.Decimal(0.0)));

            Bridge.Test.NUnit.Assert.true(System.Nullable.lifteq("equals", x1, System.Decimal(3.0)));
            Bridge.Test.NUnit.Assert.false(System.Nullable.lifteq("equals", x1, System.Decimal(4.0)));
            Bridge.Test.NUnit.Assert.false(System.Nullable.lifteq("equals", x1, System.Decimal.lift(null)));
            Bridge.Test.NUnit.Assert.false(System.Nullable.lifteq("equals", System.Decimal.lift(null), x1));
            Bridge.Test.NUnit.Assert.true(System.Nullable.lifteq("equals", x2, System.Decimal.lift(null)));

            Bridge.Test.NUnit.Assert.false(System.Nullable.liftne("ne", x1, System.Decimal(3.0)));
            Bridge.Test.NUnit.Assert.true(System.Nullable.liftne("ne", x1, System.Decimal(4.0)));
            Bridge.Test.NUnit.Assert.true(System.Nullable.liftne("ne", x1, System.Decimal.lift(null)));
            Bridge.Test.NUnit.Assert.true(System.Nullable.liftne("ne", System.Decimal.lift(null), x1));
            Bridge.Test.NUnit.Assert.false(System.Nullable.liftne("ne", x2, System.Decimal.lift(null)));

            Bridge.Test.NUnit.Assert.true(System.Nullable.liftcmp("gt", x1, System.Decimal(1.0)));
            Bridge.Test.NUnit.Assert.false(System.Nullable.liftcmp("gt", x1, System.Decimal(3.0)));
            Bridge.Test.NUnit.Assert.false(System.Nullable.liftcmp("gt", x1, System.Decimal.lift(null)));
            Bridge.Test.NUnit.Assert.false(System.Nullable.liftcmp("gt", System.Decimal.lift(null), x1));
            Bridge.Test.NUnit.Assert.false(System.Nullable.liftcmp("gt", x2, System.Decimal.lift(null)));

            Bridge.Test.NUnit.Assert.true(System.Nullable.liftcmp("gte", x1, System.Decimal(3.0)));
            Bridge.Test.NUnit.Assert.false(System.Nullable.liftcmp("gte", x1, System.Decimal(4.0)));
            Bridge.Test.NUnit.Assert.false(System.Nullable.liftcmp("gte", x1, System.Decimal.lift(null)));
            Bridge.Test.NUnit.Assert.false(System.Nullable.liftcmp("gte", System.Decimal.lift(null), x1));
            Bridge.Test.NUnit.Assert.false(System.Nullable.liftcmp("gte", x2, System.Decimal.lift(null)));

            Bridge.Test.NUnit.Assert.true(System.Nullable.liftcmp("lt", x1, System.Decimal(4.0)));
            Bridge.Test.NUnit.Assert.false(System.Nullable.liftcmp("lt", x1, System.Decimal(3.0)));
            Bridge.Test.NUnit.Assert.false(System.Nullable.liftcmp("lt", x1, System.Decimal.lift(null)));
            Bridge.Test.NUnit.Assert.false(System.Nullable.liftcmp("lt", System.Decimal.lift(null), x1));
            Bridge.Test.NUnit.Assert.false(System.Nullable.liftcmp("lt", x2, System.Decimal.lift(null)));

            Bridge.Test.NUnit.Assert.true(System.Nullable.liftcmp("lte", x1, System.Decimal(3.0)));
            Bridge.Test.NUnit.Assert.false(System.Nullable.liftcmp("lte", x1, System.Decimal(2.0)));
            Bridge.Test.NUnit.Assert.false(System.Nullable.liftcmp("lte", x1, System.Decimal.lift(null)));
            Bridge.Test.NUnit.Assert.false(System.Nullable.liftcmp("lte", System.Decimal.lift(null), x1));
            Bridge.Test.NUnit.Assert.false(System.Nullable.liftcmp("lte", x2, System.Decimal.lift(null)));
        },
        addWorks: function () {
            this.assertIsDecimalAndEqualTo(System.Decimal(3.0).add(System.Decimal(4.0)), 7);
        },
        ceilingWorks: function () {
            this.assertIsDecimalAndEqualTo(System.Decimal(3.1).ceil(), 4);
            this.assertIsDecimalAndEqualTo(System.Decimal(-3.9).ceil(), -3);
            this.assertIsDecimalAndEqualTo(System.Decimal(3.0).ceil(), 3);
        },
        divideWorks: function () {
            this.assertIsDecimalAndEqualTo(System.Decimal(3.0).div(System.Decimal(4.0)), 0.75);
        },
        floorWorks: function () {
            this.assertIsDecimalAndEqualTo(System.Decimal(3.9).floor(), 3);
            this.assertIsDecimalAndEqualTo(System.Decimal(-3.1).floor(), -4);
            this.assertIsDecimalAndEqualTo(System.Decimal(3.0).floor(), 3);
        },
        remainderWorks: function () {
            this.assertIsDecimalAndEqualTo(System.Decimal(14.0).mod(System.Decimal(3.0)), 2);
        },
        multiplyWorks: function () {
            this.assertIsDecimalAndEqualTo(System.Decimal(3.0).mul(System.Decimal(2.0)), 6);
        },
        negateWorks: function () {
            this.assertIsDecimalAndEqualTo(System.Decimal(0).sub(System.Decimal(3.0)), -3);
        },
        parseWorks_SPI_1586: function () {
            this.assertIsDecimalAndEqualTo(System.Decimal("123"), 123);
            this.assertIsDecimalAndEqualTo(System.Decimal("0.123"), 0.123);
            this.assertIsDecimalAndEqualTo(System.Decimal(".123"), 0.123);
            this.assertIsDecimalAndEqualTo(System.Decimal("123.456"), 123.456);
            this.assertIsDecimalAndEqualTo(System.Decimal("-123.456"), -123.456);

            // #1586
            // Test restructure to keep assertion count correct (prevent uncaught test exception)
            var d1 = System.Decimal(0);
            Bridge.ClientTest.Batch4.TestHelper.safe(function () {
                d1 = System.Decimal("+123.456");
            });
            this.assertIsDecimalAndEqualTo(d1, 123.456);
            var d2 = System.Decimal(0);
            Bridge.ClientTest.Batch4.TestHelper.safe(function () {
                d2 = System.Decimal("  +123.456  ");
            });
            this.assertIsDecimalAndEqualTo(d2, 123.456);

            Bridge.Test.NUnit.Assert.throws$6(System.FormatException, $asm.$.Bridge.ClientTest.Batch4.SimpleTypes.DecimalTests.f1);
            Bridge.Test.NUnit.Assert.throws$6(System.FormatException, $asm.$.Bridge.ClientTest.Batch4.SimpleTypes.DecimalTests.f2);
            Bridge.Test.NUnit.Assert.areEqual(System.Double.format((12.0), 'G'), Bridge.Int.format(System.Decimal("12."), 'G'));
            //Assert.Throws<OverflowException>(() => decimal.Parse("999999999999999999999999999999"));
        },
        tryParseWorks_SPI_1586: function () {
            var d = { };
            var b;
            b = System.Decimal.tryParse("123", null, d);
            Bridge.Test.NUnit.Assert.true(b);
            this.assertIsDecimalAndEqualTo(d.v, 123);

            b = System.Decimal.tryParse("0.123", null, d);
            Bridge.Test.NUnit.Assert.true(b);
            this.assertIsDecimalAndEqualTo(d.v, 0.123);

            b = System.Decimal.tryParse(".123", null, d);
            Bridge.Test.NUnit.Assert.true(b);
            this.assertIsDecimalAndEqualTo(d.v, 0.123);

            b = System.Decimal.tryParse("123.456", null, d);
            Bridge.Test.NUnit.Assert.true(b);
            this.assertIsDecimalAndEqualTo(d.v, 123.456);

            b = System.Decimal.tryParse("-123.456", null, d);
            Bridge.Test.NUnit.Assert.true(b);
            this.assertIsDecimalAndEqualTo(d.v, -123.456);

            // #1586
            b = System.Decimal.tryParse("+123.456", null, d);
            Bridge.Test.NUnit.Assert.true(b);
            this.assertIsDecimalAndEqualTo(d.v, 123.456);

            b = System.Decimal.tryParse("  +123.456  ", null, d);
            Bridge.Test.NUnit.Assert.true(b);
            this.assertIsDecimalAndEqualTo(d.v, 123.456);

            b = System.Decimal.tryParse("A123", null, d);
            Bridge.Test.NUnit.Assert.false(b);
            this.assertIsDecimalAndEqualTo(d.v, 0);

            b = System.Decimal.tryParse("12.34.56", null, d);
            Bridge.Test.NUnit.Assert.false(b);
            this.assertIsDecimalAndEqualTo(d.v, 0);

            b = System.Decimal.tryParse("12.", null, d);
            Bridge.Test.NUnit.Assert.true(b);
            this.assertIsDecimalAndEqualTo(d.v, 12);

            //b = decimal.TryParse("999999999999999999999999999999", out d);
            //Assert.False(b);
            //AssertIsDecimalAndEqualTo(d, 0);
        },
        roundWorks: function () {
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(3.2), 6), 3);
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(4.5), 6), 4);
        },
        roundWithDecimalsWorks: function () {
            this.assertIsDecimalAndEqualTo(System.Decimal.toDecimalPlaces(System.Decimal(3.2209), 2, 6), 3.22);
            this.assertIsDecimalAndEqualTo(System.Decimal.toDecimalPlaces(System.Decimal(0.2209), 2, 6), 0.22);
            this.assertIsDecimalAndEqualTo(System.Decimal.toDecimalPlaces(System.Decimal(3.225), 2, 6), 3.22);
        },
        roundWithMidpointRoundingWorks: function () {
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(4.5), 4), 5);
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(-4.5), 4), -5);
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(4.5), 6), 4);
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(-4.5), 6), -4);
        },
        roundWithDecimalsAndMidpointRoundingWorks: function () {
            this.assertIsDecimalAndEqualTo(System.Decimal.toDecimalPlaces(System.Decimal(4.225), 2, 4), 4.23);
            this.assertIsDecimalAndEqualTo(System.Decimal.toDecimalPlaces(System.Decimal(-4.225), 2, 4), -4.23);
            this.assertIsDecimalAndEqualTo(System.Decimal.toDecimalPlaces(System.Decimal(4.2249), 2, 4), 4.22);
            this.assertIsDecimalAndEqualTo(System.Decimal.toDecimalPlaces(System.Decimal(-4.2249), 2, 4), -4.22);
            this.assertIsDecimalAndEqualTo(System.Decimal.toDecimalPlaces(System.Decimal(4.225), 2, 6), 4.22);
            this.assertIsDecimalAndEqualTo(System.Decimal.toDecimalPlaces(System.Decimal(-4.225), 2, 6), -4.22);
            this.assertIsDecimalAndEqualTo(System.Decimal.toDecimalPlaces(System.Decimal(4.2251), 2, 6), 4.23);
            this.assertIsDecimalAndEqualTo(System.Decimal.toDecimalPlaces(System.Decimal(-4.2251), 2, 6), -4.23);
        },
        truncateWorks: function () {
            this.assertIsDecimalAndEqualTo(System.Decimal(3.9).trunc(), 3);
            this.assertIsDecimalAndEqualTo(System.Decimal(-3.9).trunc(), -3);
            this.assertIsDecimalAndEqualTo(System.Decimal(3.0).trunc(), 3);
        },
        subtractWorks: function () {
            this.assertIsDecimalAndEqualTo(System.Decimal(7.0).sub(System.Decimal(3.0)), 4);
        },
        getHashCodeWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual((System.Decimal(0.0)).getHashCode(), (System.Decimal(0.0)).getHashCode());
            Bridge.Test.NUnit.Assert.areEqual((System.Decimal(1.0)).getHashCode(), (System.Decimal(1.0)).getHashCode());
            Bridge.Test.NUnit.Assert.areNotEqual((System.Decimal(1.0)).getHashCode(), (System.Decimal(0.0)).getHashCode());
            Bridge.Test.NUnit.Assert.areNotEqual((System.Decimal(0.5)).getHashCode(), (System.Decimal(0.0)).getHashCode());
        },
        equalsWorks: function () {
            Bridge.Test.NUnit.Assert.true((System.Decimal(0.0)).equals(System.Decimal(0.0)));
            Bridge.Test.NUnit.Assert.false((System.Decimal(1.0)).equals(System.Decimal(0.0)));
            Bridge.Test.NUnit.Assert.false((System.Decimal(0.0)).equals(System.Decimal(0.5)));
            Bridge.Test.NUnit.Assert.true((System.Decimal(1.0)).equals(System.Decimal(1.0)));
        },
        staticEqualsWorks: function () {
            Bridge.Test.NUnit.Assert.true(System.Decimal(0).equals(System.Decimal(0)));
            Bridge.Test.NUnit.Assert.false(System.Decimal(1).equals(System.Decimal(0)));
            Bridge.Test.NUnit.Assert.false(Bridge.equals(Bridge.box(0, System.Int32), Bridge.box(0.5, System.Double, $box_.System.Double.toString)));
            Bridge.Test.NUnit.Assert.true(System.Decimal(1).equals(System.Decimal(1)));
        },
        iEquatableEqualsWorks: function () {
            Bridge.Test.NUnit.Assert.true((System.Decimal(0.0)).equalsT(System.Decimal(0.0)));
            Bridge.Test.NUnit.Assert.false((System.Decimal(1.0)).equalsT(System.Decimal(0.0)));
            Bridge.Test.NUnit.Assert.false((System.Decimal(0.0)).equalsT(System.Decimal(0.5)));
            Bridge.Test.NUnit.Assert.true((System.Decimal(1.0)).equalsT(System.Decimal(1.0)));

            Bridge.Test.NUnit.Assert.true(Bridge.equalsT(System.Decimal(0.0), System.Decimal(0.0), System.Decimal));
            Bridge.Test.NUnit.Assert.false(Bridge.equalsT(System.Decimal(1.0), System.Decimal(0.0), System.Decimal));
            Bridge.Test.NUnit.Assert.false(Bridge.equalsT(System.Decimal(0.0), System.Decimal(0.5), System.Decimal));
            Bridge.Test.NUnit.Assert.true(Bridge.equalsT(System.Decimal(1.0), System.Decimal(1.0), System.Decimal));
        },
        compareToWorks: function () {
            Bridge.Test.NUnit.Assert.true((System.Decimal(0.0)).compareTo(System.Decimal(0.0)) === 0);
            Bridge.Test.NUnit.Assert.true((System.Decimal(1.0)).compareTo(System.Decimal(0.0)) > 0);
            Bridge.Test.NUnit.Assert.true((System.Decimal(0.0)).compareTo(System.Decimal(0.5)) < 0);
            Bridge.Test.NUnit.Assert.true((System.Decimal(1.0)).compareTo(System.Decimal(1.0)) === 0);
        },
        staticCompareWorks: function () {
            Bridge.Test.NUnit.Assert.true(System.Decimal(0.0).compareTo(System.Decimal(0.0)) === 0);
            Bridge.Test.NUnit.Assert.true(System.Decimal(1.0).compareTo(System.Decimal(0.0)) > 0);
            Bridge.Test.NUnit.Assert.true(System.Decimal(0.0).compareTo(System.Decimal(0.5)) < 0);
            Bridge.Test.NUnit.Assert.true(System.Decimal(1.0).compareTo(System.Decimal(1.0)) === 0);
        },
        iComparableCompareToWorks: function () {
            Bridge.Test.NUnit.Assert.true(Bridge.compare(System.Decimal(0.0), System.Decimal(0.0), false, System.Decimal) === 0);
            Bridge.Test.NUnit.Assert.true(Bridge.compare(System.Decimal(1.0), System.Decimal(0.0), false, System.Decimal) > 0);
            Bridge.Test.NUnit.Assert.true(Bridge.compare(System.Decimal(0.0), System.Decimal(0.5), false, System.Decimal) < 0);
            Bridge.Test.NUnit.Assert.true(Bridge.compare(System.Decimal(1.0), System.Decimal(1.0), false, System.Decimal) === 0);
        },
        implementationTests_SPI_1588_1590_1650: function () {
            // #1590 All the tests below use decimal.ToString() that uses Template Bridge.Int.format({this}, 'G') with significant digits 15 instead of 29

            Bridge.Test.NUnit.Assert.areEqual$1("0", ((System.Decimal(-1)).add(System.Decimal(1))).compareTo(System.Decimal(0)).toString(), "(new Decimal(-1)).add(1).compare(0).ToString() == \"0\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("0", Bridge.Int.format((System.Decimal.toDecimalPlaces(System.Decimal(0), 8, 6)), 'G'), "(Decimal.round(new Decimal(0), 8, Decimal.MidpointRounding.ToEven)).ToString() == \"0\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("8", Bridge.Int.format(((System.Decimal("8")).sub(System.Decimal("0"))), 'G'), "(new Decimal(\"8\").sub(\"0\").ToString() == \"8\" FAILED");
            // #1588
            Bridge.Test.NUnit.Assert.areEqual$1("0", Bridge.Int.format((System.Decimal("-0")), 'G'), "(new Decimal(\"-0\")).ToString() == \"0\" FAILED");

            Bridge.Test.NUnit.Assert.areEqual$1("0", Bridge.Int.format(((System.Decimal("0.3")).sub((System.Decimal("0.1")).mul(System.Decimal(3)))), 'G'), "(new Decimal(\"0.3\")).sub((new Decimal(\"0.1\")).mul(3)).toString() == \"0\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("10000000000000000000000000000", Bridge.Int.format(((System.Decimal("9999999999999999999999999999")).add(System.Decimal("1"))), 'G'), "(new Decimal(\"9999999999999999999999999999\")).add(\"1\").toString() == \"10000000000000000000000000000\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("-10000000000000000000000000000", Bridge.Int.format((((System.Decimal("-9999999999999999999999999999")).sub(System.Decimal("1")))), 'G'), "(new Decimal(\"-9999999999999999999999999999\")).sub(\"1\").toString() == \"-10000000000000000000000000000\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("2", Bridge.Int.format((System.Decimal.toDecimalPlaces(System.Decimal("1.5"), 0, 6)), 'G'), "(Decimal.round(new Decimal(\"1.5\"), 0, Decimal.MidpointRounding.ToEven)).toString() == \"2\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("2", Bridge.Int.format((System.Decimal.toDecimalPlaces(System.Decimal("2.5"), 0, 6)), 'G'), "(Decimal.round(new Decimal(\"2.5\"), 0, Decimal.MidpointRounding.ToEven)).toString() == \"2\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("3", Bridge.Int.format((System.Decimal.toDecimalPlaces(System.Decimal("2.5"), 0, 4)), 'G'), "(Decimal.round(new Decimal(\"2.5\"), 0, Decimal.MidpointRounding.AwayFromZero)).toString() == \"3\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("-3", Bridge.Int.format((System.Decimal.toDecimalPlaces(System.Decimal("-2.5"), 0, 4)), 'G'), "(Decimal.round(new Decimal(\"2.5\"), 0, Decimal.MidpointRounding.AwayFromZero)).toString() == \"-3\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("-2", Bridge.Int.format((System.Decimal.toDecimalPlaces(System.Decimal("-2.5"), 0, 6)), 'G'), "(Decimal.round(new Decimal(\"2.5\"), 0, Decimal.MidpointRounding.ToEven)).toString() == \"-2\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("4", Bridge.Int.format((System.Decimal.toDecimalPlaces(System.Decimal("3.5"), 0, 6)), 'G'), "(Decimal.round(new Decimal(\"3.5\"), 0, Decimal.MidpointRounding.ToEven)).toString() == \"4\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("-4", Bridge.Int.format((System.Decimal.toDecimalPlaces(System.Decimal("-3.5"), 0, 6)), 'G'), "(Decimal.round(new Decimal(\"-3.5\"), 0, Decimal.MidpointRounding.ToEven)).toString() == \"-4\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("0.000000000000000000000000002", Bridge.Int.format((System.Decimal.toDecimalPlaces(System.Decimal("0.0000000000000000000000000015"), 27, 6)), 'G'), "(Decimal.round(new Decimal(\"0.0000000000000000000000000015\"), 27, Decimal.MidpointRounding.ToEven)).toString() == \"0.000000000000000000000000002\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("0.000000000000000000002", Bridge.Int.format((System.Decimal.toDecimalPlaces(System.Decimal("0.0000000000000000000015"), 21, 6)), 'G'), "(Decimal.round(new Decimal(\"0.0000000000000000000015\"), 21, Decimal.MidpointRounding.ToEven)).toString() == \"0.000000000000000000002\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("4176.1574388808460777044", Bridge.Int.format(((System.Decimal("4176.15752861656")).sub(System.Decimal("0.0000897357139222956"))), 'G'), "(new Decimal(\"4176.15752861656\")).sub(\"0.0000897357139222956\").toString() == \"4176.1574388808460777044\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("0.0000000000000000000000893034", Bridge.Int.format(((System.Decimal("0.00000008487069606076")).div(System.Decimal("950363559159620"))), 'G'), "(new Decimal(\"0.00000008487069606076\")).div(\"950363559159620\").toString() == \"0.0000000000000000000000893034\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("0.0446138050763932217", Bridge.Int.format(((System.Decimal("0.0000360056907106217")).add(System.Decimal("0.0445777993856826"))), 'G'), "(new Decimal(\"0.0000360056907106217\")).add(\"0.0445777993856826\").toString() == \"0.0446138050763932217\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("0.3811764806776453983061876207", Bridge.Int.format(((System.Decimal("264385997906.507")).div(System.Decimal("693605223062.264"))), 'G'), "(new Decimal(\"264385997906.507\")).div(\"693605223062.264\").toString() == \"0.3811764806776453983061876207\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("59.80408060158849245782", Bridge.Int.format(((System.Decimal("0.00000000734869245782")).add(System.Decimal("59.8040805942398"))), 'G'), "(new Decimal(\"0.00000000734869245782\")).add(\"59.8040805942398\").toString() == \"59.80408060158849245782\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("81663498.972849838663929672", Bridge.Int.format(((System.Decimal("81663498.9723859")).add(System.Decimal("0.000463938663929672"))), 'G'), "(new Decimal(\"81663498.9723859\")).add(\"0.000463938663929672\").toString() == \"81663498.972849838663929672\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("0.00775515796977892822", Bridge.Int.format(((System.Decimal("0.00775515796977801")).add(System.Decimal("0.00000000000000091822"))), 'G'), "(new Decimal(\"0.00775515796977801\")).add(\"0.00000000000000091822\").toString() == \"0.00775515796977892822\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("2.1064457175212998398851037786", Bridge.Int.format(((System.Decimal("0.00000016207366118304")).div(System.Decimal("0.00000007694176965251"))), 'G'), "(new Decimal(\"0.00000016207366118304\")).div(\"0.00000007694176965251\").toString() == \"2.1064457175212998398851037786\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("0.0000000000002340974167914459", Bridge.Int.format(((System.Decimal("0.00000008179731703447")).div(System.Decimal("349415.71827485"))), 'G'), "(new Decimal(\"0.00000008179731703447\")).div(\"349415.71827485\").toString() == \"0.0000000000002340974167914459\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("0.0002294787101020031897957214", Bridge.Int.format(((System.Decimal("0.0059732997352133")).div(System.Decimal("26.029864524505"))), 'G'), "(new Decimal(\"0.0059732997352133\")).div(\"26.029864524505\").toString() == \"0.0002294787101020031897957214\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("418.23899073391138947972", Bridge.Int.format(((System.Decimal("0.00000006466138947972")).add(System.Decimal("418.23899066925"))), 'G'), "(new Decimal(\"0.00000006466138947972\")).add(\"418.23899066925\").toString() == \"418.23899073391138947972\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("0.0131911163190212695095445568", Bridge.Int.format(((System.Decimal("0.00000034492730644761")).mul(System.Decimal("38243.1778303549"))), 'G'), "(new Decimal(\"0.00000034492730644761\")).mul(\"38243.1778303549\").toString() == \"0.0131911163190212695095445568\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("9114466.43914248870254245", Bridge.Int.format(((System.Decimal("9114466.44883345")).sub(System.Decimal("0.00969096129745755"))), 'G'), "(new Decimal(\"9114466.44883345\")).sub(\"0.00969096129745755\").toString() == \"9114466.43914248870254245\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("0.1084411276877017282935587367", Bridge.Int.format(((System.Decimal("86700.1936243382")).div(System.Decimal("799513.943400008"))), 'G'), "(new Decimal(\"86700.1936243382\")).div(\"799513.943400008\").toString() == \"0.1084411276877017282935587367\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("7026.76928435766970903", Bridge.Int.format(((System.Decimal("7026.76950349788")).sub(System.Decimal("0.00021914021029097"))), 'G'), "(new Decimal(\"7026.76950349788\")).sub(\"0.00021914021029097\").toString() == \"7026.76928435766970903\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("0.096260924858888151563666271", Bridge.Int.format(((System.Decimal("0.00000857409563314826")).div(System.Decimal("0.0000890714030196291"))), 'G'), "(new Decimal(\"0.00000857409563314826\")).div(\"0.0000890714030196291\").toString() == \"0.096260924858888151563666271\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("0.0008115914662837657985794708", Bridge.Int.format(((System.Decimal("514.340747387307")).div(System.Decimal("633743.414950438"))), 'G'), "(new Decimal(\"514.340747387307\")).div(\"633743.414950438\").toString() == \"0.0008115914662837657985794708\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("3705.2205420798556425449221712", Bridge.Int.format(((System.Decimal("36636.1514835787")).div(System.Decimal("9.88771142432825"))), 'G'), "(new Decimal(\"36636.1514835787\")).div(\"9.88771142432825\").toString() == \"3705.2205420798556425449221712\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("6218044.0995191186755705386", Bridge.Int.format(((System.Decimal("0.0000196286755705386")).add(System.Decimal("6218044.09949949"))), 'G'), "(new Decimal(\"0.0000196286755705386\")).add(\"6218044.09949949\").toString() == \"6218044.0995191186755705386\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("5425486298351.5378945951530291", Bridge.Int.format(((System.Decimal("9271557.35402906")).mul(System.Decimal("585175.293770235"))), 'G'), "(new Decimal(\"9271557.35402906\")).mul(\"585175.293770235\").toString() == \"5425486298351.5378945951530291\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("0.2685349089827301535187896581", Bridge.Int.format(((System.Decimal("0.00000630784588228345")).mul(System.Decimal("42571.5710234696"))), 'G'), "(new Decimal(\"0.00000630784588228345\")).mul(\"42571.5710234696\").toString() == \"0.2685349089827301535187896581\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("0.008990286561656895507628185", Bridge.Int.format(((System.Decimal("79.3662822709262")).div(System.Decimal("8828.00361552648"))), 'G'), "(new Decimal(\"79.3662822709262\")).div(\"8828.00361552648\").toString() == \"0.008990286561656895507628185\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("0.0000016331518727729320183918", Bridge.Int.format(((System.Decimal("0.000195716225633266")).mul(System.Decimal("0.00834448890217789"))), 'G'), "(new Decimal(\"0.000195716225633266\")).mul(\"0.00834448890217789\").toString() == \"0.0000016331518727729320183918\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("2.7085135033764363901309324465", Bridge.Int.format(((System.Decimal("1806435.33906268")).div(System.Decimal("666947.141600282"))), 'G'), "(new Decimal(\"1806435.33906268\")).div(\"666947.141600282\").toString() == \"2.7085135033764363901309324465\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("0.0000000000252033112738355342", Bridge.Int.format(((System.Decimal("0.00000000625330349722")).div(System.Decimal("248.114362008923"))), 'G'), "(new Decimal(\"0.00000000625330349722\")).div(\"248.114362008923\").toString() == \"0.0000000000252033112738355342\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("201.42054334961017180748893008", Bridge.Int.format(((System.Decimal("8526.34712985081")).mul(System.Decimal("0.0236233102267717"))), 'G'), "(new Decimal(\"8526.34712985081\")).mul(\"0.0236233102267717\").toString() == \"201.42054334961017180748893008\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("10.754236522481885", Bridge.Int.format(((System.Decimal("0.859148376090055")).add(System.Decimal("9.89508814639183"))), 'G'), "(new Decimal(\"0.859148376090055\")).add(\"9.89508814639183\").toString() == \"10.754236522481885\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("0.0000000000264204888310194008", Bridge.Int.format(((System.Decimal("0.0000334460014633117")).mul(System.Decimal("0.00000078994461744556"))), 'G'), "(new Decimal(\"0.0000334460014633117\")).mul(\"0.00000078994461744556\").toString() == \"0.0000000000264204888310194008\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("0.0000000001107996313797422688", Bridge.Int.format(((System.Decimal("0.00000007144519755218")).mul(System.Decimal("0.00155083385834044"))), 'G'), "(new Decimal(\"0.00000007144519755218\")).mul(\"0.00155083385834044\").toString() == \"0.0000000001107996313797422688\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("25826.170172550776692", Bridge.Int.format(((System.Decimal("0.911257319576692")).add(System.Decimal("25825.2589152312"))), 'G'), "(new Decimal(\"0.911257319576692\")).add(\"25825.2589152312\").toString() == \"25826.170172550776692\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("0.5746307910946065180997849971", Bridge.Int.format(((System.Decimal("0.00000942942031166955")).mul(System.Decimal("60940.2033318487"))), 'G'), "(new Decimal(\"0.00000942942031166955\")).mul(\"60940.2033318487\").toString() == \"0.5746307910946065180997849971\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("-7131030.08640726074029256", Bridge.Int.format(((System.Decimal("0.00613527925970744")).sub(System.Decimal("7131030.09254254"))), 'G'), "(new Decimal(\"0.00613527925970744\")).sub(\"7131030.09254254\").toString() == \"-7131030.08640726074029256\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("135954446978.90433258950744003", Bridge.Int.format(((System.Decimal("19833.5587139398")).mul(System.Decimal("6854768.17044186"))), 'G'), "(new Decimal(\"19833.5587139398\")).mul(\"6854768.17044186\").toString() == \"135954446978.90433258950744003\" FAILED");
            // #1650
            Bridge.Test.NUnit.Assert.areEqual$1("0.0000000000000184016013412280", Bridge.Int.format(((System.Decimal("0.00000070385779892274")).mul(System.Decimal("0.00000002614391908336"))), 'G'), "(new Decimal(\"0.00000070385779892274\")).mul(\"0.00000002614391908336\").toString() == \"0.0000000000000184016013412280\" FAILED");

            Bridge.Test.NUnit.Assert.areEqual$1("0.0967324902802857563", Bridge.Int.format(((System.Decimal("0.0966366946681574")).add(System.Decimal("0.0000957956121283563"))), 'G'), "(new Decimal(\"0.0966366946681574\")).add(\"0.0000957956121283563\").toString() == \"0.0967324902802857563\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("3.4858202900689973161525454314", Bridge.Int.format(((System.Decimal("0.0000390598294507059")).mul(System.Decimal("89243.1006251104"))), 'G'), "(new Decimal(\"0.0000390598294507059\")).mul(\"89243.1006251104\").toString() == \"3.4858202900689973161525454314\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("0.2996117010710819", Bridge.Int.format(((System.Decimal("0.343008653886155")).sub(System.Decimal("0.0433969528150731"))), 'G'), "(new Decimal(\"0.343008653886155\")).sub(\"0.0433969528150731\").toString() == \"0.2996117010710819\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("1019564526579.2600710122794931", Bridge.Int.format(((System.Decimal("675939.590519266")).mul(System.Decimal("1508366.34054238"))), 'G'), "(new Decimal(\"675939.590519266\")).mul(\"1508366.34054238\").toString() == \"1019564526579.2600710122794931\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("11701304382166.336357593545003", Bridge.Int.format(((System.Decimal("9346774.15031324")).div(System.Decimal("0.00000079878053292575"))), 'G'), "(new Decimal(\"9346774.15031324\")).div(\"0.00000079878053292575\").toString() == \"11701304382166.336357593545003\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("18.8587275649694", Bridge.Int.format(((System.Decimal("0.8043270324377")).add(System.Decimal("18.0544005325317"))), 'G'), "(new Decimal(\"0.8043270324377\")).add(\"18.0544005325317\").toString() == \"18.8587275649694\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("0.3614881075703330391274611142", Bridge.Int.format(((System.Decimal("8283.88977715927")).div(System.Decimal("22916.0782987792"))), 'G'), "(new Decimal(\"8283.88977715927\")).div(\"22916.0782987792\").toString() == \"0.3614881075703330391274611142\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("0.0179138243756634479624427415", Bridge.Int.format(((System.Decimal("0.0000051464565215383")).mul(System.Decimal("3480.80748388581"))), 'G'), "(new Decimal(\"0.0000051464565215383\")).mul(\"3480.80748388581\").toString() == \"0.0179138243756634479624427415\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("3141.0458269720196", Bridge.Int.format(((System.Decimal("3232.22058975707")).sub(System.Decimal("91.1747627850504"))), 'G'), "(new Decimal(\"3232.22058975707\")).sub(\"91.1747627850504\").toString() == \"3141.0458269720196\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("0.049293336888446162", Bridge.Int.format(((System.Decimal("0.0490677212593461")).add(System.Decimal("0.000225615629100062"))), 'G'), "(new Decimal(\"0.0490677212593461\")).add(\"0.000225615629100062\").toString() == \"0.049293336888446162\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("0.0000002423683290519788850175", Bridge.Int.format(((System.Decimal("0.802657312156007")).mul(System.Decimal("0.00000030195741742009"))), 'G'), "(new Decimal(\"0.802657312156007\")).mul(\"0.00000030195741742009\").toString() == \"0.0000002423683290519788850175\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("0.2919303207154997", Bridge.Int.format(((System.Decimal("0.205025212003396")).add(System.Decimal("0.0869051087121037"))), 'G'), "(new Decimal(\"0.205025212003396\")).add(\"0.0869051087121037\").toString() == \"0.2919303207154997\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("-2406054.4941042150782588707", Bridge.Int.format(((System.Decimal("0.0000560349217411293")).sub(System.Decimal("2406054.49416025"))), 'G'), "(new Decimal(\"0.0000560349217411293\")).sub(\"2406054.49416025\").toString() == \"-2406054.4941042150782588707\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("-5980723.48834614900984", Bridge.Int.format(((System.Decimal("5.51880703099016")).sub(System.Decimal("5980729.00715318"))), 'G'), "(new Decimal(\"5.51880703099016\")).sub(\"5980729.00715318\").toString() == \"-5980723.48834614900984\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("35.122946130589056903", Bridge.Int.format(((System.Decimal("0.000517838589156903")).add(System.Decimal("35.1224282919999"))), 'G'), "(new Decimal(\"0.000517838589156903\")).add(\"35.1224282919999\").toString() == \"35.122946130589056903\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("1.0616395296301390956592254412", Bridge.Int.format(((System.Decimal("1.59909562747883")).div(System.Decimal("1.50625102292106"))), 'G'), "(new Decimal(\"1.59909562747883\")).div(\"1.50625102292106\").toString() == \"1.0616395296301390956592254412\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("0.000000042829703949835811464", Bridge.Int.format(((System.Decimal("0.0037773409643105")).div(System.Decimal("88194.4215335857"))), 'G'), "(new Decimal(\"0.0037773409643105\")).div(\"88194.4215335857\").toString() == \"0.000000042829703949835811464\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("0.4558196858208716574150445539", Bridge.Int.format(((System.Decimal("0.0000338279696804602")).mul(System.Decimal("13474.6391854597"))), 'G'), "(new Decimal(\"0.0000338279696804602\")).mul(\"13474.6391854597\").toString() == \"0.4558196858208716574150445539\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("10427310854.650511570542647536", Bridge.Int.format(((System.Decimal("929163.589109277")).div(System.Decimal("0.0000891086495896376"))), 'G'), "(new Decimal(\"929163.589109277\")).div(\"0.0000891086495896376\").toString() == \"10427310854.650511570542647536\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("0.00007532895142320958", Bridge.Int.format(((System.Decimal("0.0000743901701990469")).add(System.Decimal("0.00000093878122416268"))), 'G'), "(new Decimal(\"0.0000743901701990469\")).add(\"0.00000093878122416268\").toString() == \"0.00007532895142320958\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("0.0264909276176229880949718672", Bridge.Int.format(((System.Decimal("0.00000944754593514258")).mul(System.Decimal("2804.00093309768"))), 'G'), "(new Decimal(\"0.00000944754593514258\")).mul(\"2804.00093309768\").toString() == \"0.0264909276176229880949718672\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("6656977.0298766358644049502", Bridge.Int.format(((System.Decimal("0.0000534158644049502")).add(System.Decimal("6656977.02982322"))), 'G'), "(new Decimal(\"0.0000534158644049502\")).add(\"6656977.02982322\").toString() == \"6656977.0298766358644049502\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("45.06192539196946555197", Bridge.Int.format(((System.Decimal("45.0619251211462")).add(System.Decimal("0.00000027082326555197"))), 'G'), "(new Decimal(\"45.0619251211462\")).add(\"0.00000027082326555197\").toString() == \"45.06192539196946555197\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("0.7532491528292065411818236803", Bridge.Int.format(((System.Decimal("0.0192431670703195")).mul(System.Decimal("39.1437204736954"))), 'G'), "(new Decimal(\"0.0192431670703195\")).mul(\"39.1437204736954\").toString() == \"0.7532491528292065411818236803\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("32841.42265702106787944802", Bridge.Int.format(((System.Decimal("32841.4226569428")).add(System.Decimal("0.00000007826787944802"))), 'G'), "(new Decimal(\"32841.4226569428\")).add(\"0.00000007826787944802\").toString() == \"32841.42265702106787944802\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("-0.533546652893328", Bridge.Int.format(((System.Decimal("0.586064839077212")).sub(System.Decimal("1.11961149197054"))), 'G'), "(new Decimal(\"0.586064839077212\")).sub(\"1.11961149197054\").toString() == \"-0.533546652893328\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("0.0152641533045431917355310935", Bridge.Int.format(((System.Decimal("0.0829612452457479")).div(System.Decimal("5.43503747574754"))), 'G'), "(new Decimal(\"0.0829612452457479\")).div(\"5.43503747574754\").toString() == \"0.0152641533045431917355310935\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("2.07943625828976430743030201", Bridge.Int.format(((System.Decimal("20551.2384514097")).mul(System.Decimal("0.0001011830145033"))), 'G'), "(new Decimal(\"20551.2384514097\")).mul(\"0.0001011830145033\").toString() == \"2.07943625828976430743030201\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("0.00200242491956568541", Bridge.Int.format(((System.Decimal("0.00000000928487284541")).add(System.Decimal("0.00200241563469284"))), 'G'), "(new Decimal(\"0.00000000928487284541\")).add(\"0.00200241563469284\").toString() == \"0.00200242491956568541\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("27474.82141819801736601648", Bridge.Int.format(((System.Decimal("27474.8214182792")).sub(System.Decimal("0.00000008118263398352"))), 'G'), "(new Decimal(\"27474.8214182792\")).sub(\"0.00000008118263398352\").toString() == \"27474.82141819801736601648\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("19505128.063929281919635586038", Bridge.Int.format(((System.Decimal("6414.16630540703")).mul(System.Decimal("3040.9451727946"))), 'G'), "(new Decimal(\"6414.16630540703\")).mul(\"3040.9451727946\").toString() == \"19505128.063929281919635586038\" FAILED");
            // #1650
            Bridge.Test.NUnit.Assert.areEqual$1("0.0000000000000211764764198660", Bridge.Int.format(((System.Decimal("0.00000000801082840562")).mul(System.Decimal("0.00000264348146628751"))), 'G'), "(new Decimal(\"0.00000000801082840562\")).mul(\"0.00000264348146628751\").toString() == \"0.0000000000000211764764198660\" FAILED");

            Bridge.Test.NUnit.Assert.areEqual$1("29310.7074822921281587436", Bridge.Int.format(((System.Decimal("29310.7074821883")).add(System.Decimal("0.0000001038281587436"))), 'G'), "(new Decimal(\"29310.7074821883\")).add(\"0.0000001038281587436\").toString() == \"29310.7074822921281587436\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("617351.64866589589161", Bridge.Int.format(((System.Decimal("1.61116872989161")).add(System.Decimal("617350.037497166"))), 'G'), "(new Decimal(\"1.61116872989161\")).add(\"617350.037497166\").toString() == \"617351.64866589589161\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("337233.524335051926147", Bridge.Int.format(((System.Decimal("337234.288611093")).sub(System.Decimal("0.764276041073853"))), 'G'), "(new Decimal(\"337234.288611093\")).sub(\"0.764276041073853\").toString() == \"337233.524335051926147\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("7.6904022918582991385960050287", Bridge.Int.format(((System.Decimal("32138.4941377391")).div(System.Decimal("4179.03939456634"))), 'G'), "(new Decimal(\"32138.4941377391\")).div(\"4179.03939456634\").toString() == \"7.6904022918582991385960050287\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("0.0047544230501718142812280295", Bridge.Int.format(((System.Decimal("0.00000007299932379881")).mul(System.Decimal("65129.6861773029"))), 'G'), "(new Decimal(\"0.00000007299932379881\")).mul(\"65129.6861773029\").toString() == \"0.0047544230501718142812280295\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("177.17069194538229090005225569", Bridge.Int.format(((System.Decimal("61.8418688242519")).mul(System.Decimal("2.86489873792273"))), 'G'), "(new Decimal(\"61.8418688242519\")).mul(\"2.86489873792273\").toString() == \"177.17069194538229090005225569\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("-0.00090633373724312275", Bridge.Int.format(((System.Decimal("0.00000015291550483225")).sub(System.Decimal("0.000906486652747955"))), 'G'), "(new Decimal(\"0.00000015291550483225\")).sub(\"0.000906486652747955\").toString() == \"-0.00090633373724312275\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("210814147.39980929140353613261", Bridge.Int.format(((System.Decimal("201009.576768153")).div(System.Decimal("0.0009534918754145"))), 'G'), "(new Decimal(\"201009.576768153\")).div(\"0.0009534918754145\").toString() == \"210814147.39980929140353613261\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("65.305649646129420352210897086", Bridge.Int.format(((System.Decimal("61261.8303211694")).div(System.Decimal("938.078568288162"))), 'G'), "(new Decimal(\"61261.8303211694\")).div(\"938.078568288162\").toString() == \"65.305649646129420352210897086\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("0.0000567043665774743633592246", Bridge.Int.format(((System.Decimal("0.000743901346690907")).mul(System.Decimal("0.0762256538850375"))), 'G'), "(new Decimal(\"0.000743901346690907\")).mul(\"0.0762256538850375\").toString() == \"0.0000567043665774743633592246\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("-0.05230421037247136292", Bridge.Int.format(((System.Decimal("0.00000023104058123708")).sub(System.Decimal("0.0523044414130526"))), 'G'), "(new Decimal(\"0.00000023104058123708\")).sub(\"0.0523044414130526\").toString() == \"-0.05230421037247136292\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("0.00017292070654543156", Bridge.Int.format(((System.Decimal("0.000172902369020927")).add(System.Decimal("0.00000001833752450456"))), 'G'), "(new Decimal(\"0.000172902369020927\")).add(\"0.00000001833752450456\").toString() == \"0.00017292070654543156\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("143190227.86340201590179660913", Bridge.Int.format(((System.Decimal("3255426.24725747")).mul(System.Decimal("43.9850934985956"))), 'G'), "(new Decimal(\"3255426.24725747\")).mul(\"43.9850934985956\").toString() == \"143190227.86340201590179660913\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("0.1676963823218234630227555937", Bridge.Int.format(((System.Decimal("21.2078276654742")).mul(System.Decimal("0.00790728710960005"))), 'G'), "(new Decimal(\"21.2078276654742\")).mul(\"0.00790728710960005\").toString() == \"0.1676963823218234630227555937\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("60489172470134.035656681147318", Bridge.Int.format(((System.Decimal("4188316.9832585")).div(System.Decimal("0.00000006924077173194"))), 'G'), "(new Decimal(\"4188316.9832585\")).div(\"0.00000006924077173194\").toString() == \"60489172470134.035656681147318\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("0.0000000000318298804579463009", Bridge.Int.format(((System.Decimal("0.00000895273411132057")).mul(System.Decimal("0.00000355532511768645"))), 'G'), "(new Decimal(\"0.00000895273411132057\")).mul(\"0.00000355532511768645\").toString() == \"0.0000000000318298804579463009\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("0.0000089928800565775915465556", Bridge.Int.format(((System.Decimal("0.00000007554147973449")).div(System.Decimal("0.00840014314204461"))), 'G'), "(new Decimal(\"0.00000007554147973449\")).div(\"0.00840014314204461\").toString() == \"0.0000089928800565775915465556\" FAILED");
            // #1650
            Bridge.Test.NUnit.Assert.areEqual$1("0.8703972221908718709658421930", Bridge.Int.format(((System.Decimal("1970.18939162148")).mul(System.Decimal("0.000441783528980698"))), 'G'), "(new Decimal(\"1970.18939162148\")).mul(\"0.000441783528980698\").toString() == \"0.8703972221908718709658421930\" FAILED");

            Bridge.Test.NUnit.Assert.areEqual$1("0.0004450282480720230655413695", Bridge.Int.format(((System.Decimal("85093.5901911434")).mul(System.Decimal("0.00000000522986804379"))), 'G'), "(new Decimal(\"85093.5901911434\")).mul(\"0.00000000522986804379\").toString() == \"0.0004450282480720230655413695\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("0.0000029398859004321386304627", Bridge.Int.format(((System.Decimal("0.00000063867933891652")).div(System.Decimal("0.21724630157335"))), 'G'), "(new Decimal(\"0.00000063867933891652\")).div(\"0.21724630157335\").toString() == \"0.0000029398859004321386304627\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("27880476326.169787243758340455", Bridge.Int.format(((System.Decimal("1174.96172020909")).div(System.Decimal("0.00000004214281371894"))), 'G'), "(new Decimal(\"1174.96172020909\")).div(\"0.00000004214281371894\").toString() == \"27880476326.169787243758340455\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("3.943883571766263181", Bridge.Int.format(((System.Decimal("0.000293723326313181")).add(System.Decimal("3.94358984843995"))), 'G'), "(new Decimal(\"0.000293723326313181\")).add(\"3.94358984843995\").toString() == \"3.943883571766263181\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("0.0600993529068002334144135817", Bridge.Int.format(((System.Decimal("8807.4719481205")).mul(System.Decimal("0.00000682367803846657"))), 'G'), "(new Decimal(\"8807.4719481205\")).mul(\"0.00000682367803846657\").toString() == \"0.0600993529068002334144135817\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("0.0000000000431097888386651556", Bridge.Int.format(((System.Decimal("0.00000003024844593846")).div(System.Decimal("701.660730737103"))), 'G'), "(new Decimal(\"0.00000003024844593846\")).div(\"701.660730737103\").toString() == \"0.0000000000431097888386651556\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("399060.217697562714717", Bridge.Int.format(((System.Decimal("399059.695377508")).add(System.Decimal("0.522320054714717"))), 'G'), "(new Decimal(\"399059.695377508\")).add(\"0.522320054714717\").toString() == \"399060.217697562714717\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("0.0012047312567642078041930781", Bridge.Int.format(((System.Decimal("0.0000555624811237503")).div(System.Decimal("0.0461202287329921"))), 'G'), "(new Decimal(\"0.0000555624811237503\")).div(\"0.0461202287329921\").toString() == \"0.0012047312567642078041930781\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("0.00079532968335544253", Bridge.Int.format(((System.Decimal("0.000795415484716844")).sub(System.Decimal("0.00000008580136140147"))), 'G'), "(new Decimal(\"0.000795415484716844\")).sub(\"0.00000008580136140147\").toString() == \"0.00079532968335544253\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("0.0000000000000031232274783683", Bridge.Int.format(((System.Decimal("0.0000000384458527148")).mul(System.Decimal("0.00000008123704529425"))), 'G'), "(new Decimal(\"0.0000000384458527148\")).mul(\"0.00000008123704529425\").toString() == \"0.0000000000000031232274783683\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("7.09650010408205501", Bridge.Int.format(((System.Decimal("7.10522364224551")).sub(System.Decimal("0.00872353816345499"))), 'G'), "(new Decimal(\"7.10522364224551\")).sub(\"0.00872353816345499\").toString() == \"7.09650010408205501\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("0.0007994485260663810953884227", Bridge.Int.format(((System.Decimal("0.00000104549135595816")).mul(System.Decimal("764.66297067919"))), 'G'), "(new Decimal(\"0.00000104549135595816\")).mul(\"764.66297067919\").toString() == \"0.0007994485260663810953884227\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("0.00005958359417346475", Bridge.Int.format(((System.Decimal("0.00005906747824469")).add(System.Decimal("0.00000051611592877475"))), 'G'), "(new Decimal(\"0.00005906747824469\")).add(\"0.00000051611592877475\").toString() == \"0.00005958359417346475\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("22.984133602578256", Bridge.Int.format(((System.Decimal("23.9156692400182")).sub(System.Decimal("0.931535637439944"))), 'G'), "(new Decimal(\"23.9156692400182\")).sub(\"0.931535637439944\").toString() == \"22.984133602578256\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("9044.376757482239651", Bridge.Int.format(((System.Decimal("0.847812742389651")).add(System.Decimal("9043.52894473985"))), 'G'), "(new Decimal(\"0.847812742389651\")).add(\"9043.52894473985\").toString() == \"9044.376757482239651\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("6.0742324680822732941708751327", Bridge.Int.format(((System.Decimal("0.00575696487713464")).div(System.Decimal("0.000947768283052262"))), 'G'), "(new Decimal(\"0.00575696487713464\")).div(\"0.000947768283052262\").toString() == \"6.0742324680822732941708751327\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("6530598.5049727231538", Bridge.Int.format(((System.Decimal("1.5620848031538")).add(System.Decimal("6530596.94288792"))), 'G'), "(new Decimal(\"1.5620848031538\")).add(\"6530596.94288792\").toString() == \"6530598.5049727231538\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("0.83028435898026679", Bridge.Int.format(((System.Decimal("0.828937773047452")).add(System.Decimal("0.00134658593281479"))), 'G'), "(new Decimal(\"0.828937773047452\")).add(\"0.00134658593281479\").toString() == \"0.83028435898026679\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("325484.521350383343706", Bridge.Int.format(((System.Decimal("0.376231768343706")).add(System.Decimal("325484.145118615"))), 'G'), "(new Decimal(\"0.376231768343706\")).add(\"325484.145118615\").toString() == \"325484.521350383343706\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("0.0000000000777304608453940168", Bridge.Int.format(((System.Decimal("0.00000590405144537988")).div(System.Decimal("75955.4411638321"))), 'G'), "(new Decimal(\"0.00000590405144537988\")).div(\"75955.4411638321\").toString() == \"0.0000000000777304608453940168\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("12434660348.106831437568180728", Bridge.Int.format(((System.Decimal("3653.47703623282")).mul(System.Decimal("3403514.0291804"))), 'G'), "(new Decimal(\"3653.47703623282\")).mul(\"3403514.0291804\").toString() == \"12434660348.106831437568180728\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("-9833.95711193194680614", Bridge.Int.format(((System.Decimal("0.00173078235319386")).sub(System.Decimal("9833.9588427143"))), 'G'), "(new Decimal(\"0.00173078235319386\")).sub(\"9833.9588427143\").toString() == \"-9833.95711193194680614\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("0.0015484436906515457496509768", Bridge.Int.format(((System.Decimal("0.00744602976247949")).div(System.Decimal("4.80871846191991"))), 'G'), "(new Decimal(\"0.00744602976247949\")).div(\"4.80871846191991\").toString() == \"0.0015484436906515457496509768\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("-0.00052546074370409361", Bridge.Int.format(((System.Decimal("0.00000004717649661339")).sub(System.Decimal("0.000525507920200707"))), 'G'), "(new Decimal(\"0.00000004717649661339\")).sub(\"0.000525507920200707\").toString() == \"-0.00052546074370409361\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("0.00714578542212060626", Bridge.Int.format(((System.Decimal("0.00714523922984732")).add(System.Decimal("0.00000054619227328626"))), 'G'), "(new Decimal(\"0.00714523922984732\")).add(\"0.00000054619227328626\").toString() == \"0.00714578542212060626\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("11896454.256511241955105336836", Bridge.Int.format(((System.Decimal("0.597390746975965")).div(System.Decimal("0.00000005021586550875"))), 'G'), "(new Decimal(\"0.597390746975965\")).div(\"0.00000005021586550875\").toString() == \"11896454.256511241955105336836\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("364.437275047617911", Bridge.Int.format(((System.Decimal("363.565448840878")).add(System.Decimal("0.871826206739911"))), 'G'), "(new Decimal(\"363.565448840878\")).add(\"0.871826206739911\").toString() == \"364.437275047617911\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("0.0000147725045250754551933182", Bridge.Int.format(((System.Decimal("0.932537071375426")).div(System.Decimal("63126.5382110731"))), 'G'), "(new Decimal(\"0.932537071375426\")).div(\"63126.5382110731\").toString() == \"0.0000147725045250754551933182\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("0.4315077590098242678457705989", Bridge.Int.format(((System.Decimal("0.000505016916666653")).mul(System.Decimal("854.442187517156"))), 'G'), "(new Decimal(\"0.000505016916666653\")).mul(\"854.442187517156\").toString() == \"0.4315077590098242678457705989\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("412.7330880174277915666407937", Bridge.Int.format(((System.Decimal("0.00000767397499069291")).div(System.Decimal("0.00000001859306950057"))), 'G'), "(new Decimal(\"0.00000767397499069291\")).div(\"0.00000001859306950057\").toString() == \"412.7330880174277915666407937\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("4.8954788657062800977983135139", Bridge.Int.format(((System.Decimal("48.1948680468811")).div(System.Decimal("9.84477093436046"))), 'G'), "(new Decimal(\"48.1948680468811\")).div(\"9.84477093436046\").toString() == \"4.8954788657062800977983135139\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("0.0064424440545718793484521534", Bridge.Int.format(((System.Decimal("35741.8810649504")).div(System.Decimal("5547876.0486226"))), 'G'), "(new Decimal(\"35741.8810649504\")).div(\"5547876.0486226\").toString() == \"0.0064424440545718793484521534\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("-7840059.26355683558168130721", Bridge.Int.format(((System.Decimal("0.00000038441831869279")).sub(System.Decimal("7840059.26355722"))), 'G'), "(new Decimal(\"0.00000038441831869279\")).sub(\"7840059.26355722\").toString() == \"-7840059.26355683558168130721\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("0.0000010412673718308481481839", Bridge.Int.format(((System.Decimal("0.58575165205903")).mul(System.Decimal("0.00000177766015370267"))), 'G'), "(new Decimal(\"0.58575165205903\")).mul(\"0.00000177766015370267\").toString() == \"0.0000010412673718308481481839\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("0.0231355645607838738592882811", Bridge.Int.format(((System.Decimal("0.257475164838822")).mul(System.Decimal("0.0898555189789532"))), 'G'), "(new Decimal(\"0.257475164838822\")).mul(\"0.0898555189789532\").toString() == \"0.0231355645607838738592882811\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("0.89438686678278632674", Bridge.Int.format(((System.Decimal("0.894392650525269")).sub(System.Decimal("0.00000578374248267326"))), 'G'), "(new Decimal(\"0.894392650525269\")).sub(\"0.00000578374248267326\").toString() == \"0.89438686678278632674\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("337199.86960434358937474129803", Bridge.Int.format(((System.Decimal("0.866065117468156")).mul(System.Decimal("389347.016527013"))), 'G'), "(new Decimal(\"0.866065117468156\")).mul(\"389347.016527013\").toString() == \"337199.86960434358937474129803\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("6945.02700940949904670415", Bridge.Int.format(((System.Decimal("6945.02700909275")).add(System.Decimal("0.00000031674904670415"))), 'G'), "(new Decimal(\"6945.02700909275\")).add(\"0.00000031674904670415\").toString() == \"6945.02700940949904670415\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("-0.6270357829644514", Bridge.Int.format(((System.Decimal("0.0701352525829036")).sub(System.Decimal("0.697171035547355"))), 'G'), "(new Decimal(\"0.0701352525829036\")).sub(\"0.697171035547355\").toString() == \"-0.6270357829644514\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("4701135155925.6905911960346018", Bridge.Int.format(((System.Decimal("4111897.07187558")).div(System.Decimal("0.00000087466046720495"))), 'G'), "(new Decimal(\"4111897.07187558\")).div(\"0.00000087466046720495\").toString() == \"4701135155925.6905911960346018\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("1.2422351601221653564432762392", Bridge.Int.format(((System.Decimal("586.657266871378")).div(System.Decimal("472.25942857203"))), 'G'), "(new Decimal(\"586.657266871378\")).div(\"472.25942857203\").toString() == \"1.2422351601221653564432762392\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("110083.27919112734183960167159", Bridge.Int.format(((System.Decimal("5794135.34411887")).div(System.Decimal("52.6341092552217"))), 'G'), "(new Decimal(\"5794135.34411887\")).div(\"52.6341092552217\").toString() == \"110083.27919112734183960167159\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("2702544.8136089281527176927398", Bridge.Int.format(((System.Decimal("0.836109915671921")).div(System.Decimal("0.00000030937874238444"))), 'G'), "(new Decimal(\"0.836109915671921\")).div(\"0.00000030937874238444\").toString() == \"2702544.8136089281527176927398\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("9.5559085980678392684631700448", Bridge.Int.format(((System.Decimal("0.00855813363034191")).div(System.Decimal("0.000895585547152714"))), 'G'), "(new Decimal(\"0.00855813363034191\")).div(\"0.000895585547152714\").toString() == \"9.5559085980678392684631700448\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("0.00800141297577573362", Bridge.Int.format(((System.Decimal("0.00800136662460927")).add(System.Decimal("0.00000004635116646362"))), 'G'), "(new Decimal(\"0.00800136662460927\")).add(\"0.00000004635116646362\").toString() == \"0.00800141297577573362\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("0.00000763849065389414", Bridge.Int.format(((System.Decimal("0.00000759593656174649")).add(System.Decimal("0.00000004255409214765"))), 'G'), "(new Decimal(\"0.00000759593656174649\")).add(\"0.00000004255409214765\").toString() == \"0.00000763849065389414\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("8586.7522222217789298276464381", Bridge.Int.format(((System.Decimal("92.2359921001997")).mul(System.Decimal("93.0954611828064"))), 'G'), "(new Decimal(\"92.2359921001997\")).mul(\"93.0954611828064\").toString() == \"8586.7522222217789298276464381\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("0.9931136155639471788378564663", Bridge.Int.format(((System.Decimal("1609.99809932429")).mul(System.Decimal("0.000616841483217125"))), 'G'), "(new Decimal(\"1609.99809932429\")).mul(\"0.000616841483217125\").toString() == \"0.9931136155639471788378564663\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("4.8983950361677169391106759502", Bridge.Int.format(((System.Decimal("7466.33106724654")).mul(System.Decimal("0.000656064537193656"))), 'G'), "(new Decimal(\"7466.33106724654\")).mul(\"0.000656064537193656\").toString() == \"4.8983950361677169391106759502\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("0.0940287920654541467547713549", Bridge.Int.format(((System.Decimal("5.9157444098572")).div(System.Decimal("62.9141806452135"))), 'G'), "(new Decimal(\"5.9157444098572\")).div(\"62.9141806452135\").toString() == \"0.0940287920654541467547713549\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("0.0000081194917301801093808069", Bridge.Int.format(((System.Decimal("0.00000000478547779135")).div(System.Decimal("0.00058938144780201"))), 'G'), "(new Decimal(\"0.00000000478547779135\")).div(\"0.00058938144780201\").toString() == \"0.0000081194917301801093808069\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("0.0000000237129540524444766519", Bridge.Int.format(((System.Decimal("0.242301107962756")).mul(System.Decimal("0.00000009786564432916"))), 'G'), "(new Decimal(\"0.242301107962756\")).mul(\"0.00000009786564432916\").toString() == \"0.0000000237129540524444766519\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("1985896464.0383833019058040956", Bridge.Int.format(((System.Decimal("414250.732126763")).mul(System.Decimal("4793.94798855947"))), 'G'), "(new Decimal(\"414250.732126763\")).mul(\"4793.94798855947\").toString() == \"1985896464.0383833019058040956\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("3.2317284500242951973203537433", Bridge.Int.format(((System.Decimal("2102650.26060056")).div(System.Decimal("650627.146777989"))), 'G'), "(new Decimal(\"2102650.26060056\")).div(\"650627.146777989\").toString() == \"3.2317284500242951973203537433\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("105.92536134455608", Bridge.Int.format(((System.Decimal("111.791148368172")).sub(System.Decimal("5.86578702361592"))), 'G'), "(new Decimal(\"111.791148368172\")).sub(\"5.86578702361592\").toString() == \"105.92536134455608\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("0.8746476497299917849874735069", Bridge.Int.format(((System.Decimal("1.16457231397022")).mul(System.Decimal("0.751046233228895"))), 'G'), "(new Decimal(\"1.16457231397022\")).mul(\"0.751046233228895\").toString() == \"0.8746476497299917849874735069\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("-8083400.16197386453424333806", Bridge.Int.format(((System.Decimal("0.00000185546575666194")).sub(System.Decimal("8083400.16197572"))), 'G'), "(new Decimal(\"0.00000185546575666194\")).sub(\"8083400.16197572\").toString() == \"-8083400.16197386453424333806\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("1498.0600060982110689932047605", Bridge.Int.format(((System.Decimal("90.5140531205172")).div(System.Decimal("0.0604208461290323"))), 'G'), "(new Decimal(\"90.5140531205172\")).div(\"0.0604208461290323\").toString() == \"1498.0600060982110689932047605\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("0.0408729994202976123433973094", Bridge.Int.format(((System.Decimal("0.00000006767841650531")).mul(System.Decimal("603929.606081885"))), 'G'), "(new Decimal(\"0.00000006767841650531\")).mul(\"603929.606081885\").toString() == \"0.0408729994202976123433973094\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("0.00008319630302265116", Bridge.Int.format(((System.Decimal("0.000082278563073966")).add(System.Decimal("0.00000091773994868516"))), 'G'), "(new Decimal(\"0.000082278563073966\")).add(\"0.00000091773994868516\").toString() == \"0.00008319630302265116\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("5.499829306499955", Bridge.Int.format(((System.Decimal("6.2219416937893")).sub(System.Decimal("0.722112387289345"))), 'G'), "(new Decimal(\"6.2219416937893\")).sub(\"0.722112387289345\").toString() == \"5.499829306499955\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("367.786135251658876272", Bridge.Int.format(((System.Decimal("367.786185987194")).sub(System.Decimal("0.000050735535123728"))), 'G'), "(new Decimal(\"367.786185987194\")).sub(\"0.000050735535123728\").toString() == \"367.786135251658876272\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("10.312338090882360499767870669", Bridge.Int.format(((System.Decimal("517330.180628845")).div(System.Decimal("50166.1384711816"))), 'G'), "(new Decimal(\"517330.180628845\")).div(\"50166.1384711816\").toString() == \"10.312338090882360499767870669\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("0.0000050661264951214749723215", Bridge.Int.format(((System.Decimal("0.243327718807071")).div(System.Decimal("48030.3283073149"))), 'G'), "(new Decimal(\"0.243327718807071\")).div(\"48030.3283073149\").toString() == \"0.0000050661264951214749723215\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("-0.00002335923605396378", Bridge.Int.format(((System.Decimal("0.00000005842985946612")).sub(System.Decimal("0.0000234176659134299"))), 'G'), "(new Decimal(\"0.00000005842985946612\")).sub(\"0.0000234176659134299\").toString() == \"-0.00002335923605396378\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("733335461.13670180722389446974", Bridge.Int.format(((System.Decimal("1060005.08231111")).mul(System.Decimal("691.822589697234"))), 'G'), "(new Decimal(\"1060005.08231111\")).mul(\"691.822589697234\").toString() == \"733335461.13670180722389446974\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("508358.93909651945980882198688", Bridge.Int.format(((System.Decimal("7.63294460141703")).mul(System.Decimal("66600.6326054226"))), 'G'), "(new Decimal(\"7.63294460141703\")).mul(\"66600.6326054226\").toString() == \"508358.93909651945980882198688\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("1830847.8153588342112017535059", Bridge.Int.format(((System.Decimal("60437.9311485393")).mul(System.Decimal("30.2930259286859"))), 'G'), "(new Decimal(\"60437.9311485393\")).mul(\"30.2930259286859\").toString() == \"1830847.8153588342112017535059\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("0.0000000000810736550010910727", Bridge.Int.format(((System.Decimal("0.0000225892997917669")).div(System.Decimal("278626.883066551"))), 'G'), "(new Decimal(\"0.0000225892997917669\")).div(\"278626.883066551\").toString() == \"0.0000000000810736550010910727\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("77.65643053701936456364", Bridge.Int.format(((System.Decimal("0.00000007573536456364")).add(System.Decimal("77.656430461284"))), 'G'), "(new Decimal(\"0.00000007573536456364\")).add(\"77.656430461284\").toString() == \"77.65643053701936456364\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("0.0248440823395338596229713692", Bridge.Int.format(((System.Decimal("0.293818466502157")).mul(System.Decimal("0.0845558913818355"))), 'G'), "(new Decimal(\"0.293818466502157\")).mul(\"0.0845558913818355\").toString() == \"0.0248440823395338596229713692\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("0.00492439746169578524", Bridge.Int.format(((System.Decimal("0.00000572612989960524")).add(System.Decimal("0.00491867133179618"))), 'G'), "(new Decimal(\"0.00000572612989960524\")).add(\"0.00491867133179618\").toString() == \"0.00492439746169578524\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("13138076.691468148650986791474", Bridge.Int.format(((System.Decimal("3923274.88117073")).mul(System.Decimal("3.34875253185106"))), 'G'), "(new Decimal(\"3923274.88117073\")).mul(\"3.34875253185106\").toString() == \"13138076.691468148650986791474\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("0.0008676636364626068", Bridge.Int.format(((System.Decimal("0.000932349686013698")).sub(System.Decimal("0.0000646860495510912"))), 'G'), "(new Decimal(\"0.000932349686013698\")).sub(\"0.0000646860495510912\").toString() == \"0.0008676636364626068\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("41516.8349721547454", Bridge.Int.format(((System.Decimal("41601.7347674825")).sub(System.Decimal("84.8997953277546"))), 'G'), "(new Decimal(\"41601.7347674825\")).sub(\"84.8997953277546\").toString() == \"41516.8349721547454\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("0.33506006843864413748", Bridge.Int.format(((System.Decimal("0.00000371631919113748")).add(System.Decimal("0.335056352119453"))), 'G'), "(new Decimal(\"0.00000371631919113748\")).add(\"0.335056352119453\").toString() == \"0.33506006843864413748\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("216355.8589961767217502328842", Bridge.Int.format(((System.Decimal("873.952093941137")).div(System.Decimal("0.00403941958399463"))), 'G'), "(new Decimal(\"873.952093941137\")).div(\"0.00403941958399463\").toString() == \"216355.8589961767217502328842\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("45.974464247116189804566774409", Bridge.Int.format(((System.Decimal("278186.309746553")).mul(System.Decimal("0.000165265013540753"))), 'G'), "(new Decimal(\"278186.309746553\")).mul(\"0.000165265013540753\").toString() == \"45.974464247116189804566774409\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("411.8834926940230607258", Bridge.Int.format(((System.Decimal("411.883402341922")).add(System.Decimal("0.0000903521010607258"))), 'G'), "(new Decimal(\"411.883402341922\")).add(\"0.0000903521010607258\").toString() == \"411.8834926940230607258\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("2010677.7183839557954851115873", Bridge.Int.format(((System.Decimal("0.280687715057604")).mul(System.Decimal("7163397.64984483"))), 'G'), "(new Decimal(\"0.280687715057604\")).mul(\"7163397.64984483\").toString() == \"2010677.7183839557954851115873\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("0.0268467935821811160643869611", Bridge.Int.format(((System.Decimal("484.96830299728")).mul(System.Decimal("0.0000553578314629187"))), 'G'), "(new Decimal(\"484.96830299728\")).mul(\"0.0000553578314629187\").toString() == \"0.0268467935821811160643869611\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("0.0916931643365465232681665674", Bridge.Int.format(((System.Decimal("0.00000004376192267228")).div(System.Decimal("0.00000047726483199618"))), 'G'), "(new Decimal(\"0.00000004376192267228\")).div(\"0.00000047726483199618\").toString() == \"0.0916931643365465232681665674\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("0.0206632160994641183202944665", Bridge.Int.format(((System.Decimal("0.00000039209536760677")).div(System.Decimal("0.000018975524706289"))), 'G'), "(new Decimal(\"0.00000039209536760677\")).div(\"0.000018975524706289\").toString() == \"0.0206632160994641183202944665\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("5657.8995636199841461392843417", Bridge.Int.format(((System.Decimal("6198172.99591292")).mul(System.Decimal("0.000912833437748641"))), 'G'), "(new Decimal(\"6198172.99591292\")).mul(\"0.000912833437748641\").toString() == \"5657.8995636199841461392843417\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("36474.31596809736535", Bridge.Int.format(((System.Decimal("7.05634104416535")).add(System.Decimal("36467.2596270532"))), 'G'), "(new Decimal(\"7.05634104416535\")).add(\"36467.2596270532\").toString() == \"36474.31596809736535\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("0.4258812461246507845677082109", Bridge.Int.format(((System.Decimal("698.142959595725")).mul(System.Decimal("0.000610020111599015"))), 'G'), "(new Decimal(\"698.142959595725\")).mul(\"0.000610020111599015\").toString() == \"0.4258812461246507845677082109\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("-3682769.2669420779522", Bridge.Int.format(((System.Decimal("88.0442409720478")).sub(System.Decimal("3682857.31118305"))), 'G'), "(new Decimal(\"88.0442409720478\")).sub(\"3682857.31118305\").toString() == \"-3682769.2669420779522\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("-8049831.4965358431074197046", Bridge.Int.format(((System.Decimal("0.0000389968925802954")).sub(System.Decimal("8049831.49657484"))), 'G'), "(new Decimal(\"0.0000389968925802954\")).sub(\"8049831.49657484\").toString() == \"-8049831.4965358431074197046\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("36155.62014127020986184166", Bridge.Int.format(((System.Decimal("0.00000024290986184166")).add(System.Decimal("36155.6201410273"))), 'G'), "(new Decimal(\"0.00000024290986184166\")).add(\"36155.6201410273\").toString() == \"36155.62014127020986184166\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("3294378.802389452177", Bridge.Int.format(((System.Decimal("3294319.65169232")).add(System.Decimal("59.150697132177"))), 'G'), "(new Decimal(\"3294319.65169232\")).add(\"59.150697132177\").toString() == \"3294378.802389452177\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("126628888131.45293056779587565", Bridge.Int.format(((System.Decimal("29296.0378012136")).mul(System.Decimal("4322389.56648968"))), 'G'), "(new Decimal(\"29296.0378012136\")).mul(\"4322389.56648968\").toString() == \"126628888131.45293056779587565\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("15.17547972741327", Bridge.Int.format(((System.Decimal("7.7507224575387")).add(System.Decimal("7.42475726987457"))), 'G'), "(new Decimal(\"7.7507224575387\")).add(\"7.42475726987457\").toString() == \"15.17547972741327\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("0.7623358443707398129", Bridge.Int.format(((System.Decimal("0.762320778221973")).add(System.Decimal("0.0000150661487668129"))), 'G'), "(new Decimal(\"0.762320778221973\")).add(\"0.0000150661487668129\").toString() == \"0.7623358443707398129\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("-30306.453181107727", Bridge.Int.format(((System.Decimal("745.766049132573")).sub(System.Decimal("31052.2192302403"))), 'G'), "(new Decimal(\"745.766049132573\")).sub(\"31052.2192302403\").toString() == \"-30306.453181107727\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("43450065.810652162786851680039", Bridge.Int.format(((System.Decimal("4.03395124898942")).div(System.Decimal("0.0000000928410849035"))), 'G'), "(new Decimal(\"4.03395124898942\")).div(\"0.0000000928410849035\").toString() == \"43450065.810652162786851680039\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("89.719799308907125", Bridge.Int.format(((System.Decimal("89.2452192442702")).add(System.Decimal("0.474580064636925"))), 'G'), "(new Decimal(\"89.2452192442702\")).add(\"0.474580064636925\").toString() == \"89.719799308907125\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("7616096.4244623971027726383725", Bridge.Int.format(((System.Decimal("0.754648202450317")).div(System.Decimal("0.00000009908595695118"))), 'G'), "(new Decimal(\"0.754648202450317\")).div(\"0.00000009908595695118\").toString() == \"7616096.4244623971027726383725\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("0.0001721507228208858110900319", Bridge.Int.format(((System.Decimal("0.00000000703358706414")).div(System.Decimal("0.0000408571451161323"))), 'G'), "(new Decimal(\"0.00000000703358706414\")).div(\"0.0000408571451161323\").toString() == \"0.0001721507228208858110900319\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("0.0000000000022714462393900636", Bridge.Int.format(((System.Decimal("0.00000008484566439169")).mul(System.Decimal("0.0000267715063070746"))), 'G'), "(new Decimal(\"0.00000008484566439169\")).mul(\"0.0000267715063070746\").toString() == \"0.0000000000022714462393900636\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("95740315594.555877584430293733", Bridge.Int.format(((System.Decimal("753944.105819773")).div(System.Decimal("0.0000078748863646178"))), 'G'), "(new Decimal(\"753944.105819773\")).div(\"0.0000078748863646178\").toString() == \"95740315594.555877584430293733\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("6.4069192960141739237", Bridge.Int.format(((System.Decimal("6.40685234982839")).add(System.Decimal("0.0000669461857839237"))), 'G'), "(new Decimal(\"6.40685234982839\")).add(\"0.0000669461857839237\").toString() == \"6.4069192960141739237\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("2.7730492038105317936901033936", Bridge.Int.format(((System.Decimal("7091326.72152078")).mul(System.Decimal("0.00000039104801015512"))), 'G'), "(new Decimal(\"7091326.72152078\")).mul(\"0.00000039104801015512\").toString() == \"2.7730492038105317936901033936\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("39.225255132451082330972995533", Bridge.Int.format(((System.Decimal("0.0150400641909987")).mul(System.Decimal("2608.05104514959"))), 'G'), "(new Decimal(\"0.0150400641909987\")).mul(\"2608.05104514959\").toString() == \"39.225255132451082330972995533\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("2.48947713311905352214", Bridge.Int.format(((System.Decimal("2.48947596293384")).add(System.Decimal("0.00000117018521352214"))), 'G'), "(new Decimal(\"2.48947596293384\")).add(\"0.00000117018521352214\").toString() == \"2.48947713311905352214\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("880946682.13701250534829592747", Bridge.Int.format(((System.Decimal("720.791596789282")).div(System.Decimal("0.00000081820115950806"))), 'G'), "(new Decimal(\"720.791596789282\")).div(\"0.00000081820115950806\").toString() == \"880946682.13701250534829592747\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("267.25912423523108411359660085", Bridge.Int.format(((System.Decimal("378388.367769489")).mul(System.Decimal("0.000706309038543286"))), 'G'), "(new Decimal(\"378388.367769489\")).mul(\"0.000706309038543286\").toString() == \"267.25912423523108411359660085\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("-32046.841084978907", Bridge.Int.format(((System.Decimal("978.517128610293")).sub(System.Decimal("33025.3582135892"))), 'G'), "(new Decimal(\"978.517128610293\")).sub(\"33025.3582135892\").toString() == \"-32046.841084978907\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("0.00139737929887948", Bridge.Int.format(((System.Decimal("0.00217247345120296")).sub(System.Decimal("0.00077509415232348"))), 'G'), "(new Decimal(\"0.00217247345120296\")).sub(\"0.00077509415232348\").toString() == \"0.00139737929887948\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("0.0000000000046530416190453426", Bridge.Int.format(((System.Decimal("0.000136329152219151")).mul(System.Decimal("0.0000000341309363647"))), 'G'), "(new Decimal(\"0.000136329152219151\")).mul(\"0.0000000341309363647\").toString() == \"0.0000000000046530416190453426\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("-4850951.788916537256405138", Bridge.Int.format(((System.Decimal("0.000426702743594862")).sub(System.Decimal("4850951.78934324"))), 'G'), "(new Decimal(\"0.000426702743594862\")).sub(\"4850951.78934324\").toString() == \"-4850951.788916537256405138\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("3607.9677572355331381655390708", Bridge.Int.format(((System.Decimal("219.782070359114")).div(System.Decimal("0.0609157523423972"))), 'G'), "(new Decimal(\"219.782070359114\")).div(\"0.0609157523423972\").toString() == \"3607.9677572355331381655390708\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("-59578.20478480686224", Bridge.Int.format(((System.Decimal("9.13404255133776")).sub(System.Decimal("59587.3388273582"))), 'G'), "(new Decimal(\"9.13404255133776\")).sub(\"59587.3388273582\").toString() == \"-59578.20478480686224\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("7579.1908166668147017746539623", Bridge.Int.format(((System.Decimal("0.000786728870489974")).div(System.Decimal("0.00000010380116948104"))), 'G'), "(new Decimal(\"0.000786728870489974\")).div(\"0.00000010380116948104\").toString() == \"7579.1908166668147017746539623\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("-4.1981967099609962025", Bridge.Int.format(((System.Decimal("0.0000004602920037975")).sub(System.Decimal("4.198197170253"))), 'G'), "(new Decimal(\"0.0000004602920037975\")).sub(\"4.198197170253\").toString() == \"-4.1981967099609962025\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("0.00008656549534796066", Bridge.Int.format(((System.Decimal("0.0000866447461706795")).sub(System.Decimal("0.00000007925082271884"))), 'G'), "(new Decimal(\"0.0000866447461706795\")).sub(\"0.00000007925082271884\").toString() == \"0.00008656549534796066\" FAILED");
            // #1650
            Bridge.Test.NUnit.Assert.areEqual$1("0.0002938065361778543390344760", Bridge.Int.format(((System.Decimal("0.00000388761161541921")).mul(System.Decimal("75.5750741695869"))), 'G'), "(new Decimal(\"0.00000388761161541921\")).mul(\"75.5750741695869\").toString() == \"0.0002938065361778543390344760\" FAILED");

            Bridge.Test.NUnit.Assert.areEqual$1("0.07021769672083374498", Bridge.Int.format(((System.Decimal("0.0702169635660094")).add(System.Decimal("0.00000073315482434498"))), 'G'), "(new Decimal(\"0.0702169635660094\")).add(\"0.00000073315482434498\").toString() == \"0.07021769672083374498\" FAILED");
            // #1650
            Bridge.Test.NUnit.Assert.areEqual$1("248795975759.24153521774922170", Bridge.Int.format(((System.Decimal("274391.580035161")).mul(System.Decimal("906718.696424141"))), 'G'), "(new Decimal(\"274391.580035161\")).mul(\"906718.696424141\").toString() == \"248795975759.24153521774922170\" FAILED");

            Bridge.Test.NUnit.Assert.areEqual$1("0.0000063518043668020539957365", Bridge.Int.format(((System.Decimal("0.00000067736893644434")).mul(System.Decimal("9.37717102904672"))), 'G'), "(new Decimal(\"0.00000067736893644434\")).mul(\"9.37717102904672\").toString() == \"0.0000063518043668020539957365\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("-25.24833340239167136", Bridge.Int.format(((System.Decimal("0.00810707191382864")).sub(System.Decimal("25.2564404743055"))), 'G'), "(new Decimal(\"0.00810707191382864\")).sub(\"25.2564404743055\").toString() == \"-25.24833340239167136\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("366652481671.12116866091032792", Bridge.Int.format(((System.Decimal("337218.588375123")).div(System.Decimal("0.0000009197226399182"))), 'G'), "(new Decimal(\"337218.588375123\")).div(\"0.0000009197226399182\").toString() == \"366652481671.12116866091032792\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("0.00097101861317670853", Bridge.Int.format(((System.Decimal("0.000970961897620448")).add(System.Decimal("0.00000005671555626053"))), 'G'), "(new Decimal(\"0.000970961897620448\")).add(\"0.00000005671555626053\").toString() == \"0.00097101861317670853\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("7179480897.0413794612790482633", Bridge.Int.format(((System.Decimal("756541.015466927")).mul(System.Decimal("9489.8766230279"))), 'G'), "(new Decimal(\"756541.015466927\")).mul(\"9489.8766230279\").toString() == \"7179480897.0413794612790482633\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("-3633.6398901126231489135", Bridge.Int.format(((System.Decimal("0.0000264943868510865")).sub(System.Decimal("3633.63991660701"))), 'G'), "(new Decimal(\"0.0000264943868510865\")).sub(\"3633.63991660701\").toString() == \"-3633.6398901126231489135\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("-492238.57879213989935796", Bridge.Int.format(((System.Decimal("0.00587727810064204")).sub(System.Decimal("492238.584669418"))), 'G'), "(new Decimal(\"0.00587727810064204\")).sub(\"492238.584669418\").toString() == \"-492238.57879213989935796\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("7.9661666768610785486", Bridge.Int.format(((System.Decimal("7.96619214954143")).sub(System.Decimal("0.0000254726803514514"))), 'G'), "(new Decimal(\"7.96619214954143\")).sub(\"0.0000254726803514514\").toString() == \"7.9661666768610785486\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("1.1127217455466662896347686896", Bridge.Int.format(((System.Decimal("346273.425196425")).div(System.Decimal("311194.983455909"))), 'G'), "(new Decimal(\"346273.425196425\")).div(\"311194.983455909\").toString() == \"1.1127217455466662896347686896\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("4.8468358384313691963755308986", Bridge.Int.format(((System.Decimal("85.1793199242928")).div(System.Decimal("17.5742118701219"))), 'G'), "(new Decimal(\"85.1793199242928\")).div(\"17.5742118701219\").toString() == \"4.8468358384313691963755308986\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("0.121457026045982637", Bridge.Int.format(((System.Decimal("0.121196779478899")).add(System.Decimal("0.000260246567083637"))), 'G'), "(new Decimal(\"0.121196779478899\")).add(\"0.000260246567083637\").toString() == \"0.121457026045982637\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("-30759.91316974471503713", Bridge.Int.format(((System.Decimal("0.00907333258496287")).sub(System.Decimal("30759.9222430773"))), 'G'), "(new Decimal(\"0.00907333258496287\")).sub(\"30759.9222430773\").toString() == \"-30759.91316974471503713\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("906.6246250772131248336", Bridge.Int.format(((System.Decimal("906.624596988142")).add(System.Decimal("0.0000280890711248336"))), 'G'), "(new Decimal(\"906.624596988142\")).add(\"0.0000280890711248336\").toString() == \"906.6246250772131248336\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("279112366.91872199097653690363", Bridge.Int.format(((System.Decimal("5976325.60691625")).mul(System.Decimal("46.7030053710113"))), 'G'), "(new Decimal(\"5976325.60691625\")).mul(\"46.7030053710113\").toString() == \"279112366.91872199097653690363\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("3487.68489765640454528", Bridge.Int.format(((System.Decimal("3487.68775513754")).sub(System.Decimal("0.00285748113545472"))), 'G'), "(new Decimal(\"3487.68775513754\")).sub(\"0.00285748113545472\").toString() == \"3487.68489765640454528\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("0.0000003104791009850215294554", Bridge.Int.format(((System.Decimal("0.000475329228898198")).div(System.Decimal("1530.95402360473"))), 'G'), "(new Decimal(\"0.000475329228898198\")).div(\"1530.95402360473\").toString() == \"0.0000003104791009850215294554\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("843.49677454265676470597", Bridge.Int.format(((System.Decimal("843.496774716068")).sub(System.Decimal("0.00000017341123529403"))), 'G'), "(new Decimal(\"843.496774716068\")).sub(\"0.00000017341123529403\").toString() == \"843.49677454265676470597\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("27.32456344093503007762349601", Bridge.Int.format(((System.Decimal("0.00197717379870693")).mul(System.Decimal("13820.010895757"))), 'G'), "(new Decimal(\"0.00197717379870693\")).mul(\"13820.010895757\").toString() == \"27.32456344093503007762349601\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("0.0000000133398085305956484381", Bridge.Int.format(((System.Decimal("0.000708901179353195")).div(System.Decimal("53141.7806880277"))), 'G'), "(new Decimal(\"0.000708901179353195\")).div(\"53141.7806880277\").toString() == \"0.0000000133398085305956484381\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("63225.9975649597083791267", Bridge.Int.format(((System.Decimal("63225.9976413222")).sub(System.Decimal("0.0000763624916208733"))), 'G'), "(new Decimal(\"63225.9976413222\")).sub(\"0.0000763624916208733\").toString() == \"63225.9975649597083791267\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("90165.355585698323663902", Bridge.Int.format(((System.Decimal("90165.3561229656")).sub(System.Decimal("0.000537267276336098"))), 'G'), "(new Decimal(\"90165.3561229656\")).sub(\"0.000537267276336098\").toString() == \"90165.355585698323663902\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("0.0000000004084178640305073762", Bridge.Int.format(((System.Decimal("0.0000351506077382484")).div(System.Decimal("86065.3042728385"))), 'G'), "(new Decimal(\"0.0000351506077382484\")).div(\"86065.3042728385\").toString() == \"0.0000000004084178640305073762\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("6.36616576073451628351", Bridge.Int.format(((System.Decimal("6.36616601905141")).sub(System.Decimal("0.00000025831689371649"))), 'G'), "(new Decimal(\"6.36616601905141\")).sub(\"0.00000025831689371649\").toString() == \"6.36616576073451628351\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("950819.51903543659609543293061", Bridge.Int.format(((System.Decimal("0.0188125421380683")).div(System.Decimal("0.00000001978560784822"))), 'G'), "(new Decimal(\"0.0188125421380683\")).div(\"0.00000001978560784822\").toString() == \"950819.51903543659609543293061\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("0.0001281218872841341670208902", Bridge.Int.format(((System.Decimal("0.0000201579493098696")).mul(System.Decimal("6.35589887218359"))), 'G'), "(new Decimal(\"0.0000201579493098696\")).mul(\"6.35589887218359\").toString() == \"0.0001281218872841341670208902\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("100501.68372248376", Bridge.Int.format(((System.Decimal("96670.6671736532")).add(System.Decimal("3831.01654883056"))), 'G'), "(new Decimal(\"96670.6671736532\")).add(\"3831.01654883056\").toString() == \"100501.68372248376\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("0.007565086812628940345573773", Bridge.Int.format(((System.Decimal("6377.50250118668")).div(System.Decimal("843017.755003189"))), 'G'), "(new Decimal(\"6377.50250118668\")).div(\"843017.755003189\").toString() == \"0.007565086812628940345573773\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("8.6365193165306442105296800123", Bridge.Int.format(((System.Decimal("0.00984376350876119")).mul(System.Decimal("877.359488456212"))), 'G'), "(new Decimal(\"0.00984376350876119\")).mul(\"877.359488456212\").toString() == \"8.6365193165306442105296800123\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("3395749.5740729445309136648368", Bridge.Int.format(((System.Decimal("9.97239828574117")).div(System.Decimal("0.00000293672959922661"))), 'G'), "(new Decimal(\"9.97239828574117\")).div(\"0.00000293672959922661\").toString() == \"3395749.5740729445309136648368\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("0.0000503282881253889121331449", Bridge.Int.format(((System.Decimal("0.00000005182576428718")).mul(System.Decimal("971.10556530352"))), 'G'), "(new Decimal(\"0.00000005182576428718\")).mul(\"971.10556530352\").toString() == \"0.0000503282881253889121331449\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("1755687.77683918075262034347", Bridge.Int.format(((System.Decimal("1755687.77683922")).sub(System.Decimal("0.00000003924737965653"))), 'G'), "(new Decimal(\"1755687.77683922\")).sub(\"0.00000003924737965653\").toString() == \"1755687.77683918075262034347\" FAILED");
            // #1650
            Bridge.Test.NUnit.Assert.areEqual$1("0.0000000667441803526521607590", Bridge.Int.format(((System.Decimal("0.0000688309593912358")).mul(System.Decimal("0.000969682551906296"))), 'G'), "(new Decimal(\"0.0000688309593912358\")).mul(\"0.000969682551906296\").toString() == \"0.0000000667441803526521607590\" FAILED");

            Bridge.Test.NUnit.Assert.areEqual$1("5007756.38734349805052136446", Bridge.Int.format(((System.Decimal("5007756.38735283")).sub(System.Decimal("0.00000933194947863554"))), 'G'), "(new Decimal(\"5007756.38735283\")).sub(\"0.00000933194947863554\").toString() == \"5007756.38734349805052136446\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("8519.28502213539257358044", Bridge.Int.format(((System.Decimal("8519.28502252292")).sub(System.Decimal("0.00000038752742641956"))), 'G'), "(new Decimal(\"8519.28502252292\")).sub(\"0.00000038752742641956\").toString() == \"8519.28502213539257358044\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("8376.91325157743275230985", Bridge.Int.format(((System.Decimal("8376.9132515308")).add(System.Decimal("0.00000004663275230985"))), 'G'), "(new Decimal(\"8376.9132515308\")).add(\"0.00000004663275230985\").toString() == \"8376.91325157743275230985\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("0.00610815784999223683", Bridge.Int.format(((System.Decimal("0.0061082019266245")).sub(System.Decimal("0.00000004407663226317"))), 'G'), "(new Decimal(\"0.0061082019266245\")).sub(\"0.00000004407663226317\").toString() == \"0.00610815784999223683\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("-6.6857970204242414917", Bridge.Int.format(((System.Decimal("0.0000091555889785083")).sub(System.Decimal("6.68580617601322"))), 'G'), "(new Decimal(\"0.0000091555889785083\")).sub(\"6.68580617601322\").toString() == \"-6.6857970204242414917\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("0.0000049877587914779734645683", Bridge.Int.format(((System.Decimal("0.679050468690251")).mul(System.Decimal("0.00000734519600744601"))), 'G'), "(new Decimal(\"0.679050468690251\")).mul(\"0.00000734519600744601\").toString() == \"0.0000049877587914779734645683\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("1331757.9219696450201665110972", Bridge.Int.format(((System.Decimal("72.9822536338969")).div(System.Decimal("0.0000548014413354925"))), 'G'), "(new Decimal(\"72.9822536338969\")).div(\"0.0000548014413354925\").toString() == \"1331757.9219696450201665110972\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("0.0002184819375517202908665847", Bridge.Int.format(((System.Decimal("0.00000018985219774295")).div(System.Decimal("0.000868960610064194"))), 'G'), "(new Decimal(\"0.00000018985219774295\")).div(\"0.000868960610064194\").toString() == \"0.0002184819375517202908665847\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("-873438.38944748009399", Bridge.Int.format(((System.Decimal("7.31134765190601")).sub(System.Decimal("873445.700795132"))), 'G'), "(new Decimal(\"7.31134765190601\")).sub(\"873445.700795132\").toString() == \"-873438.38944748009399\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("4392083.3322472776428269303282", Bridge.Int.format(((System.Decimal("4389325.52672426")).div(System.Decimal("0.999372096266305"))), 'G'), "(new Decimal(\"4389325.52672426\")).div(\"0.999372096266305\").toString() == \"4392083.3322472776428269303282\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("3511082.4535909329651685", Bridge.Int.format(((System.Decimal("3511082.54562648")).sub(System.Decimal("0.0920355470348315"))), 'G'), "(new Decimal(\"3511082.54562648\")).sub(\"0.0920355470348315\").toString() == \"3511082.4535909329651685\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("619.45098835034374784773429077", Bridge.Int.format(((System.Decimal("310.688569820807")).div(System.Decimal("0.501554724528247"))), 'G'), "(new Decimal(\"310.688569820807\")).div(\"0.501554724528247\").toString() == \"619.45098835034374784773429077\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("0.0000173331929981605953452824", Bridge.Int.format(((System.Decimal("0.00000003554128810556")).div(System.Decimal("0.00205047553034987"))), 'G'), "(new Decimal(\"0.00000003554128810556\")).div(\"0.00205047553034987\").toString() == \"0.0000173331929981605953452824\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("2197324.21086973644253935499", Bridge.Int.format(((System.Decimal("2197324.21086976")).sub(System.Decimal("0.00000002355746064501"))), 'G'), "(new Decimal(\"2197324.21086976\")).sub(\"0.00000002355746064501\").toString() == \"2197324.21086973644253935499\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("4.4226279162585874248", Bridge.Int.format(((System.Decimal("4.42253004499829")).add(System.Decimal("0.0000978712602974248"))), 'G'), "(new Decimal(\"4.42253004499829\")).add(\"0.0000978712602974248\").toString() == \"4.4226279162585874248\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("352307.69884553949094527331", Bridge.Int.format(((System.Decimal("352307.698853457")).sub(System.Decimal("0.00000791750905472669"))), 'G'), "(new Decimal(\"352307.698853457\")).sub(\"0.00000791750905472669\").toString() == \"352307.69884553949094527331\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("17096896.787851146291328234831", Bridge.Int.format(((System.Decimal("721.870396156735")).mul(System.Decimal("23684.1639148463"))), 'G'), "(new Decimal(\"721.870396156735\")).mul(\"23684.1639148463\").toString() == \"17096896.787851146291328234831\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("0.0000000058569075628029528804", Bridge.Int.format(((System.Decimal("0.000786162371181959")).div(System.Decimal("134228.236104468"))), 'G'), "(new Decimal(\"0.000786162371181959\")).div(\"134228.236104468\").toString() == \"0.0000000058569075628029528804\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("-5591696.2786194911832293", Bridge.Int.format(((System.Decimal("0.0291847988167707")).sub(System.Decimal("5591696.30780429"))), 'G'), "(new Decimal(\"0.0291847988167707\")).sub(\"5591696.30780429\").toString() == \"-5591696.2786194911832293\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("67077.9713607756712", Bridge.Int.format(((System.Decimal("67027.4105235131")).add(System.Decimal("50.5608372625712"))), 'G'), "(new Decimal(\"67027.4105235131\")).add(\"50.5608372625712\").toString() == \"67077.9713607756712\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("0.0000000442928238101105816891", Bridge.Int.format(((System.Decimal("0.452668749472438")).mul(System.Decimal("0.00000009784820326504"))), 'G'), "(new Decimal(\"0.452668749472438\")).mul(\"0.00000009784820326504\").toString() == \"0.0000000442928238101105816891\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("796.73004845438731539809", Bridge.Int.format(((System.Decimal("796.730048394171")).add(System.Decimal("0.00000006021631539809"))), 'G'), "(new Decimal(\"796.730048394171\")).add(\"0.00000006021631539809\").toString() == \"796.73004845438731539809\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("0.0000001129027912971335249117", Bridge.Int.format(((System.Decimal("0.00393717444219495")).div(System.Decimal("34872.2506942564"))), 'G'), "(new Decimal(\"0.00393717444219495\")).div(\"34872.2506942564\").toString() == \"0.0000001129027912971335249117\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("0.0254376983229297496691344205", Bridge.Int.format(((System.Decimal("0.00680742215216505")).mul(System.Decimal("3.73675934213063"))), 'G'), "(new Decimal(\"0.00680742215216505\")).mul(\"3.73675934213063\").toString() == \"0.0254376983229297496691344205\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("-315.51025068765613449375", Bridge.Int.format(((System.Decimal("0.00000893482386550625")).sub(System.Decimal("315.51025962248"))), 'G'), "(new Decimal(\"0.00000893482386550625\")).sub(\"315.51025962248\").toString() == \"-315.51025068765613449375\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("0.0003013325022026421797172656", Bridge.Int.format(((System.Decimal("0.000027297311009512")).mul(System.Decimal("11.0389079018677"))), 'G'), "(new Decimal(\"0.000027297311009512\")).mul(\"11.0389079018677\").toString() == \"0.0003013325022026421797172656\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("402.83617806471816721794725061", Bridge.Int.format(((System.Decimal("54243.3473999814")).div(System.Decimal("134.653614430993"))), 'G'), "(new Decimal(\"54243.3473999814\")).div(\"134.653614430993\").toString() == \"402.83617806471816721794725061\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("0.0000000000000039584325266911", Bridge.Int.format(((System.Decimal("0.00000021819561916319")).mul(System.Decimal("0.00000001814166820522"))), 'G'), "(new Decimal(\"0.00000021819561916319\")).mul(\"0.00000001814166820522\").toString() == \"0.0000000000000039584325266911\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("0.07274982420726249867", Bridge.Int.format(((System.Decimal("0.00000006649979439867")).add(System.Decimal("0.0727497577074681"))), 'G'), "(new Decimal(\"0.00000006649979439867\")).add(\"0.0727497577074681\").toString() == \"0.07274982420726249867\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("125.09829068179389161411857875", Bridge.Int.format(((System.Decimal("0.0942382432959221")).div(System.Decimal("0.000753313596711174"))), 'G'), "(new Decimal(\"0.0942382432959221\")).div(\"0.000753313596711174\").toString() == \"125.09829068179389161411857875\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("3.1072210310858812077194224446", Bridge.Int.format(((System.Decimal("0.000336303566739105")).mul(System.Decimal("9239.33415638252"))), 'G'), "(new Decimal(\"0.000336303566739105\")).mul(\"9239.33415638252\").toString() == \"3.1072210310858812077194224446\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("0.00000293927498163621", Bridge.Int.format(((System.Decimal("0.00000296421897735643")).sub(System.Decimal("0.00000002494399572022"))), 'G'), "(new Decimal(\"0.00000296421897735643\")).sub(\"0.00000002494399572022\").toString() == \"0.00000293927498163621\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("0.95424499521071008787", Bridge.Int.format(((System.Decimal("0.00000005236202508787")).add(System.Decimal("0.954244942848685"))), 'G'), "(new Decimal(\"0.00000005236202508787\")).add(\"0.954244942848685\").toString() == \"0.95424499521071008787\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("0.0840038726281231661070730835", Bridge.Int.format(((System.Decimal("0.544814708896361")).div(System.Decimal("6.48559038829319"))), 'G'), "(new Decimal(\"0.544814708896361\")).div(\"6.48559038829319\").toString() == \"0.0840038726281231661070730835\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("5.584384619064811", Bridge.Int.format(((System.Decimal("5.92341898285012")).sub(System.Decimal("0.339034363785309"))), 'G'), "(new Decimal(\"5.92341898285012\")).sub(\"0.339034363785309\").toString() == \"5.584384619064811\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("768961.59481674478", Bridge.Int.format(((System.Decimal("761069.961246601")).add(System.Decimal("7891.63357014378"))), 'G'), "(new Decimal(\"761069.961246601\")).add(\"7891.63357014378\").toString() == \"768961.59481674478\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("7.1449367324811184962392161905", Bridge.Int.format(((System.Decimal("0.0057420220671883")).div(System.Decimal("0.000803649112956435"))), 'G'), "(new Decimal(\"0.0057420220671883\")).div(\"0.000803649112956435\").toString() == \"7.1449367324811184962392161905\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("0.0000671343925763854248084927", Bridge.Int.format(((System.Decimal("0.00000249094584141436")).div(System.Decimal("0.0371038709939941"))), 'G'), "(new Decimal(\"0.00000249094584141436\")).div(\"0.0371038709939941\").toString() == \"0.0000671343925763854248084927\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("3379.636871480214643", Bridge.Int.format(((System.Decimal("3379.79016051618")).sub(System.Decimal("0.153289035965357"))), 'G'), "(new Decimal(\"3379.79016051618\")).sub(\"0.153289035965357\").toString() == \"3379.636871480214643\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("-5537047.53310281883348247913", Bridge.Int.format(((System.Decimal("0.00000000116651752087")).sub(System.Decimal("5537047.53310282"))), 'G'), "(new Decimal(\"0.00000000116651752087\")).sub(\"5537047.53310282\").toString() == \"-5537047.53310281883348247913\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("-119.1551636528016", Bridge.Int.format(((System.Decimal("46.4980181523124")).sub(System.Decimal("165.653181805114"))), 'G'), "(new Decimal(\"46.4980181523124\")).sub(\"165.653181805114\").toString() == \"-119.1551636528016\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("7507411.17052143912417469505", Bridge.Int.format(((System.Decimal("7507411.17052148")).sub(System.Decimal("0.00000004087582530495"))), 'G'), "(new Decimal(\"7507411.17052148\")).sub(\"0.00000004087582530495\").toString() == \"7507411.17052143912417469505\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("3680288.3885330385286851", Bridge.Int.format(((System.Decimal("3680288.43481107")).sub(System.Decimal("0.0462780314713149"))), 'G'), "(new Decimal(\"3680288.43481107\")).sub(\"0.0462780314713149\").toString() == \"3680288.3885330385286851\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("-0.00064079973490480291", Bridge.Int.format(((System.Decimal("0.00000183056355073609")).sub(System.Decimal("0.000642630298455539"))), 'G'), "(new Decimal(\"0.00000183056355073609\")).sub(\"0.000642630298455539\").toString() == \"-0.00064079973490480291\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("-2.057870254878829", Bridge.Int.format(((System.Decimal("0.390304429638341")).sub(System.Decimal("2.44817468451717"))), 'G'), "(new Decimal(\"0.390304429638341\")).sub(\"2.44817468451717\").toString() == \"-2.057870254878829\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("0.82801381893790463861", Bridge.Int.format(((System.Decimal("0.00000077470167063861")).add(System.Decimal("0.828013044236234"))), 'G'), "(new Decimal(\"0.00000077470167063861\")).add(\"0.828013044236234\").toString() == \"0.82801381893790463861\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("0.0575119050604619002876486373", Bridge.Int.format(((System.Decimal("71.2106066156228")).mul(System.Decimal("0.000807631163302637"))), 'G'), "(new Decimal(\"71.2106066156228\")).mul(\"0.000807631163302637\").toString() == \"0.0575119050604619002876486373\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("0.0000000846380225479673155344", Bridge.Int.format(((System.Decimal("0.00000009483140771968")).mul(System.Decimal("0.892510451792046"))), 'G'), "(new Decimal(\"0.00000009483140771968\")).mul(\"0.892510451792046\").toString() == \"0.0000000846380225479673155344\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("0.0001071853838444661455520212", Bridge.Int.format(((System.Decimal("2908.7434722617")).mul(System.Decimal("0.00000003684937666955"))), 'G'), "(new Decimal(\"2908.7434722617\")).mul(\"0.00000003684937666955\").toString() == \"0.0001071853838444661455520212\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("0.001658638454349077", Bridge.Int.format(((System.Decimal("0.000959274857751687")).add(System.Decimal("0.00069936359659739"))), 'G'), "(new Decimal(\"0.000959274857751687\")).add(\"0.00069936359659739\").toString() == \"0.001658638454349077\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("24639.663275647384108817333496", Bridge.Int.format(((System.Decimal("8683.4491690078")).mul(System.Decimal("2.83754333054532"))), 'G'), "(new Decimal(\"8683.4491690078\")).mul(\"2.83754333054532\").toString() == \"24639.663275647384108817333496\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("6117906.68505150707818221165", Bridge.Int.format(((System.Decimal("0.00000935707818221165")).add(System.Decimal("6117906.68504215"))), 'G'), "(new Decimal(\"0.00000935707818221165\")).add(\"6117906.68504215\").toString() == \"6117906.68505150707818221165\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("6.0121773791933949674368568908", Bridge.Int.format(((System.Decimal("6641.46798972109")).mul(System.Decimal("0.000905248265669331"))), 'G'), "(new Decimal(\"6641.46798972109\")).mul(\"0.000905248265669331\").toString() == \"6.0121773791933949674368568908\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("0.0000100639428179333997221056", Bridge.Int.format(((System.Decimal("0.0000713244643860145")).mul(System.Decimal("0.14110085374727"))), 'G'), "(new Decimal(\"0.0000713244643860145\")).mul(\"0.14110085374727\").toString() == \"0.0000100639428179333997221056\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("817567.71241020922149641", Bridge.Int.format(((System.Decimal("0.00126479322149641")).add(System.Decimal("817567.711145416"))), 'G'), "(new Decimal(\"0.00126479322149641\")).add(\"817567.711145416\").toString() == \"817567.71241020922149641\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("5911522.4475117541555222", Bridge.Int.format(((System.Decimal("5911522.42660128")).add(System.Decimal("0.0209104741555222"))), 'G'), "(new Decimal(\"5911522.42660128\")).add(\"0.0209104741555222\").toString() == \"5911522.4475117541555222\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("-50.00480793221098247371", Bridge.Int.format(((System.Decimal("0.00000004386581752629")).sub(System.Decimal("50.0048079760768"))), 'G'), "(new Decimal(\"0.00000004386581752629\")).sub(\"50.0048079760768\").toString() == \"-50.00480793221098247371\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("-0.00216393969813354769", Bridge.Int.format(((System.Decimal("0.00000009429415883231")).sub(System.Decimal("0.00216403399229238"))), 'G'), "(new Decimal(\"0.00000009429415883231\")).sub(\"0.00216403399229238\").toString() == \"-0.00216393969813354769\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("149554.64804066385942125034", Bridge.Int.format(((System.Decimal("0.00000007785942125034")).add(System.Decimal("149554.648040586"))), 'G'), "(new Decimal(\"0.00000007785942125034\")).add(\"149554.648040586\").toString() == \"149554.64804066385942125034\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("0.0000000401579705382523868391", Bridge.Int.format(((System.Decimal("0.000514483727288658")).mul(System.Decimal("0.0000780548896072688"))), 'G'), "(new Decimal(\"0.000514483727288658\")).mul(\"0.0000780548896072688\").toString() == \"0.0000000401579705382523868391\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("4391586.0938727875920041853806", Bridge.Int.format(((System.Decimal("85.0879618362933")).div(System.Decimal("0.0000193752234426212"))), 'G'), "(new Decimal(\"85.0879618362933\")).div(\"0.0000193752234426212\").toString() == \"4391586.0938727875920041853806\" FAILED");
            // #1650
            Bridge.Test.NUnit.Assert.areEqual$1("0.0000001434686776916788182810", Bridge.Int.format(((System.Decimal("4.70885837669897")).mul(System.Decimal("0.0000000304678260025"))), 'G'), "(new Decimal(\"4.70885837669897\")).mul(\"0.0000000304678260025\").toString() == \"0.0000001434686776916788182810\" FAILED");

            Bridge.Test.NUnit.Assert.areEqual$1("0.0000061473669992779179347052", Bridge.Int.format(((System.Decimal("0.00000094580709000389")).div(System.Decimal("0.153855640978485"))), 'G'), "(new Decimal(\"0.00000094580709000389\")).div(\"0.153855640978485\").toString() == \"0.0000061473669992779179347052\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("0.003314572249685679", Bridge.Int.format(((System.Decimal("0.000613740297785839")).add(System.Decimal("0.00270083195189984"))), 'G'), "(new Decimal(\"0.000613740297785839\")).add(\"0.00270083195189984\").toString() == \"0.003314572249685679\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("68188.770830719145", Bridge.Int.format(((System.Decimal("68943.9000417217")).sub(System.Decimal("755.129211002555"))), 'G'), "(new Decimal(\"68943.9000417217\")).sub(\"755.129211002555\").toString() == \"68188.770830719145\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("0.0185139114429308061", Bridge.Int.format(((System.Decimal("0.0000109071683655061")).add(System.Decimal("0.0185030042745653"))), 'G'), "(new Decimal(\"0.0000109071683655061\")).add(\"0.0185030042745653\").toString() == \"0.0185139114429308061\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("88.66685930292445486", Bridge.Int.format(((System.Decimal("0.00319345103725486")).add(System.Decimal("88.6636658518872"))), 'G'), "(new Decimal(\"0.00319345103725486\")).add(\"88.6636658518872\").toString() == \"88.66685930292445486\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("0.00000478017811420382", Bridge.Int.format(((System.Decimal("0.00000776580248855325")).sub(System.Decimal("0.00000298562437434943"))), 'G'), "(new Decimal(\"0.00000776580248855325\")).sub(\"0.00000298562437434943\").toString() == \"0.00000478017811420382\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("0.3859582703495206", Bridge.Int.format(((System.Decimal("0.364325482567924")).add(System.Decimal("0.0216327877815966"))), 'G'), "(new Decimal(\"0.364325482567924\")).add(\"0.0216327877815966\").toString() == \"0.3859582703495206\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("0.0107406507813914476055243271", Bridge.Int.format(((System.Decimal("0.00000696548845943319")).div(System.Decimal("0.000648516426164897"))), 'G'), "(new Decimal(\"0.00000696548845943319\")).div(\"0.000648516426164897\").toString() == \"0.0107406507813914476055243271\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("-73.0557380282989268491", Bridge.Int.format(((System.Decimal("0.0000220559127731509")).sub(System.Decimal("73.0557600842117"))), 'G'), "(new Decimal(\"0.0000220559127731509\")).sub(\"73.0557600842117\").toString() == \"-73.0557380282989268491\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("0.00000195673171615076", Bridge.Int.format(((System.Decimal("0.00000148999663139228")).add(System.Decimal("0.00000046673508475848"))), 'G'), "(new Decimal(\"0.00000148999663139228\")).add(\"0.00000046673508475848\").toString() == \"0.00000195673171615076\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("-838.010941593913", Bridge.Int.format(((System.Decimal("2.074972690118")).sub(System.Decimal("840.085914284031"))), 'G'), "(new Decimal(\"2.074972690118\")).sub(\"840.085914284031\").toString() == \"-838.010941593913\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("0.0000000010790590363188315712", Bridge.Int.format(((System.Decimal("0.00000059002973120195")).div(System.Decimal("546.800231815688"))), 'G'), "(new Decimal(\"0.00000059002973120195\")).div(\"546.800231815688\").toString() == \"0.0000000010790590363188315712\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("0.0485027328186321794374224174", Bridge.Int.format(((System.Decimal("0.00000004584207597461")).mul(System.Decimal("1058039.62380534"))), 'G'), "(new Decimal(\"0.00000004584207597461\")).mul(\"1058039.62380534\").toString() == \"0.0485027328186321794374224174\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("214.85514206927846582617", Bridge.Int.format(((System.Decimal("214.855142037782")).add(System.Decimal("0.00000003149646582617"))), 'G'), "(new Decimal(\"214.855142037782\")).add(\"0.00000003149646582617\").toString() == \"214.85514206927846582617\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("0.0001626068155301757850120131", Bridge.Int.format(((System.Decimal("0.000824154042091292")).div(System.Decimal("5.06838559874724"))), 'G'), "(new Decimal(\"0.000824154042091292\")).div(\"5.06838559874724\").toString() == \"0.0001626068155301757850120131\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("20.9788078560985709559", Bridge.Int.format(((System.Decimal("20.9787698560296")).add(System.Decimal("0.0000380000689709559"))), 'G'), "(new Decimal(\"20.9787698560296\")).add(\"0.0000380000689709559\").toString() == \"20.9788078560985709559\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("-81.88357175642793468", Bridge.Int.format(((System.Decimal("0.00617890391786532")).sub(System.Decimal("81.8897506603458"))), 'G'), "(new Decimal(\"0.00617890391786532\")).sub(\"81.8897506603458\").toString() == \"-81.88357175642793468\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("36.23358714435498025968", Bridge.Int.format(((System.Decimal("36.2335875333443")).sub(System.Decimal("0.00000038898931974032"))), 'G'), "(new Decimal(\"36.2335875333443\")).sub(\"0.00000038898931974032\").toString() == \"36.23358714435498025968\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("0.0013658861233129413838425724", Bridge.Int.format(((System.Decimal("0.00000000292342323946")).mul(System.Decimal("467221.476820866"))), 'G'), "(new Decimal(\"0.00000000292342323946\")).mul(\"467221.476820866\").toString() == \"0.0013658861233129413838425724\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("0.0000000074105712796113834889", Bridge.Int.format(((System.Decimal("0.000342916469715031")).div(System.Decimal("46273.958751128"))), 'G'), "(new Decimal(\"0.000342916469715031\")).div(\"46273.958751128\").toString() == \"0.0000000074105712796113834889\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("472.3234209149721", Bridge.Int.format(((System.Decimal("476.05942677523")).sub(System.Decimal("3.7360058602579"))), 'G'), "(new Decimal(\"476.05942677523\")).sub(\"3.7360058602579\").toString() == \"472.3234209149721\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("8039026.45502754950084", Bridge.Int.format(((System.Decimal("9.76490417950084")).add(System.Decimal("8039016.69012337"))), 'G'), "(new Decimal(\"9.76490417950084\")).add(\"8039016.69012337\").toString() == \"8039026.45502754950084\" FAILED");
            // #1650
            Bridge.Test.NUnit.Assert.areEqual$1("40912917253931.602151150686830", Bridge.Int.format(((System.Decimal("9044513.99065764")).mul(System.Decimal("4523506.43674075"))), 'G'), "(new Decimal(\"9044513.99065764\")).mul(\"4523506.43674075\").toString() == \"40912917253931.602151150686830\" FAILED");

            Bridge.Test.NUnit.Assert.areEqual$1("-6914.3160116610779745959", Bridge.Int.format(((System.Decimal("0.0000627560420254041")).sub(System.Decimal("6914.31607441712"))), 'G'), "(new Decimal(\"0.0000627560420254041\")).sub(\"6914.31607441712\").toString() == \"-6914.3160116610779745959\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("22.802704082181585914", Bridge.Int.format(((System.Decimal("22.8028122907518")).sub(System.Decimal("0.000108208570214086"))), 'G'), "(new Decimal(\"22.8028122907518\")).sub(\"0.000108208570214086\").toString() == \"22.802704082181585914\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("788.3274362681265223337", Bridge.Int.format(((System.Decimal("788.327495468933")).sub(System.Decimal("0.0000592008064776663"))), 'G'), "(new Decimal(\"788.327495468933\")).sub(\"0.0000592008064776663\").toString() == \"788.3274362681265223337\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("1.6066068917914018575324895115", Bridge.Int.format(((System.Decimal("8866.23474250838")).div(System.Decimal("5518.60868256474"))), 'G'), "(new Decimal(\"8866.23474250838\")).div(\"5518.60868256474\").toString() == \"1.6066068917914018575324895115\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("26.72254360394047261816", Bridge.Int.format(((System.Decimal("0.00000009113297261816")).add(System.Decimal("26.7225435128075"))), 'G'), "(new Decimal(\"0.00000009113297261816\")).add(\"26.7225435128075\").toString() == \"26.72254360394047261816\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("0.0000324317078514770886275385", Bridge.Int.format(((System.Decimal("0.815985052760683")).mul(System.Decimal("0.0000397454680594362"))), 'G'), "(new Decimal(\"0.815985052760683\")).mul(\"0.0000397454680594362\").toString() == \"0.0000324317078514770886275385\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("52977.103193989012886457", Bridge.Int.format(((System.Decimal("0.000779760512886457")).add(System.Decimal("52977.1024142285"))), 'G'), "(new Decimal(\"0.000779760512886457\")).add(\"52977.1024142285\").toString() == \"52977.103193989012886457\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("1913.0060727432645785740118483", Bridge.Int.format(((System.Decimal("126179.391576992")).div(System.Decimal("65.9586989162297"))), 'G'), "(new Decimal(\"126179.391576992\")).div(\"65.9586989162297\").toString() == \"1913.0060727432645785740118483\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("770.923422558535548909", Bridge.Int.format(((System.Decimal("0.000830289780548909")).add(System.Decimal("770.922592268755"))), 'G'), "(new Decimal(\"0.000830289780548909\")).add(\"770.922592268755\").toString() == \"770.923422558535548909\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("0.0000000000015660607711989182", Bridge.Int.format(((System.Decimal("0.00000279982820283614")).mul(System.Decimal("0.00000055934173732965"))), 'G'), "(new Decimal(\"0.00000279982820283614\")).mul(\"0.00000055934173732965\").toString() == \"0.0000000000015660607711989182\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("0.00000161712928522245", Bridge.Int.format(((System.Decimal("0.0000015461405746388")).add(System.Decimal("0.00000007098871058365"))), 'G'), "(new Decimal(\"0.0000015461405746388\")).add(\"0.00000007098871058365\").toString() == \"0.00000161712928522245\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("4253730.76659763509554093941", Bridge.Int.format(((System.Decimal("0.00000428509554093941")).add(System.Decimal("4253730.76659335"))), 'G'), "(new Decimal(\"0.00000428509554093941\")).add(\"4253730.76659335\").toString() == \"4253730.76659763509554093941\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("0.00008945709535687095", Bridge.Int.format(((System.Decimal("0.00000074108968849345")).add(System.Decimal("0.0000887160056683775"))), 'G'), "(new Decimal(\"0.00000074108968849345\")).add(\"0.0000887160056683775\").toString() == \"0.00008945709535687095\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("60849.566901590769612814207798", Bridge.Int.format(((System.Decimal("4.50246398081186")).div(System.Decimal("0.0000739933611704006"))), 'G'), "(new Decimal(\"4.50246398081186\")).div(\"0.0000739933611704006\").toString() == \"60849.566901590769612814207798\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("10025471.773941757", Bridge.Int.format(((System.Decimal("9073722.60423085")).add(System.Decimal("951749.169710907"))), 'G'), "(new Decimal(\"9073722.60423085\")).add(\"951749.169710907\").toString() == \"10025471.773941757\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("6314.57694669888121625", Bridge.Int.format(((System.Decimal("6314.57190789029")).add(System.Decimal("0.00503880859121625"))), 'G'), "(new Decimal(\"6314.57190789029\")).add(\"0.00503880859121625\").toString() == \"6314.57694669888121625\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("6410200.86892426925435156992", Bridge.Int.format(((System.Decimal("6410200.86892424")).add(System.Decimal("0.00000002925435156992"))), 'G'), "(new Decimal(\"6410200.86892424\")).add(\"0.00000002925435156992\").toString() == \"6410200.86892426925435156992\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("-50365.02975549733950225974", Bridge.Int.format(((System.Decimal("0.00000903436049774026")).sub(System.Decimal("50365.0297645317"))), 'G'), "(new Decimal(\"0.00000903436049774026\")).sub(\"50365.0297645317\").toString() == \"-50365.02975549733950225974\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("706275.0020093632", Bridge.Int.format(((System.Decimal("773516.946366763")).sub(System.Decimal("67241.9443573998"))), 'G'), "(new Decimal(\"773516.946366763\")).sub(\"67241.9443573998\").toString() == \"706275.0020093632\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("-0.0007827090090991505", Bridge.Int.format(((System.Decimal("0.0000758509746174565")).sub(System.Decimal("0.000858559983716607"))), 'G'), "(new Decimal(\"0.0000758509746174565\")).sub(\"0.000858559983716607\").toString() == \"-0.0007827090090991505\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("2221.3994020682519670422887012", Bridge.Int.format(((System.Decimal("0.0072728559734639")).div(System.Decimal("0.00000327399744804669"))), 'G'), "(new Decimal(\"0.0072728559734639\")).div(\"0.00000327399744804669\").toString() == \"2221.3994020682519670422887012\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("0.00797715439281503856", Bridge.Int.format(((System.Decimal("0.00000002090733708856")).add(System.Decimal("0.00797713348547795"))), 'G'), "(new Decimal(\"0.00000002090733708856\")).add(\"0.00797713348547795\").toString() == \"0.00797715439281503856\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("0.0000000152803982254922538614", Bridge.Int.format(((System.Decimal("0.0000248115556430125")).mul(System.Decimal("0.00061585812858113"))), 'G'), "(new Decimal(\"0.0000248115556430125\")).mul(\"0.00061585812858113\").toString() == \"0.0000000152803982254922538614\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("0.0000000000661183382579908907", Bridge.Int.format(((System.Decimal("0.00000008056083325323")).mul(System.Decimal("0.000820725600617344"))), 'G'), "(new Decimal(\"0.00000008056083325323\")).mul(\"0.000820725600617344\").toString() == \"0.0000000000661183382579908907\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("-0.09307075335419262842", Bridge.Int.format(((System.Decimal("0.00000025804988167158")).sub(System.Decimal("0.0930710114040743"))), 'G'), "(new Decimal(\"0.00000025804988167158\")).sub(\"0.0930710114040743\").toString() == \"-0.09307075335419262842\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("0.04808529221801801214", Bridge.Int.format(((System.Decimal("0.0480862194896146")).sub(System.Decimal("0.00000092727159658786"))), 'G'), "(new Decimal(\"0.0480862194896146\")).sub(\"0.00000092727159658786\").toString() == \"0.04808529221801801214\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("19.1163499301375422", Bridge.Int.format(((System.Decimal("0.0380818105014422")).add(System.Decimal("19.0782681196361"))), 'G'), "(new Decimal(\"0.0380818105014422\")).add(\"19.0782681196361\").toString() == \"19.1163499301375422\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("0.0029230064326764054146103005", Bridge.Int.format(((System.Decimal("0.00000030766995358638")).mul(System.Decimal("9500.46112271979"))), 'G'), "(new Decimal(\"0.00000030766995358638\")).mul(\"9500.46112271979\").toString() == \"0.0029230064326764054146103005\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("9220576.9255473874609941571388", Bridge.Int.format(((System.Decimal("8460272.38688444")).mul(System.Decimal("1.08986761937377"))), 'G'), "(new Decimal(\"8460272.38688444\")).mul(\"1.08986761937377\").toString() == \"9220576.9255473874609941571388\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("0.00054848860491686019", Bridge.Int.format(((System.Decimal("0.000548521232115348")).sub(System.Decimal("0.00000003262719848781"))), 'G'), "(new Decimal(\"0.000548521232115348\")).sub(\"0.00000003262719848781\").toString() == \"0.00054848860491686019\" FAILED");
            // #1650
            Bridge.Test.NUnit.Assert.areEqual$1("0.0000000381173298826073792060", Bridge.Int.format(((System.Decimal("0.701377586322547")).mul(System.Decimal("0.00000005434637579804"))), 'G'), "(new Decimal(\"0.701377586322547\")).mul(\"0.00000005434637579804\").toString() == \"0.0000000381173298826073792060\" FAILED");

            Bridge.Test.NUnit.Assert.areEqual$1("700263936625.28684891174652716", Bridge.Int.format(((System.Decimal("6085116.43301934")).div(System.Decimal("0.00000868974698646448"))), 'G'), "(new Decimal(\"6085116.43301934\")).div(\"0.00000868974698646448\").toString() == \"700263936625.28684891174652716\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("64.24562633156503374337", Bridge.Int.format(((System.Decimal("64.2456262671601")).add(System.Decimal("0.00000006440493374337"))), 'G'), "(new Decimal(\"64.2456262671601\")).add(\"0.00000006440493374337\").toString() == \"64.24562633156503374337\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("0.00000074888137376349", Bridge.Int.format(((System.Decimal("0.00000079138978840382")).sub(System.Decimal("0.00000004250841464033"))), 'G'), "(new Decimal(\"0.00000079138978840382\")).sub(\"0.00000004250841464033\").toString() == \"0.00000074888137376349\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("0.0065667784902605879636671644", Bridge.Int.format(((System.Decimal("0.0068165044332")).mul(System.Decimal("0.963364515436517"))), 'G'), "(new Decimal(\"0.0068165044332\")).mul(\"0.963364515436517\").toString() == \"0.0065667784902605879636671644\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("369602.432796381529203", Bridge.Int.format(((System.Decimal("0.259988776529203")).add(System.Decimal("369602.172807605"))), 'G'), "(new Decimal(\"0.259988776529203\")).add(\"369602.172807605\").toString() == \"369602.432796381529203\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("0.0039988533838646743", Bridge.Int.format(((System.Decimal("0.0000675051699706843")).add(System.Decimal("0.00393134821389399"))), 'G'), "(new Decimal(\"0.0000675051699706843\")).add(\"0.00393134821389399\").toString() == \"0.0039988533838646743\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("0.1176639241828982721945349704", Bridge.Int.format(((System.Decimal("8668689.53158552")).mul(System.Decimal("0.00000001357343849427"))), 'G'), "(new Decimal(\"8668689.53158552\")).mul(\"0.00000001357343849427\").toString() == \"0.1176639241828982721945349704\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("0.3461079909540908953018615851", Bridge.Int.format(((System.Decimal("0.0000312284355197234")).div(System.Decimal("0.000090227432870412"))), 'G'), "(new Decimal(\"0.0000312284355197234\")).div(\"0.000090227432870412\").toString() == \"0.3461079909540908953018615851\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("245.24585835344678889090583956", Bridge.Int.format(((System.Decimal("233330.174457901")).div(System.Decimal("951.413312438602"))), 'G'), "(new Decimal(\"233330.174457901\")).div(\"951.413312438602\").toString() == \"245.24585835344678889090583956\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("1664628220.3605620253774984042", Bridge.Int.format(((System.Decimal("4790708.12686845")).div(System.Decimal("0.00287794479768628"))), 'G'), "(new Decimal(\"4790708.12686845\")).div(\"0.00287794479768628\").toString() == \"1664628220.3605620253774984042\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("246613871.78242208656915520057", Bridge.Int.format(((System.Decimal("331493.556188184")).mul(System.Decimal("743.947709325677"))), 'G'), "(new Decimal(\"331493.556188184\")).mul(\"743.947709325677\").toString() == \"246613871.78242208656915520057\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("1207.9268535512635351310455273", Bridge.Int.format(((System.Decimal("1259.47609602449")).mul(System.Decimal("0.959070884603574"))), 'G'), "(new Decimal(\"1259.47609602449\")).mul(\"0.959070884603574\").toString() == \"1207.9268535512635351310455273\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("0.393178837592885421", Bridge.Int.format(((System.Decimal("0.393176919963759")).add(System.Decimal("0.000001917629126421"))), 'G'), "(new Decimal(\"0.393176919963759\")).add(\"0.000001917629126421\").toString() == \"0.393178837592885421\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("397.1793180554543142", Bridge.Int.format(((System.Decimal("0.0851948050713142")).add(System.Decimal("397.094123250383"))), 'G'), "(new Decimal(\"0.0851948050713142\")).add(\"397.094123250383\").toString() == \"397.1793180554543142\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("0.0003282039963622138325073925", Bridge.Int.format(((System.Decimal("4.38505906815876")).mul(System.Decimal("0.0000748459692927291"))), 'G'), "(new Decimal(\"4.38505906815876\")).mul(\"0.0000748459692927291\").toString() == \"0.0003282039963622138325073925\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("0.423324324993102", Bridge.Int.format(((System.Decimal("0.363335922995273")).add(System.Decimal("0.059988401997829"))), 'G'), "(new Decimal(\"0.363335922995273\")).add(\"0.059988401997829\").toString() == \"0.423324324993102\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("10895.341807538831547999350349", Bridge.Int.format(((System.Decimal("0.00727318812500368")).div(System.Decimal("0.00000066755024793909"))), 'G'), "(new Decimal(\"0.00727318812500368\")).div(\"0.00000066755024793909\").toString() == \"10895.341807538831547999350349\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("3388.3696656205705172969049326", Bridge.Int.format(((System.Decimal("0.00994605123994223")).mul(System.Decimal("340674.865218194"))), 'G'), "(new Decimal(\"0.00994605123994223\")).mul(\"340674.865218194\").toString() == \"3388.3696656205705172969049326\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("0.0141935145051432937033685765", Bridge.Int.format(((System.Decimal("545.87652978761")).div(System.Decimal("38459.5745887885"))), 'G'), "(new Decimal(\"545.87652978761\")).div(\"38459.5745887885\").toString() == \"0.0141935145051432937033685765\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("0.0779477186180520150647853816", Bridge.Int.format(((System.Decimal("73907.2872204274")).div(System.Decimal("948164.853708895"))), 'G'), "(new Decimal(\"73907.2872204274\")).div(\"948164.853708895\").toString() == \"0.0779477186180520150647853816\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("-561579.6279262661092", Bridge.Int.format(((System.Decimal("21.7019301008908")).sub(System.Decimal("561601.329856367"))), 'G'), "(new Decimal(\"21.7019301008908\")).sub(\"561601.329856367\").toString() == \"-561579.6279262661092\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("0.000009299200099480762053694", Bridge.Int.format(((System.Decimal("0.00000077988295712503")).div(System.Decimal("0.0838655958342671"))), 'G'), "(new Decimal(\"0.00000077988295712503\")).div(\"0.0838655958342671\").toString() == \"0.000009299200099480762053694\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("0.0120314006051025781992414906", Bridge.Int.format(((System.Decimal("63.5544158814263")).div(System.Decimal("5282.37883247546"))), 'G'), "(new Decimal(\"63.5544158814263\")).div(\"5282.37883247546\").toString() == \"0.0120314006051025781992414906\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("3.6151189261791396129", Bridge.Int.format(((System.Decimal("3.61511963587958")).sub(System.Decimal("0.0000007097004403871"))), 'G'), "(new Decimal(\"3.61511963587958\")).sub(\"0.0000007097004403871\").toString() == \"3.6151189261791396129\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("94217597633.241379272109185751", Bridge.Int.format(((System.Decimal("466425.827921566")).div(System.Decimal("0.00000495051709699934"))), 'G'), "(new Decimal(\"466425.827921566\")).div(\"0.00000495051709699934\").toString() == \"94217597633.241379272109185751\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("705.645818421918175", Bridge.Int.format(((System.Decimal("706.5725502123")).sub(System.Decimal("0.926731790381825"))), 'G'), "(new Decimal(\"706.5725502123\")).sub(\"0.926731790381825\").toString() == \"705.645818421918175\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("528.8460503226362118", Bridge.Int.format(((System.Decimal("528.77783893085")).add(System.Decimal("0.0682113917862118"))), 'G'), "(new Decimal(\"528.77783893085\")).add(\"0.0682113917862118\").toString() == \"528.8460503226362118\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("2587.55019575690444875", Bridge.Int.format(((System.Decimal("2587.55753868611")).sub(System.Decimal("0.00734292920555125"))), 'G'), "(new Decimal(\"2587.55753868611\")).sub(\"0.00734292920555125\").toString() == \"2587.55019575690444875\" FAILED");
            // #1650
            Bridge.Test.NUnit.Assert.areEqual$1("0.0007832908360437819528979290", Bridge.Int.format(((System.Decimal("8.61752288817313")).mul(System.Decimal("0.0000908951268488984"))), 'G'), "(new Decimal(\"8.61752288817313\")).mul(\"0.0000908951268488984\").toString() == \"0.0007832908360437819528979290\" FAILED");

            Bridge.Test.NUnit.Assert.areEqual$1("85388.15485564442", Bridge.Int.format(((System.Decimal("91330.5146113646")).sub(System.Decimal("5942.35975572018"))), 'G'), "(new Decimal(\"91330.5146113646\")).sub(\"5942.35975572018\").toString() == \"85388.15485564442\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("0.0006005125566523128396843158", Bridge.Int.format(((System.Decimal("0.00754608521589361")).mul(System.Decimal("0.0795793500168153"))), 'G'), "(new Decimal(\"0.00754608521589361\")).mul(\"0.0795793500168153\").toString() == \"0.0006005125566523128396843158\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("1020.1981723776409731715", Bridge.Int.format(((System.Decimal("1020.19813424917")).add(System.Decimal("0.0000381284709731715"))), 'G'), "(new Decimal(\"1020.19813424917\")).add(\"0.0000381284709731715\").toString() == \"1020.1981723776409731715\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("0.0025578204022461232891799586", Bridge.Int.format(((System.Decimal("874.749045295058")).div(System.Decimal("341990.017957049"))), 'G'), "(new Decimal(\"874.749045295058\")).div(\"341990.017957049\").toString() == \"0.0025578204022461232891799586\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("1191.1626737619095274", Bridge.Int.format(((System.Decimal("0.0945538378295274")).add(System.Decimal("1191.06811992408"))), 'G'), "(new Decimal(\"0.0945538378295274\")).add(\"1191.06811992408\").toString() == \"1191.1626737619095274\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("0.0000012723850728401263936405", Bridge.Int.format(((System.Decimal("0.00174284968606329")).mul(System.Decimal("0.000730060132560348"))), 'G'), "(new Decimal(\"0.00174284968606329\")).mul(\"0.000730060132560348\").toString() == \"0.0000012723850728401263936405\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("0.3878144949689754244652101063", Bridge.Int.format(((System.Decimal("0.0000886363427101804")).div(System.Decimal("0.000228553454963748"))), 'G'), "(new Decimal(\"0.0000886363427101804\")).div(\"0.000228553454963748\").toString() == \"0.3878144949689754244652101063\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("0.6276545818966699448042492771", Bridge.Int.format(((System.Decimal("0.0088596635353098")).div(System.Decimal("0.0141155084195153"))), 'G'), "(new Decimal(\"0.0088596635353098\")).div(\"0.0141155084195153\").toString() == \"0.6276545818966699448042492771\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("887642.763737621356332488", Bridge.Int.format(((System.Decimal("887642.763968391")).sub(System.Decimal("0.000230769643667512"))), 'G'), "(new Decimal(\"887642.763968391\")).sub(\"0.000230769643667512\").toString() == \"887642.763737621356332488\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("453198251.73558506995962676469", Bridge.Int.format(((System.Decimal("23004.7123148128")).div(System.Decimal("0.0000507608143383455"))), 'G'), "(new Decimal(\"23004.7123148128\")).div(\"0.0000507608143383455\").toString() == \"453198251.73558506995962676469\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("83.7146957344276093754", Bridge.Int.format(((System.Decimal("83.7147017399383")).sub(System.Decimal("0.0000060055106906246"))), 'G'), "(new Decimal(\"83.7147017399383\")).sub(\"0.0000060055106906246\").toString() == \"83.7146957344276093754\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("87.63923156896568", Bridge.Int.format(((System.Decimal("4.66405350466448")).add(System.Decimal("82.9751780643012"))), 'G'), "(new Decimal(\"4.66405350466448\")).add(\"82.9751780643012\").toString() == \"87.63923156896568\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("1347.836978065024006220719243", Bridge.Int.format(((System.Decimal("6808.9278446552")).div(System.Decimal("5.05174435444723"))), 'G'), "(new Decimal(\"6808.9278446552\")).div(\"5.05174435444723\").toString() == \"1347.836978065024006220719243\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("7712816.5554913010058030163591", Bridge.Int.format(((System.Decimal("8813.68504316252")).div(System.Decimal("0.0011427323572071"))), 'G'), "(new Decimal(\"8813.68504316252\")).div(\"0.0011427323572071\").toString() == \"7712816.5554913010058030163591\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("0.0066851887766319767409290909", Bridge.Int.format(((System.Decimal("0.00000007260315151541")).mul(System.Decimal("92078.4929730364"))), 'G'), "(new Decimal(\"0.00000007260315151541\")).mul(\"92078.4929730364\").toString() == \"0.0066851887766319767409290909\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("0.0000000121301184342453339116", Bridge.Int.format(((System.Decimal("0.00000009849602240068")).div(System.Decimal("8.11995554162187"))), 'G'), "(new Decimal(\"0.00000009849602240068\")).div(\"8.11995554162187\").toString() == \"0.0000000121301184342453339116\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("0.3125741895189851492", Bridge.Int.format(((System.Decimal("0.312526527006424")).add(System.Decimal("0.0000476625125611492"))), 'G'), "(new Decimal(\"0.312526527006424\")).add(\"0.0000476625125611492\").toString() == \"0.3125741895189851492\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("0.2038677468092889069882980431", Bridge.Int.format(((System.Decimal("18502.905787203")).div(System.Decimal("90759.3578522836"))), 'G'), "(new Decimal(\"18502.905787203\")).div(\"90759.3578522836\").toString() == \"0.2038677468092889069882980431\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("0.0000000005559422081028409448", Bridge.Int.format(((System.Decimal("0.00000294573398909799")).div(System.Decimal("5298.63346614811"))), 'G'), "(new Decimal(\"0.00000294573398909799\")).div(\"5298.63346614811\").toString() == \"0.0000000005559422081028409448\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("46411462.077440048464670213145", Bridge.Int.format(((System.Decimal("3090023.14838116")).div(System.Decimal("0.066578879657471"))), 'G'), "(new Decimal(\"3090023.14838116\")).div(\"0.066578879657471\").toString() == \"46411462.077440048464670213145\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("0.000002581837802588014691071", Bridge.Int.format(((System.Decimal("0.00000043088218729519")).div(System.Decimal("0.166889719742765"))), 'G'), "(new Decimal(\"0.00000043088218729519\")).div(\"0.166889719742765\").toString() == \"0.000002581837802588014691071\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("662563.86998257370710896", Bridge.Int.format(((System.Decimal("662563.871900814")).sub(System.Decimal("0.00191824029289104"))), 'G'), "(new Decimal(\"662563.871900814\")).sub(\"0.00191824029289104\").toString() == \"662563.86998257370710896\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("4.093541112069757865", Bridge.Int.format(((System.Decimal("4.09383642677862")).sub(System.Decimal("0.000295314708862135"))), 'G'), "(new Decimal(\"4.09383642677862\")).sub(\"0.000295314708862135\").toString() == \"4.093541112069757865\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("0.0519240351822827709748263872", Bridge.Int.format(((System.Decimal("17.4083959392311")).mul(System.Decimal("0.00298270072461232"))), 'G'), "(new Decimal(\"17.4083959392311\")).mul(\"0.00298270072461232\").toString() == \"0.0519240351822827709748263872\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("56614111357.238158837814773558", Bridge.Int.format(((System.Decimal("1775.79848178467")).div(System.Decimal("0.00000003136671121762"))), 'G'), "(new Decimal(\"1775.79848178467\")).div(\"0.00000003136671121762\").toString() == \"56614111357.238158837814773558\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("0.18047320241517500632", Bridge.Int.format(((System.Decimal("0.00000057644597700632")).add(System.Decimal("0.180472625969198"))), 'G'), "(new Decimal(\"0.00000057644597700632\")).add(\"0.180472625969198\").toString() == \"0.18047320241517500632\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("-0.00000014875716676412", Bridge.Int.format(((System.Decimal("0.0000002374956338841")).sub(System.Decimal("0.00000038625280064822"))), 'G'), "(new Decimal(\"0.0000002374956338841\")).sub(\"0.00000038625280064822\").toString() == \"-0.00000014875716676412\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("23421549.686072900974999649279", Bridge.Int.format(((System.Decimal("222.322416595333")).div(System.Decimal("0.00000949221633816707"))), 'G'), "(new Decimal(\"222.322416595333\")).div(\"0.00000949221633816707\").toString() == \"23421549.686072900974999649279\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("3.871063458479728538175789638", Bridge.Int.format(((System.Decimal("0.0221267636037091")).div(System.Decimal("0.00571593926088695"))), 'G'), "(new Decimal(\"0.0221267636037091\")).div(\"0.00571593926088695\").toString() == \"3.871063458479728538175789638\" FAILED");
            // #1650
            Bridge.Test.NUnit.Assert.areEqual$1("16214.400846511121144041207000", Bridge.Int.format(((System.Decimal("7016.24042681243")).mul(System.Decimal("2.31098136040893"))), 'G'), "(new Decimal(\"7016.24042681243\")).mul(\"2.31098136040893\").toString() == \"16214.400846511121144041207000\" FAILED");

            Bridge.Test.NUnit.Assert.areEqual$1("0.0019490762786253018034972934", Bridge.Int.format(((System.Decimal("0.0681883810871227")).mul(System.Decimal("0.0285837007353938"))), 'G'), "(new Decimal(\"0.0681883810871227\")).mul(\"0.0285837007353938\").toString() == \"0.0019490762786253018034972934\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("1.157187581135514", Bridge.Int.format(((System.Decimal("0.85837511246017")).add(System.Decimal("0.298812468675344"))), 'G'), "(new Decimal(\"0.85837511246017\")).add(\"0.298812468675344\").toString() == \"1.157187581135514\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("-5115293.869385163952", Bridge.Int.format(((System.Decimal("193.647991956048")).sub(System.Decimal("5115487.51737712"))), 'G'), "(new Decimal(\"193.647991956048\")).sub(\"5115487.51737712\").toString() == \"-5115293.869385163952\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("0.05504833553420386932", Bridge.Int.format(((System.Decimal("0.0550483308988848")).add(System.Decimal("0.00000000463531906932"))), 'G'), "(new Decimal(\"0.0550483308988848\")).add(\"0.00000000463531906932\").toString() == \"0.05504833553420386932\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("0.0226105809476949110796916402", Bridge.Int.format(((System.Decimal("0.0000007991035286333")).mul(System.Decimal("28294.9331813934"))), 'G'), "(new Decimal(\"0.0000007991035286333\")).mul(\"28294.9331813934\").toString() == \"0.0226105809476949110796916402\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("0.0000430659364069161812657506", Bridge.Int.format(((System.Decimal("0.00000001163869482076")).div(System.Decimal("0.000270252914293787"))), 'G'), "(new Decimal(\"0.00000001163869482076\")).div(\"0.000270252914293787\").toString() == \"0.0000430659364069161812657506\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("369.899752887384684", Bridge.Int.format(((System.Decimal("0.882389189620684")).add(System.Decimal("369.017363697764"))), 'G'), "(new Decimal(\"0.882389189620684\")).add(\"369.017363697764\").toString() == \"369.899752887384684\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("820.35799529420065", Bridge.Int.format(((System.Decimal("826.882673346848")).sub(System.Decimal("6.52467805264735"))), 'G'), "(new Decimal(\"826.882673346848\")).sub(\"6.52467805264735\").toString() == \"820.35799529420065\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("8665.241919876656136", Bridge.Int.format(((System.Decimal("0.916831304746136")).add(System.Decimal("8664.32508857191"))), 'G'), "(new Decimal(\"0.916831304746136\")).add(\"8664.32508857191\").toString() == \"8665.241919876656136\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("1113295905.5010739272635131771", Bridge.Int.format(((System.Decimal("3431.67145430654")).mul(System.Decimal("324417.975416602"))), 'G'), "(new Decimal(\"3431.67145430654\")).mul(\"324417.975416602\").toString() == \"1113295905.5010739272635131771\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("8694915.9254769790620115834586", Bridge.Int.format(((System.Decimal("7011684.364179")).div(System.Decimal("0.80641197962985"))), 'G'), "(new Decimal(\"7011684.364179\")).div(\"0.80641197962985\").toString() == \"8694915.9254769790620115834586\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("2.9407816183171732729079339674", Bridge.Int.format(((System.Decimal("0.0000716280695384499")).mul(System.Decimal("41056.2735707761"))), 'G'), "(new Decimal(\"0.0000716280695384499\")).mul(\"41056.2735707761\").toString() == \"2.9407816183171732729079339674\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("0.1127935794278807392120038243", Bridge.Int.format(((System.Decimal("80.8113612145238")).div(System.Decimal("716.453557236331"))), 'G'), "(new Decimal(\"80.8113612145238\")).div(\"716.453557236331\").toString() == \"0.1127935794278807392120038243\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("89526454.180026033061583476631", Bridge.Int.format(((System.Decimal("721.107919570575")).div(System.Decimal("0.0000080546909421937"))), 'G'), "(new Decimal(\"721.107919570575\")).div(\"0.0000080546909421937\").toString() == \"89526454.180026033061583476631\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("-0.00000401257101493542", Bridge.Int.format(((System.Decimal("0.00000087664416240372")).sub(System.Decimal("0.00000488921517733914"))), 'G'), "(new Decimal(\"0.00000087664416240372\")).sub(\"0.00000488921517733914\").toString() == \"-0.00000401257101493542\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("1404309.5339384196562537720212", Bridge.Int.format(((System.Decimal("2861249.48079756")).mul(System.Decimal("0.49080289690327"))), 'G'), "(new Decimal(\"2861249.48079756\")).mul(\"0.49080289690327\").toString() == \"1404309.5339384196562537720212\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("11.799501757305484838541059295", Bridge.Int.format(((System.Decimal("0.329140784372175")).mul(System.Decimal("35.8494064471914"))), 'G'), "(new Decimal(\"0.329140784372175\")).mul(\"35.8494064471914\").toString() == \"11.799501757305484838541059295\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("86.579050768902069", Bridge.Int.format(((System.Decimal("0.887126708350669")).add(System.Decimal("85.6919240605514"))), 'G'), "(new Decimal(\"0.887126708350669\")).add(\"85.6919240605514\").toString() == \"86.579050768902069\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("0.0000000000066113860385206571", Bridge.Int.format(((System.Decimal("0.00000005458257806235")).div(System.Decimal("8255.84495358907"))), 'G'), "(new Decimal(\"0.00000005458257806235\")).div(\"8255.84495358907\").toString() == \"0.0000000000066113860385206571\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("265.78810758325215556973", Bridge.Int.format(((System.Decimal("265.788107768534")).sub(System.Decimal("0.00000018528184443027"))), 'G'), "(new Decimal(\"265.788107768534\")).sub(\"0.00000018528184443027\").toString() == \"265.78810758325215556973\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("36432462024050.335938886839157", Bridge.Int.format(((System.Decimal("668461.556857667")).div(System.Decimal("0.00000001834796551538"))), 'G'), "(new Decimal(\"668461.556857667\")).div(\"0.00000001834796551538\").toString() == \"36432462024050.335938886839157\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("0.6342358100146685424", Bridge.Int.format(((System.Decimal("0.634302762632399")).sub(System.Decimal("0.0000669526177304576"))), 'G'), "(new Decimal(\"0.634302762632399\")).sub(\"0.0000669526177304576\").toString() == \"0.6342358100146685424\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("1.926773046574916", Bridge.Int.format(((System.Decimal("1.00043254485374")).add(System.Decimal("0.926340501721176"))), 'G'), "(new Decimal(\"1.00043254485374\")).add(\"0.926340501721176\").toString() == \"1.926773046574916\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("-1041.94303693225454352791", Bridge.Int.format(((System.Decimal("0.00000329803545647209")).sub(System.Decimal("1041.94304023029"))), 'G'), "(new Decimal(\"0.00000329803545647209\")).sub(\"1041.94304023029\").toString() == \"-1041.94303693225454352791\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("1.7320645654257663", Bridge.Int.format(((System.Decimal("0.0218895030309863")).add(System.Decimal("1.71017506239478"))), 'G'), "(new Decimal(\"0.0218895030309863\")).add(\"1.71017506239478\").toString() == \"1.7320645654257663\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("6.2932320008966984549725959605", Bridge.Int.format(((System.Decimal("0.00000850892723934209")).mul(System.Decimal("739603.456919828"))), 'G'), "(new Decimal(\"0.00000850892723934209\")).mul(\"739603.456919828\").toString() == \"6.2932320008966984549725959605\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("-41970.90431835076483", Bridge.Int.format(((System.Decimal("5.53383796733517")).sub(System.Decimal("41976.4381563181"))), 'G'), "(new Decimal(\"5.53383796733517\")).sub(\"41976.4381563181\").toString() == \"-41970.90431835076483\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("-3233365.007464948276", Bridge.Int.format(((System.Decimal("428.763072671724")).sub(System.Decimal("3233793.77053762"))), 'G'), "(new Decimal(\"428.763072671724\")).sub(\"3233793.77053762\").toString() == \"-3233365.007464948276\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("0.0000002451461856604290637149", Bridge.Int.format(((System.Decimal("0.00000003885374662413")).mul(System.Decimal("6.3094606559302"))), 'G'), "(new Decimal(\"0.00000003885374662413\")).mul(\"6.3094606559302\").toString() == \"0.0000002451461856604290637149\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("28932456.422151199951443781242", Bridge.Int.format(((System.Decimal("948527.350532137")).div(System.Decimal("0.0327841969825254"))), 'G'), "(new Decimal(\"948527.350532137\")).div(\"0.0327841969825254\").toString() == \"28932456.422151199951443781242\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("-39125.788708948956168359", Bridge.Int.format(((System.Decimal("0.000126452543831641")).sub(System.Decimal("39125.7888354015"))), 'G'), "(new Decimal(\"0.000126452543831641\")).sub(\"39125.7888354015\").toString() == \"-39125.788708948956168359\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("1.3468627933517452321593950195", Bridge.Int.format(((System.Decimal("228915.375763977")).mul(System.Decimal("0.00000588367115514524"))), 'G'), "(new Decimal(\"228915.375763977\")).mul(\"0.00000588367115514524\").toString() == \"1.3468627933517452321593950195\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("39277185.990111339554907687023", Bridge.Int.format(((System.Decimal("49193.1172782523")).mul(System.Decimal("798.428482747836"))), 'G'), "(new Decimal(\"49193.1172782523\")).mul(\"798.428482747836\").toString() == \"39277185.990111339554907687023\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("0.0000000000000581563489873426", Bridge.Int.format(((System.Decimal("0.00000052592187771849")).mul(System.Decimal("0.00000011057982459226"))), 'G'), "(new Decimal(\"0.00000052592187771849\")).mul(\"0.00000011057982459226\").toString() == \"0.0000000000000581563489873426\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("61797.5944984525442125", Bridge.Int.format(((System.Decimal("61797.5818746712")).add(System.Decimal("0.0126237813442125"))), 'G'), "(new Decimal(\"61797.5818746712\")).add(\"0.0126237813442125\").toString() == \"61797.5944984525442125\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("198024.145522724504", Bridge.Int.format(((System.Decimal("198087.806439999")).sub(System.Decimal("63.660917274496"))), 'G'), "(new Decimal(\"198087.806439999\")).sub(\"63.660917274496\").toString() == \"198024.145522724504\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("-3200.88940770525903322953", Bridge.Int.format(((System.Decimal("0.00000982426096677047")).sub(System.Decimal("3200.88941752952"))), 'G'), "(new Decimal(\"0.00000982426096677047\")).sub(\"3200.88941752952\").toString() == \"-3200.88940770525903322953\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("5.676451351339672665", Bridge.Int.format(((System.Decimal("0.000242386010122665")).add(System.Decimal("5.67620896532955"))), 'G'), "(new Decimal(\"0.000242386010122665\")).add(\"5.67620896532955\").toString() == \"5.676451351339672665\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("0.0000000776963950158088336964", Bridge.Int.format(((System.Decimal("0.00000055833457250071")).mul(System.Decimal("0.139157413569818"))), 'G'), "(new Decimal(\"0.00000055833457250071\")).mul(\"0.139157413569818\").toString() == \"0.0000000776963950158088336964\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("5854.1561337260278061898964648", Bridge.Int.format(((System.Decimal("0.000561036967933661")).div(System.Decimal("0.0000000958356687314"))), 'G'), "(new Decimal(\"0.000561036967933661\")).div(\"0.0000000958356687314\").toString() == \"5854.1561337260278061898964648\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("0.0000000000328245876850082616", Bridge.Int.format(((System.Decimal("0.00000084970553864246")).div(System.Decimal("25886.2516963325"))), 'G'), "(new Decimal(\"0.00000084970553864246\")).div(\"25886.2516963325\").toString() == \"0.0000000000328245876850082616\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("98.5771713864016781651", Bridge.Int.format(((System.Decimal("0.0000315344957781651")).add(System.Decimal("98.5771398519059"))), 'G'), "(new Decimal(\"0.0000315344957781651\")).add(\"98.5771398519059\").toString() == \"98.5771713864016781651\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("3769.4758721824018394019909083", Bridge.Int.format(((System.Decimal("0.355002424845007")).div(System.Decimal("0.0000941781926407377"))), 'G'), "(new Decimal(\"0.355002424845007\")).div(\"0.0000941781926407377\").toString() == \"3769.4758721824018394019909083\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("0.34233483194482226", Bridge.Int.format(((System.Decimal("0.347713165147096")).sub(System.Decimal("0.00537833320227374"))), 'G'), "(new Decimal(\"0.347713165147096\")).sub(\"0.00537833320227374\").toString() == \"0.34233483194482226\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("2450696.875882343227315", Bridge.Int.format(((System.Decimal("2450696.35214782")).add(System.Decimal("0.523734523227315"))), 'G'), "(new Decimal(\"2450696.35214782\")).add(\"0.523734523227315\").toString() == \"2450696.875882343227315\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("0.0000000000078351005114308196", Bridge.Int.format(((System.Decimal("0.00000050161292520427")).div(System.Decimal("64021.2495643744"))), 'G'), "(new Decimal(\"0.00000050161292520427\")).div(\"64021.2495643744\").toString() == \"0.0000000000078351005114308196\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("-6281.22716877027720895884", Bridge.Int.format(((System.Decimal("0.00000091908279104116")).sub(System.Decimal("6281.22716968936"))), 'G'), "(new Decimal(\"0.00000091908279104116\")).sub(\"6281.22716968936\").toString() == \"-6281.22716877027720895884\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("0.0519401725231857052", Bridge.Int.format(((System.Decimal("0.0000851479899069052")).add(System.Decimal("0.0518550245332788"))), 'G'), "(new Decimal(\"0.0000851479899069052\")).add(\"0.0518550245332788\").toString() == \"0.0519401725231857052\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("0.00009138627400546624", Bridge.Int.format(((System.Decimal("0.00000002975221119344")).add(System.Decimal("0.0000913565217942728"))), 'G'), "(new Decimal(\"0.00000002975221119344\")).add(\"0.0000913565217942728\").toString() == \"0.00009138627400546624\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("0.0927168588963668332272999205", Bridge.Int.format(((System.Decimal("0.00000086909218266098")).div(System.Decimal("0.00000937361546762922"))), 'G'), "(new Decimal(\"0.00000086909218266098\")).div(\"0.00000937361546762922\").toString() == \"0.0927168588963668332272999205\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("40553324.964360422490740452752", Bridge.Int.format(((System.Decimal("7678.32436025065")).mul(System.Decimal("5281.53319157731"))), 'G'), "(new Decimal(\"7678.32436025065\")).mul(\"5281.53319157731\").toString() == \"40553324.964360422490740452752\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("8581024.565256312363397899", Bridge.Int.format(((System.Decimal("8581024.56600453")).sub(System.Decimal("0.000748217636602101"))), 'G'), "(new Decimal(\"8581024.56600453\")).sub(\"0.000748217636602101\").toString() == \"8581024.565256312363397899\" FAILED");
            // #1650
            Bridge.Test.NUnit.Assert.areEqual$1("0.0344964205226649308283349310", Bridge.Int.format(((System.Decimal("0.0000244098234104038")).mul(System.Decimal("1413.21876617764"))), 'G'), "(new Decimal(\"0.0000244098234104038\")).mul(\"1413.21876617764\").toString() == \"0.0344964205226649308283349310\" FAILED");

            Bridge.Test.NUnit.Assert.areEqual$1("-0.00144899793000472471", Bridge.Int.format(((System.Decimal("0.00000002482942213529")).sub(System.Decimal("0.00144902275942686"))), 'G'), "(new Decimal(\"0.00000002482942213529\")).sub(\"0.00144902275942686\").toString() == \"-0.00144899793000472471\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("0.0145830863052812570331711621", Bridge.Int.format(((System.Decimal("0.000910689151338623")).div(System.Decimal("0.0624483139079289"))), 'G'), "(new Decimal(\"0.000910689151338623\")).div(\"0.0624483139079289\").toString() == \"0.0145830863052812570331711621\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("131248.684342948329262", Bridge.Int.format(((System.Decimal("131248.713532113")).sub(System.Decimal("0.029189164670738"))), 'G'), "(new Decimal(\"131248.713532113\")).sub(\"0.029189164670738\").toString() == \"131248.684342948329262\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("5019.003774030302274918", Bridge.Int.format(((System.Decimal("0.000344105692274918")).add(System.Decimal("5019.00342992461"))), 'G'), "(new Decimal(\"0.000344105692274918\")).add(\"5019.00342992461\").toString() == \"5019.003774030302274918\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("0.0000000000714590274185505401", Bridge.Int.format(((System.Decimal("0.000617910423603798")).div(System.Decimal("8647058.96407695"))), 'G'), "(new Decimal(\"0.000617910423603798\")).div(\"8647058.96407695\").toString() == \"0.0000000000714590274185505401\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("890433.23457508275525883108", Bridge.Int.format(((System.Decimal("890433.234577269")).sub(System.Decimal("0.00000218624474116892"))), 'G'), "(new Decimal(\"890433.234577269\")).sub(\"0.00000218624474116892\").toString() == \"890433.23457508275525883108\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("0.0000043469111168706293851817", Bridge.Int.format(((System.Decimal("7.7632498637602")).div(System.Decimal("1785923.30393657"))), 'G'), "(new Decimal(\"7.7632498637602\")).div(\"1785923.30393657\").toString() == \"0.0000043469111168706293851817\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("0.0003295105776320145972457301", Bridge.Int.format(((System.Decimal("5613.03226538609")).mul(System.Decimal("0.00000005870455790251"))), 'G'), "(new Decimal(\"5613.03226538609\")).mul(\"0.00000005870455790251\").toString() == \"0.0003295105776320145972457301\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("6769150.5330613094858", Bridge.Int.format(((System.Decimal("6769137.76284509")).add(System.Decimal("12.7702162194858"))), 'G'), "(new Decimal(\"6769137.76284509\")).add(\"12.7702162194858\").toString() == \"6769150.5330613094858\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("3245807.691775637069", Bridge.Int.format(((System.Decimal("987.946705887069")).add(System.Decimal("3244819.74506975"))), 'G'), "(new Decimal(\"987.946705887069\")).add(\"3244819.74506975\").toString() == \"3245807.691775637069\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("373.6556954120196391427", Bridge.Int.format(((System.Decimal("0.0000970930446391427")).add(System.Decimal("373.655598318975"))), 'G'), "(new Decimal(\"0.0000970930446391427\")).add(\"373.655598318975\").toString() == \"373.6556954120196391427\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("-0.02061165320041153501", Bridge.Int.format(((System.Decimal("0.00000085500743326499")).sub(System.Decimal("0.0206125082078448"))), 'G'), "(new Decimal(\"0.00000085500743326499\")).sub(\"0.0206125082078448\").toString() == \"-0.02061165320041153501\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("0.0000008709359977812961424188", Bridge.Int.format(((System.Decimal("0.00000001982638995155")).mul(System.Decimal("43.9281180239879"))), 'G'), "(new Decimal(\"0.00000001982638995155\")).mul(\"43.9281180239879\").toString() == \"0.0000008709359977812961424188\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("544246.62011017191540368", Bridge.Int.format(((System.Decimal("544246.617026742")).add(System.Decimal("0.00308342991540368"))), 'G'), "(new Decimal(\"544246.617026742\")).add(\"0.00308342991540368\").toString() == \"544246.62011017191540368\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("51.73313984431529452496", Bridge.Int.format(((System.Decimal("51.7331402989724")).sub(System.Decimal("0.00000045465710547504"))), 'G'), "(new Decimal(\"51.7331402989724\")).sub(\"0.00000045465710547504\").toString() == \"51.73313984431529452496\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("0.000000000046298846889617716", Bridge.Int.format(((System.Decimal("0.000107662315064884")).div(System.Decimal("2325377.89378566"))), 'G'), "(new Decimal(\"0.000107662315064884\")).div(\"2325377.89378566\").toString() == \"0.000000000046298846889617716\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("18572.0885521773395175914", Bridge.Int.format(((System.Decimal("18572.0885258969")).add(System.Decimal("0.0000262804395175914"))), 'G'), "(new Decimal(\"18572.0885258969\")).add(\"0.0000262804395175914\").toString() == \"18572.0885521773395175914\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("0.0000027531871725364104883308", Bridge.Int.format(((System.Decimal("5.44742788907486")).mul(System.Decimal("0.00000050541048520497"))), 'G'), "(new Decimal(\"5.44742788907486\")).mul(\"0.00000050541048520497\").toString() == \"0.0000027531871725364104883308\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("-12716.27520800453493739", Bridge.Int.format(((System.Decimal("0.00937844566506261")).sub(System.Decimal("12716.2845864502"))), 'G'), "(new Decimal(\"0.00937844566506261\")).sub(\"12716.2845864502\").toString() == \"-12716.27520800453493739\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("0.0000000003087983018261781959", Bridge.Int.format(((System.Decimal("0.000613210929377568")).mul(System.Decimal("0.00000050357599160801"))), 'G'), "(new Decimal(\"0.000613210929377568\")).mul(\"0.00000050357599160801\").toString() == \"0.0000000003087983018261781959\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("102.32918883824198403740845781", Bridge.Int.format(((System.Decimal("9.79164098845406")).div(System.Decimal("0.095687663506571"))), 'G'), "(new Decimal(\"9.79164098845406\")).div(\"0.095687663506571\").toString() == \"102.32918883824198403740845781\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("9928.1819875610465252535811176", Bridge.Int.format(((System.Decimal("3509.39318701131")).mul(System.Decimal("2.82903096304696"))), 'G'), "(new Decimal(\"3509.39318701131\")).mul(\"2.82903096304696\").toString() == \"9928.1819875610465252535811176\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("0.005761883809120339", Bridge.Int.format(((System.Decimal("0.00550658921501906")).add(System.Decimal("0.000255294594101279"))), 'G'), "(new Decimal(\"0.00550658921501906\")).add(\"0.000255294594101279\").toString() == \"0.005761883809120339\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("-0.00000018726902063344", Bridge.Int.format(((System.Decimal("0.00000003774064715846")).sub(System.Decimal("0.0000002250096677919"))), 'G'), "(new Decimal(\"0.00000003774064715846\")).sub(\"0.0000002250096677919\").toString() == \"-0.00000018726902063344\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("0.0000176594645959884060957208", Bridge.Int.format(((System.Decimal("0.000982163002706209")).mul(System.Decimal("0.0179801769638342"))), 'G'), "(new Decimal(\"0.000982163002706209\")).mul(\"0.0179801769638342\").toString() == \"0.0000176594645959884060957208\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("-0.60567620163151359006", Bridge.Int.format(((System.Decimal("0.00000156584160940994")).sub(System.Decimal("0.605677767473123"))), 'G'), "(new Decimal(\"0.00000156584160940994\")).sub(\"0.605677767473123\").toString() == \"-0.60567620163151359006\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("-14377.8227241141224", Bridge.Int.format(((System.Decimal("83.8072135037776")).sub(System.Decimal("14461.6299376179"))), 'G'), "(new Decimal(\"83.8072135037776\")).sub(\"14461.6299376179\").toString() == \"-14377.8227241141224\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("82431.57192252187505207205", Bridge.Int.format(((System.Decimal("0.00000005587505207205")).add(System.Decimal("82431.571922466"))), 'G'), "(new Decimal(\"0.00000005587505207205\")).add(\"82431.571922466\").toString() == \"82431.57192252187505207205\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("7479590.99871805918841", Bridge.Int.format(((System.Decimal("7479600.39762761")).sub(System.Decimal("9.39890955081159"))), 'G'), "(new Decimal(\"7479600.39762761\")).sub(\"9.39890955081159\").toString() == \"7479590.99871805918841\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("0.85300160231268362844", Bridge.Int.format(((System.Decimal("0.00000060434978762844")).add(System.Decimal("0.853000997962896"))), 'G'), "(new Decimal(\"0.00000060434978762844\")).add(\"0.853000997962896\").toString() == \"0.85300160231268362844\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("56119.27283704670739007136", Bridge.Int.format(((System.Decimal("56119.2728374709")).sub(System.Decimal("0.00000042419260992864"))), 'G'), "(new Decimal(\"56119.2728374709\")).sub(\"0.00000042419260992864\").toString() == \"56119.27283704670739007136\" FAILED");
            // #1650
            Bridge.Test.NUnit.Assert.areEqual$1("0.0000000000429259949352215200", Bridge.Int.format(((System.Decimal("0.00000008143559702739")).mul(System.Decimal("0.000527115862130707"))), 'G'), "(new Decimal(\"0.00000008143559702739\")).mul(\"0.000527115862130707\").toString() == \"0.0000000000429259949352215200\" FAILED");

            Bridge.Test.NUnit.Assert.areEqual$1("0.0002210184665192469105090427", Bridge.Int.format(((System.Decimal("0.177999768954702")).div(System.Decimal("805.361523667984"))), 'G'), "(new Decimal(\"0.177999768954702\")).div(\"805.361523667984\").toString() == \"0.0002210184665192469105090427\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("402.38051609824775058238", Bridge.Int.format(((System.Decimal("0.00000008959675058238")).add(System.Decimal("402.380516008651"))), 'G'), "(new Decimal(\"0.00000008959675058238\")).add(\"402.380516008651\").toString() == \"402.38051609824775058238\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("1157.9235974952320582596435131", Bridge.Int.format(((System.Decimal("3201536.39800918")).mul(System.Decimal("0.000361677474045045"))), 'G'), "(new Decimal(\"3201536.39800918\")).mul(\"0.000361677474045045\").toString() == \"1157.9235974952320582596435131\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("596105387691.24201370458414998", Bridge.Int.format(((System.Decimal("9903407.65095475")).mul(System.Decimal("60191.9469238221"))), 'G'), "(new Decimal(\"9903407.65095475\")).mul(\"60191.9469238221\").toString() == \"596105387691.24201370458414998\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("159156.866445745", Bridge.Int.format(((System.Decimal("293261.767501599")).sub(System.Decimal("134104.901055854"))), 'G'), "(new Decimal(\"293261.767501599\")).sub(\"134104.901055854\").toString() == \"159156.866445745\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("25483.063870515866677174995489", Bridge.Int.format(((System.Decimal("0.0000990216107103143")).div(System.Decimal("0.000000003885781208"))), 'G'), "(new Decimal(\"0.0000990216107103143\")).div(\"0.000000003885781208\").toString() == \"25483.063870515866677174995489\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("273.43581025760547419975195832", Bridge.Int.format(((System.Decimal("0.504111655756883")).mul(System.Decimal("542.411204214399"))), 'G'), "(new Decimal(\"0.504111655756883\")).mul(\"542.411204214399\").toString() == \"273.43581025760547419975195832\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("0.0000054983344821540025900927", Bridge.Int.format(((System.Decimal("0.00000002588138930773")).mul(System.Decimal("212.443559995128"))), 'G'), "(new Decimal(\"0.00000002588138930773\")).mul(\"212.443559995128\").toString() == \"0.0000054983344821540025900927\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("0.0401243778893816891004378948", Bridge.Int.format(((System.Decimal("0.00000005520699944124")).div(System.Decimal("0.00000137589670781786"))), 'G'), "(new Decimal(\"0.00000005520699944124\")).div(\"0.00000137589670781786\").toString() == \"0.0401243778893816891004378948\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("0.00005649102308903403", Bridge.Int.format(((System.Decimal("0.000056398253821022")).add(System.Decimal("0.00000009276926801203"))), 'G'), "(new Decimal(\"0.000056398253821022\")).add(\"0.00000009276926801203\").toString() == \"0.00005649102308903403\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("1217.5521632644127050450346182", Bridge.Int.format(((System.Decimal("0.0854362290750426")).div(System.Decimal("0.0000701704876824145"))), 'G'), "(new Decimal(\"0.0854362290750426\")).div(\"0.0000701704876824145\").toString() == \"1217.5521632644127050450346182\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("0.0000000000022138852190770639", Bridge.Int.format(((System.Decimal("0.00000001968172030509")).div(System.Decimal("8890.12679405982"))), 'G'), "(new Decimal(\"0.00000001968172030509\")).div(\"8890.12679405982\").toString() == \"0.0000000000022138852190770639\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("0.00004304147600337928", Bridge.Int.format(((System.Decimal("0.00000665923518438788")).add(System.Decimal("0.0000363822408189914"))), 'G'), "(new Decimal(\"0.00000665923518438788\")).add(\"0.0000363822408189914\").toString() == \"0.00004304147600337928\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("0.84670431087102625289", Bridge.Int.format(((System.Decimal("0.846703634525977")).add(System.Decimal("0.00000067634504925289"))), 'G'), "(new Decimal(\"0.846703634525977\")).add(\"0.00000067634504925289\").toString() == \"0.84670431087102625289\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("0.095390208997479793", Bridge.Int.format(((System.Decimal("0.0963102136721417")).sub(System.Decimal("0.000920004674661907"))), 'G'), "(new Decimal(\"0.0963102136721417\")).sub(\"0.000920004674661907\").toString() == \"0.095390208997479793\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("-0.00981694733288462955", Bridge.Int.format(((System.Decimal("0.00000990941151041045")).sub(System.Decimal("0.00982685674439504"))), 'G'), "(new Decimal(\"0.00000990941151041045\")).sub(\"0.00982685674439504\").toString() == \"-0.00981694733288462955\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("-0.00000990941151041045", Bridge.Int.format((System.Decimal("0.00000990941151041045").neg()), 'G'), "new Decimal(\"0.00000990941151041045\").neg().toString() == \"-0.00000990941151041045\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("0.00000990941151041045", Bridge.Int.format((System.Decimal("-0.00000990941151041045").neg()), 'G'), "new Decimal(\"-0.00000990941151041045\").neg().toString() == \"0.00000990941151041045\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("-544246.617026742", Bridge.Int.format((System.Decimal("544246.617026742").neg()), 'G'), "(new Decimal(\"544246.617026742\")).neg().toString() == \"-544246.617026742\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("544246.617026742", Bridge.Int.format((System.Decimal("-544246.617026742").neg()), 'G'), "(new Decimal(\"-544246.617026742\")).neg().toString() == \"544246.617026742\" FAILED");
            // #1588
            Bridge.Test.NUnit.Assert.areEqual$1("0", Bridge.Int.format((System.Decimal("0").neg()), 'G'), "(new Decimal(\"0\")).neg().toString() == \"0\" FAILED");

            Bridge.Test.NUnit.Assert.areEqual$1("0.8", Bridge.Int.format((System.Decimal("254.9").mod(System.Decimal("12.1"))), 'G'), "254.9 % 12.1");
            Bridge.Test.NUnit.Assert.areEqual$1("-0.8", Bridge.Int.format((System.Decimal("-254.9").mod(System.Decimal("12.1"))), 'G'), "-254.9 % 12.1");
            Bridge.Test.NUnit.Assert.areEqual$1("0.8", Bridge.Int.format((System.Decimal("254.9").mod(System.Decimal("-12.1"))), 'G'), "254.9 % -12.1");
            Bridge.Test.NUnit.Assert.areEqual$1("-0.8", Bridge.Int.format((System.Decimal("-254.9").mod(System.Decimal("-12.1"))), 'G'), "-254.9 % -12.1");
            Bridge.Test.NUnit.Assert.areEqual$1("12.1", Bridge.Int.format((System.Decimal("12.1").mod(System.Decimal("254.9"))), 'G'), "12.1 % 254.9");
            Bridge.Test.NUnit.Assert.areEqual$1("-12.1", Bridge.Int.format((System.Decimal("-12.1").mod(System.Decimal("254.9"))), 'G'), "-12.1 % 254.9");
            Bridge.Test.NUnit.Assert.areEqual$1("12.1", Bridge.Int.format((System.Decimal("12.1").mod(System.Decimal("-254.9"))), 'G'), "12.1 % -254.9");
            Bridge.Test.NUnit.Assert.areEqual$1("-12.1", Bridge.Int.format((System.Decimal("-12.1").mod(System.Decimal("-254.9"))), 'G'), "-12.1 % -254.9");
            Bridge.Test.NUnit.Assert.areEqual$1("0", Bridge.Int.format((System.Decimal("254.9").mod(System.Decimal("254.9"))), 'G'), "12.1 % 12.1");
            Bridge.Test.NUnit.Assert.areEqual$1("0", Bridge.Int.format((System.Decimal("-254.9").mod(System.Decimal("254.9"))), 'G'), "-12.1 % 12.1");
            Bridge.Test.NUnit.Assert.areEqual$1("0", Bridge.Int.format((System.Decimal("254.9").mod(System.Decimal("-254.9"))), 'G'), "12.1 % -12.1");
            Bridge.Test.NUnit.Assert.areEqual$1("0", Bridge.Int.format((System.Decimal("-254.9").mod(System.Decimal("-254.9"))), 'G'), "-12.1 % -12.1");

            Bridge.Test.NUnit.Assert.areEqual$1("0", Bridge.Int.format(System.Decimal(".9").trunc(), 'G'), "(new Decimal(\".9\").trunc() == \"0\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("0", Bridge.Int.format(System.Decimal(".999").trunc(), 'G'), "(new Decimal(\".999\").trunc() == \"0\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("0", Bridge.Int.format(System.Decimal(".999999").trunc(), 'G'), "(new Decimal(\".999999\").trunc() == \"0\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("3", Bridge.Int.format(System.Decimal("3.9999999").trunc(), 'G'), "(new Decimal(\"3.9999999\").trunc() == \"3\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("12312312313123123123123123", Bridge.Int.format(System.Decimal("12312312313123123123123123.99").trunc(), 'G'), "(new Decimal(\"12312312313123123123123123.99\").trunc() == \"12312312313123123123123123\" FAILED");
            // #1588
            Bridge.Test.NUnit.Assert.areEqual$1("0", Bridge.Int.format(System.Decimal("-.9").trunc(), 'G'), "(new Decimal(\"-.9\").trunc() == \"0\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("0", Bridge.Int.format(System.Decimal("-.999").trunc(), 'G'), "(new Decimal(\"-.999\").trunc() == \"0\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("0", Bridge.Int.format(System.Decimal("-.999999").trunc(), 'G'), "(new Decimal(\"-.999999\").trunc() == \"0\" FAILED");

            Bridge.Test.NUnit.Assert.areEqual$1("-3", Bridge.Int.format(System.Decimal("-3.9999999").trunc(), 'G'), "(new Decimal(\"-3.9999999\").trunc() == \"-3\" FAILED");
            Bridge.Test.NUnit.Assert.areEqual$1("-12312312313123123123123123", Bridge.Int.format(System.Decimal("-12312312313123123123123123.99").trunc(), 'G'), "(new Decimal(\"-12312312313123123123123123.99\").trunc() == \"-12312312313123123123123123\" FAILED");

            var d;
            d = System.Decimal(0);
            Bridge.Test.NUnit.Assert.areEqual$1("1", Bridge.Int.format(((d = d.inc())), 'G'), "(new Decimal(\"0\").inc() == \"1\" FAILED");
            d = System.Decimal(1);
            Bridge.Test.NUnit.Assert.areEqual$1("2", Bridge.Int.format(((d = d.inc())), 'G'), "(new Decimal(\"1\").inc() == \"2\" FAILED");
            d = System.Decimal(2);
            Bridge.Test.NUnit.Assert.areEqual$1("3", Bridge.Int.format(((d = d.inc())), 'G'), "(new Decimal(\"2\").inc() == \"3\" FAILED");
            d = System.Decimal(-1);
            Bridge.Test.NUnit.Assert.areEqual$1("0", Bridge.Int.format(((d = d.inc())), 'G'), "(new Decimal(\"-1\").inc() == \"0\" FAILED");
            d = System.Decimal(-2);
            Bridge.Test.NUnit.Assert.areEqual$1("-1", Bridge.Int.format(((d = d.inc())), 'G'), "(new Decimal(\"2\").inc() == \"-1\" FAILED");
            d = System.Decimal(1.5);
            Bridge.Test.NUnit.Assert.areEqual$1("2.5", Bridge.Int.format(((d = d.inc())), 'G'), "(new Decimal(\"1.5\").inc() == \"2.5\" FAILED");
            d = System.Decimal(-1.5);
            Bridge.Test.NUnit.Assert.areEqual$1("-0.5", Bridge.Int.format(((d = d.inc())), 'G'), "(new Decimal(\"-1.5\").inc() == \"-0.5\" FAILED");

            d = System.Decimal(0);
            Bridge.Test.NUnit.Assert.areEqual$1("-1", Bridge.Int.format(((d = d.dec())), 'G'), "(new Decimal(\"0\").dec().toString() == \"-1\" FAILED");
            d = System.Decimal(1);
            Bridge.Test.NUnit.Assert.areEqual$1("0", Bridge.Int.format(((d = d.dec())), 'G'), "(new Decimal(\"1\").dec().toString() == \"0\" FAILED");
            d = System.Decimal(2);
            Bridge.Test.NUnit.Assert.areEqual$1("3", Bridge.Int.format(((d = d.inc())), 'G'), "(new Decimal(\"2\").inc() == \"1\" FAILED");
            d = System.Decimal(-1);
            Bridge.Test.NUnit.Assert.areEqual$1("-2", Bridge.Int.format(((d = d.dec())), 'G'), "(new Decimal(\"-1\").dec().toString() == \"-2\" FAILED");
            d = System.Decimal(-2);
            Bridge.Test.NUnit.Assert.areEqual$1("-3", Bridge.Int.format(((d = d.dec())), 'G'), "(new Decimal(\"2\").dec().toString() == \"-3\" FAILED");
            d = System.Decimal(1.5);
            Bridge.Test.NUnit.Assert.areEqual$1("0.5", Bridge.Int.format(((d = d.dec())), 'G'), "(new Decimal(\"1.5\").dec().toString() == \"0.5\" FAILED");
            d = System.Decimal(-1.5);
            Bridge.Test.NUnit.Assert.areEqual$1("-2.5", Bridge.Int.format(((d = d.dec())), 'G'), "(new Decimal(\"-1.5\").dec().toString() == \"-2.5\" FAILED");
        }
    });

    Bridge.ns("Bridge.ClientTest.Batch4.SimpleTypes.DecimalTests", $asm.$);

    Bridge.apply($asm.$.Bridge.ClientTest.Batch4.SimpleTypes.DecimalTests, {
        f1: function () {
            System.Decimal("A123");
        },
        f2: function () {
            System.Decimal("12.34.56");
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.SimpleTypes.DoubleTests", {
        typePropertiesAreCorrect_SPI_1717: function () {
            Bridge.Test.NUnit.Assert.true(Bridge.is(Bridge.box(0.5, System.Double, $box_.System.Double.toString), System.Double));
            Bridge.Test.NUnit.Assert.areEqual("System.Double", Bridge.Reflection.getTypeFullName(System.Double));
            Bridge.Test.NUnit.Assert.false(Bridge.Reflection.isClass(System.Double));
            Bridge.Test.NUnit.Assert.true(Bridge.Reflection.isAssignableFrom(System.IComparable$1(System.Double), System.Double));
            Bridge.Test.NUnit.Assert.true(Bridge.Reflection.isAssignableFrom(System.IEquatable$1(System.Double), System.Double));
            Bridge.Test.NUnit.Assert.true(Bridge.Reflection.isAssignableFrom(System.IFormattable, System.Double));
            var d = Bridge.box(0.0, System.Double, $box_.System.Double.toString);
            Bridge.Test.NUnit.Assert.true(Bridge.is(d, System.Double));
            Bridge.Test.NUnit.Assert.true(Bridge.is(d, System.IComparable$1(System.Double)));
            Bridge.Test.NUnit.Assert.true(Bridge.is(d, System.IEquatable$1(System.Double)));
            Bridge.Test.NUnit.Assert.true(Bridge.is(d, System.IFormattable));

            var interfaces = Bridge.Reflection.getInterfaces(System.Double);
            Bridge.Test.NUnit.Assert.areEqual(4, interfaces.length);
            Bridge.Test.NUnit.Assert.true(System.Array.contains(interfaces, System.IComparable$1(System.Double), Function));
            Bridge.Test.NUnit.Assert.true(System.Array.contains(interfaces, System.IEquatable$1(System.Double), Function));
            Bridge.Test.NUnit.Assert.true(System.Array.contains(interfaces, System.IFormattable, Function));
        },
        getDefaultValue: function (T) {
            return Bridge.getDefaultValue(T);
        },
        defaultValueIs0: function () {
            Bridge.Test.NUnit.Assert.areStrictEqual(0, this.getDefaultValue(System.Double));
        },
        creatingInstanceReturnsZero: function () {
            Bridge.Test.NUnit.Assert.areStrictEqual(0, Bridge.createInstance(System.Double));
        },
        constantsWork: function () {
            var zero = 0;
            Bridge.Test.NUnit.Assert.true$1(System.Double.min < System.Nullable.getValue(Bridge.cast(Bridge.unbox(Bridge.box(-1.7E+308, System.Double, $box_.System.Double.toString)), System.Double)), "MinValue should be correct");
            Bridge.Test.NUnit.Assert.true$1(System.Double.max > System.Nullable.getValue(Bridge.cast(Bridge.unbox(Bridge.box(1.7E+308, System.Double, $box_.System.Double.toString)), System.Double)), "MaxValue should be correct");
            // Not C# API
            //Assert.AreEqual(double.JsMinValue, 5e-324, "MinValue should be correct");
            Bridge.Test.NUnit.Assert.areEqual$1(4.94065645841247E-324, 4.94065645841247E-324, "MinValue should be correct");
            Bridge.Test.NUnit.Assert.true$1(isNaN(Number.NaN), "NaN should be correct");
            Bridge.Test.NUnit.Assert.areStrictEqual$1(1 / zero, Number.POSITIVE_INFINITY, "PositiveInfinity should be correct");
            Bridge.Test.NUnit.Assert.areStrictEqual$1(-1 / zero, Number.NEGATIVE_INFINITY, "NegativeInfinity should be correct");
        },
        defaultConstructorReturnsZero: function () {
            Bridge.Test.NUnit.Assert.areStrictEqual(0, Number());
        },
        formatWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual("123", System.Double.format((291.0), "x"));
        },
        toStringWithFormatWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual("123", System.Double.format((291.0), "x"));
        },
        toStringWithFormatAndProviderWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual("123", System.Double.format((291.0), "x", System.Globalization.CultureInfo.invariantCulture));
        },
        iFormattableToStringWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual("123", Bridge.format(291.0, "x", System.Globalization.CultureInfo.invariantCulture));
        },
        toStringWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual("123", System.Double.format((123.0), 'G'));
        },
        toExponentialWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual("1.23e+2", (123.0).toExponential());
        },
        toExponentialWithFractionalDigitsWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual("1.2e+2", (123.0).toExponential(1));
        },
        toFixed: function () {
            Bridge.Test.NUnit.Assert.areEqual("123", (123.0).toFixed());
        },
        toFixedWithFractionalDigitsWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual("123.0", (123.0).toFixed(1));
        },
        toPrecisionWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual("12345", (12345.0).toPrecision());
        },
        toPrecisionWithPrecisionWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual("1.2e+4", (12345.0).toPrecision(2));
        },
        isPositiveInfinityWorks_SPI_1600: function () {
            var inf = Infinity;

            // #1600
            Bridge.Test.NUnit.Assert.true((inf === Number.POSITIVE_INFINITY));
            Bridge.Test.NUnit.Assert.false((-inf === Number.POSITIVE_INFINITY));
            Bridge.Test.NUnit.Assert.false((0.0 === Number.POSITIVE_INFINITY));
            Bridge.Test.NUnit.Assert.false((Number.NaN === Number.POSITIVE_INFINITY));
        },
        isNegativeInfinityWorks: function () {
            var inf = Infinity;
            Bridge.Test.NUnit.Assert.false((inf === Number.NEGATIVE_INFINITY));
            Bridge.Test.NUnit.Assert.true((-inf === Number.NEGATIVE_INFINITY));
            Bridge.Test.NUnit.Assert.false((0.0 === Number.NEGATIVE_INFINITY));
            Bridge.Test.NUnit.Assert.false((Number.NaN === Number.NEGATIVE_INFINITY));
        },
        isInfinityWorks: function () {
            var inf = Infinity;
            Bridge.Test.NUnit.Assert.true((Math.abs(inf) === Number.POSITIVE_INFINITY));
            Bridge.Test.NUnit.Assert.true((Math.abs(-inf) === Number.POSITIVE_INFINITY));
            Bridge.Test.NUnit.Assert.false((Math.abs(0.0) === Number.POSITIVE_INFINITY));
            Bridge.Test.NUnit.Assert.false((Math.abs(Number.NaN) === Number.POSITIVE_INFINITY));
        },
        isFiniteWorks: function () {
            var zero = 0, one = 1;
            Bridge.Test.NUnit.Assert.true(isFinite(one));
            Bridge.Test.NUnit.Assert.false(isFinite(one / zero));
            Bridge.Test.NUnit.Assert.false(isFinite(zero / zero));
        },
        isNaNWorks: function () {
            var zero = 0, one = 1;
            Bridge.Test.NUnit.Assert.false(isNaN(one));
            Bridge.Test.NUnit.Assert.false(isNaN(one / zero));
            Bridge.Test.NUnit.Assert.true(isNaN(zero / zero));
        },
        getHashCodeWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual(System.Double.getHashCode((0.0)), System.Double.getHashCode((0.0)));
            Bridge.Test.NUnit.Assert.areEqual(System.Double.getHashCode((1.0)), System.Double.getHashCode((1.0)));
            Bridge.Test.NUnit.Assert.areNotEqual(System.Double.getHashCode((1.0)), System.Double.getHashCode((0.0)));
            Bridge.Test.NUnit.Assert.areNotEqual(System.Double.getHashCode((0.5)), System.Double.getHashCode((0.0)));
        },
        equalsWorks: function () {
            Bridge.Test.NUnit.Assert.true(System.Double.equals((0.0), Bridge.box(0.0, System.Double, $box_.System.Double.toString)));
            Bridge.Test.NUnit.Assert.false(System.Double.equals((1.0), Bridge.box(0.0, System.Double, $box_.System.Double.toString)));
            Bridge.Test.NUnit.Assert.false(System.Double.equals((0.0), Bridge.box(0.5, System.Double, $box_.System.Double.toString)));
            Bridge.Test.NUnit.Assert.true(System.Double.equals((1.0), Bridge.box(1.0, System.Double, $box_.System.Double.toString)));
        },
        iEquatableEqualsWorks: function () {
            Bridge.Test.NUnit.Assert.true((0.0) === 0.0);
            Bridge.Test.NUnit.Assert.false((1.0) === 0.0);
            Bridge.Test.NUnit.Assert.false((0.0) === 0.5);
            Bridge.Test.NUnit.Assert.true((1.0) === 1.0);

            Bridge.Test.NUnit.Assert.true(Bridge.equalsT(0.0, 0.0, System.Double));
            Bridge.Test.NUnit.Assert.false(Bridge.equalsT(1.0, 0.0, System.Double));
            Bridge.Test.NUnit.Assert.false(Bridge.equalsT(0.0, 0.5, System.Double));
            Bridge.Test.NUnit.Assert.true(Bridge.equalsT(1.0, 1.0, System.Double));
        },
        compareToWorks: function () {
            Bridge.Test.NUnit.Assert.true(Bridge.compare((0.0), 0.0) === 0);
            Bridge.Test.NUnit.Assert.true(Bridge.compare((1.0), 0.0) > 0);
            Bridge.Test.NUnit.Assert.true(Bridge.compare((0.0), 0.5) < 0);
            Bridge.Test.NUnit.Assert.true(Bridge.compare((1.0), 1.0) === 0);
        },
        iComparableCompareToWorks: function () {
            Bridge.Test.NUnit.Assert.true(Bridge.compare(0.0, 0.0, false, System.Double) === 0);
            Bridge.Test.NUnit.Assert.true(Bridge.compare(1.0, 0.0, false, System.Double) > 0);
            Bridge.Test.NUnit.Assert.true(Bridge.compare(0.0, 0.5, false, System.Double) < 0);
            Bridge.Test.NUnit.Assert.true(Bridge.compare(1.0, 1.0, false, System.Double) === 0);
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.SimpleTypes.EnumTests", {
        typePropertiesAreCorrect: function () {
            Bridge.Test.NUnit.Assert.areEqual("System.Enum", Bridge.Reflection.getTypeFullName(System.Enum));
            Bridge.Test.NUnit.Assert.areEqual("Bridge.ClientTest.Batch4.SimpleTypes.EnumTests+TestEnum", Bridge.Reflection.getTypeFullName(Bridge.ClientTest.Batch4.SimpleTypes.EnumTests.TestEnum));
            Bridge.Test.NUnit.Assert.true(Bridge.Reflection.isEnum(Bridge.ClientTest.Batch4.SimpleTypes.EnumTests.TestEnum));
            Bridge.Test.NUnit.Assert.false(Bridge.Reflection.isFlags(Bridge.ClientTest.Batch4.SimpleTypes.EnumTests.TestEnum));
            Bridge.Test.NUnit.Assert.true(Bridge.Reflection.isEnum(Bridge.ClientTest.Batch4.SimpleTypes.EnumTests.FlagsEnum));
            Bridge.Test.NUnit.Assert.true(Bridge.Reflection.isFlags(Bridge.ClientTest.Batch4.SimpleTypes.EnumTests.FlagsEnum));
            Bridge.Test.NUnit.Assert.true(Bridge.is(Bridge.box(Bridge.ClientTest.Batch4.SimpleTypes.EnumTests.TestEnum.FirstValue, Bridge.ClientTest.Batch4.SimpleTypes.EnumTests.TestEnum, $box_.Bridge.ClientTest.Batch4.SimpleTypes.EnumTests.TestEnum.toString), System.Int32));

            var interfaces = Bridge.Reflection.getInterfaces(Bridge.ClientTest.Batch4.SimpleTypes.EnumTests.TestEnum);
            Bridge.Test.NUnit.Assert.areEqual(2, interfaces.length);
        },
        getDefaultValue: function (T) {
            return Bridge.getDefaultValue(T);
        },
        defaultValueOfEnumClassIsNull: function () {
            Bridge.Test.NUnit.Assert.areStrictEqual(null, this.getDefaultValue(System.Enum));
        },
        defaultValueOfEnumTypeIsZero_SPI_1595: function () {
            // #1595
            Bridge.Test.NUnit.Assert.areEqual(Bridge.ClientTest.Batch4.SimpleTypes.EnumTests.TestEnum.FirstValue, this.getDefaultValue(Bridge.ClientTest.Batch4.SimpleTypes.EnumTests.TestEnum));
        },
        defaultConstructorOfEnumTypeReturnsZero_SPI_1595: function () {
            // #1595
            Bridge.Test.NUnit.Assert.areEqual(Bridge.ClientTest.Batch4.SimpleTypes.EnumTests.TestEnum.FirstValue, (0));
        },
        creatingInstanceOfEnumTypeReturnsZero_SPI_1595: function () {
            // #1595
            Bridge.Test.NUnit.Assert.areEqual(Bridge.ClientTest.Batch4.SimpleTypes.EnumTests.TestEnum.FirstValue, Bridge.createInstance(Bridge.ClientTest.Batch4.SimpleTypes.EnumTests.TestEnum));
        },
        defaultExpressionWithEnumReturnsZero_SPI_1595: function () {
            // #1595
            Bridge.Test.NUnit.Assert.areEqual(Bridge.ClientTest.Batch4.SimpleTypes.EnumTests.TestEnum.FirstValue, 0);
        },
        parseWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual(Bridge.ClientTest.Batch4.SimpleTypes.EnumTests.TestEnum.FirstValue, System.Nullable.getValue(Bridge.cast(Bridge.unbox(System.Enum.parse(Bridge.ClientTest.Batch4.SimpleTypes.EnumTests.TestEnum, "FirstValue")), System.Int32)));
            Bridge.Test.NUnit.Assert.areEqual(5, System.Nullable.getValue(Bridge.cast(Bridge.unbox(System.Enum.parse(Bridge.ClientTest.Batch4.SimpleTypes.EnumTests.FlagsEnum, "FirstValue, ThirdValue")), System.Int32)));
        },
        staticToStringWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual("FirstValue", System.Enum.toString(Bridge.ClientTest.Batch4.SimpleTypes.EnumTests.TestEnum, Bridge.box(Bridge.ClientTest.Batch4.SimpleTypes.EnumTests.TestEnum.FirstValue, Bridge.ClientTest.Batch4.SimpleTypes.EnumTests.TestEnum, $box_.Bridge.ClientTest.Batch4.SimpleTypes.EnumTests.TestEnum.toString)));
            Bridge.Test.NUnit.Assert.areEqual("FirstValue, ThirdValue", System.Enum.toString(Bridge.ClientTest.Batch4.SimpleTypes.EnumTests.FlagsEnum, Bridge.box(5, Bridge.ClientTest.Batch4.SimpleTypes.EnumTests.FlagsEnum, $box_.Bridge.ClientTest.Batch4.SimpleTypes.EnumTests.FlagsEnum.toString)));
        },
        getHashCodeWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual(Bridge.getHashCode(Bridge.ClientTest.Batch4.SimpleTypes.EnumTests.TestEnum.FirstValue), Bridge.getHashCode(Bridge.ClientTest.Batch4.SimpleTypes.EnumTests.TestEnum.FirstValue));
            Bridge.Test.NUnit.Assert.areNotEqual(Bridge.getHashCode(Bridge.ClientTest.Batch4.SimpleTypes.EnumTests.TestEnum.SecondValue), Bridge.getHashCode(Bridge.ClientTest.Batch4.SimpleTypes.EnumTests.TestEnum.FirstValue));
        },
        equalsWorks: function () {
            Bridge.Test.NUnit.Assert.true(System.Enum.equals(Bridge.ClientTest.Batch4.SimpleTypes.EnumTests.TestEnum.FirstValue, Bridge.box(Bridge.ClientTest.Batch4.SimpleTypes.EnumTests.TestEnum.FirstValue, Bridge.ClientTest.Batch4.SimpleTypes.EnumTests.TestEnum, $box_.Bridge.ClientTest.Batch4.SimpleTypes.EnumTests.TestEnum.toString), Bridge.ClientTest.Batch4.SimpleTypes.EnumTests.TestEnum));
            Bridge.Test.NUnit.Assert.false(System.Enum.equals(Bridge.ClientTest.Batch4.SimpleTypes.EnumTests.TestEnum.FirstValue, Bridge.box(Bridge.ClientTest.Batch4.SimpleTypes.EnumTests.TestEnum.SecondValue, Bridge.ClientTest.Batch4.SimpleTypes.EnumTests.TestEnum, $box_.Bridge.ClientTest.Batch4.SimpleTypes.EnumTests.TestEnum.toString), Bridge.ClientTest.Batch4.SimpleTypes.EnumTests.TestEnum));
        },
        conversionsToEnumAreTreatedAsConversionsToTheUnderlyingType_SPI_1596: function () {
            Bridge.Test.NUnit.Assert.areEqual(0, System.Nullable.getValue(Bridge.cast(Bridge.unbox(Bridge.box(0, System.Int32)), System.Int32)));
            // #1596
            Bridge.Test.NUnit.Assert.throws$6(System.InvalidCastException, $asm.$.Bridge.ClientTest.Batch4.SimpleTypes.EnumTests.f1);
        },
        getValuesWorks: function () {
            var values = System.Enum.getValues(Bridge.ClientTest.Batch4.SimpleTypes.EnumTests.TestEnum);
            Bridge.Test.NUnit.Assert.areEqual(3, values.length);
            Bridge.Test.NUnit.Assert.areEqual(Bridge.ClientTest.Batch4.SimpleTypes.EnumTests.TestEnum.FirstValue, Bridge.unbox(System.Array.get(values, 0)));
            Bridge.Test.NUnit.Assert.areEqual(Bridge.ClientTest.Batch4.SimpleTypes.EnumTests.TestEnum.SecondValue, Bridge.unbox(System.Array.get(values, 1)));
            Bridge.Test.NUnit.Assert.areEqual(Bridge.ClientTest.Batch4.SimpleTypes.EnumTests.TestEnum.ThirdValue, Bridge.unbox(System.Array.get(values, 2)));

            values = System.Enum.getValues(Bridge.ClientTest.Batch4.SimpleTypes.EnumTests.FlagsEnum);
            Bridge.Test.NUnit.Assert.areEqual(4, values.length);
            Bridge.Test.NUnit.Assert.areEqual(Bridge.ClientTest.Batch4.SimpleTypes.EnumTests.FlagsEnum.None, Bridge.unbox(System.Array.get(values, 0)));
            Bridge.Test.NUnit.Assert.areEqual(Bridge.ClientTest.Batch4.SimpleTypes.EnumTests.FlagsEnum.FirstValue, Bridge.unbox(System.Array.get(values, 1)));
            Bridge.Test.NUnit.Assert.areEqual(Bridge.ClientTest.Batch4.SimpleTypes.EnumTests.FlagsEnum.SecondValue, Bridge.unbox(System.Array.get(values, 2)));
            Bridge.Test.NUnit.Assert.areEqual(Bridge.ClientTest.Batch4.SimpleTypes.EnumTests.FlagsEnum.ThirdValue, Bridge.unbox(System.Array.get(values, 3)));
        }
    });

    Bridge.ns("Bridge.ClientTest.Batch4.SimpleTypes.EnumTests", $asm.$);

    Bridge.apply($asm.$.Bridge.ClientTest.Batch4.SimpleTypes.EnumTests, {
        f1: function () {
            var _ = System.Nullable.getValue(Bridge.cast(Bridge.unbox(Bridge.box(0.5, System.Double, $box_.System.Double.toString)), System.Int32));
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.SimpleTypes.EnumTests.FlagsEnum", {
        $kind: "enum",
        statics: {
            None: 0,
            FirstValue: 1,
            SecondValue: 2,
            ThirdValue: 4
        },
        $flags: true
    });

    Bridge.define("Bridge.ClientTest.Batch4.SimpleTypes.EnumTests.TestEnum", {
        $kind: "enum",
        statics: {
            FirstValue: 0,
            SecondValue: 1,
            ThirdValue: 2
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.SimpleTypes.Int16Tests", {
        typePropertiesAreCorrect_SPI_1717: function () {
            Bridge.Test.NUnit.Assert.true(Bridge.is(Bridge.box(0, System.Int16), System.Int16));
            Bridge.Test.NUnit.Assert.false(Bridge.is(Bridge.box(0.5, System.Double, $box_.System.Double.toString), System.Int16));
            Bridge.Test.NUnit.Assert.false(Bridge.is(Bridge.box(-32769, System.Int32), System.Int16));
            Bridge.Test.NUnit.Assert.false(Bridge.is(Bridge.box(32768, System.Int32), System.Int16));
            Bridge.Test.NUnit.Assert.areEqual("System.Int16", Bridge.Reflection.getTypeFullName(System.Int16));
            Bridge.Test.NUnit.Assert.false(Bridge.Reflection.isClass(System.Int16));
            Bridge.Test.NUnit.Assert.true(Bridge.Reflection.isAssignableFrom(System.IComparable$1(System.Int16), System.Int16));
            Bridge.Test.NUnit.Assert.true(Bridge.Reflection.isAssignableFrom(System.IEquatable$1(System.Int16), System.Int16));
            Bridge.Test.NUnit.Assert.true(Bridge.Reflection.isAssignableFrom(System.IFormattable, System.Int16));
            var s = Bridge.box(0, System.Int16);
            Bridge.Test.NUnit.Assert.true(Bridge.is(s, System.Int16));
            Bridge.Test.NUnit.Assert.true(Bridge.is(s, System.IComparable$1(System.Int16)));
            Bridge.Test.NUnit.Assert.true(Bridge.is(s, System.IEquatable$1(System.Int16)));
            Bridge.Test.NUnit.Assert.true(Bridge.is(s, System.IFormattable));

            var interfaces = Bridge.Reflection.getInterfaces(System.Int16);
            Bridge.Test.NUnit.Assert.areEqual(4, interfaces.length);
            Bridge.Test.NUnit.Assert.true(System.Array.contains(interfaces, System.IComparable$1(System.Int16), Function));
            Bridge.Test.NUnit.Assert.true(System.Array.contains(interfaces, System.IEquatable$1(System.Int16), Function));
            Bridge.Test.NUnit.Assert.true(System.Array.contains(interfaces, System.IFormattable, Function));
        },
        castsWork: function () {
            var i1 = -32769, i2 = -32768, i3 = 5754, i4 = 32767, i5 = 32768;
            var ni1 = -32769, ni2 = -32768, ni3 = 5754, ni4 = 32767, ni5 = 32768, ni6 = null;

            Bridge.Test.NUnit.Assert.areStrictEqual$1(32767, Bridge.Int.sxs(i1 & 65535), "-32769 unchecked");
            Bridge.Test.NUnit.Assert.areStrictEqual$1(-32768, Bridge.Int.sxs(i2 & 65535), "-32768 unchecked");
            Bridge.Test.NUnit.Assert.areStrictEqual$1(5754, Bridge.Int.sxs(i3 & 65535), "5754 unchecked");
            Bridge.Test.NUnit.Assert.areStrictEqual$1(32767, Bridge.Int.sxs(i4 & 65535), "32767 unchecked");
            Bridge.Test.NUnit.Assert.areStrictEqual$1(-32768, Bridge.Int.sxs(i5 & 65535), "32768 unchecked");

            Bridge.Test.NUnit.Assert.areStrictEqual$1(32767, Bridge.Int.clip16(ni1), "nullable -32769 unchecked");
            Bridge.Test.NUnit.Assert.areStrictEqual$1(-32768, Bridge.Int.clip16(ni2), "nullable -32768 unchecked");
            Bridge.Test.NUnit.Assert.areStrictEqual$1(5754, Bridge.Int.clip16(ni3), "nullable 5754 unchecked");
            Bridge.Test.NUnit.Assert.areStrictEqual$1(32767, Bridge.Int.clip16(ni4), "nullable 32767 unchecked");
            Bridge.Test.NUnit.Assert.areStrictEqual$1(-32768, Bridge.Int.clip16(ni5), "nullable 32768 unchecked");
            Bridge.Test.NUnit.Assert.areStrictEqual$1(null, Bridge.Int.clip16(ni6), "null unchecked");

            Bridge.Test.NUnit.Assert.throws$7(System.OverflowException, function () {
                var x = Bridge.Int.check(i1, System.Int16);
            }, "-32769 checked");
            Bridge.Test.NUnit.Assert.areStrictEqual$1(-32768, Bridge.Int.check(i2, System.Int16), "-32768 checked");
            Bridge.Test.NUnit.Assert.areStrictEqual$1(5754, Bridge.Int.check(i3, System.Int16), "5754 checked");
            Bridge.Test.NUnit.Assert.areStrictEqual$1(32767, Bridge.Int.check(i4, System.Int16), "32767 checked");
            Bridge.Test.NUnit.Assert.throws$7(System.OverflowException, function () {
                var x = Bridge.Int.check(i5, System.Int16);
            }, "32768 checked");

            Bridge.Test.NUnit.Assert.throws$7(System.OverflowException, function () {
                var x = Bridge.Int.check(ni1, System.Int16);
            }, "nullable -32769 checked");
            Bridge.Test.NUnit.Assert.areStrictEqual$1(-32768, Bridge.Int.check(ni2, System.Int16), "nullable -32768 checked");
            Bridge.Test.NUnit.Assert.areStrictEqual$1(5754, Bridge.Int.check(ni3, System.Int16), "nullable 5754 checked");
            Bridge.Test.NUnit.Assert.areStrictEqual$1(32767, Bridge.Int.check(ni4, System.Int16), "nullable 32767 checked");
            Bridge.Test.NUnit.Assert.throws$7(System.OverflowException, function () {
                var x = Bridge.Int.check(ni5, System.Int16);
            }, "nullable 32768 checked");
            Bridge.Test.NUnit.Assert.areStrictEqual$1(null, Bridge.Int.check(ni6, System.Int16), "null checked");
        },
        getDefaultValue: function (T) {
            return Bridge.getDefaultValue(T);
        },
        defaultValueIs0: function () {
            Bridge.Test.NUnit.Assert.areStrictEqual(0, this.getDefaultValue(System.Int16));
        },
        defaultConstructorReturnsZero: function () {
            Bridge.Test.NUnit.Assert.areStrictEqual(0, Number());
        },
        creatingInstanceReturnsZero: function () {
            Bridge.Test.NUnit.Assert.areStrictEqual(0, Bridge.createInstance(System.Int16));
        },
        constantsWork: function () {
            Bridge.Test.NUnit.Assert.areEqual(-32768, -32768);
            Bridge.Test.NUnit.Assert.areEqual(32767, 32767);
        },
        formatWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual("123", System.Int16.format((291), "x"));
        },
        toStringWithFormatWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual("123", System.Int16.format((291), "x"));
        },
        toStringWithFormatAndProviderWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual("123", System.Int16.format((291), "x", System.Globalization.CultureInfo.invariantCulture));
        },
        iFormattableToStringWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual("123", Bridge.format(291, "x", System.Globalization.CultureInfo.invariantCulture));
        },
        tryParseWorks_SPI_1592: function () {
            var numberResult = { };
            var result = System.Int16.tryParse("234", numberResult);
            Bridge.Test.NUnit.Assert.true(result);
            Bridge.Test.NUnit.Assert.areEqual(234, numberResult.v);

            result = System.Int16.tryParse("", numberResult);
            Bridge.Test.NUnit.Assert.false(result);
            Bridge.Test.NUnit.Assert.areEqual(0, numberResult.v);

            result = System.Int16.tryParse(null, numberResult);
            Bridge.Test.NUnit.Assert.false(result);
            Bridge.Test.NUnit.Assert.areEqual(0, numberResult.v);

            result = System.Int16.tryParse("notanumber", numberResult);
            Bridge.Test.NUnit.Assert.false(result);
            Bridge.Test.NUnit.Assert.areEqual(0, numberResult.v);

            result = System.Int16.tryParse("54768", numberResult);
            Bridge.Test.NUnit.Assert.false(result);
            // #1592
            Bridge.Test.NUnit.Assert.areEqual(0, numberResult.v);

            result = System.Int16.tryParse("-55678", numberResult);
            Bridge.Test.NUnit.Assert.false(result);
            // #1592
            Bridge.Test.NUnit.Assert.areEqual(0, numberResult.v);

            result = System.Int16.tryParse("2.5", numberResult);
            Bridge.Test.NUnit.Assert.false(result);
            Bridge.Test.NUnit.Assert.areEqual(0, numberResult.v);
        },
        parseWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual(234, System.Int16.parse("234"));
            Bridge.Test.NUnit.Assert.throws$6(System.FormatException, $asm.$.Bridge.ClientTest.Batch4.SimpleTypes.Int16Tests.f1);
            Bridge.Test.NUnit.Assert.throws$6(System.ArgumentNullException, $asm.$.Bridge.ClientTest.Batch4.SimpleTypes.Int16Tests.f2);
            Bridge.Test.NUnit.Assert.throws$6(System.FormatException, $asm.$.Bridge.ClientTest.Batch4.SimpleTypes.Int16Tests.f3);
            Bridge.Test.NUnit.Assert.throws$6(System.OverflowException, $asm.$.Bridge.ClientTest.Batch4.SimpleTypes.Int16Tests.f4);
            Bridge.Test.NUnit.Assert.throws$6(System.OverflowException, $asm.$.Bridge.ClientTest.Batch4.SimpleTypes.Int16Tests.f5);
            Bridge.Test.NUnit.Assert.throws$6(System.FormatException, $asm.$.Bridge.ClientTest.Batch4.SimpleTypes.Int16Tests.f6);
        },
        toStringWithoutRadixWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual("123", (123).toString());
        },
        toStringWithRadixWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual("123", (123).toString(10));
            Bridge.Test.NUnit.Assert.areEqual("123", (291).toString(16));
        },
        getHashCodeWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual(Bridge.getHashCode((0)), Bridge.getHashCode((0)));
            Bridge.Test.NUnit.Assert.areEqual(Bridge.getHashCode((1)), Bridge.getHashCode((1)));
            Bridge.Test.NUnit.Assert.areNotEqual(Bridge.getHashCode((1)), Bridge.getHashCode((0)));
        },
        equalsWorks: function () {
            Bridge.Test.NUnit.Assert.true(System.Int16.equals((0), Bridge.box(0, System.Int16)));
            Bridge.Test.NUnit.Assert.false(System.Int16.equals((1), Bridge.box(0, System.Int16)));
            Bridge.Test.NUnit.Assert.false(System.Int16.equals((0), Bridge.box(1, System.Int16)));
            Bridge.Test.NUnit.Assert.true(System.Int16.equals((1), Bridge.box(1, System.Int16)));
        },
        iEquatableEqualsWorks: function () {
            Bridge.Test.NUnit.Assert.true((0) === 0);
            Bridge.Test.NUnit.Assert.false((1) === 0);
            Bridge.Test.NUnit.Assert.false((0) === 1);
            Bridge.Test.NUnit.Assert.true((1) === 1);

            Bridge.Test.NUnit.Assert.true(Bridge.equalsT(0, 0, System.Int16));
            Bridge.Test.NUnit.Assert.false(Bridge.equalsT(1, 0, System.Int16));
            Bridge.Test.NUnit.Assert.false(Bridge.equalsT(0, 1, System.Int16));
            Bridge.Test.NUnit.Assert.true(Bridge.equalsT(1, 1, System.Int16));
        },
        compareToWorks: function () {
            Bridge.Test.NUnit.Assert.true(Bridge.compare((0), 0) === 0);
            Bridge.Test.NUnit.Assert.true(Bridge.compare((1), 0) > 0);
            Bridge.Test.NUnit.Assert.true(Bridge.compare((0), 1) < 0);
        },
        iComparableCompareToWorks: function () {
            Bridge.Test.NUnit.Assert.true(Bridge.compare(0, 0, false, System.Int16) === 0);
            Bridge.Test.NUnit.Assert.true(Bridge.compare(1, 0, false, System.Int16) > 0);
            Bridge.Test.NUnit.Assert.true(Bridge.compare(0, 1, false, System.Int16) < 0);
        }
    });

    Bridge.ns("Bridge.ClientTest.Batch4.SimpleTypes.Int16Tests", $asm.$);

    Bridge.apply($asm.$.Bridge.ClientTest.Batch4.SimpleTypes.Int16Tests, {
        f1: function () {
            System.Int16.parse("");
        },
        f2: function () {
            System.Int16.parse(null);
        },
        f3: function () {
            System.Int16.parse("notanumber");
        },
        f4: function () {
            System.Int16.parse("54768");
        },
        f5: function () {
            System.Int16.parse("-55678");
        },
        f6: function () {
            System.Int16.parse("2.5");
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.SimpleTypes.Int32Tests", {
        typePropertiesAreCorrect_SPI_1717: function () {
            Bridge.Test.NUnit.Assert.true(Bridge.is(Bridge.box(0, System.Int32), System.Int32));
            Bridge.Test.NUnit.Assert.false(Bridge.is(Bridge.box(0.5, System.Double, $box_.System.Double.toString), System.Int32));
            Bridge.Test.NUnit.Assert.false(Bridge.is(System.Int64([2147483647,-1]), System.Int32));
            Bridge.Test.NUnit.Assert.false(Bridge.is(Bridge.box(2147483648, System.UInt32), System.Int32));
            Bridge.Test.NUnit.Assert.areEqual("System.Int32", Bridge.Reflection.getTypeFullName(System.Int32));
            Bridge.Test.NUnit.Assert.false(Bridge.Reflection.isClass(System.Int32));
            Bridge.Test.NUnit.Assert.true(Bridge.Reflection.isAssignableFrom(System.IComparable$1(System.Int32), System.Int32));
            Bridge.Test.NUnit.Assert.true(Bridge.Reflection.isAssignableFrom(System.IEquatable$1(System.Int32), System.Int32));
            Bridge.Test.NUnit.Assert.true(Bridge.Reflection.isAssignableFrom(System.IFormattable, System.Int32));
            var i = Bridge.box(0, System.Int32);
            Bridge.Test.NUnit.Assert.true(Bridge.is(i, System.Int32));
            Bridge.Test.NUnit.Assert.true(Bridge.is(i, System.IComparable$1(System.Int32)));
            Bridge.Test.NUnit.Assert.true(Bridge.is(i, System.IEquatable$1(System.Int32)));
            Bridge.Test.NUnit.Assert.true(Bridge.is(i, System.IFormattable));

            var interfaces = Bridge.Reflection.getInterfaces(System.Int32);
            Bridge.Test.NUnit.Assert.areEqual(4, interfaces.length);
            Bridge.Test.NUnit.Assert.true(System.Array.contains(interfaces, System.IComparable$1(System.Int32), Function));
            Bridge.Test.NUnit.Assert.true(System.Array.contains(interfaces, System.IEquatable$1(System.Int32), Function));
            Bridge.Test.NUnit.Assert.true(System.Array.contains(interfaces, System.IFormattable, Function));
        },
        castsWork: function () {
            var i1 = System.Int64([2147483647,-1]), i2 = System.Int64.lift(-2147483648), i3 = System.Int64(5754), i4 = System.Int64(2147483647), i5 = System.Int64(2147483648);
            var ni1 = System.Int64([2147483647,-1]), ni2 = System.Int64.lift(-2147483648), ni3 = System.Int64(5754), ni4 = System.Int64(2147483647), ni5 = System.Int64(2147483648), ni6 = System.Int64.lift(null);

            Bridge.Test.NUnit.Assert.areStrictEqual$1(2147483647, System.Int64.clip32(System.Nullable.getValue(i1)), "-2147483649 unchecked");
            Bridge.Test.NUnit.Assert.areStrictEqual$1(-2147483648, System.Int64.clip32(System.Nullable.getValue(i2)), "-2147483648 unchecked");
            Bridge.Test.NUnit.Assert.areStrictEqual$1(5754, System.Int64.clip32(System.Nullable.getValue(i3)), "5754 unchecked");
            Bridge.Test.NUnit.Assert.areStrictEqual$1(2147483647, System.Int64.clip32(System.Nullable.getValue(i4)), "2147483647 unchecked");
            Bridge.Test.NUnit.Assert.areStrictEqual$1(-2147483648, System.Int64.clip32(System.Nullable.getValue(i5)), "2147483648 unchecked");

            Bridge.Test.NUnit.Assert.areStrictEqual$1(2147483647, System.Int64.clip32(ni1), "nullable -2147483649 unchecked");
            Bridge.Test.NUnit.Assert.areStrictEqual$1(-2147483648, System.Int64.clip32(ni2), "nullable -2147483648 unchecked");
            Bridge.Test.NUnit.Assert.areStrictEqual$1(5754, System.Int64.clip32(ni3), "nullable 5754 unchecked");
            Bridge.Test.NUnit.Assert.areStrictEqual$1(2147483647, System.Int64.clip32(ni4), "nullable 2147483647 unchecked");
            Bridge.Test.NUnit.Assert.areStrictEqual$1(-2147483648, System.Int64.clip32(ni5), "nullable 2147483648 unchecked");
            Bridge.Test.NUnit.Assert.areStrictEqual$1(null, System.Int64.clip32(ni6), "null unchecked");

            Bridge.Test.NUnit.Assert.throws$7(System.OverflowException, function () {
                var x = System.Int64.check(System.Nullable.getValue(i1), System.Int32);
            }, "-2147483649 checked");
            Bridge.Test.NUnit.Assert.areStrictEqual$1(-2147483648, System.Int64.check(System.Nullable.getValue(i2), System.Int32), "-2147483648 checked");
            Bridge.Test.NUnit.Assert.areStrictEqual$1(5754, System.Int64.check(System.Nullable.getValue(i3), System.Int32), "5754 checked");
            Bridge.Test.NUnit.Assert.areStrictEqual$1(2147483647, System.Int64.check(System.Nullable.getValue(i4), System.Int32), "2147483647 checked");
            Bridge.Test.NUnit.Assert.throws$7(System.OverflowException, function () {
                var x = System.Int64.check(System.Nullable.getValue(i5), System.Int32);
            }, "32768 checked");

            Bridge.Test.NUnit.Assert.throws$7(System.OverflowException, function () {
                var x = System.Int64.check(ni1, System.Int32);
            }, "nullable -2147483649 checked");
            Bridge.Test.NUnit.Assert.areStrictEqual$1(-2147483648, System.Int64.check(ni2, System.Int32), "nullable -2147483648 checked");
            Bridge.Test.NUnit.Assert.areStrictEqual$1(5754, System.Int64.check(ni3, System.Int32), "nullable 5754 checked");
            Bridge.Test.NUnit.Assert.areStrictEqual$1(2147483647, System.Int64.check(ni4, System.Int32), "nullable 2147483647 checked");
            Bridge.Test.NUnit.Assert.throws$7(System.OverflowException, function () {
                var x = System.Int64.check(ni5, System.Int32);
            }, "nullable 2147483648 checked");
            Bridge.Test.NUnit.Assert.areStrictEqual$1(null, System.Int64.check(ni6, System.Int32), "null checked");
        },
        typeIsWorksForInt32: function () {
            Bridge.Test.NUnit.Assert.false(Bridge.is(null, System.Int32));
            Bridge.Test.NUnit.Assert.false(Bridge.is(Bridge.box(1.5, System.Double, $box_.System.Double.toString), System.Int32));
            Bridge.Test.NUnit.Assert.false(Bridge.is({  }, System.Int32));
            Bridge.Test.NUnit.Assert.true(Bridge.is(Bridge.box(1, System.Int32), System.Int32));
        },
        typeAsWorksForInt32: function () {
            Bridge.Test.NUnit.Assert.false((null) != null);
            Bridge.Test.NUnit.Assert.false((Bridge.as({  }, System.Int32, true)) != null);
            Bridge.Test.NUnit.Assert.false((Bridge.as(Bridge.box(1.5, System.Double, $box_.System.Double.toString), System.Int32, true)) != null);
            Bridge.Test.NUnit.Assert.true((Bridge.as(1, System.Int32, true)) != null);
        },
        unboxingWorksForInt32: function () {
            var _null = null;
            var o = {  };
            var d = Bridge.box(1.5, System.Double, $box_.System.Double.toString);
            var i = Bridge.box(1, System.Int32);
            Bridge.Test.NUnit.Assert.areEqual(null, Bridge.cast(Bridge.unbox(_null), System.Int32, true));
            Bridge.Test.NUnit.Assert.throws(function () {
                var _ = Bridge.cast(Bridge.unbox(o), System.Int32, true);
            });
            Bridge.Test.NUnit.Assert.throws(function () {
                var _ = Bridge.cast(Bridge.unbox(d), System.Int32, true);
            });
            Bridge.Test.NUnit.Assert.areEqual(1, Bridge.cast(Bridge.unbox(i), System.Int32, true));
        },
        getDefaultValue: function (T) {
            return Bridge.getDefaultValue(T);
        },
        defaultValueIs0: function () {
            Bridge.Test.NUnit.Assert.areStrictEqual(0, this.getDefaultValue(System.Int32));
        },
        defaultConstructorReturnsZero: function () {
            Bridge.Test.NUnit.Assert.areStrictEqual(0, Number());
        },
        creatingInstanceReturnsZero: function () {
            Bridge.Test.NUnit.Assert.areStrictEqual(0, Bridge.createInstance(System.Int32));
        },
        constantsWork: function () {
            Bridge.Test.NUnit.Assert.areEqual(-2147483648, -2147483648);
            Bridge.Test.NUnit.Assert.areEqual(2147483647, 2147483647);
        },
        formatWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual("123", System.Int32.format((291), "x"));
        },
        toStringWithFormatWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual("123", System.Int32.format((291), "x"));
        },
        toStringWithFormatAndProviderWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual("123", System.Int32.format((291), "x", System.Globalization.CultureInfo.invariantCulture));
        },
        iFormattableToStringWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual("123", Bridge.format(291, "x", System.Globalization.CultureInfo.invariantCulture));
        },
        tryParseWorks: function () {
            var numberResult = { };
            var result = System.Int32.tryParse("57574", numberResult);
            Bridge.Test.NUnit.Assert.true(result);
            Bridge.Test.NUnit.Assert.areEqual(57574, numberResult.v);

            result = System.Int32.tryParse("-14", numberResult);
            Bridge.Test.NUnit.Assert.true(result);
            Bridge.Test.NUnit.Assert.areEqual(-14, numberResult.v);

            result = System.Int32.tryParse("", numberResult);
            Bridge.Test.NUnit.Assert.false(result);
            Bridge.Test.NUnit.Assert.areEqual(0, numberResult.v);

            result = System.Int32.tryParse(null, numberResult);
            Bridge.Test.NUnit.Assert.false(result);
            Bridge.Test.NUnit.Assert.areEqual(0, numberResult.v);

            result = System.Int32.tryParse("notanumber", numberResult);
            Bridge.Test.NUnit.Assert.false(result);
            Bridge.Test.NUnit.Assert.areEqual(0, numberResult.v);

            result = System.Int32.tryParse("2.5", numberResult);
            Bridge.Test.NUnit.Assert.false(result);
            Bridge.Test.NUnit.Assert.areEqual(0, numberResult.v);
        },
        parseWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual(57574, System.Int32.parse("57574"));
            Bridge.Test.NUnit.Assert.areEqual(-14, System.Int32.parse("-14"));

            Bridge.Test.NUnit.Assert.throws$6(System.FormatException, $asm.$.Bridge.ClientTest.Batch4.SimpleTypes.Int32Tests.f1);
            Bridge.Test.NUnit.Assert.throws$6(System.ArgumentNullException, $asm.$.Bridge.ClientTest.Batch4.SimpleTypes.Int32Tests.f2);
            Bridge.Test.NUnit.Assert.throws$6(System.FormatException, $asm.$.Bridge.ClientTest.Batch4.SimpleTypes.Int32Tests.f3);
            Bridge.Test.NUnit.Assert.throws$6(System.OverflowException, $asm.$.Bridge.ClientTest.Batch4.SimpleTypes.Int32Tests.f4);
            Bridge.Test.NUnit.Assert.throws$6(System.OverflowException, $asm.$.Bridge.ClientTest.Batch4.SimpleTypes.Int32Tests.f5);
            Bridge.Test.NUnit.Assert.throws$6(System.FormatException, $asm.$.Bridge.ClientTest.Batch4.SimpleTypes.Int32Tests.f6);
        },
        toStringWithoutRadixWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual("123", (123).toString());
        },
        toStringWithRadixWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual("123", (123).toString(10));
            Bridge.Test.NUnit.Assert.areEqual("123", (291).toString(16));
        },
        getHashCodeWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual(Bridge.getHashCode((0)), Bridge.getHashCode((0)));
            Bridge.Test.NUnit.Assert.areEqual(Bridge.getHashCode((1)), Bridge.getHashCode((1)));
            Bridge.Test.NUnit.Assert.areNotEqual(Bridge.getHashCode((1)), Bridge.getHashCode((0)));
        },
        equalsWorks: function () {
            Bridge.Test.NUnit.Assert.true(System.Int32.equals((0), Bridge.box(0, System.Int32)));
            Bridge.Test.NUnit.Assert.false(System.Int32.equals((1), Bridge.box(0, System.Int32)));
            Bridge.Test.NUnit.Assert.false(System.Int32.equals((0), Bridge.box(1, System.Int32)));
            Bridge.Test.NUnit.Assert.true(System.Int32.equals((1), Bridge.box(1, System.Int32)));
        },
        iEquatableEqualsWorks: function () {
            Bridge.Test.NUnit.Assert.true((0) === 0);
            Bridge.Test.NUnit.Assert.false((1) === 0);
            Bridge.Test.NUnit.Assert.false((0) === 1);
            Bridge.Test.NUnit.Assert.true((1) === 1);

            Bridge.Test.NUnit.Assert.true(Bridge.equalsT(0, 0, System.Int32));
            Bridge.Test.NUnit.Assert.false(Bridge.equalsT(1, 0, System.Int32));
            Bridge.Test.NUnit.Assert.false(Bridge.equalsT(0, 1, System.Int32));
            Bridge.Test.NUnit.Assert.true(Bridge.equalsT(1, 1, System.Int32));
        },
        compareToWorks: function () {
            Bridge.Test.NUnit.Assert.true(Bridge.compare((0), 0) === 0);
            Bridge.Test.NUnit.Assert.true(Bridge.compare((1), 0) > 0);
            Bridge.Test.NUnit.Assert.true(Bridge.compare((0), 1) < 0);
        },
        iComparableCompareToWorks: function () {
            Bridge.Test.NUnit.Assert.true(Bridge.compare(0, 0, false, System.Int32) === 0);
            Bridge.Test.NUnit.Assert.true(Bridge.compare(1, 0, false, System.Int32) > 0);
            Bridge.Test.NUnit.Assert.true(Bridge.compare(0, 1, false, System.Int32) < 0);
        },
        integerDivisionWorks: function () {
            var a = 17, b = 4, c = 0;
            Bridge.Test.NUnit.Assert.areEqual(4, ((Bridge.Int.div(a, b)) | 0));
            Bridge.Test.NUnit.Assert.areEqual(-4, ((Bridge.Int.div(((-a) | 0), b)) | 0));
            Bridge.Test.NUnit.Assert.areEqual(-4, ((Bridge.Int.div(a, ((-b) | 0))) | 0));
            Bridge.Test.NUnit.Assert.areEqual(4, ((Bridge.Int.div(((-a) | 0), ((-b) | 0))) | 0));
            Bridge.Test.NUnit.Assert.throws$6(System.DivideByZeroException, function () {
                var x = (Bridge.Int.div(a, c)) | 0;
            });
        },
        integerModuloWorks_SPI_1602: function () {
            var a = 17, b = 4, c = 0;
            Bridge.Test.NUnit.Assert.areEqual(1, a % b);
            Bridge.Test.NUnit.Assert.areEqual(-1, ((-a) | 0) % b);
            Bridge.Test.NUnit.Assert.areEqual(1, a % ((-b) | 0));
            Bridge.Test.NUnit.Assert.areEqual(-1, ((-a) | 0) % ((-b) | 0));
            // #1602
            Bridge.Test.NUnit.Assert.throws$6(System.DivideByZeroException, function () {
                var x = a % c;
            });
        },
        integerDivisionByZeroThrowsDivideByZeroException: function () {
            var a = 17, b = 0;
            Bridge.Test.NUnit.Assert.throws$6(System.DivideByZeroException, function () {
                var x = (Bridge.Int.div(a, b)) | 0;
            });
        },
        doublesAreTruncatedWhenConvertedToIntegers: function () {
            var d1 = 4.5;
            var d2 = null;
            var d3 = 8.5;
            Bridge.Test.NUnit.Assert.areEqual(4, Bridge.Int.clip32(d1));
            Bridge.Test.NUnit.Assert.areEqual(-4, Bridge.Int.clip32(-d1));
            Bridge.Test.NUnit.Assert.areEqual(null, Bridge.Int.clip32(d2));
            Bridge.Test.NUnit.Assert.areEqual(8, Bridge.Int.clip32(System.Nullable.getValue(d3)));
            Bridge.Test.NUnit.Assert.areEqual(-8, Bridge.Int.clip32(System.Nullable.getValue(System.Nullable.neg(d3))));
            Bridge.Test.NUnit.Assert.areEqual(8, Bridge.Int.clip32(d3));
            Bridge.Test.NUnit.Assert.areEqual(-8, Bridge.Int.clip32(System.Nullable.neg(d3)));
        }
    });

    Bridge.ns("Bridge.ClientTest.Batch4.SimpleTypes.Int32Tests", $asm.$);

    Bridge.apply($asm.$.Bridge.ClientTest.Batch4.SimpleTypes.Int32Tests, {
        f1: function () {
            System.Int32.parse("");
        },
        f2: function () {
            System.Int32.parse(null);
        },
        f3: function () {
            System.Int32.parse("notanumber");
        },
        f4: function () {
            System.Int32.parse("2147483648");
        },
        f5: function () {
            System.Int32.parse("-2147483649");
        },
        f6: function () {
            System.Int32.parse("2.5");
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.SimpleTypes.Int64Tests", {
        typePropertiesAreCorrect_SPI_1717: function () {
            Bridge.Test.NUnit.Assert.true(Bridge.is(System.Int64(0), System.Int64));
            Bridge.Test.NUnit.Assert.false(Bridge.is(Bridge.box(0.5, System.Double, $box_.System.Double.toString), System.Int64));
            Bridge.Test.NUnit.Assert.false(Bridge.is(Bridge.box(1E+100, System.Double, $box_.System.Double.toString), System.Int64));
            Bridge.Test.NUnit.Assert.areEqual("System.Int64", Bridge.Reflection.getTypeFullName(System.Int64));
            Bridge.Test.NUnit.Assert.false(Bridge.Reflection.isClass(System.Int64));
            Bridge.Test.NUnit.Assert.true(Bridge.Reflection.isAssignableFrom(System.IComparable$1(System.Int64), System.Int64));
            Bridge.Test.NUnit.Assert.true(Bridge.Reflection.isAssignableFrom(System.IEquatable$1(System.Int64), System.Int64));
            Bridge.Test.NUnit.Assert.true(Bridge.Reflection.isAssignableFrom(System.IFormattable, System.Int64));
            var l = System.Int64(0);
            Bridge.Test.NUnit.Assert.true(Bridge.is(l, System.Int64));
            Bridge.Test.NUnit.Assert.true(Bridge.is(l, System.IComparable$1(System.Int64)));
            Bridge.Test.NUnit.Assert.true(Bridge.is(l, System.IEquatable$1(System.Int64)));
            Bridge.Test.NUnit.Assert.true(Bridge.is(l, System.IFormattable));

            var interfaces = Bridge.Reflection.getInterfaces(System.Int64);
            Bridge.Test.NUnit.Assert.areEqual(4, interfaces.length);
            Bridge.Test.NUnit.Assert.true(System.Array.contains(interfaces, System.IComparable$1(System.Int64), Function));
            Bridge.Test.NUnit.Assert.true(System.Array.contains(interfaces, System.IEquatable$1(System.Int64), Function));
            Bridge.Test.NUnit.Assert.true(System.Array.contains(interfaces, System.IFormattable, Function));
        },
        castsWork: function () {
            var i3 = System.UInt64(5754), i4 = System.UInt64(System.Int64([-808,2147483647])), i5 = System.UInt64([-1816395584,-517669143]);
            var ni3 = System.UInt64(5754), ni4 = System.UInt64(System.Int64([-808,2147483647])), ni5 = System.UInt64([-1816395584,-517669143]), ni6 = System.UInt64.lift(null);

            Bridge.Test.NUnit.Assert.areEqual$1(System.Int64(5754), System.Int64.clip64(i3), "5754 unchecked");
            Bridge.Test.NUnit.Assert.areEqual$1(System.Int64([-808,2147483647]), System.Int64.clip64(i4), "9223372036854775000 unchecked");
            Bridge.Test.NUnit.Assert.true$1(System.Int64.clip64(i5).lt(System.Int64(0)), "16223372036854776000 unchecked");

            Bridge.Test.NUnit.Assert.areEqual$1(System.Int64(5754), System.Int64.clip64(ni3), "nullable 5754 unchecked");
            Bridge.Test.NUnit.Assert.areEqual$1(System.Int64([-808,2147483647]), System.Int64.clip64(ni4), "nullable 9223372036854775000 unchecked");
            Bridge.Test.NUnit.Assert.true$1(System.Nullable.liftcmp("lt", System.Int64.clip64(ni5), System.Int64(0)), "nullable 16223372036854776000 unchecked");
            Bridge.Test.NUnit.Assert.areEqual$1(null, System.Int64.clip64(ni6), "null unchecked");

            Bridge.Test.NUnit.Assert.areEqual$1(System.Int64(5754), System.Int64.check(i3, System.Int64), "5754 checked");
            Bridge.Test.NUnit.Assert.areEqual$1(System.Int64([-808,2147483647]), System.Int64.check(i4, System.Int64), "9223372036854775000 checked");
            Bridge.Test.NUnit.Assert.throws$7(System.OverflowException, function () {
                var x = System.Int64.check(i5, System.Int64);
            }, "16223372036854776000 checked");

            Bridge.Test.NUnit.Assert.areEqual$1(System.Int64(5754), System.Int64.check(ni3, System.Int64), "nullable 5754 checked");
            Bridge.Test.NUnit.Assert.areEqual$1(System.Int64([-808,2147483647]), System.Int64.check(ni4, System.Int64), "nullable 9223372036854775000 checked");
            Bridge.Test.NUnit.Assert.throws$7(System.OverflowException, function () {
                var x = System.Int64.check(ni5, System.Int64);
            }, "nullable 16223372036854776000 checked");
            Bridge.Test.NUnit.Assert.areEqual$1(null, System.Int64.check(ni6, System.Int64), "null checked");
        },
        getDefaultValue: function (T) {
            return Bridge.getDefaultValue(T);
        },
        defaultValueIs0: function () {
            Bridge.Test.NUnit.Assert.areEqual(System.Int64(0), this.getDefaultValue(System.Int64));
        },
        defaultConstructorReturnsZero: function () {
            Bridge.Test.NUnit.Assert.areEqual(System.Int64(0), new System.Int64());
        },
        creatingInstanceReturnsZero: function () {
            Bridge.Test.NUnit.Assert.areEqual(System.Int64(0), Bridge.createInstance(System.Int64));
        },
        formatWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual("123", (System.Int64(291)).format("x"));
        },
        toStringWithFormatWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual("123", (System.Int64(291)).toString("x"));
        },
        toStringWithFormatAndProviderWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual("123", (System.Int64(291)).format("x", System.Globalization.CultureInfo.invariantCulture));
        },
        iFormattableToStringWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual("123", Bridge.format(System.Int64(291), "x", System.Globalization.CultureInfo.invariantCulture));
        },
        tryParseWorks: function () {
            var numberResult = { };
            var result = System.Int64.tryParse("57574", numberResult);
            Bridge.Test.NUnit.Assert.true(result);
            Bridge.Test.NUnit.Assert.areEqual(System.Int64(57574), numberResult.v);

            result = System.Int64.tryParse("-14", numberResult);
            Bridge.Test.NUnit.Assert.true(result);
            Bridge.Test.NUnit.Assert.areEqual(System.Int64(-14), numberResult.v);

            result = System.Int64.tryParse("", numberResult);
            Bridge.Test.NUnit.Assert.false(result);
            Bridge.Test.NUnit.Assert.areEqual(System.Int64(0), numberResult.v);

            result = System.Int64.tryParse(null, numberResult);
            Bridge.Test.NUnit.Assert.false(result);
            Bridge.Test.NUnit.Assert.areEqual(System.Int64(0), numberResult.v);

            result = System.Int64.tryParse("notanumber", numberResult);
            Bridge.Test.NUnit.Assert.false(result);
            Bridge.Test.NUnit.Assert.areEqual(System.Int64(0), numberResult.v);

            result = System.Int64.tryParse("2.5", numberResult);
            Bridge.Test.NUnit.Assert.false(result);
            Bridge.Test.NUnit.Assert.areEqual(System.Int64(0), numberResult.v);

            result = System.Int64.tryParse("-10000000000000000000", numberResult);
            Bridge.Test.NUnit.Assert.false(result);
            Bridge.Test.NUnit.Assert.areEqual(System.Int64(0), numberResult.v);

            result = System.Int64.tryParse("10000000000000000000", numberResult);
            Bridge.Test.NUnit.Assert.false(result);
            Bridge.Test.NUnit.Assert.areEqual(System.Int64(0), numberResult.v);
        },
        parseWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual(System.Int64([568732647,3]), System.Int64.parse("13453634535"));
            Bridge.Test.NUnit.Assert.areEqual(System.Int64([-1258093817,-54542]), System.Int64.parse("-234253069384953"));
            Bridge.Test.NUnit.Assert.throws$6(System.FormatException, $asm.$.Bridge.ClientTest.Batch4.SimpleTypes.Int64Tests.f1);
            Bridge.Test.NUnit.Assert.throws$6(System.ArgumentNullException, $asm.$.Bridge.ClientTest.Batch4.SimpleTypes.Int64Tests.f2);
            Bridge.Test.NUnit.Assert.throws$6(System.FormatException, $asm.$.Bridge.ClientTest.Batch4.SimpleTypes.Int64Tests.f3);
            Bridge.Test.NUnit.Assert.throws$6(System.FormatException, $asm.$.Bridge.ClientTest.Batch4.SimpleTypes.Int64Tests.f4);
            Bridge.Test.NUnit.Assert.throws$6(System.OverflowException, $asm.$.Bridge.ClientTest.Batch4.SimpleTypes.Int64Tests.f5);
            Bridge.Test.NUnit.Assert.throws$6(System.OverflowException, $asm.$.Bridge.ClientTest.Batch4.SimpleTypes.Int64Tests.f6);
        },
        castingOfLargeDoublesToInt64Works: function () {
            var d1 = 5000000000.5, d2 = -d1;
            Bridge.Test.NUnit.Assert.areEqual$1(System.Int64([705032704,1]), Bridge.Int.clip64(d1), "Positive");
            Bridge.Test.NUnit.Assert.areEqual$1(System.Int64([-705032704,-2]), Bridge.Int.clip64(d2), "Negative");
        },
        divisionOfLargeInt64Works: function () {
            var v1 = System.Int64([-1539607552,11]), v2 = v1.neg(), v3 = System.Int64(3);
            Bridge.Test.NUnit.Assert.areEqual$1(System.Int64([-513202518,3]), v1.div(v3), "Positive");
            Bridge.Test.NUnit.Assert.areEqual$1(System.Int64([513202518,-4]), v2.div(v3), "Negative");
        },
        toStringWithoutRadixWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual("123", (System.Int64(123)).toString());
        },
        toStringWithRadixWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual("123", (System.Int64(123)).toString(10));
            Bridge.Test.NUnit.Assert.areEqual("123", (System.Int64(291)).toString(16));
        },
        getHashCodeWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual(Bridge.getHashCode((System.Int64(0))), Bridge.getHashCode((System.Int64(0))));
            Bridge.Test.NUnit.Assert.areEqual(Bridge.getHashCode((System.Int64(1))), Bridge.getHashCode((System.Int64(1))));
            Bridge.Test.NUnit.Assert.areNotEqual(Bridge.getHashCode((System.Int64(1))), Bridge.getHashCode((System.Int64(0))));
            Bridge.Test.NUnit.Assert.true(System.Int64(Bridge.getHashCode(System.Int64([0,1]))).lte(System.Int64([-1,0])));
        },
        equalsWorks: function () {
            Bridge.Test.NUnit.Assert.true(Bridge.equals((System.Int64(0)), System.Int64(0)));
            Bridge.Test.NUnit.Assert.false(Bridge.equals((System.Int64(1)), System.Int64(0)));
            Bridge.Test.NUnit.Assert.false(Bridge.equals((System.Int64(0)), System.Int64(1)));
            Bridge.Test.NUnit.Assert.true(Bridge.equals((System.Int64(1)), System.Int64(1)));
        },
        iEquatableEqualsWorks: function () {
            Bridge.Test.NUnit.Assert.true((System.Int64(0)).equalsT(System.Int64(0)));
            Bridge.Test.NUnit.Assert.false((System.Int64(1)).equalsT(System.Int64(0)));
            Bridge.Test.NUnit.Assert.false((System.Int64(0)).equalsT(System.Int64(1)));
            Bridge.Test.NUnit.Assert.true((System.Int64(1)).equalsT(System.Int64(1)));

            Bridge.Test.NUnit.Assert.true(Bridge.equalsT(System.Int64(0), System.Int64(0), System.Int64));
            Bridge.Test.NUnit.Assert.false(Bridge.equalsT(System.Int64(1), System.Int64(0), System.Int64));
            Bridge.Test.NUnit.Assert.false(Bridge.equalsT(System.Int64(0), System.Int64(1), System.Int64));
            Bridge.Test.NUnit.Assert.true(Bridge.equalsT(System.Int64(1), System.Int64(1), System.Int64));
        },
        compareToWorks: function () {
            Bridge.Test.NUnit.Assert.true((System.Int64(0)).compareTo(System.Int64(0)) === 0);
            Bridge.Test.NUnit.Assert.true((System.Int64(1)).compareTo(System.Int64(0)) > 0);
            Bridge.Test.NUnit.Assert.true((System.Int64(0)).compareTo(System.Int64(1)) < 0);
        },
        iComparableCompareToWorks: function () {
            Bridge.Test.NUnit.Assert.true(Bridge.compare(System.Int64(0), System.Int64(0), false, System.Int64) === 0);
            Bridge.Test.NUnit.Assert.true(Bridge.compare(System.Int64(1), System.Int64(0), false, System.Int64) > 0);
            Bridge.Test.NUnit.Assert.true(Bridge.compare(System.Int64(0), System.Int64(1), false, System.Int64) < 0);
        }
    });

    Bridge.ns("Bridge.ClientTest.Batch4.SimpleTypes.Int64Tests", $asm.$);

    Bridge.apply($asm.$.Bridge.ClientTest.Batch4.SimpleTypes.Int64Tests, {
        f1: function () {
            System.Int64.parse("");
        },
        f2: function () {
            System.Int64.parse(null);
        },
        f3: function () {
            System.Int64.parse("notanumber");
        },
        f4: function () {
            System.Int64.parse("2.5");
        },
        f5: function () {
            System.Int64.parse("-10000000000000000000");
        },
        f6: function () {
            System.Int64.parse("10000000000000000000");
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.SimpleTypes.ObjectTests", {
        typePropertiesAreCorrect: function () {
            Bridge.Test.NUnit.Assert.true(Bridge.hasValue({  }));
            Bridge.Test.NUnit.Assert.areEqual("System.Object", Bridge.Reflection.getTypeFullName(System.Object));
            Bridge.Test.NUnit.Assert.true(Bridge.Reflection.isClass(System.Object));
        },
        canGetHashCodeForObject: function () {
            var o = {  };
            var c = Bridge.getHashCode(o);
            Bridge.Test.NUnit.Assert.true(Bridge.is(Bridge.box(c, System.Int32), System.Int32));
        },
        repeatedCallsToGetHashCodeReturnsSameValue: function () {
            var o = {  };
            Bridge.Test.NUnit.Assert.areEqual(Bridge.getHashCode(o), Bridge.getHashCode(o));
        },
        objectIsEqualToItself: function () {
            var o = {  };
            Bridge.Test.NUnit.Assert.true(Bridge.equals(o, o));
        },
        objectIsNotEqualToOtherObject: function () {
            Bridge.Test.NUnit.Assert.false(Bridge.equals({  }, {  }));
        },
        staticEqualsWorks: function () {
            var o1 = {  }, o2 = {  };
            Bridge.Test.NUnit.Assert.true(Bridge.equals(null, null));
            Bridge.Test.NUnit.Assert.false(Bridge.equals(null, o1));
            Bridge.Test.NUnit.Assert.false(Bridge.equals(o1, null));
            Bridge.Test.NUnit.Assert.true(Bridge.equals(o1, o1));
            Bridge.Test.NUnit.Assert.false(Bridge.equals(o1, o2));
        },
        referenceEqualsWorks: function () {
            var o1 = {  }, o2 = {  }, n = null;
            Bridge.Test.NUnit.Assert.true(Bridge.referenceEquals(n, n));
            Bridge.Test.NUnit.Assert.true(Bridge.referenceEquals(n, undefined));
            Bridge.Test.NUnit.Assert.false(Bridge.referenceEquals(o1, o2));
            Bridge.Test.NUnit.Assert.false(Bridge.referenceEquals(o1, n));
            Bridge.Test.NUnit.Assert.false(Bridge.referenceEquals(o1, undefined));
            Bridge.Test.NUnit.Assert.true(Bridge.referenceEquals(o1, o1));
        },
        toStringOverride: function () {
            var c1 = new Bridge.ClientTest.Batch4.SimpleTypes.ObjectTests.C1(), c2 = new Bridge.ClientTest.Batch4.SimpleTypes.ObjectTests.C2();
            Bridge.Test.NUnit.Assert.areEqual$1("test", c1.toString(), "#1");
            Bridge.Test.NUnit.Assert.areEqual$1("test", c2.toString(), "#1");
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.SimpleTypes.ObjectTests.C1", {
        toString: function () {
            return "test";
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.SimpleTypes.SByteTests", {
        typePropertiesAreCorrect_SPI_1717: function () {
            Bridge.Test.NUnit.Assert.false(Bridge.is(Bridge.box(0, System.Byte), System.SByte));
            Bridge.Test.NUnit.Assert.false(Bridge.is(Bridge.box(0.5, System.Double, $box_.System.Double.toString), System.SByte));
            Bridge.Test.NUnit.Assert.false(Bridge.is(Bridge.box(-129, System.Int32), System.SByte));
            Bridge.Test.NUnit.Assert.false(Bridge.is(Bridge.box(128, System.Int32), System.SByte));
            Bridge.Test.NUnit.Assert.areEqual("System.SByte", Bridge.Reflection.getTypeFullName(System.SByte));
            Bridge.Test.NUnit.Assert.false(Bridge.Reflection.isClass(System.SByte));
            Bridge.Test.NUnit.Assert.true(Bridge.Reflection.isAssignableFrom(System.IComparable$1(System.SByte), System.SByte));
            Bridge.Test.NUnit.Assert.true(Bridge.Reflection.isAssignableFrom(System.IEquatable$1(System.SByte), System.SByte));
            Bridge.Test.NUnit.Assert.true(Bridge.Reflection.isAssignableFrom(System.IFormattable, System.SByte));
            var b = Bridge.box(0, System.SByte);
            Bridge.Test.NUnit.Assert.true(Bridge.is(b, System.SByte));
            Bridge.Test.NUnit.Assert.true(Bridge.is(b, System.IComparable$1(System.SByte)));
            Bridge.Test.NUnit.Assert.true(Bridge.is(b, System.IEquatable$1(System.SByte)));
            Bridge.Test.NUnit.Assert.true(Bridge.is(b, System.IFormattable));

            var interfaces = Bridge.Reflection.getInterfaces(System.SByte);
            Bridge.Test.NUnit.Assert.areEqual(4, interfaces.length);
            Bridge.Test.NUnit.Assert.true(System.Array.contains(interfaces, System.IComparable$1(System.SByte), Function));
            Bridge.Test.NUnit.Assert.true(System.Array.contains(interfaces, System.IEquatable$1(System.SByte), Function));
            Bridge.Test.NUnit.Assert.true(System.Array.contains(interfaces, System.IFormattable, Function));
        },
        castsWork: function () {
            var i1 = -129, i2 = -128, i3 = 80, i4 = 127, i5 = 128;
            var ni1 = -129, ni2 = -128, ni3 = 80, ni4 = 127, ni5 = 128, ni6 = null;

            Bridge.Test.NUnit.Assert.areStrictEqual$1(127, Bridge.Int.sxb(i1 & 255), "-129 unchecked");
            Bridge.Test.NUnit.Assert.areStrictEqual$1(-128, Bridge.Int.sxb(i2 & 255), "-128 unchecked");
            Bridge.Test.NUnit.Assert.areStrictEqual$1(80, Bridge.Int.sxb(i3 & 255), "80 unchecked");
            Bridge.Test.NUnit.Assert.areStrictEqual$1(127, Bridge.Int.sxb(i4 & 255), "127 unchecked");
            Bridge.Test.NUnit.Assert.areStrictEqual$1(-128, Bridge.Int.sxb(i5 & 255), "128 unchecked");

            Bridge.Test.NUnit.Assert.areStrictEqual$1(127, Bridge.Int.clip8(ni1), "nullable -129 unchecked");
            Bridge.Test.NUnit.Assert.areStrictEqual$1(-128, Bridge.Int.clip8(ni2), "nullable -128 unchecked");
            Bridge.Test.NUnit.Assert.areStrictEqual$1(80, Bridge.Int.clip8(ni3), "nullable 80 unchecked");
            Bridge.Test.NUnit.Assert.areStrictEqual$1(127, Bridge.Int.clip8(ni4), "nullable 127 unchecked");
            Bridge.Test.NUnit.Assert.areStrictEqual$1(-128, Bridge.Int.clip8(ni5), "nullable 128 unchecked");
            Bridge.Test.NUnit.Assert.areStrictEqual$1(null, Bridge.Int.clip8(ni6), "null unchecked");

            Bridge.Test.NUnit.Assert.throws$7(System.OverflowException, function () {
                var x = Bridge.Int.check(i1, System.Byte);
            }, "-129 checked");
            Bridge.Test.NUnit.Assert.areStrictEqual$1(-128, Bridge.Int.check(i2, System.SByte), "-128 checked");
            Bridge.Test.NUnit.Assert.areStrictEqual$1(80, Bridge.Int.check(i3, System.SByte), "80 checked");
            Bridge.Test.NUnit.Assert.areStrictEqual$1(127, Bridge.Int.check(i4, System.SByte), "127 checked");
            Bridge.Test.NUnit.Assert.throws$7(System.OverflowException, function () {
                var x = Bridge.Int.check(i5, System.SByte);
            }, "-128 checked");

            Bridge.Test.NUnit.Assert.throws$7(System.OverflowException, function () {
                var x = Bridge.Int.check(ni1, System.SByte);
            }, "nullable -129 checked");
            Bridge.Test.NUnit.Assert.areStrictEqual$1(-128, Bridge.Int.check(ni2, System.SByte), "nullable -128 checked");
            Bridge.Test.NUnit.Assert.areStrictEqual$1(80, Bridge.Int.check(ni3, System.SByte), "nullable 80 checked");
            Bridge.Test.NUnit.Assert.areStrictEqual$1(127, Bridge.Int.check(ni4, System.SByte), "nullable 127 checked");
            Bridge.Test.NUnit.Assert.throws$7(System.OverflowException, function () {
                var x = Bridge.Int.check(ni5, System.SByte);
            }, "nullable 128 checked");
            Bridge.Test.NUnit.Assert.areStrictEqual$1(null, Bridge.Int.check(ni6, System.SByte), "null checked");
        },
        getDefaultValue: function (T) {
            return Bridge.getDefaultValue(T);
        },
        defaultValueIs0: function () {
            Bridge.Test.NUnit.Assert.areStrictEqual(0, this.getDefaultValue(System.SByte));
        },
        defaultConstructorReturnsZero: function () {
            Bridge.Test.NUnit.Assert.areStrictEqual(0, Number());
        },
        creatingInstanceReturnsZero: function () {
            Bridge.Test.NUnit.Assert.areStrictEqual(0, Bridge.createInstance(System.SByte));
        },
        constantsWork: function () {
            Bridge.Test.NUnit.Assert.areEqual(-128, -128);
            Bridge.Test.NUnit.Assert.areEqual(127, 127);
        },
        formatWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual("12", System.SByte.format((18), "x"));
        },
        toStringWithFormatWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual("12", System.SByte.format((18), "x"));
        },
        toStringWithFormatAndProviderWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual("12", System.SByte.format((18), "x", System.Globalization.CultureInfo.invariantCulture));
        },
        iFormattableToStringWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual("12", Bridge.format(18, "x", System.Globalization.CultureInfo.invariantCulture));
        },
        tryParseWorks_SPI_1592: function () {
            var numberResult = { };
            var result = System.SByte.tryParse("124", numberResult);
            Bridge.Test.NUnit.Assert.true(result);
            Bridge.Test.NUnit.Assert.areEqual(124, numberResult.v);

            result = System.SByte.tryParse("-123", numberResult);
            Bridge.Test.NUnit.Assert.true(result);
            Bridge.Test.NUnit.Assert.areEqual(-123, numberResult.v);

            result = System.SByte.tryParse("", numberResult);
            Bridge.Test.NUnit.Assert.false(result);
            Bridge.Test.NUnit.Assert.areEqual(0, numberResult.v);

            result = System.SByte.tryParse(null, numberResult);
            Bridge.Test.NUnit.Assert.false(result);
            Bridge.Test.NUnit.Assert.areEqual(0, numberResult.v);

            result = System.SByte.tryParse("notanumber", numberResult);
            Bridge.Test.NUnit.Assert.false(result);
            Bridge.Test.NUnit.Assert.areEqual(0, numberResult.v);

            result = System.SByte.tryParse("54768", numberResult);
            Bridge.Test.NUnit.Assert.false(result);
            // #1592
            Bridge.Test.NUnit.Assert.areEqual(0, numberResult.v);

            result = System.SByte.tryParse("2.5", numberResult);
            Bridge.Test.NUnit.Assert.false(result);
            Bridge.Test.NUnit.Assert.areEqual(0, numberResult.v);
        },
        parseWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual(124, System.SByte.parse("124"));
            Bridge.Test.NUnit.Assert.areEqual(-123, System.SByte.parse("-123"));
            Bridge.Test.NUnit.Assert.throws$6(System.FormatException, $asm.$.Bridge.ClientTest.Batch4.SimpleTypes.SByteTests.f1);
            Bridge.Test.NUnit.Assert.throws$6(System.ArgumentNullException, $asm.$.Bridge.ClientTest.Batch4.SimpleTypes.SByteTests.f2);
            Bridge.Test.NUnit.Assert.throws$6(System.FormatException, $asm.$.Bridge.ClientTest.Batch4.SimpleTypes.SByteTests.f3);
            Bridge.Test.NUnit.Assert.throws$6(System.OverflowException, $asm.$.Bridge.ClientTest.Batch4.SimpleTypes.SByteTests.f4);
            Bridge.Test.NUnit.Assert.throws$6(System.FormatException, $asm.$.Bridge.ClientTest.Batch4.SimpleTypes.SByteTests.f5);
        },
        toStringWithoutRadixWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual("123", (123).toString());
        },
        toStringWithRadixWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual("123", (123).toString(10));
            Bridge.Test.NUnit.Assert.areEqual("12", (18).toString(16));
        },
        getHashCodeWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual(Bridge.getHashCode((0)), Bridge.getHashCode((0)));
            Bridge.Test.NUnit.Assert.areEqual(Bridge.getHashCode((1)), Bridge.getHashCode((1)));
            Bridge.Test.NUnit.Assert.areNotEqual(Bridge.getHashCode((1)), Bridge.getHashCode((0)));
        },
        equalsWorks: function () {
            Bridge.Test.NUnit.Assert.true(System.SByte.equals((0), Bridge.box(0, System.SByte)));
            Bridge.Test.NUnit.Assert.false(System.SByte.equals((1), Bridge.box(0, System.SByte)));
            Bridge.Test.NUnit.Assert.false(System.SByte.equals((0), Bridge.box(1, System.SByte)));
            Bridge.Test.NUnit.Assert.true(System.SByte.equals((1), Bridge.box(1, System.SByte)));
        },
        iEquatableEqualsWorks: function () {
            Bridge.Test.NUnit.Assert.true((0) === 0);
            Bridge.Test.NUnit.Assert.false((1) === 0);
            Bridge.Test.NUnit.Assert.false((0) === 1);
            Bridge.Test.NUnit.Assert.true((1) === 1);

            Bridge.Test.NUnit.Assert.true(Bridge.equalsT(0, 0, System.SByte));
            Bridge.Test.NUnit.Assert.false(Bridge.equalsT(1, 0, System.SByte));
            Bridge.Test.NUnit.Assert.false(Bridge.equalsT(0, 1, System.SByte));
            Bridge.Test.NUnit.Assert.true(Bridge.equalsT(1, 1, System.SByte));
        },
        compareToWorks: function () {
            Bridge.Test.NUnit.Assert.true(Bridge.compare((0), 0) === 0);
            Bridge.Test.NUnit.Assert.true(Bridge.compare((1), 0) > 0);
            Bridge.Test.NUnit.Assert.true(Bridge.compare((0), 1) < 0);
        },
        iComparableCompareToWorks: function () {
            Bridge.Test.NUnit.Assert.true(Bridge.compare(0, 0, false, System.SByte) === 0);
            Bridge.Test.NUnit.Assert.true(Bridge.compare(1, 0, false, System.SByte) > 0);
            Bridge.Test.NUnit.Assert.true(Bridge.compare(0, 1, false, System.SByte) < 0);
        }
    });

    Bridge.ns("Bridge.ClientTest.Batch4.SimpleTypes.SByteTests", $asm.$);

    Bridge.apply($asm.$.Bridge.ClientTest.Batch4.SimpleTypes.SByteTests, {
        f1: function () {
            System.SByte.parse("");
        },
        f2: function () {
            System.SByte.parse(null);
        },
        f3: function () {
            System.SByte.parse("notanumber");
        },
        f4: function () {
            System.SByte.parse("54768");
        },
        f5: function () {
            System.SByte.parse("2.5");
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.SimpleTypes.SingleTests", {
        typePropertiesAreCorrect_SPI_1717: function () {
            Bridge.Test.NUnit.Assert.true(Bridge.is(Bridge.box(0.5, System.Single, $box_.System.Single.toString), System.Single));
            Bridge.Test.NUnit.Assert.areEqual("System.Single", Bridge.Reflection.getTypeFullName(System.Single));
            Bridge.Test.NUnit.Assert.false(Bridge.Reflection.isClass(System.Single));
            Bridge.Test.NUnit.Assert.true(Bridge.Reflection.isAssignableFrom(System.IComparable$1(System.Single), System.Single));
            Bridge.Test.NUnit.Assert.true(Bridge.Reflection.isAssignableFrom(System.IEquatable$1(System.Single), System.Single));
            Bridge.Test.NUnit.Assert.true(Bridge.Reflection.isAssignableFrom(System.IFormattable, System.Single));
            var f = Bridge.box(0.0, System.Single, $box_.System.Single.toString);
            Bridge.Test.NUnit.Assert.true(Bridge.is(f, System.Single));
            Bridge.Test.NUnit.Assert.true(Bridge.is(f, System.IComparable$1(System.Single)));
            Bridge.Test.NUnit.Assert.true(Bridge.is(f, System.IEquatable$1(System.Single)));
            Bridge.Test.NUnit.Assert.true(Bridge.is(f, System.IFormattable));

            var interfaces = Bridge.Reflection.getInterfaces(System.Single);
            Bridge.Test.NUnit.Assert.areEqual(4, interfaces.length);
            Bridge.Test.NUnit.Assert.true(System.Array.contains(interfaces, System.IComparable$1(System.Single), Function));
            Bridge.Test.NUnit.Assert.true(System.Array.contains(interfaces, System.IEquatable$1(System.Single), Function));
            Bridge.Test.NUnit.Assert.true(System.Array.contains(interfaces, System.IFormattable, Function));
        },
        getDefaultValue: function (T) {
            return Bridge.getDefaultValue(T);
        },
        defaultValueIs0: function () {
            Bridge.Test.NUnit.Assert.areStrictEqual(0, this.getDefaultValue(System.Single));
        },
        creatingInstanceReturnsZero: function () {
            Bridge.Test.NUnit.Assert.areStrictEqual(0, Bridge.createInstance(System.Single));
        },
        constantsWork: function () {
            var zero = 0;
            Bridge.Test.NUnit.Assert.true$1(System.Nullable.getValue(Bridge.cast(Bridge.unbox(Bridge.box(-3.40282347E+38, System.Single, $box_.System.Single.toString)), System.Single)) < -3.4E+38 && System.Nullable.getValue(Bridge.cast(Bridge.unbox(Bridge.box(-3.40282347E+38, System.Single, $box_.System.Single.toString)), System.Single)) > -3.5E+38, "MinValue should be correct");
            Bridge.Test.NUnit.Assert.true$1(System.Nullable.getValue(Bridge.cast(Bridge.unbox(Bridge.box(3.40282347E+38, System.Single, $box_.System.Single.toString)), System.Single)) > 3.4E+38 && System.Nullable.getValue(Bridge.cast(Bridge.unbox(Bridge.box(3.40282347E+38, System.Single, $box_.System.Single.toString)), System.Single)) < 3.5E+38, "MaxValue should be correct");
            Bridge.Test.NUnit.Assert.areEqual$1(1.401298E-45, 1.401298E-45, "Epsilon should be correct");
            Bridge.Test.NUnit.Assert.true$1(isNaN(Number.NaN), "NaN should be correct");
            Bridge.Test.NUnit.Assert.areStrictEqual$1(1 / zero, Number.POSITIVE_INFINITY, "PositiveInfinity should be correct");
            Bridge.Test.NUnit.Assert.areStrictEqual$1(-1 / zero, Number.NEGATIVE_INFINITY, "NegativeInfinity should be correct");
        },
        defaultConstructorReturnsZero: function () {
            Bridge.Test.NUnit.Assert.areStrictEqual(0, Number());
        },
        formatWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual("123", System.Single.format((291.0), "x"));
        },
        toStringWithFormatWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual("123", System.Single.format((291.0), "x"));
        },
        toStringWithFormatAndProviderWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual("123", System.Single.format((291.0), "x", System.Globalization.CultureInfo.invariantCulture));
        },
        iFormattableToStringWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual("123", Bridge.format(291.0, "x", System.Globalization.CultureInfo.invariantCulture));
        },
        toStringWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual("123", System.Single.format((123.0), 'G'));
        },
        toExponentialWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual("1.23e+2", (123.0).toExponential());
        },
        toExponentialWithFractionalDigitsWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual("1.2e+2", (123.0).toExponential(1));
        },
        toFixed: function () {
            Bridge.Test.NUnit.Assert.areEqual("123", (123.0).toFixed());
        },
        toFixedWithFractionalDigitsWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual("123.0", (123.0).toFixed(1));
        },
        toPrecisionWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual("12345", (12345.0).toPrecision());
        },
        toPrecisionWithPrecisionWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual("1.2e+4", (12345.0).toPrecision(2));
        },
        isPositiveInfinityWorks_SPI_1600: function () {
            var inf = Infinity;
            // #1600
            Bridge.Test.NUnit.Assert.true((inf === Number.POSITIVE_INFINITY));

            Bridge.Test.NUnit.Assert.false((-inf === Number.POSITIVE_INFINITY));
            Bridge.Test.NUnit.Assert.false((0.0 === Number.POSITIVE_INFINITY));
            Bridge.Test.NUnit.Assert.false((Number.NaN === Number.POSITIVE_INFINITY));
        },
        isNegativeInfinityWorks: function () {
            var inf = Infinity;
            Bridge.Test.NUnit.Assert.false((inf === Number.NEGATIVE_INFINITY));
            Bridge.Test.NUnit.Assert.true((-inf === Number.NEGATIVE_INFINITY));
            Bridge.Test.NUnit.Assert.false((0.0 === Number.NEGATIVE_INFINITY));
            Bridge.Test.NUnit.Assert.false((Number.NaN === Number.NEGATIVE_INFINITY));
        },
        isInfinityWorks: function () {
            var inf = Infinity;
            Bridge.Test.NUnit.Assert.true((Math.abs(inf) === Number.POSITIVE_INFINITY));
            Bridge.Test.NUnit.Assert.true((Math.abs(-inf) === Number.POSITIVE_INFINITY));
            Bridge.Test.NUnit.Assert.false((Math.abs(0.0) === Number.POSITIVE_INFINITY));
            Bridge.Test.NUnit.Assert.false((Math.abs(Number.NaN) === Number.POSITIVE_INFINITY));
        },
        isFiniteWorks: function () {
            var zero = 0, one = 1;
            Bridge.Test.NUnit.Assert.true(isFinite(one));
            Bridge.Test.NUnit.Assert.false(isFinite(one / zero));
            Bridge.Test.NUnit.Assert.false(isFinite(zero / zero));
        },
        isNaNWorks: function () {
            var zero = 0, one = 1;
            Bridge.Test.NUnit.Assert.false(isNaN(one));
            Bridge.Test.NUnit.Assert.false(isNaN(one / zero));
            Bridge.Test.NUnit.Assert.true(isNaN(zero / zero));
        },
        getHashCodeWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual(System.Single.getHashCode((0.0)), System.Single.getHashCode((0.0)));
            Bridge.Test.NUnit.Assert.areEqual(System.Single.getHashCode((1.0)), System.Single.getHashCode((1.0)));
            Bridge.Test.NUnit.Assert.areNotEqual(System.Single.getHashCode((1.0)), System.Single.getHashCode((0.0)));
            Bridge.Test.NUnit.Assert.areNotEqual(System.Single.getHashCode((0.5)), System.Single.getHashCode((0.0)));
        },
        equalsWorks: function () {
            Bridge.Test.NUnit.Assert.true(System.Single.equals((0.0), Bridge.box(0.0, System.Single, $box_.System.Single.toString)));
            Bridge.Test.NUnit.Assert.false(System.Single.equals((1.0), Bridge.box(0.0, System.Single, $box_.System.Single.toString)));
            Bridge.Test.NUnit.Assert.false(System.Single.equals((0.0), Bridge.box(0.5, System.Single, $box_.System.Single.toString)));
            Bridge.Test.NUnit.Assert.true(System.Single.equals((1.0), Bridge.box(1.0, System.Single, $box_.System.Single.toString)));
        },
        iEquatableEqualsWorks: function () {
            Bridge.Test.NUnit.Assert.true((0.0) === 0.0);
            Bridge.Test.NUnit.Assert.false((1.0) === 0.0);
            Bridge.Test.NUnit.Assert.false((0.0) === 0.5);
            Bridge.Test.NUnit.Assert.true((1.0) === 1.0);

            Bridge.Test.NUnit.Assert.true(Bridge.equalsT(0.0, 0.0, System.Single));
            Bridge.Test.NUnit.Assert.false(Bridge.equalsT(1.0, 0.0, System.Single));
            Bridge.Test.NUnit.Assert.false(Bridge.equalsT(0.0, 0.5, System.Single));
            Bridge.Test.NUnit.Assert.true(Bridge.equalsT(1.0, 1.0, System.Single));
        },
        compareToWorks: function () {
            Bridge.Test.NUnit.Assert.true(Bridge.compare((0.0), 0.0) === 0);
            Bridge.Test.NUnit.Assert.true(Bridge.compare((1.0), 0.0) > 0);
            Bridge.Test.NUnit.Assert.true(Bridge.compare((0.0), 0.5) < 0);
            Bridge.Test.NUnit.Assert.true(Bridge.compare((1.0), 1.0) === 0);
        },
        iComparableCompareToWorks: function () {
            Bridge.Test.NUnit.Assert.true(Bridge.compare(0.0, 0.0, false, System.Single) === 0);
            Bridge.Test.NUnit.Assert.true(Bridge.compare(1.0, 0.0, false, System.Single) > 0);
            Bridge.Test.NUnit.Assert.true(Bridge.compare(0.0, 0.5, false, System.Single) < 0);
            Bridge.Test.NUnit.Assert.true(Bridge.compare(1.0, 1.0, false, System.Single) === 0);
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.SimpleTypes.StringTests", {
        typePropertiesAreCorrect_SPI_1597: function () {
            Bridge.Test.NUnit.Assert.areEqual("System.String", Bridge.Reflection.getTypeFullName(System.String));
            Bridge.Test.NUnit.Assert.true(Bridge.Reflection.isClass(System.String));
            // #1597
            Bridge.Test.NUnit.Assert.true(Bridge.Reflection.isAssignableFrom(System.IComparable$1(System.String), System.String));
            Bridge.Test.NUnit.Assert.true(Bridge.Reflection.isAssignableFrom(System.IEquatable$1(System.String), System.String));
            var s = "X";
            Bridge.Test.NUnit.Assert.true(Bridge.is(s, System.String));
            Bridge.Test.NUnit.Assert.true(Bridge.is(s, System.IComparable$1(System.String)));
            Bridge.Test.NUnit.Assert.true(Bridge.is(s, System.IEquatable$1(System.String)));

            var interfaces = Bridge.Reflection.getInterfaces(System.String);
            Bridge.Test.NUnit.Assert.areEqual(7, interfaces.length);
            Bridge.Test.NUnit.Assert.true(System.Array.contains(interfaces, System.IComparable$1(System.String), Function));
            Bridge.Test.NUnit.Assert.true(System.Array.contains(interfaces, System.IEquatable$1(System.String), Function));
        },
        defaultConstructorWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual("", "");
        },
        charAndCountConstructorWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual("xxxxx", System.String.fromCharCount(120, 5));
        },
        charArrayConstructorWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual("abC", String.fromCharCode.apply(null, System.Array.init([97, 98, 67], System.Char)));
        },
        charArrayWithStartIndexAndLengthConstructorWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual("bc", String.fromCharCode.apply(null, System.Array.init([97, 98, 99, 68], System.Char).slice(1, 1 + 2)));
        },
        emptyFieldWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual("", "");
        },
        lengthPropertyWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual(4, ("abcd").length);
        },
        charAtWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual("c", "abcd".charAt(2));
        },
        jsCharAtWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual("abcd".charAt(2), "c");
        },
        charCodeAtWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual(99, "abcd".charCodeAt(2));
        },
        compareToWithIgnoreCaseArgWorks: function () {
            Bridge.Test.NUnit.Assert.true(System.String.compare(("abcd"), "abcd") === 0);
            Bridge.Test.NUnit.Assert.true(System.String.compare(("abcd"), "abcb") > 0);
            Bridge.Test.NUnit.Assert.true(System.String.compare(("abcd"), "abce") < 0);
            Bridge.Test.NUnit.Assert.true(System.String.compare(("abcd"), "ABCD") < 0);
            Bridge.Test.NUnit.Assert.true(System.String.compare(("abcd"), "ABCB") > 0);
            Bridge.Test.NUnit.Assert.true(System.String.compare(("abcd"), "ABCE") < 0);

            Bridge.Test.NUnit.Assert.true(System.String.compare((""), null) > 0);
        },
        compareWorks: function () {
            Bridge.Test.NUnit.Assert.true(System.String.compare("abcd", "abcd") === 0);
            Bridge.Test.NUnit.Assert.true(System.String.compare("abcd", "abcb") > 0);
            Bridge.Test.NUnit.Assert.true(System.String.compare("abcd", "abce") < 0);

            Bridge.Test.NUnit.Assert.true(System.String.compare(null, "") < 0);
            Bridge.Test.NUnit.Assert.true(System.String.compare("", null) > 0);
            Bridge.Test.NUnit.Assert.true(System.String.compare(null, null) === 0);
        },
        compareWithIgnoreCaseArgWorks: function () {
            Bridge.Test.NUnit.Assert.true(System.String.compare("abcd", "abcd", false) === 0);
            Bridge.Test.NUnit.Assert.true(System.String.compare("abcd", "abcb", false) > 0);
            Bridge.Test.NUnit.Assert.true(System.String.compare("abcd", "abce", false) < 0);
            Bridge.Test.NUnit.Assert.true(System.String.compare("abcd", "ABCD", true) === 0);
            Bridge.Test.NUnit.Assert.true(System.String.compare("abcd", "ABCB", true) > 0);
            Bridge.Test.NUnit.Assert.true(System.String.compare("abcd", "ABCE", true) < 0);

            Bridge.Test.NUnit.Assert.true(System.String.compare(null, "", true) < 0);
            Bridge.Test.NUnit.Assert.true(System.String.compare("", null, true) > 0);
            Bridge.Test.NUnit.Assert.true(System.String.compare(null, null, true) === 0);
        },
        concatWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual("ab", System.String.concat("a", "b"));
            Bridge.Test.NUnit.Assert.areEqual("abc", System.String.concat("a", "b", "c"));
            Bridge.Test.NUnit.Assert.areEqual("abcd", System.String.concat("a", "b", "c", "d"));
            Bridge.Test.NUnit.Assert.areEqual("abcde", System.String.concat(["a", "b", "c", "d", "e"]));
            Bridge.Test.NUnit.Assert.areEqual("abcdef", System.String.concat(["a", "b", "c", "d", "e", "f"]));
            Bridge.Test.NUnit.Assert.areEqual("abcdefg", System.String.concat(["a", "b", "c", "d", "e", "f", "g"]));
            Bridge.Test.NUnit.Assert.areEqual("abcdefgh", System.String.concat(["a", "b", "c", "d", "e", "f", "g", "h"]));
            Bridge.Test.NUnit.Assert.areEqual("abcdefghi", System.String.concat(["a", "b", "c", "d", "e", "f", "g", "h", "i"]));
        },
        concatWithObjectsWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual("1", System.String.concat(Bridge.box(1, System.Int32)));
            Bridge.Test.NUnit.Assert.areEqual("12", System.String.concat(Bridge.box(1, System.Int32), Bridge.box(2, System.Int32)));
            Bridge.Test.NUnit.Assert.areEqual("123", System.String.concat(Bridge.box(1, System.Int32), Bridge.box(2, System.Int32), Bridge.box(3, System.Int32)));
            Bridge.Test.NUnit.Assert.areEqual("1234", System.String.concat(Bridge.box(1, System.Int32), Bridge.box(2, System.Int32), Bridge.box(3, System.Int32), Bridge.box(4, System.Int32)));
            Bridge.Test.NUnit.Assert.areEqual("12345", System.String.concat(Bridge.box(1, System.Int32), Bridge.box(2, System.Int32), Bridge.box(3, System.Int32), Bridge.box(4, System.Int32), Bridge.box(5, System.Int32)));
            Bridge.Test.NUnit.Assert.areEqual("123456", System.String.concat(Bridge.box(1, System.Int32), Bridge.box(2, System.Int32), Bridge.box(3, System.Int32), Bridge.box(4, System.Int32), Bridge.box(5, System.Int32), Bridge.box(6, System.Int32)));
            Bridge.Test.NUnit.Assert.areEqual("1234567", System.String.concat(Bridge.box(1, System.Int32), Bridge.box(2, System.Int32), Bridge.box(3, System.Int32), Bridge.box(4, System.Int32), Bridge.box(5, System.Int32), Bridge.box(6, System.Int32), Bridge.box(7, System.Int32)));
            Bridge.Test.NUnit.Assert.areEqual("12345678", System.String.concat(Bridge.box(1, System.Int32), Bridge.box(2, System.Int32), Bridge.box(3, System.Int32), Bridge.box(4, System.Int32), Bridge.box(5, System.Int32), Bridge.box(6, System.Int32), Bridge.box(7, System.Int32), Bridge.box(8, System.Int32)));
            Bridge.Test.NUnit.Assert.areEqual("123456789", System.String.concat(Bridge.box(1, System.Int32), Bridge.box(2, System.Int32), Bridge.box(3, System.Int32), Bridge.box(4, System.Int32), Bridge.box(5, System.Int32), Bridge.box(6, System.Int32), Bridge.box(7, System.Int32), Bridge.box(8, System.Int32), Bridge.box(9, System.Int32)));
        },
        endsWithStringWorks: function () {
            Bridge.Test.NUnit.Assert.true(System.String.endsWith(("abcd"), "d"));
            Bridge.Test.NUnit.Assert.false(System.String.endsWith(("abcd"), "e"));
        },
        staticEqualsWorks: function () {
            Bridge.Test.NUnit.Assert.true(System.String.equals("abcd", "abcd", 2));
            Bridge.Test.NUnit.Assert.false(System.String.equals("abcd", "abce", 2));
            Bridge.Test.NUnit.Assert.false(System.String.equals("abcd", "ABCD", 2));
            Bridge.Test.NUnit.Assert.true(System.String.equals("abcd", "abcd", 3));
            Bridge.Test.NUnit.Assert.false(System.String.equals("abcd", "abce", 3));
            Bridge.Test.NUnit.Assert.true(System.String.equals("abcd", "ABCD", 3));

            Bridge.Test.NUnit.Assert.true(System.String.equals("abcd", "abcd"));
            Bridge.Test.NUnit.Assert.false(System.String.equals("abcd", "abce"));
            Bridge.Test.NUnit.Assert.false(System.String.equals("abcd", "ABCD"));
            Bridge.Test.NUnit.Assert.true(System.String.equals("abcd", "abcd"));
            Bridge.Test.NUnit.Assert.false(System.String.equals("abcd", "abce"));
            Bridge.Test.NUnit.Assert.false(System.String.equals("abcd", "ABCD"));

            Bridge.Test.NUnit.Assert.true(System.String.equals("", ""));
            Bridge.Test.NUnit.Assert.true(System.String.equals("", "", 3));
            Bridge.Test.NUnit.Assert.true(System.String.equals(null, null));
            Bridge.Test.NUnit.Assert.true(System.String.equals(null, null, 3));
            Bridge.Test.NUnit.Assert.false(System.String.equals(null, ""));
            Bridge.Test.NUnit.Assert.false(System.String.equals(null, "", 3));
            Bridge.Test.NUnit.Assert.false(System.String.equals("", null));
            Bridge.Test.NUnit.Assert.false(System.String.equals("", null, 3));
        },
        formatWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual("x", System.String.format("x", null));
            Bridge.Test.NUnit.Assert.areEqual("xa", System.String.format("x{0}", "a"));
            Bridge.Test.NUnit.Assert.areEqual("xab", System.String.format("x{0}{1}", "a", "b"));
            Bridge.Test.NUnit.Assert.areEqual("xabc", System.String.format("x{0}{1}{2}", "a", "b", "c"));
            Bridge.Test.NUnit.Assert.areEqual("xabcd", System.String.format("x{0}{1}{2}{3}", "a", "b", "c", "d"));

            var arr1 = System.Array.init(["a"], System.Object);
            var arr2 = System.Array.init(["a", "b"], System.Object);
            var arr3 = System.Array.init(["a", "b", "c"], System.Object);
            var arr4 = System.Array.init(["a", "b", "c", "d"], System.Object);
            Bridge.Test.NUnit.Assert.areEqual("xa", System.String.format.apply(System.String, ["x{0}"].concat(arr1)));
            Bridge.Test.NUnit.Assert.areEqual("xab", System.String.format.apply(System.String, ["x{0}{1}"].concat(arr2)));
            Bridge.Test.NUnit.Assert.areEqual("xabc", System.String.format.apply(System.String, ["x{0}{1}{2}"].concat(arr3)));
            Bridge.Test.NUnit.Assert.areEqual("xabcd", System.String.format.apply(System.String, ["x{0}{1}{2}{3}"].concat(arr4)));
        },
        formatWorksWithIFormattable_SPI_1598: function () {
            Bridge.Test.NUnit.Assert.areEqual("3.14", System.String.format("{0:F2}", Bridge.box(3.1428571428571428, System.Double, $box_.System.Double.toString)));
            // #1598
            Bridge.Test.NUnit.Assert.areEqual("Formatted: FMT, null formatProvider", System.String.format("{0:FMT}", new Bridge.ClientTest.Batch4.SimpleTypes.StringTests.MyFormattable()));
        },
        formatWorksWithIFormattableAndFormatProvider_SPI_1598: function () {
            Bridge.Test.NUnit.Assert.areEqual("3.14", System.String.formatProvider(new Bridge.ClientTest.Batch4.SimpleTypes.StringTests.MyFormatProvider(), "{0:F2}", Bridge.box(3.1428571428571428, System.Double, $box_.System.Double.toString)));
            // #1598
            Bridge.Test.NUnit.Assert.areEqual("Formatted: FMT, StringTests+MyFormatProvider", System.String.formatProvider(new Bridge.ClientTest.Batch4.SimpleTypes.StringTests.MyFormatProvider(), "{0:FMT}", new Bridge.ClientTest.Batch4.SimpleTypes.StringTests.MyFormattable()));
        },
        formatCanUseEscapedBraces: function () {
            Bridge.Test.NUnit.Assert.areEqual("{0}", System.String.format("{{0}}", null));
        },
        fromCharCodeWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual("", String.fromCharCode());
            Bridge.Test.NUnit.Assert.areEqual("a", String.fromCharCode(97));
            Bridge.Test.NUnit.Assert.areEqual("ab", String.fromCharCode(97, 98));
            Bridge.Test.NUnit.Assert.areEqual("abc", String.fromCharCode(97, 98, 99));
        },
        indexOfCharWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual(1, System.String.indexOf(("abc"), String.fromCharCode(98)));
            Bridge.Test.NUnit.Assert.areEqual(-1, System.String.indexOf(("abc"), String.fromCharCode(100)));
        },
        indexOfStringWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual(1, System.String.indexOf(("abc"), "bc"));
            Bridge.Test.NUnit.Assert.areEqual(-1, System.String.indexOf(("abc"), "bd"));
        },
        indexOfCharWithStartIndexWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual(4, System.String.indexOf(("abcabc"), String.fromCharCode(98), 3));
            Bridge.Test.NUnit.Assert.areEqual(-1, System.String.indexOf(("abcabc"), String.fromCharCode(100), 3));
        },
        indexOfCharWithStartIndexAndCountWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual(7, System.String.indexOf(("xxxxxabcxxx"), String.fromCharCode(99), 3, 8));
            Bridge.Test.NUnit.Assert.areEqual(7, System.String.indexOf(("xxxxxabcxxx"), String.fromCharCode(99), 3, 5));
            Bridge.Test.NUnit.Assert.areEqual(-1, System.String.indexOf(("xxxxxabcxxx"), String.fromCharCode(99), 3, 4));
        },
        indexOfStringWithStartIndexWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual(4, System.String.indexOf(("abcabc"), "bc", 3));
            Bridge.Test.NUnit.Assert.areEqual(-1, System.String.indexOf(("abcabc"), "bd", 3));
        },
        indexOfStringWithStartIndexAndCountWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual(5, System.String.indexOf(("xxxxxabcxxx"), "abc", 3, 8));
            Bridge.Test.NUnit.Assert.areEqual(5, System.String.indexOf(("xxxxxabcxxx"), "abc", 3, 5));
            Bridge.Test.NUnit.Assert.areEqual(-1, System.String.indexOf(("xxxxxabcxxx"), "abc", 3, 4));
        },
        indexOfAnyWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual(1, System.String.indexOfAny(("abcd"), System.Array.init([98], System.Char)));
            Bridge.Test.NUnit.Assert.areEqual(1, System.String.indexOfAny(("abcd"), System.Array.init([98, 120], System.Char)));
            Bridge.Test.NUnit.Assert.areEqual(1, System.String.indexOfAny(("abcd"), System.Array.init([98, 120, 121], System.Char)));
            Bridge.Test.NUnit.Assert.areEqual(-1, System.String.indexOfAny(("abcd"), System.Array.init([120, 121], System.Char)));
        },
        indexOfAnyWithStartIndexWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual(5, System.String.indexOfAny(("abcdabcd"), System.Array.init([98], System.Char), 4));
            Bridge.Test.NUnit.Assert.areEqual(5, System.String.indexOfAny(("abcdabcd"), System.Array.init([98, 120], System.Char), 4));
            Bridge.Test.NUnit.Assert.areEqual(5, System.String.indexOfAny(("abcdabcd"), System.Array.init([98, 120, 121], System.Char), 4));
            Bridge.Test.NUnit.Assert.areEqual(-1, System.String.indexOfAny(("abcdabcd"), System.Array.init([120, 121], System.Char), 4));
        },
        indexOfAnyWithStartIndexAndCountWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual(5, System.String.indexOfAny(("abcdabcd"), System.Array.init([98], System.Char), 4, 2));
            Bridge.Test.NUnit.Assert.areEqual(5, System.String.indexOfAny(("abcdabcd"), System.Array.init([98, 120], System.Char), 4, 2));
            Bridge.Test.NUnit.Assert.areEqual(5, System.String.indexOfAny(("abcdabcd"), System.Array.init([98, 120, 121], System.Char), 4, 2));
            Bridge.Test.NUnit.Assert.areEqual(-1, System.String.indexOfAny(("abcdabcd"), System.Array.init([120, 121], System.Char), 4, 2));
            Bridge.Test.NUnit.Assert.areEqual(-1, System.String.indexOfAny(("abcdabcd"), System.Array.init([99], System.Char), 4, 2));
        },
        insertWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual("abxyzcd", System.String.insert(2, ("abcd"), "xyz"));
        },
        isNullOrEmptyWorks: function () {
            Bridge.Test.NUnit.Assert.true(System.String.isNullOrEmpty(null));
            Bridge.Test.NUnit.Assert.true(System.String.isNullOrEmpty(""));
            Bridge.Test.NUnit.Assert.false(System.String.isNullOrEmpty(" "));
            Bridge.Test.NUnit.Assert.false(System.String.isNullOrEmpty("0"));
        },
        lastIndexOfCharWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual(1, ("abc").lastIndexOf(String.fromCharCode(98)));
            Bridge.Test.NUnit.Assert.areEqual(-1, ("abc").lastIndexOf(String.fromCharCode(100)));
        },
        lastIndexOfStringWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual(1, ("abc").lastIndexOf("bc"));
            Bridge.Test.NUnit.Assert.areEqual(-1, ("abc").lastIndexOf("bd"));
        },
        lastIndexOfCharWithStartIndexWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual(1, ("abcabc").lastIndexOf(String.fromCharCode(98), 3));
            Bridge.Test.NUnit.Assert.areEqual(-1, ("abcabc").lastIndexOf(String.fromCharCode(100), 3));
        },
        lastIndexOfStringWithStartIndexWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual(1, ("abcabc").lastIndexOf("bc", 3));
            Bridge.Test.NUnit.Assert.areEqual(-1, ("abcabc").lastIndexOf("bd", 3));
        },
        lastIndexOfCharWithStartIndexAndCountWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual(1, System.String.lastIndexOf(("abcabc"), String.fromCharCode(98), 3, 3));
            Bridge.Test.NUnit.Assert.areEqual(-1, System.String.lastIndexOf(("abcabc"), String.fromCharCode(98), 3, 2));
            Bridge.Test.NUnit.Assert.areEqual(-1, System.String.lastIndexOf(("abcabc"), String.fromCharCode(100), 3, 3));
        },
        lastIndexOfStringWithStartIndexAndCountWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual(1, System.String.lastIndexOf(("xbcxxxbc"), "bc", 3, 3));
            Bridge.Test.NUnit.Assert.areEqual(-1, System.String.lastIndexOf(("xbcxxxbc"), "bc", 3, 2));
            Bridge.Test.NUnit.Assert.areEqual(-1, System.String.lastIndexOf(("xbcxxxbc"), "bd", 3, 3));
        },
        lastIndexOfAnyWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual(1, System.String.lastIndexOfAny(("abcd"), [98]));
            Bridge.Test.NUnit.Assert.areEqual(1, System.String.lastIndexOfAny(("abcd"), [98, 120]));
            Bridge.Test.NUnit.Assert.areEqual(1, System.String.lastIndexOfAny(("abcd"), [98, 120, 121]));
            Bridge.Test.NUnit.Assert.areEqual(-1, System.String.lastIndexOfAny(("abcd"), [120, 121]));
        },
        lastIndexOfAnyWithStartIndexWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual(1, System.String.lastIndexOfAny(("abcdabcd"), System.Array.init([98], System.Char), 4));
            Bridge.Test.NUnit.Assert.areEqual(1, System.String.lastIndexOfAny(("abcdabcd"), System.Array.init([98, 120], System.Char), 4));
            Bridge.Test.NUnit.Assert.areEqual(1, System.String.lastIndexOfAny(("abcdabcd"), System.Array.init([98, 120, 121], System.Char), 4));
            Bridge.Test.NUnit.Assert.areEqual(-1, System.String.lastIndexOfAny(("abcdabcd"), System.Array.init([120, 121], System.Char), 4));
        },
        lastIndexOfAnyWithStartIndexAndCountWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual(1, System.String.lastIndexOfAny(("abcdabcd"), System.Array.init([98], System.Char), 4, 4));
            Bridge.Test.NUnit.Assert.areEqual(1, System.String.lastIndexOfAny(("abcdabcd"), System.Array.init([98, 120], System.Char), 4, 4));
            Bridge.Test.NUnit.Assert.areEqual(1, System.String.lastIndexOfAny(("abcdabcd"), System.Array.init([98, 120, 121], System.Char), 4, 4));
            Bridge.Test.NUnit.Assert.areEqual(-1, System.String.lastIndexOfAny(("abcdabcd"), System.Array.init([120, 121], System.Char), 4, 4));
            Bridge.Test.NUnit.Assert.areEqual(-1, System.String.lastIndexOfAny(("abcdabcd"), System.Array.init([98], System.Char), 4, 2));
        },
        localeCompareWorks: function () {
            Bridge.Test.NUnit.Assert.true("abcd".localeCompare("abcd") === 0);
            Bridge.Test.NUnit.Assert.true("abcd".localeCompare("abcb") > 0);
            Bridge.Test.NUnit.Assert.true("abcd".localeCompare("abce") < 0);
        },
        padLeftWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual("  abc", System.String.alignString(("abc"), 5));
        },
        padLeftWithCharWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual("00abc", System.String.alignString(("abc"), 5, 48));
        },
        padRightWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual("abc  ", System.String.alignString(("abc"), -5));
        },
        padRightWithCharWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual("abc00", System.String.alignString(("abc"), -5, 48));
        },
        removeWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual("ab", System.String.remove(("abcde"), 2));
        },
        removeWithCountWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual("abe", System.String.remove(("abcde"), 2, 2));
        },
        replaceWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual("xbcxbcxbc", System.String.replaceAll(("abcabcabc"), "a", "x"));
            Bridge.Test.NUnit.Assert.areEqual("xcxcxc", System.String.replaceAll(("abcabcabc"), "ab", "x"));
        },
        replaceCharWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual("xbcxbcxbc", System.String.replaceAll(("abcabcabc"), String.fromCharCode(97), String.fromCharCode(120)));
        },
        replaceRegexWithReplaceTextWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual("xxcxxcxxc", "abcabcabc".replace(new RegExp("a|b", "g"), "x"));
        },
        replaceRegexWithReplaceCallbackWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual("xycxycxyc", "abcabcabc".replace(new RegExp("a|b", "g"), $asm.$.Bridge.ClientTest.Batch4.SimpleTypes.StringTests.f1));
        },
        searchWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual(2, "abcabcabc".search(new RegExp("ca")));
            Bridge.Test.NUnit.Assert.areEqual(-1, "abcabcabc".search(new RegExp("x")));
        },
        splitWithStringWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual(System.Array.init(["a", "ca", "ca", "c"], System.String), "abcabcabc".split("b"));
        },
        splitWithCharWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual(System.Array.init(["a", "ca", "ca", "c"], System.String), System.String.split(("abcabcabc"), [98].map(function(i) {{ return String.fromCharCode(i); }})));
        },
        splitWithCharsAndLimitWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual(System.Array.init(["a", "cabcabc"], System.String), System.String.split(("abcabcabc"), System.Array.init([98], System.Char).map(function(i) {{ return String.fromCharCode(i); }}), 2));
        },
        splitWithCharsAndStringSplitOptionsAndLimitWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual(System.Array.init(["a", "cabcabc"], System.String), System.String.split(("abxcabcabc"), System.Array.init([98, 120], System.Char).map(function(i) {{ return String.fromCharCode(i); }}), 2, 1));
        },
        someNetSplitTests: function () {
            Bridge.Test.NUnit.Assert.areEqual(System.Array.init(["a", "bc", "de"], System.String), System.String.split(("axybcxzde"), System.Array.init(["xy", "xz"], System.String), null, 0));
            Bridge.Test.NUnit.Assert.areEqual(System.Array.init(["a", "bc", "de", ""], System.String), System.String.split(("axybcxzdexz"), System.Array.init(["xy", "xz"], System.String), null, 0));
            Bridge.Test.NUnit.Assert.areEqual(System.Array.init(["", "a", "bc", "de", ""], System.String), System.String.split(("xzaxybcxzdexz"), System.Array.init(["xy", "xz"], System.String), null, 0));
            Bridge.Test.NUnit.Assert.areEqual(System.Array.init(["", "a", "", "bc", "de", ""], System.String), System.String.split(("xzaxyxzbcxzdexz"), System.Array.init(["xy", "xz"], System.String), null, 0));
            Bridge.Test.NUnit.Assert.areEqual(System.Array.init(["", "a", "", "", "bc", "de", ""], System.String), System.String.split(("xzaxyxzxybcxzdexz"), System.Array.init(["xy", "xz"], System.String), null, 0));

            Bridge.Test.NUnit.Assert.areEqual(System.Array.init(["a", "bc", "de"], System.String), System.String.split(("axybcxzde"), System.Array.init(["xy", "xz"], System.String), null, 1));
            Bridge.Test.NUnit.Assert.areEqual(System.Array.init(["a", "bc", "de"], System.String), System.String.split(("axybcxzdexz"), System.Array.init(["xy", "xz"], System.String), null, 1));
            Bridge.Test.NUnit.Assert.areEqual(System.Array.init(["a", "bc", "de"], System.String), System.String.split(("xzaxybcxzdexz"), System.Array.init(["xy", "xz"], System.String), null, 1));
            Bridge.Test.NUnit.Assert.areEqual(System.Array.init(["a", "bc", "de"], System.String), System.String.split(("xzaxyxzbcxzdexz"), System.Array.init(["xy", "xz"], System.String), null, 1));
            Bridge.Test.NUnit.Assert.areEqual(System.Array.init(["a", "bc", "de"], System.String), System.String.split(("xzaxyxzxybcxzdexz"), System.Array.init(["xy", "xz"], System.String), null, 1));

            Bridge.Test.NUnit.Assert.areEqual(System.Array.init(["a", "bc", "de"], System.String), System.String.split(("axybcxzde"), System.Array.init(["xy", "xz"], System.String), 100, 0));
            Bridge.Test.NUnit.Assert.areEqual(System.Array.init(["a", "bc", "de", ""], System.String), System.String.split(("axybcxzdexz"), System.Array.init(["xy", "xz"], System.String), 100, 0));
            Bridge.Test.NUnit.Assert.areEqual(System.Array.init(["", "a", "bc", "de", ""], System.String), System.String.split(("xzaxybcxzdexz"), System.Array.init(["xy", "xz"], System.String), 100, 0));
            Bridge.Test.NUnit.Assert.areEqual(System.Array.init(["", "a", "", "bc", "de", ""], System.String), System.String.split(("xzaxyxzbcxzdexz"), System.Array.init(["xy", "xz"], System.String), 100, 0));
            Bridge.Test.NUnit.Assert.areEqual(System.Array.init(["", "a", "", "", "bc", "de", ""], System.String), System.String.split(("xzaxyxzxybcxzdexz"), System.Array.init(["xy", "xz"], System.String), 100, 0));

            Bridge.Test.NUnit.Assert.areEqual(System.Array.init(["a", "bcxzde"], System.String), System.String.split(("axybcxzde"), System.Array.init(["xy", "xz"], System.String), 2, 0));
            Bridge.Test.NUnit.Assert.areEqual(System.Array.init(["a", "bcxzdexz"], System.String), System.String.split(("axybcxzdexz"), System.Array.init(["xy", "xz"], System.String), 2, 0));
            Bridge.Test.NUnit.Assert.areEqual(System.Array.init(["a", "xzbcxzdexz"], System.String), System.String.split(("axyxzbcxzdexz"), System.Array.init(["xy", "xz"], System.String), 2, 0));
            Bridge.Test.NUnit.Assert.areEqual(System.Array.init(["", "axybcxzdexz"], System.String), System.String.split(("xzaxybcxzdexz"), System.Array.init(["xy", "xz"], System.String), 2, 0));

            Bridge.Test.NUnit.Assert.areEqual(System.Array.init(["a", "bcxzde"], System.String), System.String.split(("axybcxzde"), System.Array.init(["xy", "xz"], System.String), 2, 1));
            Bridge.Test.NUnit.Assert.areEqual(System.Array.init(["a", "bcxzdexz"], System.String), System.String.split(("axybcxzdexz"), System.Array.init(["xy", "xz"], System.String), 2, 1));
            Bridge.Test.NUnit.Assert.areEqual(System.Array.init(["a", "bcxzdexz"], System.String), System.String.split(("axyxzbcxzdexz"), System.Array.init(["xy", "xz"], System.String), 2, 1));
            Bridge.Test.NUnit.Assert.areEqual(System.Array.init(["a", "bcxzdexz"], System.String), System.String.split(("xzaxyxzbcxzdexz"), System.Array.init(["xy", "xz"], System.String), 2, 1));
        },
        splitWithCharsWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual(System.Array.init(["Lorem", "Ipsum", "", "dolor", "sit", "amet"], System.String), System.String.split(("Lorem Ipsum, dolor[sit amet"), System.Array.init([44, 32, 91], System.Char).map(function(i) {{ return String.fromCharCode(i); }})));
            Bridge.Test.NUnit.Assert.areEqual(System.Array.init(["Lorem", "Ipsum", "", "dolor", "sit", "amet"], System.String), System.String.split(("Lorem Ipsum, dolor[sit amet"), System.Array.init([44, 32, 91], System.Char).map(function(i) {{ return String.fromCharCode(i); }}), null, 0));
            Bridge.Test.NUnit.Assert.areEqual(System.Array.init(["Lorem", "Ipsum", "dolor", "sit", "amet"], System.String), System.String.split(("Lorem Ipsum, dolor[sit amet"), System.Array.init([44, 32, 91], System.Char).map(function(i) {{ return String.fromCharCode(i); }}), null, 1));
        },
        splitWithStringsWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual(System.Array.init(["a ", " b ", " b ", " c and c ", "", "", " d ", " d ", " e"], System.String), System.String.split(("a is b if b is c and c isifis d if d is e"), System.Array.init(["is", "if"], System.String), null, 0));
            Bridge.Test.NUnit.Assert.areEqual(System.Array.init(["a ", " b ", " b ", " c and c ", " d ", " d ", " e"], System.String), System.String.split(("a is b if b is c and c isifis d if d is e"), System.Array.init(["is", "if"], System.String), null, 1));
        },
        splitWithStringsAndLimitWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual(System.Array.init(["a", "abcabc"], System.String), System.String.split(("abcbcabcabc"), System.Array.init(["bc"], System.String), 2, 1));
        },
        startsWithStringWorks: function () {
            Bridge.Test.NUnit.Assert.true(System.String.startsWith(("abc"), "ab"));
            Bridge.Test.NUnit.Assert.false(System.String.startsWith(("abc"), "bc"));
        },
        substrWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual("cde", "abcde".substr(2));
        },
        substrWithLengthWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual("cd", "abcde".substr(2, 2));
        },
        substringWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual("cde", ("abcde").substr(2));
        },
        substringWithLengthWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual("cd", ("abcde").substr(2, 2));
        },
        javaScriptSubstringWithEndIndexWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual("cd", "abcde".substring(2, 4));
        },
        toLowerWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual("abcd", ("ABcd").toLowerCase());
        },
        toUpperWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual("ABCD", ("ABcd").toUpperCase());
        },
        trimWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual("abc", ("  abc  ").trim());
        },
        trimCharsWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual("aa, aa", System.String.trim((",., aa, aa,... "), [44, 46, 32]));
        },
        trimStartCharsWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual("aa, aa,... ", System.String.trimStart((",., aa, aa,... "), [44, 46, 32]));
        },
        trimEndCharsWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual(",., aa, aa", System.String.trimEnd((",., aa, aa,... "), [44, 46, 32]));
        },
        trimStartWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual("abc  ", System.String.trimStart(("  abc  ")));
        },
        trimEndWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual("  abc", System.String.trimEnd(("  abc  ")));
        },
        stringEqualityWorks: function () {
            var s1 = "abc", s2 = null, s3 = null;
            Bridge.Test.NUnit.Assert.true(Bridge.referenceEquals(s1, "abc"));
            Bridge.Test.NUnit.Assert.false(Bridge.referenceEquals(s1, "aBc"));
            Bridge.Test.NUnit.Assert.false(Bridge.referenceEquals(s1, s2));
            Bridge.Test.NUnit.Assert.true(Bridge.referenceEquals(s2, s3));
        },
        stringInequalityWorks: function () {
            var s1 = "abc", s2 = null, s3 = null;
            Bridge.Test.NUnit.Assert.false(!Bridge.referenceEquals(s1, "abc"));
            Bridge.Test.NUnit.Assert.true(!Bridge.referenceEquals(s1, "aBc"));
            Bridge.Test.NUnit.Assert.true(!Bridge.referenceEquals(s1, s2));
            Bridge.Test.NUnit.Assert.false(!Bridge.referenceEquals(s2, s3));
        },
        stringIndexingWorks: function () {
            var s = "abcd";
            Bridge.Test.NUnit.Assert.areEqual(97, s.charCodeAt(0));
            Bridge.Test.NUnit.Assert.areEqual(98, s.charCodeAt(1));
            Bridge.Test.NUnit.Assert.areEqual(99, s.charCodeAt(2));
            Bridge.Test.NUnit.Assert.areEqual(100, s.charCodeAt(3));
        },
        getHashCodeWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual(Bridge.getHashCode(("a")), Bridge.getHashCode(("a")));
            Bridge.Test.NUnit.Assert.areEqual(Bridge.getHashCode(("b")), Bridge.getHashCode(("b")));
            Bridge.Test.NUnit.Assert.areNotEqual(Bridge.getHashCode(("b")), Bridge.getHashCode(("a")));
            Bridge.Test.NUnit.Assert.areNotEqual(Bridge.getHashCode(("ab")), Bridge.getHashCode(("a")));
            Bridge.Test.NUnit.Assert.true(System.Int64(Bridge.getHashCode(("abcdefghijklmnopq"))).lt(System.Int64([-1,0])));
        },
        instanceEqualsWorks: function () {
            Bridge.Test.NUnit.Assert.true(Bridge.equals(("a"), "a"));
            Bridge.Test.NUnit.Assert.false(Bridge.equals(("b"), "a"));
            Bridge.Test.NUnit.Assert.false(Bridge.equals(("a"), "b"));
            Bridge.Test.NUnit.Assert.true(Bridge.equals(("b"), "b"));
            Bridge.Test.NUnit.Assert.false(Bridge.equals(("a"), "A"));
            Bridge.Test.NUnit.Assert.false(Bridge.equals(("a"), "ab"));
        },
        iEquatableEqualsWorks: function () {
            Bridge.Test.NUnit.Assert.true(System.String.equals(("a"), "a"));
            Bridge.Test.NUnit.Assert.false(System.String.equals(("b"), "a"));
            Bridge.Test.NUnit.Assert.false(System.String.equals(("a"), "b"));
            Bridge.Test.NUnit.Assert.true(System.String.equals(("b"), "b"));
            Bridge.Test.NUnit.Assert.false(System.String.equals(("a"), "A"));
            Bridge.Test.NUnit.Assert.false(System.String.equals(("a"), "ab"));

            Bridge.Test.NUnit.Assert.true(Bridge.equalsT("a", "a", System.String));
            Bridge.Test.NUnit.Assert.false(Bridge.equalsT("b", "a", System.String));
            Bridge.Test.NUnit.Assert.false(Bridge.equalsT("a", "b", System.String));
            Bridge.Test.NUnit.Assert.true(Bridge.equalsT("b", "b", System.String));
            Bridge.Test.NUnit.Assert.false(Bridge.equalsT("a", "A", System.String));
            Bridge.Test.NUnit.Assert.false(Bridge.equalsT("a", "ab", System.String));
        },
        compareToWorks: function () {
            Bridge.Test.NUnit.Assert.true(System.String.compare(("abcd"), "abcd") === 0);
            Bridge.Test.NUnit.Assert.true(System.String.compare(("abcd"), "abcD") !== 0);
            Bridge.Test.NUnit.Assert.true(System.String.compare(("abcd"), "abcb") > 0);
            Bridge.Test.NUnit.Assert.true(System.String.compare(("abcd"), "abce") < 0);

            Bridge.Test.NUnit.Assert.true(System.String.compare((""), null) > 0);
        },
        iComparableCompareToWorks: function () {
            Bridge.Test.NUnit.Assert.true(Bridge.compare("abcd", "abcd", false, System.String) === 0);
            Bridge.Test.NUnit.Assert.true(Bridge.compare("abcd", "abcD", false, System.String) !== 0);
            Bridge.Test.NUnit.Assert.true(Bridge.compare("abcd", "abcb", false, System.String) > 0);
            Bridge.Test.NUnit.Assert.true(Bridge.compare("abcd", "abce", false, System.String) < 0);

            Bridge.Test.NUnit.Assert.true(Bridge.compare("", null, false, System.String) > 0);
        },
        joinWorks_SPI_1599: function () {
            Bridge.Test.NUnit.Assert.areEqual("a, ab, abc, abcd", System.Array.init(["a", "ab", "abc", "abcd"], System.String).join(", "));
            Bridge.Test.NUnit.Assert.areEqual("ab, abc", System.Array.init(["a", "ab", "abc", "abcd"], System.String).slice(1, 1 + 2).join(", "));

            var intValues = new (Bridge.ClientTest.Batch4.SimpleTypes.StringTests.MyEnumerable$1(System.Int32))(System.Array.init([1, 5, 6], System.Int32));
            // #1599
            Bridge.Test.NUnit.Assert.areEqual("1, 5, 6", Bridge.toArray(intValues).join(", "));

            var stringValues = new (Bridge.ClientTest.Batch4.SimpleTypes.StringTests.MyEnumerable$1(System.String))(System.Array.init(["a", "ab", "abc", "abcd"], System.String));
            Bridge.Test.NUnit.Assert.areEqual("a, ab, abc, abcd", Bridge.toArray(stringValues).join(", "));

            Bridge.Test.NUnit.Assert.areEqual("a, 1, abc, False", System.Array.init(["a", Bridge.box(1, System.Int32), "abc", Bridge.box(false, System.Boolean, $box_.System.Boolean.toString)], System.Object).join(", ")); // False");
        },
        containsWorks: function () {
            var text = "Lorem ipsum dolor sit amet";
            Bridge.Test.NUnit.Assert.true(System.String.contains(text,"Lorem"));
            Bridge.Test.NUnit.Assert.false(System.String.contains(text,"lorem"));
            Bridge.Test.NUnit.Assert.true(System.String.contains(text,text));
        },
        toCharArrayWorks: function () {
            var text = "Lorem sit dolor";
            Bridge.Test.NUnit.Assert.areEqual(System.Array.init([76, 111, 114, 101, 109, 32, 115, 105, 116, 32, 100, 111, 108, 111, 114], System.Char), System.String.toCharArray(text, 0, text.length));
        }
    });

    Bridge.ns("Bridge.ClientTest.Batch4.SimpleTypes.StringTests", $asm.$);

    Bridge.apply($asm.$.Bridge.ClientTest.Batch4.SimpleTypes.StringTests, {
        f1: function (s) {
            return Bridge.referenceEquals(s, "a") ? "x" : "y";
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.SimpleTypes.StringTests.MyEnumerable$1", function (T) { return {
        inherits: [System.Collections.Generic.IEnumerable$1(T)],
        _items: null,
        config: {
            alias: [
            "getEnumerator", "System$Collections$Generic$IEnumerable$1$" + Bridge.getTypeAlias(T) + "$getEnumerator"
            ]
        },
        ctor: function (items) {
            this.$initialize();
            this._items = items;
        },
        System$Collections$IEnumerable$getEnumerator: function () {
            return null;
        },
        getEnumerator: function () {
            return Bridge.cast(System.Linq.Enumerable.from(this._items).toList(T).getEnumerator(), System.Collections.Generic.IEnumerator$1(T));
        }
    }; });

    Bridge.define("Bridge.ClientTest.Batch4.SimpleTypes.StringTests.MyFormatProvider", {
        inherits: [System.IFormatProvider],
        config: {
            alias: [
            "getFormat", "System$IFormatProvider$getFormat"
            ]
        },
        getFormat: function (type) {
            return System.Globalization.CultureInfo.invariantCulture.getFormat(type);
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.SimpleTypes.StringTests.MyFormattable", {
        inherits: [System.IFormattable],
        config: {
            alias: [
            "format", "System$IFormattable$format"
            ]
        },
        format: function (format, formatProvider) {
            return System.String.concat("Formatted: ", format, ", ", (formatProvider == null ? "null formatProvider" : Bridge.Reflection.getTypeFullName(Bridge.getType(formatProvider))));
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.SimpleTypes.TimeSpanTests", {
        typePropertiesAreCorrect_SPI_1717: function () {
            Bridge.Test.NUnit.Assert.areEqual("System.TimeSpan", Bridge.Reflection.getTypeFullName(System.TimeSpan));
            Bridge.Test.NUnit.Assert.false(Bridge.Reflection.isClass(System.TimeSpan));
            Bridge.Test.NUnit.Assert.true(Bridge.Reflection.isAssignableFrom(System.IComparable$1(System.TimeSpan), System.TimeSpan));
            Bridge.Test.NUnit.Assert.true(Bridge.Reflection.isAssignableFrom(System.IEquatable$1(System.TimeSpan), System.TimeSpan));
            var d = new System.TimeSpan();
            Bridge.Test.NUnit.Assert.true(Bridge.is(d, System.TimeSpan));
            Bridge.Test.NUnit.Assert.true(Bridge.is(d, System.IComparable$1(System.TimeSpan)));
            Bridge.Test.NUnit.Assert.true(Bridge.is(d, System.IEquatable$1(System.TimeSpan)));

            var interfaces = Bridge.Reflection.getInterfaces(System.TimeSpan);
            Bridge.Test.NUnit.Assert.areEqual(3, interfaces.length);
            Bridge.Test.NUnit.Assert.true(System.Array.contains(interfaces, System.IComparable$1(System.TimeSpan), Function));
            Bridge.Test.NUnit.Assert.true(System.Array.contains(interfaces, System.IEquatable$1(System.TimeSpan), Function));
        },
        defaultConstructorWorks: function () {
            var time = new System.TimeSpan();
            Bridge.Test.NUnit.Assert.areEqual(System.Int64(0), time.getTicks());
        },
        defaultValueWorks: function () {
            var ts = Bridge.getDefaultValue(System.TimeSpan);
            Bridge.Test.NUnit.Assert.areEqual(System.Int64(0), ts.getTicks());
        },
        zeroWorks: function () {
            var ts = System.TimeSpan.zero;
            Bridge.Test.NUnit.Assert.areEqual(System.Int64(0), ts.getTicks());
        },
        creatingInstanceReturnsTimeSpanWithZeroValue: function () {
            var ts = Bridge.createInstance(System.TimeSpan);
            Bridge.Test.NUnit.Assert.areEqual(System.Int64(0), ts.getTicks());
        },
        parameterConstructorsWorks: function () {
            var time = new System.TimeSpan(System.Int64(34567));
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(time, System.TimeSpan), "ticks type");
            Bridge.Test.NUnit.Assert.areEqual$1(System.Int64(34567), time.getTicks(), "ticks value");

            time = new System.TimeSpan(10, 20, 5);
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(time, System.TimeSpan), "h, m, s type");
            Bridge.Test.NUnit.Assert.areEqual$1(System.Int64([-1612154752,86]), time.getTicks(), "h, m, s value");

            time = new System.TimeSpan(15, 10, 20, 5);
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(time, System.TimeSpan), "d, h, m, s type");
            Bridge.Test.NUnit.Assert.areEqual$1(System.Int64([471513216,3104]), time.getTicks(), "d, h, m, s value");

            time = new System.TimeSpan(15, 10, 20, 5, 14);
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(time, System.TimeSpan), "full type");
            Bridge.Test.NUnit.Assert.areEqual$1(System.Int64([471653216,3104]), time.getTicks(), "full value");
        },
        factoryMethodsWork: function () {
            var time = System.TimeSpan.fromDays(3);
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(time, System.TimeSpan), "FromDays type");
            Bridge.Test.NUnit.Assert.areEqual$1(System.Int64([2134720512,603]), time.getTicks(), "FromDays value");

            time = System.TimeSpan.fromHours(3);
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(time, System.TimeSpan), "FromHours type");
            Bridge.Test.NUnit.Assert.areEqual$1(System.Int64([625817600,25]), time.getTicks(), "FromHours value");

            time = System.TimeSpan.fromMinutes(3);
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(time, System.TimeSpan), "FromMinutes type");
            Bridge.Test.NUnit.Assert.areEqual$1(System.Int64(1800000000), time.getTicks(), "FromMinutes value");

            time = System.TimeSpan.fromSeconds(3);
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(time, System.TimeSpan), "FromSeconds type");
            Bridge.Test.NUnit.Assert.areEqual$1(System.Int64(30000000), time.getTicks(), "FromSeconds value");

            time = System.TimeSpan.fromMilliseconds(3);
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(time, System.TimeSpan), "FromMilliseconds type");
            Bridge.Test.NUnit.Assert.areEqual$1(System.Int64(30000), time.getTicks(), "FromMilliseconds value");

            time = System.TimeSpan.fromTicks(System.Int64(3));
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(time, System.TimeSpan), "FromTicks type");
            Bridge.Test.NUnit.Assert.areEqual$1(System.Int64(3), time.getTicks(), "FromTicks value");
        },
        propertiesWork: function () {
            var time = new System.TimeSpan(15, 10, 20, 5, 14);
            Bridge.Test.NUnit.Assert.areEqual(15, time.getDays());
            Bridge.Test.NUnit.Assert.areEqual(10, time.getHours());
            Bridge.Test.NUnit.Assert.areEqual(20, time.getMinutes());
            Bridge.Test.NUnit.Assert.areEqual(5, time.getSeconds());
            Bridge.Test.NUnit.Assert.areEqual(14, time.getMilliseconds());
            this.assertAlmostEqual(time.getTotalDays(), 15.430613587962963);
            this.assertAlmostEqual(time.getTotalHours(), 370.33472611111108);
            this.assertAlmostEqual(time.getTotalMinutes(), 22220.083566666668);
            this.assertAlmostEqual(time.getTotalSeconds(), 1333205.014);
            this.assertAlmostEqual(time.getTotalMilliseconds(), 1333205014.0);
            Bridge.Test.NUnit.Assert.areEqual(System.Int64([471653216,3104]), time.getTicks());
        },
        compareToWorks: function () {
            var time1 = new System.TimeSpan(15, 10, 20, 5, 14);
            var time2 = new System.TimeSpan(15, 10, 20, 5, 14);
            var time3 = new System.TimeSpan(14, 10, 20, 5, 14);
            var time4 = new System.TimeSpan(15, 11, 20, 5, 14);
            Bridge.Test.NUnit.Assert.areEqual(time1.compareTo(time1), 0);
            Bridge.Test.NUnit.Assert.areEqual(time1.compareTo(time2), 0);
            Bridge.Test.NUnit.Assert.areEqual(time1.compareTo(time3), 1);
            Bridge.Test.NUnit.Assert.areEqual(time1.compareTo(time4), -1);
        },
        compareWorks: function () {
            var time1 = new System.TimeSpan(15, 10, 20, 5, 14);
            var time2 = new System.TimeSpan(15, 10, 20, 5, 14);
            var time3 = new System.TimeSpan(14, 10, 20, 5, 14);
            var time4 = new System.TimeSpan(15, 11, 20, 5, 14);
            Bridge.Test.NUnit.Assert.areEqual(time1.compareTo(time1), 0);
            Bridge.Test.NUnit.Assert.areEqual(time1.compareTo(time2), 0);
            Bridge.Test.NUnit.Assert.areEqual(time1.compareTo(time3), 1);
            Bridge.Test.NUnit.Assert.areEqual(time1.compareTo(time4), -1);
        },
        staticEqualsWorks: function () {
            var time1 = new System.TimeSpan(15, 10, 20, 5, 14);
            var time2 = new System.TimeSpan(14, 10, 20, 5, 14);
            var time3 = new System.TimeSpan(15, 10, 20, 5, 14);

            Bridge.Test.NUnit.Assert.false((time1).ticks.eq((time2).ticks));
            Bridge.Test.NUnit.Assert.true((time1).ticks.eq((time3).ticks));
        },
        equalsWorks: function () {
            var time1 = new System.TimeSpan(15, 10, 20, 5, 14);
            var time2 = new System.TimeSpan(14, 10, 20, 5, 14);
            var time3 = new System.TimeSpan(15, 10, 20, 5, 14);

            Bridge.Test.NUnit.Assert.false(time1.equalsT(time2));
            Bridge.Test.NUnit.Assert.true(time1.equalsT(time3));
        },
        iEquatableEqualsWorks: function () {
            var time1 = new System.TimeSpan(15, 10, 20, 5, 14);
            var time2 = new System.TimeSpan(14, 10, 20, 5, 14);
            var time3 = new System.TimeSpan(15, 10, 20, 5, 14);

            Bridge.Test.NUnit.Assert.false(Bridge.equalsT(Bridge.cast(time1, System.IEquatable$1(System.TimeSpan)), time2, System.TimeSpan));
            Bridge.Test.NUnit.Assert.true(Bridge.equalsT(Bridge.cast(time1, System.IEquatable$1(System.TimeSpan)), time3, System.TimeSpan));
        },
        toStringWorks: function () {
            var time1 = new System.TimeSpan(15, 10, 20, 5, 14);
            var time2 = new System.TimeSpan(14, 10, 20, 5, 2);
            var time3 = new System.TimeSpan(15, 11, 20, 6, 14);
            var time4 = new System.TimeSpan(1, 2, 3);
            Bridge.Test.NUnit.Assert.areEqual("15.10:20:05.0140000", time1.toString());
            Bridge.Test.NUnit.Assert.areEqual("14.10:20:05.0020000", time2.toString());
            Bridge.Test.NUnit.Assert.areEqual("15.11:20:06.0140000", time3.toString());
            Bridge.Test.NUnit.Assert.areEqual("01:02:03", time4.toString());
        },
        addWorks: function () {
            var time1 = new System.TimeSpan(2, 3, 4, 5, 6);
            var time2 = new System.TimeSpan(3, 4, 5, 6, 7);
            var actual = time1.add(time2);
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(actual, System.TimeSpan), "Should be TimeSpan");
            Bridge.Test.NUnit.Assert.areEqual$1(457751013, actual.getTotalMilliseconds(), "TotalMilliseconds should be correct");
        },
        subtractWorks: function () {
            var time1 = new System.TimeSpan(4, 3, 7, 2, 6);
            var time2 = new System.TimeSpan(3, 4, 5, 6, 7);
            var actual = time1.subtract(time2);
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(actual, System.TimeSpan), "Should be TimeSpan");
            Bridge.Test.NUnit.Assert.areEqual$1(82915999, actual.getTotalMilliseconds(), "TotalMilliseconds should be correct");
        },
        durationWorks: function () {
            var time1 = new System.TimeSpan(-3, -2, -1, -5, -4);
            var time2 = new System.TimeSpan(2, 1, 5, 4, 3);
            var actual1 = time1.duration();
            var actual2 = time2.duration();
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(time1, System.TimeSpan), "Should be TimeSpan");
            Bridge.Test.NUnit.Assert.areEqual$1(266465004, actual1.getTotalMilliseconds(), "Negative should be negated");
            Bridge.Test.NUnit.Assert.areEqual$1(176704003, actual2.getTotalMilliseconds(), "Positive should be preserved");
        },
        negateWorks: function () {
            var time = new System.TimeSpan(-3, 2, -1, 5, -4);
            var actual = time.negate();
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(actual, System.TimeSpan), "Should be TimeSpan");
            Bridge.Test.NUnit.Assert.areEqual$1(252055004, actual.getTotalMilliseconds(), "Ticks should be correct");
        },
        assertAlmostEqual: function (d1, d2) {
            var diff = d2 - d1;
            if (diff < 0) {
                diff = -diff;
            }
            Bridge.Test.NUnit.Assert.true(diff < 1E-08);
        },
        comparisonOperatorsWork: function () {
            var time1 = new System.TimeSpan(15, 10, 20, 5, 14);
            var time2 = new System.TimeSpan(15, 10, 20, 5, 14);
            var time3 = new System.TimeSpan(14, 10, 20, 5, 14);
            var time4 = new System.TimeSpan(15, 11, 20, 5, 14);

            Bridge.Test.NUnit.Assert.false$1(System.TimeSpan.gt(time1, time2), "> 1");
            Bridge.Test.NUnit.Assert.true$1(System.TimeSpan.gt(time1, time3), "> 2");
            Bridge.Test.NUnit.Assert.false$1(System.TimeSpan.gt(time1, time4), "> 3");

            Bridge.Test.NUnit.Assert.true$1(System.TimeSpan.gte(time1, time2), ">= 1");
            Bridge.Test.NUnit.Assert.true$1(System.TimeSpan.gte(time1, time3), ">= 2");
            Bridge.Test.NUnit.Assert.false$1(System.TimeSpan.gte(time1, time4), ">= 3");

            Bridge.Test.NUnit.Assert.false$1(System.TimeSpan.lt(time1, time2), "< 1");
            Bridge.Test.NUnit.Assert.false$1(System.TimeSpan.lt(time1, time3), "< 2");
            Bridge.Test.NUnit.Assert.true$1(System.TimeSpan.lt(time1, time4), "< 3");

            Bridge.Test.NUnit.Assert.true$1(System.TimeSpan.lte(time1, time2), "<= 1");
            Bridge.Test.NUnit.Assert.false$1(System.TimeSpan.lte(time1, time3), "<= 2");
            Bridge.Test.NUnit.Assert.true$1(System.TimeSpan.lte(time1, time4), "<= 3");

            Bridge.Test.NUnit.Assert.true$1(System.TimeSpan.eq(time1, time1), "== 1");
            Bridge.Test.NUnit.Assert.true$1(System.TimeSpan.eq(time1, time2), "== 2");
            Bridge.Test.NUnit.Assert.false$1(System.TimeSpan.eq(time1, time3), "== 3");
            Bridge.Test.NUnit.Assert.false$1(System.TimeSpan.eq(time1, time4), "== 4");

            Bridge.Test.NUnit.Assert.false$1(System.TimeSpan.neq(time1, time1), "!= 1");
            Bridge.Test.NUnit.Assert.false$1(System.TimeSpan.neq(time1, time2), "!= 2");
            Bridge.Test.NUnit.Assert.true$1(System.TimeSpan.neq(time1, time3), "!= 3");
            Bridge.Test.NUnit.Assert.true$1(System.TimeSpan.neq(time1, time4), "!= 4");
        },
        additionOperatorWorks: function () {
            var time1 = new System.TimeSpan(2, 3, 4, 5, 6);
            var time2 = new System.TimeSpan(3, 4, 5, 6, 7);
            var actual = System.TimeSpan.add(time1, time2);
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(actual, System.TimeSpan), "Should be TimeSpan");
            Bridge.Test.NUnit.Assert.areEqual$1(457751013, actual.getTotalMilliseconds(), "TotalMilliseconds should be correct");
        },
        subtractionOperatorWorks: function () {
            var time1 = new System.TimeSpan(4, 3, 7, 2, 6);
            var time2 = new System.TimeSpan(3, 4, 5, 6, 7);
            var actual = System.TimeSpan.sub(time1, time2);
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(actual, System.TimeSpan), "Should be TimeSpan");
            Bridge.Test.NUnit.Assert.areEqual$1(82915999, actual.getTotalMilliseconds(), "TotalMilliseconds should be correct");
        },
        unaryPlusWorks: function () {
            var time = new System.TimeSpan(-3, 2, -1, 5, -4);
            var actual = System.TimeSpan.plus(time);
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(actual, System.TimeSpan), "Should be TimeSpan");
            Bridge.Test.NUnit.Assert.areEqual$1(-252055004, actual.getTotalMilliseconds(), "Ticks should be correct");
        },
        unaryMinusWorks: function () {
            var time = new System.TimeSpan(-3, 2, -1, 5, -4);
            var actual = System.TimeSpan.neg(time);
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(actual, System.TimeSpan), "Should be TimeSpan");
            Bridge.Test.NUnit.Assert.areEqual$1(252055004, actual.getTotalMilliseconds(), "Ticks should be correct");
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.SimpleTypes.TupleTests", {
        tuple1Works: function () {
            for (var i = 0; i <= 1; i = (i + 1) | 0) {
                var t = i === 0 ? { item1: "a" } : { item1: "a" };
                Bridge.Test.NUnit.Assert.areStrictEqual("a", t.item1);
            }
        },
        tuple2Works: function () {
            for (var i = 0; i <= 1; i = (i + 1) | 0) {
                var t = i === 0 ? { item1: "a", item2: "b" } : { item1: "a", item2: "b" };
                Bridge.Test.NUnit.Assert.areStrictEqual("a", t.item1);
                Bridge.Test.NUnit.Assert.areStrictEqual("b", t.item2);
            }
        },
        tuple3Works: function () {
            for (var i = 0; i <= 1; i = (i + 1) | 0) {
                var t = i === 0 ? { item1: "a", item2: "b", item3: "c" } : { item1: "a", item2: "b", item3: "c" };
                Bridge.Test.NUnit.Assert.areStrictEqual("a", t.item1);
                Bridge.Test.NUnit.Assert.areStrictEqual("b", t.item2);
                Bridge.Test.NUnit.Assert.areStrictEqual("c", t.item3);
            }
        },
        tuple4Works: function () {
            for (var i = 0; i <= 1; i = (i + 1) | 0) {
                var t = i === 0 ? { item1: "a", item2: "b", item3: "c", item4: "d" } : { item1: "a", item2: "b", item3: "c", item4: "d" };
                Bridge.Test.NUnit.Assert.areStrictEqual("a", t.item1);
                Bridge.Test.NUnit.Assert.areStrictEqual("b", t.item2);
                Bridge.Test.NUnit.Assert.areStrictEqual("c", t.item3);
                Bridge.Test.NUnit.Assert.areStrictEqual("d", t.item4);
            }
        },
        tuple5Works: function () {
            for (var i = 0; i <= 1; i = (i + 1) | 0) {
                var t = i === 0 ? { item1: "a", item2: "b", item3: "c", item4: "d", item5: "e" } : { item1: "a", item2: "b", item3: "c", item4: "d", item5: "e" };
                Bridge.Test.NUnit.Assert.areStrictEqual("a", t.item1);
                Bridge.Test.NUnit.Assert.areStrictEqual("b", t.item2);
                Bridge.Test.NUnit.Assert.areStrictEqual("c", t.item3);
                Bridge.Test.NUnit.Assert.areStrictEqual("d", t.item4);
                Bridge.Test.NUnit.Assert.areStrictEqual("e", t.item5);
            }
        },
        tuple6Works: function () {
            for (var i = 0; i <= 1; i = (i + 1) | 0) {
                var t = i === 0 ? { item1: "a", item2: "b", item3: "c", item4: "d", item5: "e", item6: "f" } : { item1: "a", item2: "b", item3: "c", item4: "d", item5: "e", item6: "f" };
                Bridge.Test.NUnit.Assert.areStrictEqual("a", t.item1);
                Bridge.Test.NUnit.Assert.areStrictEqual("b", t.item2);
                Bridge.Test.NUnit.Assert.areStrictEqual("c", t.item3);
                Bridge.Test.NUnit.Assert.areStrictEqual("d", t.item4);
                Bridge.Test.NUnit.Assert.areStrictEqual("e", t.item5);
                Bridge.Test.NUnit.Assert.areStrictEqual("f", t.item6);
            }
        },
        tuple7Works: function () {
            for (var i = 0; i <= 1; i = (i + 1) | 0) {
                var t = i === 0 ? { item1: "a", item2: "b", item3: "c", item4: "d", item5: "e", item6: "f", item7: "g" } : { item1: "a", item2: "b", item3: "c", item4: "d", item5: "e", item6: "f", item7: "g" };
                Bridge.Test.NUnit.Assert.areStrictEqual("a", t.item1);
                Bridge.Test.NUnit.Assert.areStrictEqual("b", t.item2);
                Bridge.Test.NUnit.Assert.areStrictEqual("c", t.item3);
                Bridge.Test.NUnit.Assert.areStrictEqual("d", t.item4);
                Bridge.Test.NUnit.Assert.areStrictEqual("e", t.item5);
                Bridge.Test.NUnit.Assert.areStrictEqual("f", t.item6);
                Bridge.Test.NUnit.Assert.areStrictEqual("g", t.item7);
            }
        },
        tuple8Works: function () {
            for (var i = 0; i <= 1; i = (i + 1) | 0) {
                var t = i === 0 ? { item1: "a", item2: "b", item3: "c", item4: "d", item5: "e", item6: "f", item7: "g", rest: "h" } : { item1: "a", item2: "b", item3: "c", item4: "d", item5: "e", item6: "f", item7: "g", rest: "h" };
                Bridge.Test.NUnit.Assert.areStrictEqual("a", t.item1);
                Bridge.Test.NUnit.Assert.areStrictEqual("b", t.item2);
                Bridge.Test.NUnit.Assert.areStrictEqual("c", t.item3);
                Bridge.Test.NUnit.Assert.areStrictEqual("d", t.item4);
                Bridge.Test.NUnit.Assert.areStrictEqual("e", t.item5);
                Bridge.Test.NUnit.Assert.areStrictEqual("f", t.item6);
                Bridge.Test.NUnit.Assert.areStrictEqual("g", t.item7);
                Bridge.Test.NUnit.Assert.areStrictEqual("h", t.rest);
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.SimpleTypes.UInt16Tests", {
        typePropertiesAreCorrect_SPI_1717: function () {
            Bridge.Test.NUnit.Assert.true(Bridge.is(Bridge.box(0, System.UInt16), System.UInt16));
            Bridge.Test.NUnit.Assert.false(Bridge.is(Bridge.box(0.5, System.Double, $box_.System.Double.toString), System.UInt16));
            Bridge.Test.NUnit.Assert.false(Bridge.is(Bridge.box(-1, System.Int32), System.UInt16));
            Bridge.Test.NUnit.Assert.false(Bridge.is(Bridge.box(65536, System.Int32), System.UInt16));
            Bridge.Test.NUnit.Assert.areEqual("System.UInt16", Bridge.Reflection.getTypeFullName(System.UInt16));
            Bridge.Test.NUnit.Assert.false(Bridge.Reflection.isClass(System.UInt16));
            Bridge.Test.NUnit.Assert.true(Bridge.Reflection.isAssignableFrom(System.IComparable$1(System.UInt16), System.UInt16));
            Bridge.Test.NUnit.Assert.true(Bridge.Reflection.isAssignableFrom(System.IEquatable$1(System.UInt16), System.UInt16));
            Bridge.Test.NUnit.Assert.true(Bridge.Reflection.isAssignableFrom(System.IFormattable, System.UInt16));
            var s = Bridge.box(0, System.UInt16);
            Bridge.Test.NUnit.Assert.true(Bridge.is(s, System.UInt16));
            Bridge.Test.NUnit.Assert.true(Bridge.is(s, System.IComparable$1(System.UInt16)));
            Bridge.Test.NUnit.Assert.true(Bridge.is(s, System.IEquatable$1(System.UInt16)));
            Bridge.Test.NUnit.Assert.true(Bridge.is(s, System.IFormattable));

            var interfaces = Bridge.Reflection.getInterfaces(System.UInt16);
            Bridge.Test.NUnit.Assert.areEqual(4, interfaces.length);
            Bridge.Test.NUnit.Assert.true(System.Array.contains(interfaces, System.IComparable$1(System.UInt16), Function));
            Bridge.Test.NUnit.Assert.true(System.Array.contains(interfaces, System.IEquatable$1(System.UInt16), Function));
            Bridge.Test.NUnit.Assert.true(System.Array.contains(interfaces, System.IFormattable, Function));
        },
        castsWork: function () {
            var i1 = -1, i2 = 0, i3 = 234, i4 = 65535, i5 = 65536;
            var ni1 = -1, ni2 = 0, ni3 = 234, ni4 = 65535, ni5 = 65536, ni6 = null;

            Bridge.Test.NUnit.Assert.areStrictEqual$1(65535, (i1 & 65535), "-1 unchecked");
            Bridge.Test.NUnit.Assert.areStrictEqual$1(0, (i2 & 65535), "0 unchecked");
            Bridge.Test.NUnit.Assert.areStrictEqual$1(234, (i3 & 65535), "234 unchecked");
            Bridge.Test.NUnit.Assert.areStrictEqual$1(65535, (i4 & 65535), "65535 unchecked");
            Bridge.Test.NUnit.Assert.areStrictEqual$1(0, (i5 & 65535), "65536 unchecked");

            Bridge.Test.NUnit.Assert.areStrictEqual$1(65535, Bridge.Int.clipu16(ni1), "nullable -1 unchecked");
            Bridge.Test.NUnit.Assert.areStrictEqual$1(0, Bridge.Int.clipu16(ni2), "nullable 0 unchecked");
            Bridge.Test.NUnit.Assert.areStrictEqual$1(234, Bridge.Int.clipu16(ni3), "nullable 234 unchecked");
            Bridge.Test.NUnit.Assert.areStrictEqual$1(65535, Bridge.Int.clipu16(ni4), "nullable 65535 unchecked");
            Bridge.Test.NUnit.Assert.areStrictEqual$1(0, Bridge.Int.clipu16(ni5), "nullable 65536 unchecked");
            Bridge.Test.NUnit.Assert.areStrictEqual$1(null, Bridge.Int.clipu16(ni6), "null unchecked");

            Bridge.Test.NUnit.Assert.throws$7(System.OverflowException, function () {
                var x = Bridge.Int.check(i1, System.UInt16);
            }, "-1 checked");
            Bridge.Test.NUnit.Assert.areStrictEqual$1(0, Bridge.Int.check(i2, System.UInt16), "0 checked");
            Bridge.Test.NUnit.Assert.areStrictEqual$1(234, Bridge.Int.check(i3, System.UInt16), "234 checked");
            Bridge.Test.NUnit.Assert.areStrictEqual$1(65535, Bridge.Int.check(i4, System.UInt16), "65535 checked");
            Bridge.Test.NUnit.Assert.throws$7(System.OverflowException, function () {
                var x = Bridge.Int.check(i5, System.UInt16);
            }, "65536 checked");

            Bridge.Test.NUnit.Assert.throws$7(System.OverflowException, function () {
                var x = Bridge.Int.check(ni1, System.UInt16);
            }, "nullable -1 checked");
            Bridge.Test.NUnit.Assert.areStrictEqual$1(0, Bridge.Int.check(ni2, System.UInt16), "nullable 0 checked");
            Bridge.Test.NUnit.Assert.areStrictEqual$1(234, Bridge.Int.check(ni3, System.UInt16), "nullable 234 checked");
            Bridge.Test.NUnit.Assert.areStrictEqual$1(65535, Bridge.Int.check(ni4, System.UInt16), "nullable 65535 checked");
            Bridge.Test.NUnit.Assert.throws$7(System.OverflowException, function () {
                var x = Bridge.Int.check(ni5, System.UInt16);
            }, "nullable 65536 checked");
            Bridge.Test.NUnit.Assert.areStrictEqual$1(null, Bridge.Int.check(ni6, System.UInt16), "null checked");
        },
        getDefaultValue: function (T) {
            return Bridge.getDefaultValue(T);
        },
        defaultValueIs0: function () {
            Bridge.Test.NUnit.Assert.areStrictEqual(0, this.getDefaultValue(System.UInt16));
        },
        defaultConstructorReturnsZero: function () {
            Bridge.Test.NUnit.Assert.areStrictEqual(0, Number());
        },
        creatingInstanceReturnsZero: function () {
            Bridge.Test.NUnit.Assert.areStrictEqual(0, Bridge.createInstance(System.UInt16));
        },
        constantsWork: function () {
            Bridge.Test.NUnit.Assert.areEqual(0, 0);
            Bridge.Test.NUnit.Assert.areEqual(65535, 65535);
        },
        formatWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual("123", System.UInt16.format((291), "x"));
        },
        toStringWithFormatWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual("123", System.UInt16.format((291), "x"));
        },
        toStringWithFormatAndProviderWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual("123", System.UInt16.format((291), "x", System.Globalization.CultureInfo.invariantCulture));
        },
        iFormattableToStringWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual("123", Bridge.format(291, "x", System.Globalization.CultureInfo.invariantCulture));
        },
        tryParseWorks_SPI_1592: function () {
            var numberResult = { };
            var result = System.UInt16.tryParse("23445", numberResult);
            Bridge.Test.NUnit.Assert.true(result);
            Bridge.Test.NUnit.Assert.areEqual(23445, numberResult.v);

            result = System.UInt16.tryParse("", numberResult);
            Bridge.Test.NUnit.Assert.false(result);
            Bridge.Test.NUnit.Assert.areEqual(0, numberResult.v);

            result = System.UInt16.tryParse(null, numberResult);
            Bridge.Test.NUnit.Assert.false(result);
            Bridge.Test.NUnit.Assert.areEqual(0, numberResult.v);

            result = System.UInt16.tryParse("notanumber", numberResult);
            Bridge.Test.NUnit.Assert.false(result);
            Bridge.Test.NUnit.Assert.areEqual(0, numberResult.v);

            result = System.UInt16.tryParse("32768", numberResult);
            Bridge.Test.NUnit.Assert.true(result);
            Bridge.Test.NUnit.Assert.areEqual(32768, numberResult.v);

            result = System.UInt16.tryParse("-1", numberResult);
            Bridge.Test.NUnit.Assert.false(result);
            // #1592
            Bridge.Test.NUnit.Assert.areEqual(0, numberResult.v);

            result = System.UInt16.tryParse("2.5", numberResult);
            Bridge.Test.NUnit.Assert.false(result);
            Bridge.Test.NUnit.Assert.areEqual(0, numberResult.v);
        },
        parseWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual(23445, System.UInt16.parse("23445"));
            Bridge.Test.NUnit.Assert.throws$6(System.FormatException, $asm.$.Bridge.ClientTest.Batch4.SimpleTypes.UInt16Tests.f1);
            Bridge.Test.NUnit.Assert.throws$6(System.ArgumentNullException, $asm.$.Bridge.ClientTest.Batch4.SimpleTypes.UInt16Tests.f2);
            Bridge.Test.NUnit.Assert.throws$6(System.FormatException, $asm.$.Bridge.ClientTest.Batch4.SimpleTypes.UInt16Tests.f3);
            Bridge.Test.NUnit.Assert.throws$6(System.OverflowException, $asm.$.Bridge.ClientTest.Batch4.SimpleTypes.UInt16Tests.f4);
            Bridge.Test.NUnit.Assert.throws$6(System.OverflowException, $asm.$.Bridge.ClientTest.Batch4.SimpleTypes.UInt16Tests.f5);
            Bridge.Test.NUnit.Assert.throws$6(System.FormatException, $asm.$.Bridge.ClientTest.Batch4.SimpleTypes.UInt16Tests.f6);
        },
        toStringWithoutRadixWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual("123", (123).toString());
        },
        toStringWithRadixWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual("123", (123).toString(10));
            Bridge.Test.NUnit.Assert.areEqual("123", (291).toString(16));
        },
        getHashCodeWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual(Bridge.getHashCode((0)), Bridge.getHashCode((0)));
            Bridge.Test.NUnit.Assert.areEqual(Bridge.getHashCode((1)), Bridge.getHashCode((1)));
            Bridge.Test.NUnit.Assert.areNotEqual(Bridge.getHashCode((1)), Bridge.getHashCode((0)));
        },
        equalsWorks: function () {
            Bridge.Test.NUnit.Assert.true(System.UInt16.equals((0), Bridge.box(0, System.UInt16)));
            Bridge.Test.NUnit.Assert.false(System.UInt16.equals((1), Bridge.box(0, System.UInt16)));
            Bridge.Test.NUnit.Assert.false(System.UInt16.equals((0), Bridge.box(1, System.UInt16)));
            Bridge.Test.NUnit.Assert.true(System.UInt16.equals((1), Bridge.box(1, System.UInt16)));
        },
        iEquatableEqualsWorks: function () {
            Bridge.Test.NUnit.Assert.true((0) === 0);
            Bridge.Test.NUnit.Assert.false((1) === 0);
            Bridge.Test.NUnit.Assert.false((0) === 1);
            Bridge.Test.NUnit.Assert.true((1) === 1);

            Bridge.Test.NUnit.Assert.true(Bridge.equalsT(0, 0, System.UInt16));
            Bridge.Test.NUnit.Assert.false(Bridge.equalsT(1, 0, System.UInt16));
            Bridge.Test.NUnit.Assert.false(Bridge.equalsT(0, 1, System.UInt16));
            Bridge.Test.NUnit.Assert.true(Bridge.equalsT(1, 1, System.UInt16));
        },
        compareToWorks: function () {
            Bridge.Test.NUnit.Assert.true(Bridge.compare((0), 0) === 0);
            Bridge.Test.NUnit.Assert.true(Bridge.compare((1), 0) > 0);
            Bridge.Test.NUnit.Assert.true(Bridge.compare((0), 1) < 0);
        },
        iComparableCompareToWorks: function () {
            Bridge.Test.NUnit.Assert.true(Bridge.compare(0, 0, false, System.UInt16) === 0);
            Bridge.Test.NUnit.Assert.true(Bridge.compare(1, 0, false, System.UInt16) > 0);
            Bridge.Test.NUnit.Assert.true(Bridge.compare(0, 1, false, System.UInt16) < 0);
        }
    });

    Bridge.ns("Bridge.ClientTest.Batch4.SimpleTypes.UInt16Tests", $asm.$);

    Bridge.apply($asm.$.Bridge.ClientTest.Batch4.SimpleTypes.UInt16Tests, {
        f1: function () {
            System.UInt16.parse("");
        },
        f2: function () {
            System.UInt16.parse(null);
        },
        f3: function () {
            System.UInt16.parse("notanumber");
        },
        f4: function () {
            System.UInt16.parse("65536");
        },
        f5: function () {
            System.UInt16.parse("-1");
        },
        f6: function () {
            System.UInt16.parse("2.5");
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.SimpleTypes.UInt32Tests", {
        typePropertiesAreCorrect_SPI_1717: function () {
            Bridge.Test.NUnit.Assert.false(Bridge.is(Bridge.box(0, System.Int32), System.UInt32));
            Bridge.Test.NUnit.Assert.false(Bridge.is(Bridge.box(0.5, System.Double, $box_.System.Double.toString), System.UInt32));
            Bridge.Test.NUnit.Assert.false(Bridge.is(Bridge.box(-1, System.Int32), System.UInt32));
            Bridge.Test.NUnit.Assert.false(Bridge.is(System.Int64([0,1]), System.UInt32));
            Bridge.Test.NUnit.Assert.areEqual("System.UInt32", Bridge.Reflection.getTypeFullName(System.UInt32));
            Bridge.Test.NUnit.Assert.false(Bridge.Reflection.isClass(System.UInt32));
            Bridge.Test.NUnit.Assert.true(Bridge.Reflection.isAssignableFrom(System.IComparable$1(System.UInt32), System.UInt32));
            Bridge.Test.NUnit.Assert.true(Bridge.Reflection.isAssignableFrom(System.IEquatable$1(System.UInt32), System.UInt32));
            Bridge.Test.NUnit.Assert.true(Bridge.Reflection.isAssignableFrom(System.IFormattable, System.UInt32));
            var i = Bridge.box(0, System.UInt32);
            Bridge.Test.NUnit.Assert.true(Bridge.is(i, System.UInt32));
            Bridge.Test.NUnit.Assert.true(Bridge.is(i, System.IComparable$1(System.UInt32)));
            Bridge.Test.NUnit.Assert.true(Bridge.is(i, System.IEquatable$1(System.UInt32)));
            Bridge.Test.NUnit.Assert.true(Bridge.is(i, System.IFormattable));

            var interfaces = Bridge.Reflection.getInterfaces(System.UInt32);
            Bridge.Test.NUnit.Assert.areEqual(4, interfaces.length);
            Bridge.Test.NUnit.Assert.true(System.Array.contains(interfaces, System.IComparable$1(System.UInt32), Function));
            Bridge.Test.NUnit.Assert.true(System.Array.contains(interfaces, System.IEquatable$1(System.UInt32), Function));
            Bridge.Test.NUnit.Assert.true(System.Array.contains(interfaces, System.IFormattable, Function));
        },
        castsWork: function () {
            var i1 = System.Int64(-1), i2 = System.Int64(0), i3 = System.Int64(234), i4 = System.Int64(4294967295), i5 = System.Int64([0,1]);
            var ni1 = System.Int64.lift(-1), ni2 = System.Int64(0), ni3 = System.Int64(234), ni4 = System.Int64(4294967295), ni5 = System.Int64([0,1]), ni6 = System.Int64.lift(null);

            Bridge.Test.NUnit.Assert.areStrictEqual$1(4294967295, System.Int64.clipu32(i1), "-1 unchecked");
            Bridge.Test.NUnit.Assert.areStrictEqual$1(0, System.Int64.clipu32(i2), "0 unchecked");
            Bridge.Test.NUnit.Assert.areStrictEqual$1(234, System.Int64.clipu32(i3), "234 unchecked");
            Bridge.Test.NUnit.Assert.areStrictEqual$1(4294967295, System.Int64.clipu32(i4), "4294967295 unchecked");
            Bridge.Test.NUnit.Assert.areStrictEqual$1(0, System.Int64.clipu32(i5), "4294967296 unchecked");

            Bridge.Test.NUnit.Assert.areStrictEqual$1(4294967295, System.Int64.clipu32(ni1), "nullable -1 unchecked");
            Bridge.Test.NUnit.Assert.areStrictEqual$1(0, System.Int64.clipu32(ni2), "nullable 0 unchecked");
            Bridge.Test.NUnit.Assert.areStrictEqual$1(234, System.Int64.clipu32(ni3), "nullable 234 unchecked");
            Bridge.Test.NUnit.Assert.areStrictEqual$1(4294967295, System.Int64.clipu32(ni4), "nullable 4294967295 unchecked");
            Bridge.Test.NUnit.Assert.areStrictEqual$1(0, System.Int64.clipu32(ni5), "nullable 4294967296 unchecked");
            Bridge.Test.NUnit.Assert.areStrictEqual$1(null, System.Int64.clipu32(ni6), "null unchecked");

            Bridge.Test.NUnit.Assert.throws$7(System.OverflowException, function () {
                var x = System.Int64.check(i1, System.UInt32);
            }, "-1 checked");
            Bridge.Test.NUnit.Assert.areStrictEqual$1(0, System.Int64.check(i2, System.UInt32), "0 checked");
            Bridge.Test.NUnit.Assert.areStrictEqual$1(234, System.Int64.check(i3, System.UInt32), "234 checked");
            Bridge.Test.NUnit.Assert.areStrictEqual$1(4294967295, System.Int64.check(i4, System.UInt32), "4294967295 checked");
            Bridge.Test.NUnit.Assert.throws$7(System.OverflowException, function () {
                var x = System.Int64.check(i5, System.UInt32);
            }, "4294967296 checked");

            Bridge.Test.NUnit.Assert.throws$7(System.OverflowException, function () {
                var x = System.Int64.check(ni1, System.UInt32);
            }, "nullable -1 checked");
            Bridge.Test.NUnit.Assert.areStrictEqual$1(0, System.Int64.check(ni2, System.UInt32), "nullable 0 checked");
            Bridge.Test.NUnit.Assert.areStrictEqual$1(234, System.Int64.check(ni3, System.UInt32), "nullable 234 checked");
            Bridge.Test.NUnit.Assert.areStrictEqual$1(4294967295, System.Int64.check(ni4, System.UInt32), "nullable 4294967295 checked");
            Bridge.Test.NUnit.Assert.throws$7(System.OverflowException, function () {
                var x = System.Int64.check(ni5, System.UInt32);
            }, "nullable 4294967296 checked");
            Bridge.Test.NUnit.Assert.areStrictEqual$1(null, System.Int64.check(ni6, System.UInt32), "null checked");
        },
        getDefaultValue: function (T) {
            return Bridge.getDefaultValue(T);
        },
        defaultValueIs0: function () {
            Bridge.Test.NUnit.Assert.areStrictEqual(0, this.getDefaultValue(System.UInt32));
        },
        defaultConstructorReturnsZero: function () {
            Bridge.Test.NUnit.Assert.areStrictEqual(0, Number());
        },
        creatingInstanceReturnsZero: function () {
            Bridge.Test.NUnit.Assert.areStrictEqual(0, Bridge.createInstance(System.UInt32));
        },
        constantsWork: function () {
            Bridge.Test.NUnit.Assert.areEqual(0, 0);
            Bridge.Test.NUnit.Assert.areEqual(4294967295, 4294967295);
        },
        formatWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual("123", System.UInt32.format((291), "x"));
        },
        toStringWithFormatWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual("123", System.UInt32.format((291), "x"));
        },
        toStringWithFormatAndProviderWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual("123", System.UInt32.format((291), "x", System.Globalization.CultureInfo.invariantCulture));
        },
        iFormattableToStringWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual("123", Bridge.format(291, "x", System.Globalization.CultureInfo.invariantCulture));
        },
        tryParseWorks_SPI_1592: function () {
            var numberResult = { };
            var result = System.UInt32.tryParse("23445", numberResult);
            Bridge.Test.NUnit.Assert.true(result);
            Bridge.Test.NUnit.Assert.areEqual(23445, numberResult.v);

            result = System.UInt32.tryParse("", numberResult);
            Bridge.Test.NUnit.Assert.false(result);
            Bridge.Test.NUnit.Assert.areEqual(0, numberResult.v);

            result = System.UInt32.tryParse(null, numberResult);
            Bridge.Test.NUnit.Assert.false(result);
            Bridge.Test.NUnit.Assert.areEqual(0, numberResult.v);

            result = System.UInt32.tryParse("notanumber", numberResult);
            Bridge.Test.NUnit.Assert.false(result);
            Bridge.Test.NUnit.Assert.areEqual(0, numberResult.v);

            result = System.UInt32.tryParse("-1", numberResult);
            Bridge.Test.NUnit.Assert.false(result);
            // #1592
            Bridge.Test.NUnit.Assert.areEqual(0, numberResult.v);

            result = System.UInt32.tryParse("2.5", numberResult);
            Bridge.Test.NUnit.Assert.false(result);
            Bridge.Test.NUnit.Assert.areEqual(0, numberResult.v);
        },
        parseWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual(23445, System.UInt32.parse("23445"));
            Bridge.Test.NUnit.Assert.throws$6(System.FormatException, $asm.$.Bridge.ClientTest.Batch4.SimpleTypes.UInt32Tests.f1);
            Bridge.Test.NUnit.Assert.throws$6(System.ArgumentNullException, $asm.$.Bridge.ClientTest.Batch4.SimpleTypes.UInt32Tests.f2);
            Bridge.Test.NUnit.Assert.throws$6(System.FormatException, $asm.$.Bridge.ClientTest.Batch4.SimpleTypes.UInt32Tests.f3);
            Bridge.Test.NUnit.Assert.throws$6(System.OverflowException, $asm.$.Bridge.ClientTest.Batch4.SimpleTypes.UInt32Tests.f4);
            Bridge.Test.NUnit.Assert.throws$6(System.OverflowException, $asm.$.Bridge.ClientTest.Batch4.SimpleTypes.UInt32Tests.f5);
            Bridge.Test.NUnit.Assert.throws$6(System.FormatException, $asm.$.Bridge.ClientTest.Batch4.SimpleTypes.UInt32Tests.f6);
        },
        toStringWithoutRadixWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual("123", (123).toString());
        },
        toStringWithRadixWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual("123", (123).toString(10));
            Bridge.Test.NUnit.Assert.areEqual("123", (291).toString(16));
        },
        getHashCodeWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual(Bridge.getHashCode((0)), Bridge.getHashCode((0)));
            Bridge.Test.NUnit.Assert.areEqual(Bridge.getHashCode((1)), Bridge.getHashCode((1)));
            Bridge.Test.NUnit.Assert.areNotEqual(Bridge.getHashCode((1)), Bridge.getHashCode((0)));
        },
        equalsWorks: function () {
            Bridge.Test.NUnit.Assert.true(System.UInt32.equals((0), Bridge.box(0, System.UInt32)));
            Bridge.Test.NUnit.Assert.false(System.UInt32.equals((1), Bridge.box(0, System.UInt32)));
            Bridge.Test.NUnit.Assert.false(System.UInt32.equals((0), Bridge.box(1, System.UInt32)));
            Bridge.Test.NUnit.Assert.true(System.UInt32.equals((1), Bridge.box(1, System.UInt32)));
        },
        iEquatableEqualsWorks: function () {
            Bridge.Test.NUnit.Assert.true((0) === 0);
            Bridge.Test.NUnit.Assert.false((1) === 0);
            Bridge.Test.NUnit.Assert.false((0) === 1);
            Bridge.Test.NUnit.Assert.true((1) === 1);

            Bridge.Test.NUnit.Assert.true(Bridge.equalsT(0, 0, System.UInt32));
            Bridge.Test.NUnit.Assert.false(Bridge.equalsT(1, 0, System.UInt32));
            Bridge.Test.NUnit.Assert.false(Bridge.equalsT(0, 1, System.UInt32));
            Bridge.Test.NUnit.Assert.true(Bridge.equalsT(1, 1, System.UInt32));
        },
        compareToWorks: function () {
            Bridge.Test.NUnit.Assert.true(Bridge.compare((0), 0) === 0);
            Bridge.Test.NUnit.Assert.true(Bridge.compare((1), 0) > 0);
            Bridge.Test.NUnit.Assert.true(Bridge.compare((0), 1) < 0);
        },
        iComparableCompareToWorks: function () {
            Bridge.Test.NUnit.Assert.true(Bridge.compare(0, 0, false, System.UInt32) === 0);
            Bridge.Test.NUnit.Assert.true(Bridge.compare(1, 0, false, System.UInt32) > 0);
            Bridge.Test.NUnit.Assert.true(Bridge.compare(0, 1, false, System.UInt32) < 0);
        }
    });

    Bridge.ns("Bridge.ClientTest.Batch4.SimpleTypes.UInt32Tests", $asm.$);

    Bridge.apply($asm.$.Bridge.ClientTest.Batch4.SimpleTypes.UInt32Tests, {
        f1: function () {
            System.UInt32.parse("");
        },
        f2: function () {
            System.UInt32.parse(null);
        },
        f3: function () {
            System.UInt32.parse("notanumber");
        },
        f4: function () {
            System.UInt32.parse("4294967296");
        },
        f5: function () {
            System.UInt32.parse("-1");
        },
        f6: function () {
            System.UInt32.parse("2.5");
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.SimpleTypes.UInt64Tests", {
        typePropertiesAreCorrect_SPI_1717: function () {
            Bridge.Test.NUnit.Assert.true(Bridge.is(System.UInt64(0), System.UInt64));
            Bridge.Test.NUnit.Assert.false(Bridge.is(Bridge.box(0.5, System.Double, $box_.System.Double.toString), System.UInt64));
            Bridge.Test.NUnit.Assert.areEqual("System.UInt64", Bridge.Reflection.getTypeFullName(System.UInt64));
            Bridge.Test.NUnit.Assert.false(Bridge.Reflection.isClass(System.UInt64));
            Bridge.Test.NUnit.Assert.true(Bridge.Reflection.isAssignableFrom(System.IComparable$1(System.UInt64), System.UInt64));
            Bridge.Test.NUnit.Assert.true(Bridge.Reflection.isAssignableFrom(System.IEquatable$1(System.UInt64), System.UInt64));
            Bridge.Test.NUnit.Assert.true(Bridge.Reflection.isAssignableFrom(System.IFormattable, System.UInt64));
            var l = System.UInt64(0);
            Bridge.Test.NUnit.Assert.true(Bridge.is(l, System.UInt64));
            Bridge.Test.NUnit.Assert.true(Bridge.is(l, System.IComparable$1(System.UInt64)));
            Bridge.Test.NUnit.Assert.true(Bridge.is(l, System.IEquatable$1(System.UInt64)));
            Bridge.Test.NUnit.Assert.true(Bridge.is(l, System.IFormattable));

            var interfaces = Bridge.Reflection.getInterfaces(System.UInt64);
            Bridge.Test.NUnit.Assert.areEqual(4, interfaces.length);
            Bridge.Test.NUnit.Assert.true(System.Array.contains(interfaces, System.IComparable$1(System.UInt64), Function));
            Bridge.Test.NUnit.Assert.true(System.Array.contains(interfaces, System.IEquatable$1(System.UInt64), Function));
            Bridge.Test.NUnit.Assert.true(System.Array.contains(interfaces, System.IFormattable, Function));
        },
        castsWork: function () {
            var i1 = System.Int64(-1), i2 = System.Int64(0), i3 = System.Int64(234), i4 = System.Int64([-808,2147483647]);
            var ni1 = System.Int64.lift(-1), ni2 = System.Int64(0), ni3 = System.Int64(234), ni4 = System.Int64([-808,2147483647]), ni6 = System.Int64.lift(null);

            Bridge.Test.NUnit.Assert.true$1(System.Int64.toNumber(System.Int64.clipu64(i1)) > 1E+18, "-1 unchecked");
            Bridge.Test.NUnit.Assert.areEqual$1(System.UInt64(0), System.Int64.clipu64(i2), "0 unchecked");
            Bridge.Test.NUnit.Assert.areEqual$1(System.UInt64(234), System.Int64.clipu64(i3), "234 unchecked");
            Bridge.Test.NUnit.Assert.areEqual$1(System.UInt64([-808,2147483647]), System.Int64.clipu64(i4), "9223372036854775000 unchecked");

            Bridge.Test.NUnit.Assert.true$1(System.Nullable.gt(System.Int64.clipu64(ni1), 1E+18), "nullable -1 unchecked");
            Bridge.Test.NUnit.Assert.areEqual$1(System.UInt64(0), System.Int64.clipu64(ni2), "nullable 0 unchecked");
            Bridge.Test.NUnit.Assert.areEqual$1(System.UInt64(234), System.Int64.clipu64(ni3), "nullable 234 unchecked");
            Bridge.Test.NUnit.Assert.areEqual$1(System.UInt64([-808,2147483647]), System.Int64.clipu64(ni4), "nullable 9223372036854775000 unchecked");
            Bridge.Test.NUnit.Assert.areEqual$1(null, System.Int64.clipu64(ni6), "null unchecked");

            Bridge.Test.NUnit.Assert.throws$7(System.OverflowException, function () {
                var x = System.Int64.check(i1, System.UInt64);
            }, "-1 checked");
            Bridge.Test.NUnit.Assert.areEqual$1(System.UInt64(0), System.Int64.check(i2, System.UInt64), "0 checked");
            Bridge.Test.NUnit.Assert.areEqual$1(System.UInt64(234), System.Int64.check(i3, System.UInt64), "234 checked");
            Bridge.Test.NUnit.Assert.areEqual$1(System.UInt64([-808,2147483647]), System.Int64.check(i4, System.UInt64), "9223372036854775000 checked");

            Bridge.Test.NUnit.Assert.throws$7(System.OverflowException, function () {
                var x = System.Int64.check(ni1, System.UInt64);
            }, "nullable -1 checked");
            Bridge.Test.NUnit.Assert.areEqual$1(System.UInt64(0), System.Int64.check(ni2, System.UInt64), "nullable 0 checked");
            Bridge.Test.NUnit.Assert.areEqual$1(System.UInt64(234), System.Int64.check(ni3, System.UInt64), "nullable 234 checked");
            Bridge.Test.NUnit.Assert.areEqual$1(System.UInt64([-808,2147483647]), System.Int64.check(ni4, System.UInt64), "nullable 9223372036854775000 checked");
            Bridge.Test.NUnit.Assert.areEqual$1(null, System.Int64.check(ni6, System.UInt64), "null checked");
        },
        getDefaultValue: function (T) {
            return Bridge.getDefaultValue(T);
        },
        defaultValueIs0: function () {
            Bridge.Test.NUnit.Assert.areEqual(System.UInt64(0), this.getDefaultValue(System.UInt64));
        },
        defaultConstructorReturnsZero: function () {
            Bridge.Test.NUnit.Assert.areEqual(System.UInt64(0), new System.UInt64());
        },
        creatingInstanceReturnsZero: function () {
            Bridge.Test.NUnit.Assert.areEqual(System.UInt64(0), Bridge.createInstance(System.UInt64));
        },
        constantsWork: function () {
            Bridge.Test.NUnit.Assert.areEqual(System.UInt64(0), System.UInt64.MinValue);
        },
        formatWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual("123", (System.UInt64(291)).format("x"));
        },
        toStringWithFormatWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual("123", (System.UInt64(291)).toString("x"));
        },
        toStringWithFormatAndProviderWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual("123", (System.UInt64(291)).format("x", System.Globalization.CultureInfo.invariantCulture));
        },
        iFormattableToStringWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual("123", Bridge.format(System.UInt64(291), "x", System.Globalization.CultureInfo.invariantCulture));
        },
        castingOfLargeValuesToUInt64Works_SPI_1591: function () {
            var d1 = 5000000000.5, d2 = -d1;
            Bridge.Test.NUnit.Assert.areEqual$1(System.UInt64([705032704,1]), Bridge.Int.clipu64(d1), "Positive");
            // #1591
            Bridge.Test.NUnit.Assert.true$1(Bridge.Int.clipu64(d2).gt(System.UInt64(2147483647)), "Negative");
        },
        divisionOfLargeUInt64Works: function () {
            var v1 = System.UInt64(System.Int64([-1539607552,11])), v2 = System.UInt64(3);
            Bridge.Test.NUnit.Assert.areEqual(System.UInt64([-513202518,3]), v1.div(v2));
        },
        tryParseWorks: function () {
            var numberResult = { };
            var result = System.UInt64.tryParse("23445", numberResult);
            Bridge.Test.NUnit.Assert.true(result);
            Bridge.Test.NUnit.Assert.areEqual(System.UInt64(23445), numberResult.v);

            result = System.UInt64.tryParse("", numberResult);
            Bridge.Test.NUnit.Assert.false(result);
            Bridge.Test.NUnit.Assert.areEqual(System.UInt64(0), numberResult.v);

            result = System.UInt64.tryParse(null, numberResult);
            Bridge.Test.NUnit.Assert.false(result);
            Bridge.Test.NUnit.Assert.areEqual(System.UInt64(0), numberResult.v);

            result = System.UInt64.tryParse("notanumber", numberResult);
            Bridge.Test.NUnit.Assert.false(result);
            Bridge.Test.NUnit.Assert.areEqual(System.UInt64(0), numberResult.v);

            result = System.UInt64.tryParse("-1", numberResult);
            Bridge.Test.NUnit.Assert.false(result);
            Bridge.Test.NUnit.Assert.areEqual(System.UInt64(0), numberResult.v);

            result = System.UInt64.tryParse("2.5", numberResult);
            Bridge.Test.NUnit.Assert.false(result);
            Bridge.Test.NUnit.Assert.areEqual(System.UInt64(0), numberResult.v);

            result = System.UInt64.tryParse("100000000000000000000", numberResult);
            Bridge.Test.NUnit.Assert.false(result);
            Bridge.Test.NUnit.Assert.areEqual(System.UInt64(0), numberResult.v);
        },
        parseWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual(System.UInt64(23445), System.UInt64.parse("23445"));
            Bridge.Test.NUnit.Assert.throws$6(System.FormatException, $asm.$.Bridge.ClientTest.Batch4.SimpleTypes.UInt64Tests.f1);
            Bridge.Test.NUnit.Assert.throws$6(System.ArgumentNullException, $asm.$.Bridge.ClientTest.Batch4.SimpleTypes.UInt64Tests.f2);
            Bridge.Test.NUnit.Assert.throws$6(System.FormatException, $asm.$.Bridge.ClientTest.Batch4.SimpleTypes.UInt64Tests.f3);
            Bridge.Test.NUnit.Assert.throws$6(System.OverflowException, $asm.$.Bridge.ClientTest.Batch4.SimpleTypes.UInt64Tests.f4);
            Bridge.Test.NUnit.Assert.throws$6(System.FormatException, $asm.$.Bridge.ClientTest.Batch4.SimpleTypes.UInt64Tests.f5);
            Bridge.Test.NUnit.Assert.throws$6(System.OverflowException, $asm.$.Bridge.ClientTest.Batch4.SimpleTypes.UInt64Tests.f6);
        },
        toStringWithoutRadixWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual("123", (System.UInt64(123)).toString());
        },
        toStringWithRadixWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual("123", (System.UInt64(123)).toString(10));
            Bridge.Test.NUnit.Assert.areEqual("123", (System.UInt64(291)).toString(16));
        },
        getHashCodeWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual(Bridge.getHashCode((System.UInt64(0))), Bridge.getHashCode((System.UInt64(0))));
            Bridge.Test.NUnit.Assert.areEqual(Bridge.getHashCode((System.UInt64(1))), Bridge.getHashCode((System.UInt64(1))));
            Bridge.Test.NUnit.Assert.areNotEqual(Bridge.getHashCode((System.UInt64(1))), Bridge.getHashCode((System.UInt64(0))));
        },
        equalsWorks: function () {
            Bridge.Test.NUnit.Assert.true(Bridge.equals((System.UInt64(0)), System.UInt64(0)));
            Bridge.Test.NUnit.Assert.false(Bridge.equals((System.UInt64(1)), System.UInt64(0)));
            Bridge.Test.NUnit.Assert.false(Bridge.equals((System.UInt64(0)), System.UInt64(1)));
            Bridge.Test.NUnit.Assert.true(Bridge.equals((System.UInt64(1)), System.UInt64(1)));
        },
        iEquatableEqualsWorks: function () {
            Bridge.Test.NUnit.Assert.true((System.UInt64(0)).equalsT(System.UInt64(0)));
            Bridge.Test.NUnit.Assert.false((System.UInt64(1)).equalsT(System.UInt64(0)));
            Bridge.Test.NUnit.Assert.false((System.UInt64(0)).equalsT(System.UInt64(1)));
            Bridge.Test.NUnit.Assert.true((System.UInt64(1)).equalsT(System.UInt64(1)));

            Bridge.Test.NUnit.Assert.true(Bridge.equalsT(System.UInt64(0), System.UInt64(0), System.UInt64));
            Bridge.Test.NUnit.Assert.false(Bridge.equalsT(System.UInt64(1), System.UInt64(0), System.UInt64));
            Bridge.Test.NUnit.Assert.false(Bridge.equalsT(System.UInt64(0), System.UInt64(1), System.UInt64));
            Bridge.Test.NUnit.Assert.true(Bridge.equalsT(System.UInt64(1), System.UInt64(1), System.UInt64));
        },
        compareToWorks: function () {
            Bridge.Test.NUnit.Assert.true((System.UInt64(0)).compareTo(System.UInt64(0)) === 0);
            Bridge.Test.NUnit.Assert.true((System.UInt64(1)).compareTo(System.UInt64(0)) > 0);
            Bridge.Test.NUnit.Assert.true((System.UInt64(0)).compareTo(System.UInt64(1)) < 0);
        },
        iComparableCompareToWorks: function () {
            Bridge.Test.NUnit.Assert.true(Bridge.compare(System.UInt64(0), System.UInt64(0), false, System.UInt64) === 0);
            Bridge.Test.NUnit.Assert.true(Bridge.compare(System.UInt64(1), System.UInt64(0), false, System.UInt64) > 0);
            Bridge.Test.NUnit.Assert.true(Bridge.compare(System.UInt64(0), System.UInt64(1), false, System.UInt64) < 0);
        }
    });

    Bridge.ns("Bridge.ClientTest.Batch4.SimpleTypes.UInt64Tests", $asm.$);

    Bridge.apply($asm.$.Bridge.ClientTest.Batch4.SimpleTypes.UInt64Tests, {
        f1: function () {
            System.UInt64.parse("");
        },
        f2: function () {
            System.UInt64.parse(null);
        },
        f3: function () {
            System.UInt64.parse("notanumber");
        },
        f4: function () {
            System.UInt64.parse("-1");
        },
        f5: function () {
            System.UInt64.parse("2.5");
        },
        f6: function () {
            System.UInt64.parse("100000000000000000000");
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.StopwatchTests", {
        typePropertiesAreCorrect: function () {
            Bridge.Test.NUnit.Assert.areEqual$1("System.Diagnostics.Stopwatch", Bridge.Reflection.getTypeFullName(System.Diagnostics.Stopwatch), "Class name");
            Bridge.Test.NUnit.Assert.true$1(Bridge.Reflection.isClass(System.Diagnostics.Stopwatch), "IsClass");
            var watch = new System.Diagnostics.Stopwatch();
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(watch, System.Diagnostics.Stopwatch), "is StopWatch");

            Bridge.Test.NUnit.Assert.areEqual$1(Bridge.Reflection.getInterfaces(System.Diagnostics.Stopwatch).length, 0, "Interfaces should be empty");
        },
        defaultConstructorWorks: function () {
            var watch = new System.Diagnostics.Stopwatch();
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(watch, System.Diagnostics.Stopwatch), "is Stopwatch");
            Bridge.Test.NUnit.Assert.false$1(watch.isRunning, "IsRunning");
        },
        constantsWorks: function () {
            Bridge.Test.NUnit.Assert.true$1(System.Diagnostics.Stopwatch.frequency.gt(System.Int64(1000)), "Frequency");
            Bridge.Test.NUnit.Assert.areEqual$1("System.Boolean", Bridge.Reflection.getTypeFullName(System.Boolean), "IsHighResolution");
        },
        startNewWorks: function () {
            var watch = System.Diagnostics.Stopwatch.startNew();
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(watch, System.Diagnostics.Stopwatch), "is Stopwatch");
            Bridge.Test.NUnit.Assert.true$1(watch.isRunning, "IsRunning");
        },
        startAndStopWork: function () {
            var watch = new System.Diagnostics.Stopwatch();
            Bridge.Test.NUnit.Assert.false(watch.isRunning);
            watch.start();
            Bridge.Test.NUnit.Assert.true(watch.isRunning);
            watch.stop();
            Bridge.Test.NUnit.Assert.false(watch.isRunning);
        },
        elapsedWorks: function () {
            var watch = new System.Diagnostics.Stopwatch();
            Bridge.Test.NUnit.Assert.areEqual(System.Int64(0), watch.ticks());
            Bridge.Test.NUnit.Assert.areEqual(System.Int64(0), watch.milliseconds());
            Bridge.Test.NUnit.Assert.areEqual(new System.TimeSpan(), watch.timeSpan());
            watch.start();
            var before = new Date();
            var hasIncreased = false;
            while ((System.DateTime.subdd(new Date(), before)).getMilliseconds() < 200) {
                if (watch.ticks().gt(System.Int64(0))) {
                    hasIncreased = true;
                }
            }
            watch.stop();
            Bridge.Test.NUnit.Assert.true$1(hasIncreased, "Times should increase inside the loop");
            Bridge.Test.NUnit.Assert.true$1(watch.milliseconds().gt(System.Int64(150)), "ElapsedMilliseconds");
            Bridge.Test.NUnit.Assert.true$1(System.TimeSpan.eq(watch.timeSpan(), new System.TimeSpan(0, 0, 0, 0, System.Int64.clip32(watch.milliseconds()))), "Elapsed");
            var value = watch.ticks() / System.Int64.toNumber(System.Diagnostics.Stopwatch.frequency);
            Bridge.Test.NUnit.Assert.true$1(value > 0.15 && value < 0.25, "Ticks");
        },
        getTimestampWorks: function () {
            var t1 = System.Diagnostics.Stopwatch.getTimestamp();
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(t1, System.Int64), "is long");

            var before = new Date();
            while ((System.DateTime.subdd(new Date(), before)).getMilliseconds() < 50) {
            }
            var t2 = System.Diagnostics.Stopwatch.getTimestamp();
            Bridge.Test.NUnit.Assert.true$1(t2.gt(t1), "Should increase");
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.TestHelper", {
        statics: {
            safe: function (a) {
                try {
                    a();
                }
                catch ($e1) {
                    $e1 = System.Exception.create($e1);
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.Text.RegularExpressions.RegexTests", {
        typePropertiesAreCorrect: function () {
            var re = new RegExp("");
            Bridge.Test.NUnit.Assert.areEqual("RegExp", Bridge.Reflection.getTypeFullName(RegExp));
            //Assert.AreEqual(typeof(Regex).IsClass, true);
            Bridge.Test.NUnit.Assert.true(Bridge.hasValue(re));
        },
        stringOnlyConstructorWorks: function () {
            var re = new RegExp("test123");
            Bridge.Test.NUnit.Assert.areEqual("test123", re.source);
            Bridge.Test.NUnit.Assert.false(re.global);
        },
        constructorWithFlagsWorks: function () {
            var re = new RegExp("test123", "g");
            Bridge.Test.NUnit.Assert.areEqual("test123", re.source);
            Bridge.Test.NUnit.Assert.true(re.global);
        },
        globalFlagWorks: function () {
            Bridge.Test.NUnit.Assert.false(new RegExp("x", "").global);
            Bridge.Test.NUnit.Assert.true(new RegExp("x", "g").global);
        },
        ignoreCaseFlagWorks: function () {
            Bridge.Test.NUnit.Assert.false(new RegExp("x", "").ignoreCase);
            Bridge.Test.NUnit.Assert.true(new RegExp("x", "i").ignoreCase);
        },
        multilineFlagWorks: function () {
            Bridge.Test.NUnit.Assert.false(new RegExp("x", "").multiline);
            Bridge.Test.NUnit.Assert.true(new RegExp("x", "m").multiline);
        },
        patternPropertyWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual("test123", new RegExp("test123", "").source);
        },
        sourcePropertyWorks: function () {
            Bridge.Test.NUnit.Assert.areEqual("test123", new RegExp("test123", "").source);
        },
        execWorks: function () {
            var re = new RegExp("a|b", "g");
            var m = re.exec("xaybz");
            //Assert.AreEqual(m.Index, 1);
            Bridge.Test.NUnit.Assert.areEqual(1, m.length);
            Bridge.Test.NUnit.Assert.areEqual("a", m[System.Array.index(0, m)]);
        },
        lastIndexWorks: function () {
            var re = new RegExp("a|b", "g");
            re.exec("xaybz");
            Bridge.Test.NUnit.Assert.areEqual(2, re.lastIndex);
        },
        testWorks: function () {
            Bridge.Test.NUnit.Assert.true(new RegExp("a|b").test("xaybz"));
            Bridge.Test.NUnit.Assert.false(new RegExp("c").test("xaybz"));
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.Text.StringBuilderTests", {
        typePropertiesAreCorrect: function () {
            var sb = new System.Text.StringBuilder();
            Bridge.Test.NUnit.Assert.areEqual("System.Text.StringBuilder", Bridge.Reflection.getTypeFullName(System.Text.StringBuilder));
            Bridge.Test.NUnit.Assert.true(Bridge.Reflection.isClass(System.Text.StringBuilder));
            Bridge.Test.NUnit.Assert.true(Bridge.hasValue(sb));
        },
        defaultConstructorWorks: function () {
            var sb = new System.Text.StringBuilder();
            Bridge.Test.NUnit.Assert.areEqual$1("", sb.toString(), "Text");
            Bridge.Test.NUnit.Assert.areEqual$1(0, sb.getLength(), "Length");
        },
        constructorWithCapacityWorks: function () {
            var sb = new System.Text.StringBuilder("", 55);
            Bridge.Test.NUnit.Assert.areEqual$1("", sb.toString(), "Text");
            Bridge.Test.NUnit.Assert.areEqual$1(0, sb.getLength(), "Length");
        },
        initialTextConstructorWorks: function () {
            var sb = new System.Text.StringBuilder("some text");
            Bridge.Test.NUnit.Assert.areEqual$1("some text", sb.toString(), "Text");
            Bridge.Test.NUnit.Assert.areEqual$1(9, sb.getLength(), "Length");
        },
        initialTextConstructorWithCapacityWorks: function () {
            var sb = new System.Text.StringBuilder("some text", 55);
            Bridge.Test.NUnit.Assert.areEqual$1("some text", sb.toString(), "Text");
            Bridge.Test.NUnit.Assert.areEqual$1(9, sb.getLength(), "Length");
        },
        appendBoolWorks: function () {
            var sb = new System.Text.StringBuilder("|");
            Bridge.Test.NUnit.Assert.true(Bridge.referenceEquals(sb.append(true), sb));
            Bridge.Test.NUnit.Assert.areEqual$1("|true", sb.toString(), "Text");
            Bridge.Test.NUnit.Assert.areEqual$1(5, sb.getLength(), "Length");
        },
        appendCharWorks: function () {
            var sb = new System.Text.StringBuilder("|");
            Bridge.Test.NUnit.Assert.true(Bridge.referenceEquals(sb.append(String.fromCharCode(99)), sb));
            Bridge.Test.NUnit.Assert.areEqual$1("|c", sb.toString(), "Text");
            Bridge.Test.NUnit.Assert.areEqual$1(2, sb.getLength(), "Length");
        },
        appendIntWorks: function () {
            var sb = new System.Text.StringBuilder("|");
            Bridge.Test.NUnit.Assert.true(Bridge.referenceEquals(sb.append(123), sb));
            Bridge.Test.NUnit.Assert.areEqual$1("|123", sb.toString(), "Text");
            Bridge.Test.NUnit.Assert.areEqual$1(4, sb.getLength(), "Length");
        },
        appendDoubleWorks: function () {
            var sb = new System.Text.StringBuilder("|");
            Bridge.Test.NUnit.Assert.true(Bridge.referenceEquals(sb.append(123.0), sb));
            Bridge.Test.NUnit.Assert.areEqual$1("|123", sb.toString(), "Text");
            Bridge.Test.NUnit.Assert.areEqual$1(4, sb.getLength(), "Length");
        },
        appendObjectWorks: function () {
            var sb = new System.Text.StringBuilder("|");
            Bridge.Test.NUnit.Assert.true(Bridge.referenceEquals(sb.append(new Bridge.ClientTest.Batch4.Text.StringBuilderTests.SomeClass()), sb));
            Bridge.Test.NUnit.Assert.areEqual$1("|some text", sb.toString(), "Text");
            Bridge.Test.NUnit.Assert.areEqual$1(10, sb.getLength(), "Length");
        },
        appendStringWorks: function () {
            var sb = new System.Text.StringBuilder("|");
            Bridge.Test.NUnit.Assert.true(Bridge.referenceEquals(sb.append("some text"), sb));
            Bridge.Test.NUnit.Assert.areEqual$1("|some text", sb.toString(), "Text");
            Bridge.Test.NUnit.Assert.areEqual$1(10, sb.getLength(), "Length");
        },
        appendLineWorks: function () {
            var sb = new System.Text.StringBuilder("|");
            Bridge.Test.NUnit.Assert.true(Bridge.referenceEquals(sb.appendLine(), sb));
            Bridge.Test.NUnit.Assert.areEqual$1("|\r\n", sb.toString(), "Text");
            Bridge.Test.NUnit.Assert.areEqual$1(3, sb.getLength(), "Length");
        },
        appendLineBoolWorks: function () {
            var sb = new System.Text.StringBuilder("|");
            Bridge.Test.NUnit.Assert.true(Bridge.referenceEquals(sb.appendLine(System.Boolean.toString((true))), sb));
            Bridge.Test.NUnit.Assert.areEqual$1("|True\r\n", sb.toString(), "Text");
            Bridge.Test.NUnit.Assert.areEqual$1(7, sb.getLength(), "Length");
        },
        appendLineCharWorks: function () {
            var sb = new System.Text.StringBuilder("|");
            Bridge.Test.NUnit.Assert.true(Bridge.referenceEquals(sb.appendLine(String.fromCharCode((99))), sb));
            Bridge.Test.NUnit.Assert.areEqual$1("|c\r\n", sb.toString(), "Text");
            Bridge.Test.NUnit.Assert.areEqual$1(4, sb.getLength(), "Length");
        },
        appendLineIntWorks: function () {
            var sb = new System.Text.StringBuilder("|");
            Bridge.Test.NUnit.Assert.true(Bridge.referenceEquals(sb.appendLine((123).toString()), sb));
            Bridge.Test.NUnit.Assert.areEqual$1("|123\r\n", sb.toString(), "Text");
            Bridge.Test.NUnit.Assert.areEqual$1(6, sb.getLength(), "Length");
        },
        appendLineDoubleWorks: function () {
            var sb = new System.Text.StringBuilder("|");
            Bridge.Test.NUnit.Assert.true(Bridge.referenceEquals(sb.appendLine(System.Double.format((123.0), 'G')), sb));
            Bridge.Test.NUnit.Assert.areEqual$1("|123\r\n", sb.toString(), "Text");
            Bridge.Test.NUnit.Assert.areEqual$1(6, sb.getLength(), "Length");
        },
        appendLineObjectWorks: function () {
            var sb = new System.Text.StringBuilder("|");
            Bridge.Test.NUnit.Assert.true(Bridge.referenceEquals(sb.appendLine((new Bridge.ClientTest.Batch4.Text.StringBuilderTests.SomeClass()).toString()), sb));
            Bridge.Test.NUnit.Assert.areEqual$1("|some text\r\n", sb.toString(), "Length");
            Bridge.Test.NUnit.Assert.areEqual$1(12, sb.getLength(), "Length");
        },
        appendLineStringWorks: function () {
            var sb = new System.Text.StringBuilder("|");
            Bridge.Test.NUnit.Assert.true(Bridge.referenceEquals(sb.appendLine("some text"), sb));
            Bridge.Test.NUnit.Assert.areEqual$1("|some text\r\n", sb.toString(), "Text");
            Bridge.Test.NUnit.Assert.areEqual$1(12, sb.getLength(), "Length");
        },
        clearWorks: function () {
            var sb = new System.Text.StringBuilder("some text");
            sb.clear();
            Bridge.Test.NUnit.Assert.areEqual$1("", sb.toString(), "Text");
            Bridge.Test.NUnit.Assert.areEqual$1(0, sb.getLength(), "Length");
        },
        toStringWorks: function () {
            // Yes, this is tested by every other test as well. Included for completeness only
            var sb = new System.Text.StringBuilder("some text");
            Bridge.Test.NUnit.Assert.areEqual("some text", sb.toString());
        },
        lengthPropertyWorks: function () {
            // Yes, this is tested by every other test as well. Included for completeness only
            var sb = new System.Text.StringBuilder("some text");
            Bridge.Test.NUnit.Assert.areEqual(9, sb.getLength());
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.Text.StringBuilderTests.SomeClass", {
        toString: function () {
            return "some text";
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.Threading.AsyncTests", {
        asyncVoid: function () {
            var done = Bridge.Test.NUnit.Assert.async();

            var state = 0;
            var tcs = new System.Threading.Tasks.TaskCompletionSource();
            var task = tcs.task;

            var someMethod = Bridge.fn.bind(this, function () {
                var $step = 0,
                    $task1, 
                    $jumpFromFinally, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        for (;;) {
                            $step = System.Array.min([0,1], $step);
                            switch ($step) {
                                case 0: {
                                    state = 1;
                                    $task1 = task;
                                    $step = 1;
                                    $task1.continueWith($asyncBody, true);
                                    return;
                                }
                                case 1: {
                                    $task1.getAwaitedResult();
                                    state = 2;
                                    return;
                                }
                                default: {
                                    return;
                                }
                            }
                        }
                    }, arguments);

                $asyncBody();
            });

            someMethod();

            Bridge.Test.NUnit.Assert.areEqual$1(1, state, "Async method should start running after being invoked");

            task.continueWith(function (x) {
                Bridge.Test.NUnit.Assert.areEqual$1(2, state, "Async method should finish after the task is finished");
                done();
            });

            Bridge.Test.NUnit.Assert.areEqual$1(1, state, "Async method should not continue past point 1 until task is finished");

            tcs.setResult(0);
        },
        asyncTask: function () {
            var done = Bridge.Test.NUnit.Assert.async();

            var state = 0;
            var tcs = new System.Threading.Tasks.TaskCompletionSource();
            var task = tcs.task;

            var someMethod = Bridge.fn.bind(this, function () {
                var $step = 0,
                    $task1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        state = 1;
                                        $task1 = task;
                                        $step = 1;
                                        $task1.continueWith($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $task1.getAwaitedResult();
                                        state = 2;
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            });

            var asyncTask = someMethod();

            Bridge.Test.NUnit.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.running, asyncTask.status, "asyncTask should be running immediately");
            Bridge.Test.NUnit.Assert.areEqual$1(1, state, "Async method should start running after being invoked");

            asyncTask.continueWith(function (x) {
                Bridge.Test.NUnit.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.ranToCompletion, asyncTask.status, "asyncTask should run to completion");
                Bridge.Test.NUnit.Assert.true$1(asyncTask.exception == null, "asyncTask should not throw an exception");
                Bridge.Test.NUnit.Assert.areEqual$1(2, state, "Async method should finish after the task is finished");

                done();
            });

            Bridge.Test.NUnit.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.running, asyncTask.status, "asyncTask should be running before awaited task is finished");
            Bridge.Test.NUnit.Assert.areEqual$1(1, state, "Async method should not continue past point 1 until task is finished");

            tcs.setResult(0);
        },
        asyncTaskBodyThrowsException: function () {
            var done = Bridge.Test.NUnit.Assert.async();

            var state = 0;
            var tcs = new System.Threading.Tasks.TaskCompletionSource();
            var task = tcs.task;
            var ex = new System.Exception("Some text");

            var someMethod = Bridge.fn.bind(this, function () {
                var $step = 0,
                    $task1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        state = 1;
                                        $task1 = task;
                                        $step = 1;
                                        $task1.continueWith($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $task1.getAwaitedResult();
                                        state = 2;
                                        throw ex;
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            });

            var asyncTask = someMethod();

            Bridge.Test.NUnit.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.running, asyncTask.status, "asyncTask should be running immediately");
            Bridge.Test.NUnit.Assert.areEqual$1(1, state, "Async method should start running after being invoked");

            asyncTask.continueWith(function (x) {
                Bridge.Test.NUnit.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.faulted, asyncTask.status, "asyncTask should fault");
                Bridge.Test.NUnit.Assert.true$1(asyncTask.exception != null, "asyncTask should have an exception");
                Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(asyncTask.exception.innerExceptions.get(0), ex), "asyncTask should throw the correct exception");
                Bridge.Test.NUnit.Assert.areEqual$1(2, state, "Async method should finish after the task is finished");

                done();
            });

            Bridge.Test.NUnit.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.running, asyncTask.status, "asyncTask should be running before awaited task is finished");
            Bridge.Test.NUnit.Assert.areEqual$1(1, state, "Async method should not continue past point 1 until task is finished");

            tcs.setResult(0);
        },
        awaitTaskThatFaults: function () {
            var done = Bridge.Test.NUnit.Assert.async();

            var state = 0;
            var tcs = new System.Threading.Tasks.TaskCompletionSource();
            var task = tcs.task;
            var ex = new System.Exception("Some text");

            var someMethod = Bridge.fn.bind(this, function () {
                var $step = 0,
                    $task1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        state = 1;
                                        $task1 = task;
                                        $step = 1;
                                        $task1.continueWith($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $task1.getAwaitedResult();
                                        state = 2;
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            });

            var asyncTask = someMethod();

            Bridge.Test.NUnit.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.running, asyncTask.status, "asyncTask should be running immediately");
            Bridge.Test.NUnit.Assert.areEqual$1(1, state, "Async method should start running after being invoked");

            asyncTask.continueWith(function (x) {
                Bridge.Test.NUnit.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.faulted, asyncTask.status, "asyncTask should fault");
                Bridge.Test.NUnit.Assert.true$1(asyncTask.exception != null, "asyncTask should have an exception");
                Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(asyncTask.exception.innerExceptions.get(0), ex), "asyncTask should throw the correct exception");
                Bridge.Test.NUnit.Assert.areEqual$1(1, state, "Async method should not have reach anything after the faulting await");

                done();
            });

            Bridge.Test.NUnit.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.running, asyncTask.status, "asyncTask should be running before awaited task is finished");
            Bridge.Test.NUnit.Assert.areEqual$1(1, state, "Async method should not continue past point 1 until task is finished");

            tcs.setException(ex);
        },
        aggregateExceptionsAreUnwrappedWhenAwaitingTask: function () {
            var done = Bridge.Test.NUnit.Assert.async();

            var state = 0;
            var tcs = new System.Threading.Tasks.TaskCompletionSource();
            var task = tcs.task;

            var ex = new System.Exception("Some text");
            tcs.setException(ex);

            var someMethod = Bridge.fn.bind(this, function () {
                var $step = 0,
                    $task1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    ex2, 
                    $async_e, 
                    $async_e1, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([1,2,3,4], $step);
                                switch ($step) {

                                    case 1: {
                                        $task1 = task;
                                        $step = 2;
                                        $task1.continueWith($asyncBody);
                                        return;
                                    }
                                    case 2: {
                                        $task1.getAwaitedResult();
                                        Bridge.Test.NUnit.Assert.fail$1("Await should have thrown");
                                        $step = 4;
                                        continue;
                                    }
                                    case 3: {
                                        Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(ex, ex2), "The exception should be correct");
                                        $async_e = null;
                                        $step = 4;
                                        continue;
                                    }
                                    case 4: {
                                        state = 1;
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            if ( $step >= 1 && $step <= 2 ) {
                                ex2 = $async_e;
                                $step = 3;
                                $asyncBody();
                                return;
                            }
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            });

            someMethod();

            task.continueWith(function (x) {
                Bridge.Test.NUnit.Assert.areEqual$1(1, state, "Should have reached the termination state");

                done();
            });
        },
        asyncTaskThatReturnsValue: function () {
            var done = Bridge.Test.NUnit.Assert.async();

            var state = 0;
            var tcs = new System.Threading.Tasks.TaskCompletionSource();
            var task = tcs.task;

            var someMethod = Bridge.fn.bind(this, function () {
                var $step = 0,
                    $task1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        state = 1;
                                        $task1 = task;
                                        $step = 1;
                                        $task1.continueWith($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $task1.getAwaitedResult();
                                        state = 2;
                                        $tcs.setResult(42);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            });

            var asyncTask = someMethod();

            Bridge.Test.NUnit.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.running, asyncTask.status, "asyncTask should be running immediately");
            Bridge.Test.NUnit.Assert.areEqual$1(1, state, "Async method should start running after being invoked");

            asyncTask.continueWith(function (x) {
                Bridge.Test.NUnit.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.ranToCompletion, asyncTask.status, "asyncTask should run to completion");
                Bridge.Test.NUnit.Assert.true$1(asyncTask.exception == null, "asyncTask should not throw an exception");
                Bridge.Test.NUnit.Assert.areEqual$1(2, state, "Async method should finish after the task is finished");
                Bridge.Test.NUnit.Assert.areEqual$1(42, asyncTask.getResult(), "Result should be correct");

                done();
            });

            Bridge.Test.NUnit.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.running, asyncTask.status, "asyncTask should be running before awaited task is finished");
            Bridge.Test.NUnit.Assert.areEqual$1(1, state, "Async method should not continue past point 1 until task is finished");

            tcs.setResult(0);
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.Threading.CancellationTokenTests", {
        typePropertiesForCancellationTokenSourceAreCorrect: function () {
            Bridge.Test.NUnit.Assert.areEqual$1("System.Threading.CancellationTokenSource", Bridge.Reflection.getTypeFullName(System.Threading.CancellationTokenSource), "FullName");
            var cts = new System.Threading.CancellationTokenSource();
            Bridge.Test.NUnit.Assert.true(Bridge.is(cts, System.Threading.CancellationTokenSource));
            Bridge.Test.NUnit.Assert.true(Bridge.is(cts, System.IDisposable));
        },
        typePropertiesForCancellationTokenAreCorrect: function () {
            Bridge.Test.NUnit.Assert.areEqual$1("System.Threading.CancellationToken", Bridge.Reflection.getTypeFullName(System.Threading.CancellationToken), "FullName");

            Bridge.Test.NUnit.Assert.true(Bridge.hasValue(new System.Threading.CancellationToken()));
            Bridge.Test.NUnit.Assert.true(Bridge.hasValue(System.Threading.CancellationToken.none));
            Bridge.Test.NUnit.Assert.true(Bridge.hasValue(new System.Threading.CancellationTokenSource().token));
        },
        typePropertiesForCancellationTokenRegistrationAreCorrect: function () {
            Bridge.Test.NUnit.Assert.areEqual$1("System.Threading.CancellationTokenRegistration", Bridge.Reflection.getTypeFullName(System.Threading.CancellationTokenRegistration), "FullName");

            var ctr = new System.Threading.CancellationTokenRegistration();
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(ctr, System.Threading.CancellationTokenRegistration), "CancellationTokenRegistration");
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(ctr, System.IDisposable), "IDisposable");
            Bridge.Test.NUnit.Assert.true$1(Bridge.is(ctr, System.IEquatable$1(System.Threading.CancellationTokenRegistration)), "IEquatable<CancellationTokenRegistration>");
        },
        cancellationTokenCreatedWithDefaultConstructorIsNotCanceledAndCannotBe: function () {
            var ct = new System.Threading.CancellationToken();
            Bridge.Test.NUnit.Assert.false$1(ct.getCanBeCanceled(), "CanBeCanceled");
            Bridge.Test.NUnit.Assert.false$1(ct.getIsCancellationRequested(), "IsCancellationRequested");
            ct.throwIfCancellationRequested();
        },
        cancellationTokenCreatedWithFalseArgumentToConstructorIsNotCanceledAndCannotBe: function () {
            var ct = new System.Threading.CancellationToken(false);
            Bridge.Test.NUnit.Assert.false$1(ct.getCanBeCanceled(), "CanBeCanceled");
            Bridge.Test.NUnit.Assert.false$1(ct.getIsCancellationRequested(), "IsCancellationRequested");
            ct.throwIfCancellationRequested();
        },
        cancellationTokenCreatedWithTrueArgumentToConstructorIsCanceled: function () {
            var ct = new System.Threading.CancellationToken(true);
            Bridge.Test.NUnit.Assert.true$1(ct.getCanBeCanceled(), "CanBeCanceled");
            Bridge.Test.NUnit.Assert.true$1(ct.getIsCancellationRequested(), "IsCancellationRequested");
            Bridge.Test.NUnit.Assert.throws(function () {
                ct.throwIfCancellationRequested();
            });
        },
        cancellationTokenNoneIsNotCancelledAndCannotBe: function () {
            Bridge.Test.NUnit.Assert.false$1(System.Threading.CancellationToken.none.getCanBeCanceled(), "CanBeCanceled");
            Bridge.Test.NUnit.Assert.false$1(System.Threading.CancellationToken.none.getIsCancellationRequested(), "IsCancellationRequested");
            System.Threading.CancellationToken.none.throwIfCancellationRequested();
        },
        creatingADefaultCancellationTokenReturnsACancellationTokenThatIsNotCancelled: function () {
            var ct = Bridge.getDefaultValue(System.Threading.CancellationToken);
            Bridge.Test.NUnit.Assert.false$1(ct.getCanBeCanceled(), "CanBeCanceled");
            Bridge.Test.NUnit.Assert.false$1(ct.getIsCancellationRequested(), "IsCancellationRequested");
            ct.throwIfCancellationRequested();
        },
        activatorCreateForCancellationTokenReturnsACancellationTokenThatIsNotCancelled: function () {
            var ct = Bridge.createInstance(System.Threading.CancellationToken);
            Bridge.Test.NUnit.Assert.false$1(ct.getCanBeCanceled(), "CanBeCanceled");
            Bridge.Test.NUnit.Assert.false$1(ct.getIsCancellationRequested(), "IsCancellationRequested");
            ct.throwIfCancellationRequested();
        },
        canBeCanceledIsTrueForTokenCreatedForCancellationTokenSource: function () {
            var cts = new System.Threading.CancellationTokenSource();
            Bridge.Test.NUnit.Assert.true$1(cts.token.getCanBeCanceled(), "cts.Token");
        },
        isCancellationRequestedForTokenCreatedForCancellationTokenSourceIsSetByTheCancelMethod: function () {
            var cts = new System.Threading.CancellationTokenSource();
            Bridge.Test.NUnit.Assert.false$1(cts.isCancellationRequested, "cts.IsCancellationRequested false");
            Bridge.Test.NUnit.Assert.false$1(cts.token.getIsCancellationRequested(), "cts.Token.IsCancellationRequested false");
            cts.cancel();
            Bridge.Test.NUnit.Assert.true$1(cts.isCancellationRequested, "cts.IsCancellationRequested true");
            Bridge.Test.NUnit.Assert.true$1(cts.token.getIsCancellationRequested(), "cts.Token.IsCancellationRequested true");
        },
        throwIfCancellationRequestedForTokenCreatedForCancellationTokenSourceThrowsAfterTheCancelMethodIsCalled: function () {
            var cts = new System.Threading.CancellationTokenSource();
            cts.token.throwIfCancellationRequested();
            cts.cancel();
            Bridge.Test.NUnit.Assert.throws$5(function () {
                cts.token.throwIfCancellationRequested();
            }, "cts.Token.ThrowIfCancellationRequested");
        },
        cancelWithoutArgumentsWorks: function () {
            var ex1 = new System.Exception();
            var ex2 = new System.Exception();
            var cts = new System.Threading.CancellationTokenSource();
            var calledHandlers = new (System.Collections.Generic.List$1(System.Int32))();
            cts.token.register(function () {
                calledHandlers.add(0);
            });
            cts.token.register(function () {
                calledHandlers.add(1);
                throw ex1;
            });
            cts.token.register(function () {
                calledHandlers.add(2);
            });
            cts.token.register(function () {
                calledHandlers.add(3);
                throw ex2;
            });
            cts.token.register(function () {
                calledHandlers.add(4);
            });

            try {
                cts.cancel();
                Bridge.Test.NUnit.Assert.fail$1("Should have thrown");
            }
            catch ($e1) {
                $e1 = System.Exception.create($e1);
                var ex;
                if (Bridge.is($e1, System.AggregateException)) {
                    ex = $e1;
                    Bridge.Test.NUnit.Assert.areEqual$1(2, ex.innerExceptions.Count, "count");
                    Bridge.Test.NUnit.Assert.true$1(ex.innerExceptions.contains(ex1), "ex1");
                    Bridge.Test.NUnit.Assert.true$1(ex.innerExceptions.contains(ex2), "ex2");
                } else {
                    throw $e1;
                }
            }

            Bridge.Test.NUnit.Assert.true(calledHandlers.contains(0) && calledHandlers.contains(1) && calledHandlers.contains(2) && calledHandlers.contains(3) && calledHandlers.contains(4));
        },
        cancelWorksWhenThrowOnFirstExceptionIsFalse: function () {
            var ex1 = new System.Exception();
            var ex2 = new System.Exception();
            var cts = new System.Threading.CancellationTokenSource();
            var calledHandlers = new (System.Collections.Generic.List$1(System.Int32))();
            cts.token.register(function () {
                calledHandlers.add(0);
            });
            cts.token.register(function () {
                calledHandlers.add(1);
                throw ex1;
            });
            cts.token.register(function () {
                calledHandlers.add(2);
            });
            cts.token.register(function () {
                calledHandlers.add(3);
                throw ex2;
            });
            cts.token.register(function () {
                calledHandlers.add(4);
            });

            try {
                cts.cancel(false);
                Bridge.Test.NUnit.Assert.fail$1("Should have thrown");
            }
            catch ($e1) {
                $e1 = System.Exception.create($e1);
                var ex;
                if (Bridge.is($e1, System.AggregateException)) {
                    ex = $e1;
                    Bridge.Test.NUnit.Assert.areEqual$1(2, ex.innerExceptions.Count, "ex count");
                    Bridge.Test.NUnit.Assert.true$1(ex.innerExceptions.contains(ex1), "ex1");
                    Bridge.Test.NUnit.Assert.true$1(ex.innerExceptions.contains(ex2), "ex2");
                } else {
                    throw $e1;
                }
            }

            Bridge.Test.NUnit.Assert.areEqual$1(5, calledHandlers.Count, "called handler count");
            Bridge.Test.NUnit.Assert.true(calledHandlers.contains(0) && calledHandlers.contains(1) && calledHandlers.contains(2) && calledHandlers.contains(3) && calledHandlers.contains(4));
        },
        cancelWorksWhenThrowOnFirstExceptionIsTrue: function () {
            var ex1 = new System.Exception();
            var ex2 = new System.Exception();
            var cts = new System.Threading.CancellationTokenSource();
            var calledHandlers = new (System.Collections.Generic.List$1(System.Int32))();
            cts.token.register(function () {
                calledHandlers.add(0);
            });
            cts.token.register(function () {
                calledHandlers.add(1);
                throw ex1;
            });
            cts.token.register(function () {
                calledHandlers.add(2);
            });
            cts.token.register(function () {
                calledHandlers.add(3);
                throw ex2;
            });
            cts.token.register(function () {
                calledHandlers.add(4);
            });

            try {
                cts.cancel(true);
                Bridge.Test.NUnit.Assert.fail$1("Should have thrown");
            }
            catch (ex) {
                ex = System.Exception.create(ex);
                Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(ex, ex1), "ex");
            }

            Bridge.Test.NUnit.Assert.areEqual$1(2, calledHandlers.Count, "called handler count");
            Bridge.Test.NUnit.Assert.true(calledHandlers.contains(0) && calledHandlers.contains(1));
        },
        registerOnACancelledSourceWithoutContextInvokesTheCallback: function () {
            var cts = new System.Threading.CancellationTokenSource();
            cts.cancel();
            var state = 0;
            cts.token.register(function () {
                state = 1;
            });
            Bridge.Test.NUnit.Assert.areEqual(1, state);
        },
        registerWithArgumentOnACancelledSourceInvokesTheCallback: function () {
            var cts = new System.Threading.CancellationTokenSource();
            var context = {  };
            cts.cancel();
            var state = 0;
            cts.token.register(function (c) {
                Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(context, c), "context");
                state = 1;
            }, context);
            Bridge.Test.NUnit.Assert.areEqual(1, state);
        },
        registerOnACancelledSourceWithoutContextRethrowsAThrownException: function () {
            var ex1 = new System.Exception();
            var cts = new System.Threading.CancellationTokenSource();
            cts.cancel();
            try {
                cts.token.register(function () {
                    throw ex1;
                });
                Bridge.Test.NUnit.Assert.fail$1("Should have thrown");
            }
            catch (ex) {
                ex = System.Exception.create(ex);
                Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(ex, ex1), "Exception");
            }
        },
        registerOnACancelledSourceWithContextRethrowsAThrownException: function () {
            var ex1 = new System.Exception();
            var context = {  };
            var cts = new System.Threading.CancellationTokenSource();
            cts.cancel();
            try {
                cts.token.register(function (c) {
                    Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(context, c), "context");
                    throw ex1;
                }, context);
                Bridge.Test.NUnit.Assert.fail$1("Should have thrown");
            }
            catch (ex) {
                ex = System.Exception.create(ex);
                Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(ex, ex1), "Exception");
            }
        },
        registerOverloadsWithUseSynchronizationContextWork: function () {
            var cts = new System.Threading.CancellationTokenSource();
            var context = {  };
            cts.cancel();
            var numCalled = 0;
            cts.token.register(function (c) {
                Bridge.identity(numCalled, (numCalled = (numCalled + 1) | 0));
            }, Bridge.box(true, System.Boolean, $box_.System.Boolean.toString));
            cts.token.register(function (c) {
                Bridge.identity(numCalled, (numCalled = (numCalled + 1) | 0));
            }, Bridge.box(false, System.Boolean, $box_.System.Boolean.toString));
            cts.token.register(function (c) {
                    Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(context, c), "context");
                    numCalled = (numCalled + 1) | 0;
                }, context);
            cts.token.register(function (c) {
                    Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(context, c), "context");
                    numCalled = (numCalled + 1) | 0;
                }, context);
            Bridge.Test.NUnit.Assert.areEqual(4, numCalled);
        },
        cancellationTokenSourceCanBeDisposed: function () {
            var cts = new System.Threading.CancellationTokenSource();
            cts.dispose();

            Bridge.Test.NUnit.Assert.true(true);
        },
        registerOnCancellationTokenCreatedNonCancelledDoesNothing: function () {
            var ct = new System.Threading.CancellationToken(false);

            var state = 0;
            ct.register(function () {
                state = 1;
            });

            Bridge.Test.NUnit.Assert.areEqual(0, state);
        },
        registerOnCancellationTokenCreatedCancelledInvokesTheActionImmediately: function () {
            var ct = new System.Threading.CancellationToken(true);

            var state = 0;
            var context = {  };
            ct.register(function () {
                state = 1;
            });
            Bridge.Test.NUnit.Assert.areEqual$1(1, state, "state 1");
            ct.register(function (c) {
                Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(context, c), "context");
                state = 2;
            }, context);
            Bridge.Test.NUnit.Assert.areEqual$1(2, state, "state 2");
        },
        duplicateCancelDoesNotCauseCallbacksToBeCalledTwice: function () {
            var cts = new System.Threading.CancellationTokenSource();
            var calls = 0;
            cts.token.register(function () {
                calls = 1;
            });
            cts.cancel();
            cts.cancel();

            Bridge.Test.NUnit.Assert.areEqual(1, calls);
        },
        registrationsCanBeCompared: function () {
            var cts = new System.Threading.CancellationTokenSource();
            var ctr1 = cts.token.register($asm.$.Bridge.ClientTest.Batch4.Threading.CancellationTokenTests.f1);
            var ctr2 = cts.token.register($asm.$.Bridge.ClientTest.Batch4.Threading.CancellationTokenTests.f1);

            Bridge.Test.NUnit.Assert.true$1(ctr1.equalsT(ctr1), "#1");
            Bridge.Test.NUnit.Assert.false$1(ctr1.equalsT(ctr2), "#2");
            Bridge.Test.NUnit.Assert.true$1(Bridge.equals(ctr1, ctr1), "#3");
            Bridge.Test.NUnit.Assert.false$1(Bridge.equals(ctr1, ctr2), "#4");

            Bridge.Test.NUnit.Assert.true$1(Bridge.equals(ctr1, ctr1), "#5");
            Bridge.Test.NUnit.Assert.false$1(Bridge.equals(ctr1, ctr2), "#6");
            Bridge.Test.NUnit.Assert.false$1(!Bridge.equals(ctr1, ctr1), "#7");
            Bridge.Test.NUnit.Assert.true$1(!Bridge.equals(ctr1, ctr2), "#8");
        },
        registrationsCanBeUnregistered: function () {
            var cts = new System.Threading.CancellationTokenSource();
            var calledHandlers = new (System.Collections.Generic.List$1(System.Int32))();
            cts.token.register(function () {
                calledHandlers.add(0);
            });
            var reg = cts.token.register(function () {
                calledHandlers.add(1);
            });
            Bridge.Test.NUnit.Assert.true(Bridge.hasValue(reg));

            cts.token.register(function () {
                calledHandlers.add(2);
            });

            reg.dispose();

            cts.cancel();

            Bridge.Test.NUnit.Assert.areEqual(2, calledHandlers.Count);
            Bridge.Test.NUnit.Assert.true(calledHandlers.contains(0) && calledHandlers.contains(2));
        },
        creatingADefaultCancellationTokenRegistrationReturnsARegistrationThatCanBeDisposedWithoutHarm: function () {
            var ct = Bridge.getDefaultValue(System.Threading.CancellationTokenRegistration);
            Bridge.Test.NUnit.Assert.notNull$1(ct, "not null");
            Bridge.Test.NUnit.Assert.true$1(Bridge.hasValue(ct), "is CancellationTokenRegistration");
            ct.dispose();
        },
        linkedSourceWithTwoTokensWorks: function () {
            {
                var cts1 = new System.Threading.CancellationTokenSource();
                var cts2 = new System.Threading.CancellationTokenSource();
                var linked = System.Threading.CancellationTokenSource.createLinked(cts1.token, cts2.token);

                Bridge.Test.NUnit.Assert.false$1(linked.isCancellationRequested, "#1");
                cts1.cancel();
                Bridge.Test.NUnit.Assert.true$1(linked.isCancellationRequested, "#2");
            }

            {
                var cts11 = new System.Threading.CancellationTokenSource();
                var cts21 = new System.Threading.CancellationTokenSource();
                var linked1 = System.Threading.CancellationTokenSource.createLinked(cts11.token, cts21.token);

                Bridge.Test.NUnit.Assert.false$1(linked1.isCancellationRequested, "#1");
                cts21.cancel();
                Bridge.Test.NUnit.Assert.true$1(linked1.isCancellationRequested, "#2");
            }
        },
        linkedSourceWithThreeTokensWorks: function () {
            {
                var cts1 = new System.Threading.CancellationTokenSource();
                var cts2 = new System.Threading.CancellationTokenSource();
                var cts3 = new System.Threading.CancellationTokenSource();
                var linked = System.Threading.CancellationTokenSource.createLinked(cts1.token, cts2.token, cts3.token);

                Bridge.Test.NUnit.Assert.false$1(linked.isCancellationRequested, "#1 1");
                cts1.cancel();
                Bridge.Test.NUnit.Assert.true$1(linked.isCancellationRequested, "#1 2");
            }

            {
                var cts11 = new System.Threading.CancellationTokenSource();
                var cts21 = new System.Threading.CancellationTokenSource();
                var cts31 = new System.Threading.CancellationTokenSource();
                var linked1 = System.Threading.CancellationTokenSource.createLinked(cts11.token, cts21.token, cts31.token);

                Bridge.Test.NUnit.Assert.false$1(linked1.isCancellationRequested, "#2 1");
                cts21.cancel();
                Bridge.Test.NUnit.Assert.true$1(linked1.isCancellationRequested, "#2 2");
            }

            {
                var cts12 = new System.Threading.CancellationTokenSource();
                var cts22 = new System.Threading.CancellationTokenSource();
                var cts32 = new System.Threading.CancellationTokenSource();
                var linked2 = System.Threading.CancellationTokenSource.createLinked(cts12.token, cts22.token, cts32.token);

                Bridge.Test.NUnit.Assert.false$1(linked2.isCancellationRequested, "#3 1");
                cts32.cancel();
                Bridge.Test.NUnit.Assert.true$1(linked2.isCancellationRequested, "#3 2");
            }
        }
    });

    Bridge.ns("Bridge.ClientTest.Batch4.Threading.CancellationTokenTests", $asm.$);

    Bridge.apply($asm.$.Bridge.ClientTest.Batch4.Threading.CancellationTokenTests, {
        f1: function () {
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.Threading.PromiseTests", {
        config: {
            properties: {
                PromiseProgress: 0
            }
        },
        createPromise: function () {
            return new Bridge.ClientTest.Batch4.Threading.PromiseTests.SimplePromise();
        },
        taskFromPromiseWithoutResultFactoryWorksWhenPromiseCompletes: function () {
            var completeAsync = Bridge.Test.NUnit.Assert.async();

            var promise = this.createPromise();
            var task = System.Threading.Tasks.Task.fromPromise(promise);

            Bridge.Test.NUnit.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.running, task.status, "Task should be running after being created");

            var continuationRun = false;

            var task1 = task.continueWith(function (t) {
                Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(t, task), "ContinueWith parameter should be correct");
                continuationRun = true;
            });

            Bridge.Test.NUnit.Assert.false$1(continuationRun, "Continuation should not be run too early.");
            Bridge.Test.NUnit.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.running, task.status, "Task should be running before promise is completed.");
            promise.resolve([Bridge.box(42, System.Int32), "result 123", Bridge.box(101, System.Int32)]);

            task1.continueWith(function (x) {
                Bridge.Test.NUnit.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.ranToCompletion, task.status, "Task should be completed after promise");
                Bridge.Test.NUnit.Assert.true$1(continuationRun, "Continuation should have been run after promise was completed.");
                Bridge.Test.NUnit.Assert.areDeepEqual$1(System.Array.init([Bridge.box(42, System.Int32), "result 123", Bridge.box(101, System.Int32)], System.Object), Bridge.unbox(task.getResult()), "The result should be correct");

                completeAsync();
            });
        },
        taskFromPromiseWithResultFactoryWorksWhenPromiseCompletes: function () {
            var completeAsync = Bridge.Test.NUnit.Assert.async();

            var trh = $asm.$.Bridge.ClientTest.Batch4.Threading.PromiseTests.f1;

            var promise = this.createPromise();
            var task = System.Threading.Tasks.Task.fromPromise(promise, trh);

            Bridge.Test.NUnit.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.running, task.status, "Task should be running after being created");

            var continuationRun = false;

            var task1 = task.continueWith(function (t) {
                Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(t, task), "ContinueWith parameter should be correct");
                continuationRun = true;
            });

            Bridge.Test.NUnit.Assert.false$1(continuationRun, "Continuation should not be run too early.");
            Bridge.Test.NUnit.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.running, task.status, "Task should be running before promise is completed.");
            promise.resolve([Bridge.box(42, System.Int32), "result 123", Bridge.box(101, System.Int32)]);

            task1.continueWith(function (x) {
                Bridge.Test.NUnit.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.ranToCompletion, task.status, "Task should be completed after promise");
                Bridge.Test.NUnit.Assert.true$1(continuationRun, "Continuation should have been run after promise was completed.");
                Bridge.Test.NUnit.Assert.areDeepEqual(Bridge.merge(new Bridge.ClientTest.Batch4.Threading.PromiseTests.TaskResult(), {
                    I: Bridge.box(42, System.Int32),
                    S: "result 123",
                    J: Bridge.box(101, System.Int32)
                } ), task.getResult());

                completeAsync();
            });
        },
        taskFromPromiseWorksWhenPromiseFails: function () {
            var completeAsync = Bridge.Test.NUnit.Assert.async();

            var promise = this.createPromise();
            var task = System.Threading.Tasks.Task.fromPromise(promise);

            Bridge.Test.NUnit.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.running, task.status, "Task should be running after being created");

            var continuationRun = false;

            var task1 = task.continueWith(function (t) {
                Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(t, task), "ContinueWith parameter should be correct");
                continuationRun = true;
            });

            Bridge.Test.NUnit.Assert.false$1(continuationRun, "Continuation should not be run too early.");
            Bridge.Test.NUnit.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.running, task.status, "Task should be running before promise is completed.");
            promise.reject([Bridge.box(42, System.Int32), "result 123", Bridge.box(101, System.Int32)]);

            task1.continueWith(function (x) {
                Bridge.Test.NUnit.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.faulted, task.status, "Task should have faulted after the promise was rejected.");
                Bridge.Test.NUnit.Assert.true$1(continuationRun, "Continuation should have been run after promise was rejected.");
                Bridge.Test.NUnit.Assert.true$1(Bridge.is(task.exception, System.AggregateException), "Exception should be an AggregateException");
                Bridge.Test.NUnit.Assert.areEqual$1(1, task.exception.innerExceptions.Count, "Exception should have one inner exception");
                Bridge.Test.NUnit.Assert.true$1(Bridge.is(task.exception.innerExceptions.get(0), Bridge.PromiseException), "Inner exception should be a PromiseException");
                Bridge.Test.NUnit.Assert.areDeepEqual$1(System.Array.init([Bridge.box(42, System.Int32), "result 123", Bridge.box(101, System.Int32)], System.Object), Bridge.unbox(Bridge.cast(task.exception.innerExceptions.get(0), Bridge.PromiseException).arguments), "The PromiseException arguments should be correct");

                completeAsync();
            });
        },
        completingPromiseCanBeAwaited: function () {
            var $step = 0,
                $task1, 
                $taskResult1, 
                $jumpFromFinally, 
                completeAsync, 
                promise, 
                result, 
                task, 
                $asyncBody = Bridge.fn.bind(this, function () {
                    for (;;) {
                        $step = System.Array.min([0,1], $step);
                        switch ($step) {
                            case 0: {
                                completeAsync = Bridge.Test.NUnit.Assert.async();

                                promise = this.createPromise();
                                result = null;

                                task = System.Threading.Tasks.Task.run(function () {
                                    Bridge.Test.NUnit.Assert.true$1(result == null, "Await should not finish too early (a).");
                                    promise.resolve([Bridge.box(42, System.Int32), "result 123", Bridge.box(101, System.Int32)]);
                                });

                                Bridge.Test.NUnit.Assert.true$1(result == null, "Await should not finish too early (b).");

                                $task1 = System.Threading.Tasks.Task.fromPromise(promise);
                                $step = 1;
                                $task1.continueWith($asyncBody, true);
                                return;
                            }
                            case 1: {
                                $taskResult1 = $task1.getAwaitedResult();
                                result = $taskResult1;

                                Bridge.Test.NUnit.Assert.areEqual$1(System.Array.init([Bridge.box(42, System.Int32), "result 123", Bridge.box(101, System.Int32)], System.Object), Bridge.unbox(result), "The result should be correct");
                                completeAsync();
                                return;
                            }
                            default: {
                                return;
                            }
                        }
                    }
                }, arguments);

            $asyncBody();
        },
        failingPromiseCanBeAwaited: function () {
            var $step = 0,
                $task1, 
                $taskResult1, 
                $jumpFromFinally, 
                $returnValue, 
                completeAsync, 
                promise, 
                continuationRun, 
                task, 
                ex, 
                ex1, 
                $async_e, 
                $async_e1, 
                $asyncBody = Bridge.fn.bind(this, function () {
                    try {
                        for (;;) {
                            $step = System.Array.min([0,1,2,3,4,5], $step);
                            switch ($step) {
                                case 0: {
                                    completeAsync = Bridge.Test.NUnit.Assert.async();

                                    promise = this.createPromise();

                                    continuationRun = false;

                                    task = System.Threading.Tasks.Task.run(function () {
                                        Bridge.Test.NUnit.Assert.false$1(continuationRun, "Continuation should not be run too early (a).");
                                        promise.reject([Bridge.box(42, System.Int32), "result 123", Bridge.box(101, System.Int32)]);
                                    });
                                    $step = 1;
                                    continue;
                                }
                                case 1: {
                                    Bridge.Test.NUnit.Assert.false$1(continuationRun, "Continuation should not be run too early (b).");
                                    $task1 = System.Threading.Tasks.Task.fromPromise(promise);
                                    $step = 2;
                                    $task1.continueWith($asyncBody, true);
                                    return;
                                }
                                case 2: {
                                    $taskResult1 = $task1.getAwaitedResult();
                                    Bridge.Test.NUnit.Assert.fail$1("Await should throw");
                                    $step = 5;
                                    continue;
                                }
                                case 3: {
                                    continuationRun = true;
                                    Bridge.Test.NUnit.Assert.areEqual$1(System.Array.init([Bridge.box(42, System.Int32), "result 123", Bridge.box(101, System.Int32)], System.Object), Bridge.unbox(ex.arguments), "The PromiseException arguments should be correct");
                                    $async_e = null;
                                    $step = 5;
                                    continue;
                                }
                                case 4: {
                                    Bridge.Test.NUnit.Assert.fail$1(System.String.concat("Thrown exception should have been an AggregateException, was ", Bridge.Reflection.getTypeFullName(Bridge.getType(ex1))));
                                    $async_e = null;
                                    $step = 5;
                                    continue;
                                }
                                case 5: {
                                    Bridge.Test.NUnit.Assert.true$1(continuationRun, "Continuation should have been run after promise was rejected.");

                                    completeAsync();
                                    return;
                                }
                                default: {
                                    return;
                                }
                            }
                        }
                    } catch($async_e1) {
                        $async_e = System.Exception.create($async_e1);
                        if ( $step >= 1 && $step <= 2 ) {
                            if (Bridge.is($async_e, Bridge.PromiseException)) {
                                ex = $async_e;
                                $step = 3;
                                $asyncBody();
                                return;
                            } else {
                                ex1 = $async_e;
                                $step = 4;
                                $asyncBody();
                                return;
                            }
                        }
                        throw $async_e;
                    }
                }, arguments);

            $asyncBody();
        },
        handleProgress: function (args) {
            if (args === void 0) { args = []; }
            var i = System.Nullable.getValue(Bridge.cast(Bridge.unbox(args[System.Array.index(0, args)]), System.Int32));
            this.PromiseProgress = i;
        },
        taskFromPromiseWithProgressWithoutResultFactoryWorksWhenPromiseProgressesAndCompletes: function () {
            var completeAsync = Bridge.Test.NUnit.Assert.async();

            var promise = this.createPromise();

            this.PromiseProgress = -1;
            var task = System.Threading.Tasks.Task.fromPromise(promise, null, null, Bridge.fn.cacheBind(this, this.handleProgress));

            Bridge.Test.NUnit.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.running, task.status, "Task should be running after being created");

            var continuationRun = false;

            var task1 = task.continueWith(function (t) {
                Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(t, task), "ContinueWith parameter should be correct");
                continuationRun = true;
            });

            Bridge.Test.NUnit.Assert.false$1(continuationRun, "Continuation should not be run too early.");
            Bridge.Test.NUnit.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.running, task.status, "Task should be running before promise is completed.");

            promise.progress([Bridge.box(20, System.Int32)]);
            Bridge.Test.NUnit.Assert.areEqual$1(20, this.PromiseProgress, "Progress 20");

            // Resolve will set Progress to 100%
            promise.resolve([Bridge.box(42, System.Int32), "result 123", Bridge.box(101, System.Int32)]);
            Bridge.Test.NUnit.Assert.areEqual$1(100, this.PromiseProgress, "Progress 100");

            task1.continueWith(function (x) {
                Bridge.Test.NUnit.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.ranToCompletion, task.status, "Task should be completed after promise");
                Bridge.Test.NUnit.Assert.true$1(continuationRun, "Continuation should have been run after promise was completed.");
                Bridge.Test.NUnit.Assert.areDeepEqual$1(System.Array.init([Bridge.box(42, System.Int32), "result 123", Bridge.box(101, System.Int32)], System.Object), task.getResult(), "The result should be correct");

                completeAsync();
            });
        }
    });

    Bridge.ns("Bridge.ClientTest.Batch4.Threading.PromiseTests", $asm.$);

    Bridge.apply($asm.$.Bridge.ClientTest.Batch4.Threading.PromiseTests, {
        f1: function (i, s, j) {
            return Bridge.merge(new Bridge.ClientTest.Batch4.Threading.PromiseTests.TaskResult(), {
                I: Bridge.box(System.Nullable.getValue(Bridge.cast(Bridge.unbox(i), System.Int32)), System.Int32),
                S: Bridge.cast(s, System.String),
                J: Bridge.box(System.Nullable.getValue(Bridge.cast(Bridge.unbox(j), System.Int32)), System.Int32)
            } );
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.Threading.PromiseTests.SimplePromise", {
        inherits: [Bridge.IPromise],
        doThen: null,
        config: {
            properties: {
                Thens: null
            },
            alias: [
            "then", "Bridge$IPromise$then"
            ]
        },
        ctor: function () {
            this.$initialize();
            this.Thens = new (System.Collections.Generic.List$1(Bridge.ClientTest.Batch4.Threading.PromiseTests.SimplePromise.A))();

            this.doThen = Bridge.fn.bind(this, $asm.$.Bridge.ClientTest.Batch4.Threading.PromiseTests.SimplePromise.f1);
        },
        then: function (fulfilledHandler, errorHandler, progressHandler) {
            if (errorHandler === void 0) { errorHandler = null; }
            if (progressHandler === void 0) { progressHandler = null; }
            this.doThen(fulfilledHandler, errorHandler, progressHandler);
        },
        resolve: function (args) {
            if (args === void 0) { args = []; }
            this.complete(Bridge.ClientTest.Batch4.Threading.PromiseTests.SimplePromise.Which.Resolve, args);
        },
        reject: function (args) {
            if (args === void 0) { args = []; }
            this.complete(Bridge.ClientTest.Batch4.Threading.PromiseTests.SimplePromise.Which.Reject, args);
        },
        progress: function (args) {
            if (args === void 0) { args = []; }
            var i = 0;
            while (i < this.Thens.Count) {
                var aThen = this.Thens.getItem(i);

                if (!Bridge.staticEquals(aThen.Progress, null)) {
                    aThen.Progress(args);
                }

                i = (i + 1) | 0;
            }
        },
        complete: function (which, args) {
            if (args === void 0) { args = []; }
            if (which === Bridge.ClientTest.Batch4.Threading.PromiseTests.SimplePromise.Which.Resolve) {
                this.doThen = Bridge.fn.bind(this, function (f, e, p) {
                    this.resolve(args);
                });
            } else {
                this.doThen = Bridge.fn.bind(this, function (f, e, p) {
                    this.reject(args);
                });
            }

            var i = 0;
            while (i < this.Thens.Count) {
                var aThen = this.Thens.getItem(i);

                if (which === Bridge.ClientTest.Batch4.Threading.PromiseTests.SimplePromise.Which.Resolve) {
                    if (!Bridge.staticEquals(aThen.Filled, null)) {
                        aThen.Filled.apply(null, args);
                    }
                } else {
                    if (!Bridge.staticEquals(aThen.Error, null)) {
                        aThen.Error.apply(null, args);
                    }
                }

                if (!Bridge.staticEquals(aThen.Progress, null)) {
                    aThen.Progress([Bridge.box(100, System.Int32)]);
                }

                i = (i + 1) | 0;
            }
            this.Thens.clear();
        }
    });

    Bridge.ns("Bridge.ClientTest.Batch4.Threading.PromiseTests.SimplePromise", $asm.$);

    Bridge.apply($asm.$.Bridge.ClientTest.Batch4.Threading.PromiseTests.SimplePromise, {
        f1: function (f, e, p) {
            this.Thens.add(Bridge.merge(new Bridge.ClientTest.Batch4.Threading.PromiseTests.SimplePromise.A(), {
                Filled: f,
                Error: e,
                Progress: p
            } ));
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.Threading.PromiseTests.SimplePromise.A", {
        config: {
            properties: {
                Filled: null,
                Error: null,
                Progress: null
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.Threading.PromiseTests.SimplePromise.Which", {
        $kind: "enum",
        statics: {
            Resolve: 0,
            Reject: 1
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.Threading.PromiseTests.TaskResult", {
        config: {
            properties: {
                I: null,
                S: null,
                J: null
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.Threading.TaskTests", {
        makeEnumerable: function (T, args) {
            return new (Bridge.GeneratorEnumerable$1(T))(Bridge.fn.bind(this, function (T, args) {
                var $step = 0,
                    $jumpFromFinally,
                    $returnValue,
                    $t,
                    a,
                    $async_e;

                var $enumerator = new (Bridge.GeneratorEnumerator$1(T))(Bridge.fn.bind(this, function () {
                    try {
                        for (;;) {
                            switch ($step) {
                                case 0: {
                                    if (args === void 0) { args = []; }
                                        $t = Bridge.getEnumerator(args);
                                        $step = 1;
                                        continue;
                                }
                                case 1: {
                                    if ($t.moveNext()) {
                                            a = $t.Current;
                                            $step = 2;
                                            continue;
                                        }
                                    $step = 4;
                                    continue;
                                }
                                case 2: {
                                    $enumerator.current = a;
                                        $step = 3;
                                        return true;
                                }
                                case 3: {
                                    $step = 1;
                                    continue;
                                }
                                case 4: {

                                }
                                default: {
                                    return false;
                                }
                            }
                        }
                    } catch($async_e1) {
                        $async_e = System.Exception.create($async_e1);
                        throw $async_e;
                    }
                }));
                return $enumerator;
            }, arguments));
        },
        taskCompletionSourceTypePropertiesAreCorrect: function () {
            Bridge.Test.NUnit.Assert.areEqual$1("System.Threading.Tasks.TaskCompletionSource", Bridge.Reflection.getTypeFullName(System.Threading.Tasks.TaskCompletionSource), "FullName should be correct");
            var tcs = new System.Threading.Tasks.TaskCompletionSource();
            Bridge.Test.NUnit.Assert.true(Bridge.hasValue(tcs));
        },
        taskTypePropertiesAreCorrect: function () {
            Bridge.Test.NUnit.Assert.areEqual$1("System.Threading.Tasks.Task", Bridge.Reflection.getTypeFullName(System.Threading.Tasks.Task), "FullName for non-generic task should be correct");
            Bridge.Test.NUnit.Assert.areEqual$1("System.Threading.Tasks.Task`1", Bridge.Reflection.getTypeFullName(System.Threading.Tasks.Task$1), "FullName for generic task should be correct");

            var task = new System.Threading.Tasks.TaskCompletionSource().task;
            Bridge.Test.NUnit.Assert.true(Bridge.hasValue(task));
            Bridge.Test.NUnit.Assert.true(Bridge.is(task, System.Threading.Tasks.Task));
            Bridge.Test.NUnit.Assert.true(Bridge.is(task, System.IDisposable));

            task.dispose(); // Should not throw
        },
        taskCompletionSourceWorksWhenSettingResult: function () {
            var completeAsync = Bridge.Test.NUnit.Assert.async();

            var callbackRun = false;
            var tcs = new System.Threading.Tasks.TaskCompletionSource();

            var task = tcs.task;

            task.continueWith(function (t) {
                Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(t, task), "Callback parameter should be correct");
                Bridge.Test.NUnit.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.ranToCompletion, task.status, "Task should be completed when in the callback");
                Bridge.Test.NUnit.Assert.areEqual$1(1, task.getResult(), "Result should be 1 after the callback");
                Bridge.Test.NUnit.Assert.areEqual$1(null, task.exception, "Exception should be null in the callback");

                callbackRun = true;
            });

            Bridge.Test.NUnit.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.running, task.status, "The task should be running before SetResult is called");
            Bridge.Test.NUnit.Assert.false$1(callbackRun, "Callback should not be run before SetResult() is called");

            tcs.setResult(1);

            Bridge.Test.NUnit.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.ranToCompletion, task.status, "Task should be completed directly after SetResult() is called");
            Bridge.Test.NUnit.Assert.areEqual$1(1, task.getResult(), "Result should be set immediately");
            Bridge.Test.NUnit.Assert.areEqual$1(null, task.exception, "Exception should be null after SetResult()");

            System.Threading.Tasks.Task.run(function () {
                Bridge.Test.NUnit.Assert.true$1(callbackRun, "Callback should be run");

                completeAsync();
            });
        },
        taskCompletionSourceWorksWhenSettingASingleException: function () {
            var completeAsync = Bridge.Test.NUnit.Assert.async();

            var callbackRun = false;
            var tcs = new System.Threading.Tasks.TaskCompletionSource();
            var task = tcs.task;

            var ex = new System.Exception("Some text");

            task.continueWith(function (t) {
                Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(t, task), "Callback parameter should be correct");
                Bridge.Test.NUnit.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.faulted, task.status, "Task should be faulted in the callback");
                Bridge.Test.NUnit.Assert.true(Bridge.is(task.exception, System.AggregateException));
                Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(task.exception.innerExceptions.get(0), ex), "The exception should be correct");
                Bridge.Test.NUnit.Assert.throws$5(function () {
                    var x = task.getResult();
                }, "Getting the result property in the callback should throw");

                callbackRun = true;
            });

            Bridge.Test.NUnit.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.running, task.status, "The task should be running before the SetException() call");
            Bridge.Test.NUnit.Assert.false$1(callbackRun, "Callback should not be run before SetException() is called");

            tcs.setException(ex);

            Bridge.Test.NUnit.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.faulted, task.status, "The task should be faulted immediately after the SetException() call");
            Bridge.Test.NUnit.Assert.true(Bridge.is(task.exception, System.AggregateException));
            Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(task.exception.innerExceptions.get(0), ex), "The exception should be correct immediately after SetException()");
            Bridge.Test.NUnit.Assert.throws$5(function () {
                var x = task.getResult();
            }, "Getting the result property after SetException() should throw");

            System.Threading.Tasks.Task.run(function () {
                Bridge.Test.NUnit.Assert.true$1(callbackRun, "Callback should be run");

                completeAsync();
            });
        },
        taskCompletionSourceWorksWhenSettingTwoExceptions: function () {
            var completeAsync = Bridge.Test.NUnit.Assert.async();

            var callbackRun = false;
            var tcs = new System.Threading.Tasks.TaskCompletionSource();
            var task = tcs.task;
            var ex1 = new System.Exception("Some text");
            var ex2 = new System.Exception("Some other text");

            task.continueWith(function (t) {
                Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(t, task), "Callback parameter should be correct");
                Bridge.Test.NUnit.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.faulted, task.status, "Task should be faulted in the callback");
                Bridge.Test.NUnit.Assert.true(Bridge.is(task.exception, System.AggregateException));
                Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(task.exception.innerExceptions.get(0), ex1), "InnerExceptions[0] should be correct in callback");
                Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(task.exception.innerExceptions.get(1), ex2), "InnerExceptions[1] should be correct in callback");
                Bridge.Test.NUnit.Assert.throws$5(function () {
                    var x = task.getResult();
                }, "Getting the result property in the callback should throw");

                callbackRun = true;
            });

            Bridge.Test.NUnit.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.running, task.status, "The task should be running before the SetException() call");
            Bridge.Test.NUnit.Assert.false$1(callbackRun, "Callback should not be run before SetException() is called");

            tcs.setException(this.makeEnumerable(System.Exception, System.Array.init([ex1, ex2], System.Exception)));

            Bridge.Test.NUnit.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.faulted, task.status, "The task should be faulted immediately after the SetException() call");
            Bridge.Test.NUnit.Assert.true(Bridge.is(task.exception, System.AggregateException));
            Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(task.exception.innerExceptions.get(0), ex1), "InnerExceptions[0] should be correct immediately after SetException");
            Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(task.exception.innerExceptions.get(1), ex2), "InnerExceptions[1] should be correct immediately after SetException");
            Bridge.Test.NUnit.Assert.throws$5(function () {
                var x = task.getResult();
            }, "Getting the result property after SetException() should throw");

            System.Threading.Tasks.Task.run(function () {
                Bridge.Test.NUnit.Assert.true$1(callbackRun, "Callback should be run");

                completeAsync();
            });
        },
        taskCompletionSourceWorksWhenCancelling: function () {
            var completeAsync = Bridge.Test.NUnit.Assert.async();

            var callbackRun = false;
            var tcs = new System.Threading.Tasks.TaskCompletionSource();
            var task = tcs.task;

            var task1 = task.continueWith(function (t) {
                Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(t, task), "Callback parameter should be correct");
                Bridge.Test.NUnit.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.canceled, task.status, "Task should be cancelled in the callback");
                Bridge.Test.NUnit.Assert.true$1(task.exception == null, "Exception should be null in the callback");
                Bridge.Test.NUnit.Assert.throws$5(function () {
                    var x = task.getResult();
                }, "Getting the result property in the callback should throw");

                callbackRun = true;
            });

            Bridge.Test.NUnit.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.running, task.status, "The task should be running before the SetCanceled() call");
            Bridge.Test.NUnit.Assert.false$1(callbackRun, "Callback should not be run before SetCanceled() is called");

            tcs.setCanceled();

            Bridge.Test.NUnit.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.canceled, task.status, "The task should be cancelled immediately after the SetCanceled() call");
            Bridge.Test.NUnit.Assert.true$1(task.exception == null, "The exception should be correct immediately after SetCanceled()");
            Bridge.Test.NUnit.Assert.throws$5(function () {
                var x = task.getResult();
            }, "Getting the result property after SetCanceled() should throw");

            task1.continueWith(function (x) {
                Bridge.Test.NUnit.Assert.true$1(callbackRun, "The callback should be run");

                completeAsync();
            });
        },
        cancelledTaskThrowsTaskCanceledExceptionWhenAwaited: function () {
            var completeAsync = Bridge.Test.NUnit.Assert.async();

            var tcs = new System.Threading.Tasks.TaskCompletionSource();
            tcs.setCanceled();

            var caughtException = null;

            var someMethod = Bridge.fn.bind(this, function () {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $returnValue, 
                    ex, 
                    $async_e, 
                    $async_e1, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([1,2,3,4], $step);
                                switch ($step) {

                                    case 1: {
                                        $task1 = tcs.task;
                                        $step = 2;
                                        $task1.continueWith($asyncBody, true);
                                        return;
                                    }
                                    case 2: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        Bridge.Test.NUnit.Assert.fail$1("Await should throw");
                                        $step = 4;
                                        continue;
                                    }
                                    case 3: {
                                        caughtException = ex;
                                        $async_e = null;
                                        $step = 4;
                                        continue;
                                    }
                                    case 4: {
                                        return;
                                    }
                                    default: {
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            if ( $step >= 1 && $step <= 2 ) {
                                if (Bridge.is($async_e, System.Threading.Tasks.TaskCanceledException)) {
                                    ex = $async_e;
                                    $step = 3;
                                    $asyncBody();
                                    return;
                                }
                            }
                            throw $async_e;
                        }
                    }, arguments);

                $asyncBody();
            });

            someMethod();

            System.Threading.Tasks.Task.run(function () {
                Bridge.Test.NUnit.Assert.notNull$1(caughtException, "Should catch");
                Bridge.Test.NUnit.Assert.true(Bridge.referenceEquals(tcs.task, caughtException.task));

                completeAsync();
            });
        },
        cancelledTaskThrowsAggregateExceptionWithTaskCanceledExceptionWhenResultIsAccessed: function () {
            var tcs = new System.Threading.Tasks.TaskCompletionSource();
            tcs.setCanceled();

            try {
                var r = tcs.task.getResult();

                Bridge.Test.NUnit.Assert.fail$1("Should throw");
            }
            catch ($e1) {
                $e1 = System.Exception.create($e1);
                var ex;
                if (Bridge.is($e1, System.AggregateException)) {
                    ex = $e1;
                    Bridge.Test.NUnit.Assert.areEqual$1(1, ex.innerExceptions.Count, "InnerExceptions.Count");
                    var tce = Bridge.as(ex.innerExceptions.get(0), System.Threading.Tasks.TaskCanceledException);
                    Bridge.Test.NUnit.Assert.notNull$1(tce, "is TaskCanceledException");
                    Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(tcs.task, tce.task), "Task");
                } else {
                    throw $e1;
                }
            }
        },
        setResultFailsWhenTheTaskIsCompleted: function () {
            var tcs = new System.Threading.Tasks.TaskCompletionSource();
            tcs.setResult(1);
            Bridge.Test.NUnit.Assert.throws(function () {
                tcs.setResult(1);
            });
        },
        setCanceledFailsWhenTheTaskIsCompleted: function () {
            var tcs = new System.Threading.Tasks.TaskCompletionSource();
            tcs.setCanceled();
            Bridge.Test.NUnit.Assert.throws(function () {
                tcs.setCanceled();
            });
        },
        setExceptionFailsWhenTheTaskIsCompleted: function () {
            var ex = new System.Exception();
            var tcs = new System.Threading.Tasks.TaskCompletionSource();
            tcs.setException(ex);
            Bridge.Test.NUnit.Assert.throws(function () {
                tcs.setException(ex);
            });
        },
        completedTaskHasCorrectIsXProperties: function () {
            var tcs = new System.Threading.Tasks.TaskCompletionSource();
            tcs.setResult(1);
            Bridge.Test.NUnit.Assert.true(tcs.task.isCompleted());
            Bridge.Test.NUnit.Assert.false(tcs.task.isFaulted());
            Bridge.Test.NUnit.Assert.false(tcs.task.isCanceled());
        },
        cancelledTaskHasCorrectIsXProperties: function () {
            var tcs = new System.Threading.Tasks.TaskCompletionSource();
            tcs.setCanceled();
            Bridge.Test.NUnit.Assert.true(tcs.task.isCompleted());
            Bridge.Test.NUnit.Assert.false(tcs.task.isFaulted());
            Bridge.Test.NUnit.Assert.true(tcs.task.isCanceled());
        },
        faultedTaskHasCorrectIsXProperties: function () {
            var tcs = new System.Threading.Tasks.TaskCompletionSource();
            tcs.setException(new System.Exception());
            Bridge.Test.NUnit.Assert.true(tcs.task.isCompleted());
            Bridge.Test.NUnit.Assert.true(tcs.task.isFaulted());
            Bridge.Test.NUnit.Assert.false(tcs.task.isCanceled());
        },
        trySetResultReturnsFalseWhenTheTaskIsCompleted: function () {
            var tcs = new System.Threading.Tasks.TaskCompletionSource();
            Bridge.Test.NUnit.Assert.true(tcs.trySetResult(1));
            Bridge.Test.NUnit.Assert.false(tcs.trySetResult(1));
        },
        trySetCanceledReturnsFalseWhenTheTaskIsCompleted: function () {
            var tcs = new System.Threading.Tasks.TaskCompletionSource();
            Bridge.Test.NUnit.Assert.true(tcs.trySetCanceled());
            Bridge.Test.NUnit.Assert.false(tcs.trySetCanceled());
        },
        trySetExceptionReturnsFalseWhenTheTaskIsCompleted: function () {
            var ex = new System.Exception();
            var tcs = new System.Threading.Tasks.TaskCompletionSource();
            Bridge.Test.NUnit.Assert.true(tcs.trySetException(ex));
            Bridge.Test.NUnit.Assert.false(tcs.trySetException(ex));
        },
        continueWithForNonGenericTaskWorkWithNoResultAndNoException: function () {
            var completeAsync = Bridge.Test.NUnit.Assert.async();

            var complete = false;
            var tcs = new System.Threading.Tasks.TaskCompletionSource();
            var task = tcs.task;

            Bridge.Test.NUnit.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.running, task.status, "task should be running at point 1");

            var continuedTask = null;

            continuedTask = task.continueWith(function (t) {
                Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(t, task), "argument to task.ContinueWith callback should be correct");
                Bridge.Test.NUnit.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.ranToCompletion, task.status, "task should have run to completion at point 2");
                Bridge.Test.NUnit.Assert.areEqual$1(null, task.exception, "task should not have an exception");
                Bridge.Test.NUnit.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.running, continuedTask.status, "continuedTask should be running at point 2");
            });

            Bridge.Test.NUnit.Assert.false$1(Bridge.referenceEquals(task, continuedTask), "task and continuedTask should not be the same");

            var continuedTask1 = continuedTask.continueWith(function (t) {
                Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(t, continuedTask), "argument to continuedTask.ContinueWith callback should be correct");
                Bridge.Test.NUnit.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.ranToCompletion, continuedTask.status, "continuedTask should have run to completion at point 3");
                Bridge.Test.NUnit.Assert.areEqual$1(null, continuedTask.exception, "continuedTask should not have an exception");

                complete = true;
            });

            tcs.setResult(0);

            continuedTask1.continueWith(function (x) {
                Bridge.Test.NUnit.Assert.true$1(complete, "We should not time out");

                completeAsync();
            });
        },
        continueWithWhenCallbackThrowsAnException: function () {
            var completeAsync = Bridge.Test.NUnit.Assert.async();

            var cb1Invoked = false, cb2Invoked = false;
            var tcs = new System.Threading.Tasks.TaskCompletionSource();
            var task = tcs.task;

            Bridge.Test.NUnit.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.running, task.status, "task should be running at point 1");

            var t1 = task.continueWith(function (t) {
                cb1Invoked = true;
                throw new System.Exception("Test");
            });

            var t2 = task.continueWith(function (t) {
                cb2Invoked = true;
            });

            tcs.setResult(0);

            System.Threading.Tasks.Task.run(function () {
                Bridge.Test.NUnit.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.ranToCompletion, task.status, "task status should be RanToCompletion");

                Bridge.Test.NUnit.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.faulted, t1.status, "t1 status should be Faulted");
                Bridge.Test.NUnit.Assert.true$1(cb1Invoked, "Callback 1 should have been invoked");

                Bridge.Test.NUnit.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.ranToCompletion, t2.status, "t2 status should be RanToCompletion");
                Bridge.Test.NUnit.Assert.true$1(cb2Invoked, "Callback 2 should have been invoked");

                completeAsync();
            });
        },
        exceptionInTaskBodyAppearsInTheExceptionMemberForNonGenericTask: function () {
            var completeAsync = Bridge.Test.NUnit.Assert.async();

            var complete = false;
            var tcs = new System.Threading.Tasks.TaskCompletionSource();
            var task = tcs.task;

            Bridge.Test.NUnit.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.running, task.status, "task should be running at point 1");

            var continuedTask = null;

            continuedTask = task.continueWith($asm.$.Bridge.ClientTest.Batch4.Threading.TaskTests.f1);

            Bridge.Test.NUnit.Assert.false$1(Bridge.referenceEquals(task, continuedTask), "task and continuedTask should not be the same");

            var continuedTask1 = continuedTask.continueWith(function (t) {
                Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(t, continuedTask), "argument to continuedTask.ContinueWith callback should be correct");
                Bridge.Test.NUnit.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.faulted, continuedTask.status, "continuedTask should have run to completion at point 3");
                Bridge.Test.NUnit.Assert.areNotEqual$1(null, continuedTask.exception, "continuedTask should have an exception");
                Bridge.Test.NUnit.Assert.true(Bridge.is(continuedTask.exception, System.AggregateException));
                Bridge.Test.NUnit.Assert.areEqual("This is a test message", continuedTask.exception.innerExceptions.get(0).Message);

                complete = true;
            });

            tcs.setResult(0);

            continuedTask1.continueWith(function (x) {
                Bridge.Test.NUnit.Assert.true$1(complete, "We should not time out");

                completeAsync();
            });
        },
        continueWithForNonGenericTaskCanReturnAValue: function () {
            var completeAsync = Bridge.Test.NUnit.Assert.async();

            var done = false;
            var tcs = new System.Threading.Tasks.TaskCompletionSource();
            var task = tcs.task;

            Bridge.Test.NUnit.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.running, task.status, "task should be running at point 1");

            var continuedTask = null;
            continuedTask = task.continueWith(function (t) {
                Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(t, task), "argument to task.ContinueWith callback should be correct");
                Bridge.Test.NUnit.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.ranToCompletion, task.status, "task should have run to completion at point 2");
                Bridge.Test.NUnit.Assert.areEqual$1(null, task.exception, "task should not have an exception");

                Bridge.Test.NUnit.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.running, continuedTask.status, "continuedTask should be running at point 2");

                return 42;
            });

            Bridge.Test.NUnit.Assert.false$1(Bridge.referenceEquals(task, continuedTask), "task and continuedTask should not be the same");

            var continuedTask1 = continuedTask.continueWith(function (t) {
                Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(t, continuedTask), "argument to continuedTask.ContinueWith callback should be correct");
                Bridge.Test.NUnit.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.ranToCompletion, continuedTask.status, "continuedTask should have run to completion at point 3");
                Bridge.Test.NUnit.Assert.areEqual$1(null, continuedTask.exception, "continuedTask should not have an exception");
                Bridge.Test.NUnit.Assert.areEqual(42, t.getResult());

                done = true;
            });

            tcs.setResult(0);

            continuedTask1.continueWith(function (x) {
                Bridge.Test.NUnit.Assert.true$1(done, "We should not time out");

                completeAsync();
            });
        },
        continueWithWithNoReturnValueForGenericTaskWorks: function () {
            var completeAsync = Bridge.Test.NUnit.Assert.async();

            var done = false;
            var tcs = new System.Threading.Tasks.TaskCompletionSource();
            var task = tcs.task;

            Bridge.Test.NUnit.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.running, task.status, "task should be running at point 1");

            var continuedTask = null;

            continuedTask = task.continueWith(function (t) {
                Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(t, task), "argument to task.ContinueWith callback should be correct");
                Bridge.Test.NUnit.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.ranToCompletion, task.status, "task should have run to completion at point 2");
                Bridge.Test.NUnit.Assert.areEqual$1(null, task.exception, "task should not have an exception");
                Bridge.Test.NUnit.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.running, continuedTask.status, "continuedTask should be running at point 2");
            });

            Bridge.Test.NUnit.Assert.false$1(Bridge.referenceEquals(task, continuedTask), "task and continuedTask should not be the same");

            var continuedTask1 = continuedTask.continueWith(function (t) {
                Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(t, continuedTask), "argument to continuedTask.ContinueWith callback should be correct");
                Bridge.Test.NUnit.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.ranToCompletion, continuedTask.status, "continuedTask should have run to completion at point 3");
                Bridge.Test.NUnit.Assert.areEqual$1(null, continuedTask.exception, "continuedTask should not have an exception");

                done = true;
            });

            tcs.setResult(0);

            continuedTask1.continueWith(function (x) {
                Bridge.Test.NUnit.Assert.true$1(done, "We should not time out");

                completeAsync();
            });
        },
        continueWithForGenericTaskCanReturnAValue: function () {
            var completeAsync = Bridge.Test.NUnit.Assert.async();

            var done = false;
            var tcs = new System.Threading.Tasks.TaskCompletionSource();
            var task = tcs.task;

            Bridge.Test.NUnit.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.running, task.status, "task should be running at point 1");

            var continuedTask = null;

            continuedTask = task.continueWith(function (t) {
                Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(t, task), "argument to task.ContinueWith callback should be correct");
                Bridge.Test.NUnit.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.ranToCompletion, task.status, "task should have run to completion at point 2");
                Bridge.Test.NUnit.Assert.areEqual$1(null, task.exception, "task should not have an exception");
                Bridge.Test.NUnit.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.running, continuedTask.status, "continuedTask should be running at point 2");

                return t.getResult() + "_";
            });

            Bridge.Test.NUnit.Assert.false$1(Bridge.referenceEquals(task, continuedTask), "task and continuedTask should not be the same");

            var doneTask = continuedTask.continueWith(function (t) {
                Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(t, continuedTask), "argument to continuedTask.ContinueWith callback should be correct");
                Bridge.Test.NUnit.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.ranToCompletion, continuedTask.status, "continuedTask should have run to completion at point 3");
                Bridge.Test.NUnit.Assert.areEqual$1(null, continuedTask.exception, "continuedTask should not have an exception");
                Bridge.Test.NUnit.Assert.areEqual("42_", t.getResult());

                done = true;
            });

            tcs.setResult(42);

            doneTask.continueWith(function (x) {
                Bridge.Test.NUnit.Assert.true$1(done, "We should not time out");

                completeAsync();
            });
        },
        delayWorks: function () {
            var completeAsync = Bridge.Test.NUnit.Assert.async();

            var done = false;

            System.Threading.Tasks.Task.run(function () {
                Bridge.Test.NUnit.Assert.false$1(done, "Done should not be set too early");
            });

            var delay = System.Threading.Tasks.Task.delay(100);

            Bridge.Test.NUnit.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.running, delay.status, "delay should be running at point 1");

            var afterDelay = delay.continueWith(function (t) {
                Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(t, delay), "argument to delay.ContinueWith callback should be correct");
                Bridge.Test.NUnit.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.ranToCompletion, delay.status, "delay should have run to completion at point 2");
                Bridge.Test.NUnit.Assert.areEqual$1(null, delay.exception, "delay should not have an exception");

                done = true;
            });

            afterDelay.continueWith(function (x) {
                Bridge.Test.NUnit.Assert.true$1(done, "We should not time out");

                completeAsync();
            });
        },
        fromResultWorks: function () {
            var t = System.Threading.Tasks.Task.fromResult(3);
            Bridge.Test.NUnit.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.ranToCompletion, t.status, "Task should be finished");
            Bridge.Test.NUnit.Assert.areEqual$1(3, t.getResult(), "Result should be correct");
            Bridge.Test.NUnit.Assert.areEqual$1(null, t.exception, "Exception should be null");
        },
        runWithoutResultWorks: function () {
            var completeAsync = Bridge.Test.NUnit.Assert.async();
            var bodyRun = false, continuationRun = false;

            var task = System.Threading.Tasks.Task.run(function () {
                bodyRun = true;
            });

            Bridge.Test.NUnit.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.running, task.status, "task should be running at point 1");

            var doneTask = task.continueWith(function (t) {
                Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(t, task), "argument to task.ContinueWith callback should be correct");
                Bridge.Test.NUnit.Assert.true$1(bodyRun, "Body should be run before continuation");
                Bridge.Test.NUnit.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.ranToCompletion, task.status, "task should have run to completion at point 2");
                Bridge.Test.NUnit.Assert.areEqual$1(null, task.exception, "task should not have an exception");

                continuationRun = true;
            });

            doneTask.continueWith(function (x) {
                Bridge.Test.NUnit.Assert.true$1(continuationRun, "We should not time out");

                completeAsync();
            });
        },
        runWithResultWorks: function () {
            var completeAsync = Bridge.Test.NUnit.Assert.async();
            var bodyRun = false, continuationRun = false;

            var task = System.Threading.Tasks.Task.run(function () {
                bodyRun = true;
                return 42;
            });

            Bridge.Test.NUnit.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.running, task.status, "task should be running at point 1");

            var doneTask = task.continueWith(function (t) {
                Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(t, task), "argument to task.ContinueWith callback should be correct");
                Bridge.Test.NUnit.Assert.true$1(bodyRun, "Body should be run before continuation");
                Bridge.Test.NUnit.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.ranToCompletion, task.status, "task should have run to completion at point 2");
                Bridge.Test.NUnit.Assert.areEqual(42, task.getResult());
                Bridge.Test.NUnit.Assert.areEqual$1(null, task.exception, "task should not have an exception");

                continuationRun = true;
            });

            doneTask.continueWith(function (x) {
                Bridge.Test.NUnit.Assert.true$1(continuationRun, "We should not time out");

                completeAsync();
            });
        },
        runWorksWhenBodyThrows: function () {
            var completeAsync = Bridge.Test.NUnit.Assert.async();
            var bodyRun = false, continuationRun = false;

            var task = System.Threading.Tasks.Task.run(function () {
                bodyRun = true;
                eval("throw 'This is a test message'");
            });

            Bridge.Test.NUnit.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.running, task.status, "task should be running at point 1");

            var doneTask = task.continueWith(function (t) {
                Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(t, task), "argument to task.ContinueWith callback should be correct");
                Bridge.Test.NUnit.Assert.true$1(bodyRun, "Body should be run before continuation");
                Bridge.Test.NUnit.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.faulted, task.status, "task should have faulted at point 2");
                Bridge.Test.NUnit.Assert.true(Bridge.is(task.exception, System.AggregateException));
                Bridge.Test.NUnit.Assert.areEqual("This is a test message", task.exception.innerExceptions.get(0).Message);

                continuationRun = true;
            });

            doneTask.continueWith(function (x) {
                Bridge.Test.NUnit.Assert.true$1(continuationRun, "We should not time out");

                completeAsync();
            });
        },
        whenAllParamArrayWithResultWorks: function () {
            var completeAsync = Bridge.Test.NUnit.Assert.async();

            var continuationRun = false;
            var tcs1 = new System.Threading.Tasks.TaskCompletionSource();
            var tcs2 = new System.Threading.Tasks.TaskCompletionSource();
            var tcs3 = new System.Threading.Tasks.TaskCompletionSource();

            tcs1.task.continueWith(function (_) {
                Bridge.Test.NUnit.Assert.false$1(continuationRun, "Continuation should not be run too early.");
            });

            tcs2.task.continueWith(function (_) {
                Bridge.Test.NUnit.Assert.false$1(continuationRun, "Continuation should not be run too early.");
            });

            tcs3.task.continueWith(function (_) {
                Bridge.Test.NUnit.Assert.false$1(continuationRun, "Continuation should not be run too early.");
            });

            var task = System.Threading.Tasks.Task.whenAll(tcs1.task, tcs2.task, tcs3.task);

            var doneTask = task.continueWith(function (t) {
                Bridge.Test.NUnit.Assert.false$1(continuationRun, "Continuation should only be run once.");
                Bridge.Test.NUnit.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.ranToCompletion, tcs1.task.status, "Task1 should have run to completion");
                Bridge.Test.NUnit.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.ranToCompletion, tcs2.task.status, "Task2 should have run to completion");
                Bridge.Test.NUnit.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.ranToCompletion, tcs3.task.status, "Task3 should have run to completion");

                Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(task, t), "Callback parameter should be correct");

                Bridge.Test.NUnit.Assert.areEqual$1(System.Array.init([101, 3, 42], System.Int32), t.getResult(), "Result should be correct");
                Bridge.Test.NUnit.Assert.areEqual$1(null, t.exception, "Exception for the aggregate task should be null");
                Bridge.Test.NUnit.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.ranToCompletion, t.status, "Aggregate task should have run to completion");

                continuationRun = true;
            });

            Bridge.Test.NUnit.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.running, task.status, "task should be running after creation.");

            tcs2.setResult(3);
            tcs1.setResult(101);
            tcs3.setResult(42);

            doneTask.continueWith(function (x) {
                Bridge.Test.NUnit.Assert.true$1(continuationRun, "We should not time out");

                completeAsync();
            });
        },
        whenAllEnumerableWithResultWorks: function () {
            var completeAsync = Bridge.Test.NUnit.Assert.async();

            var continuationRun = false;
            var tcs1 = new System.Threading.Tasks.TaskCompletionSource();
            var tcs2 = new System.Threading.Tasks.TaskCompletionSource();
            var tcs3 = new System.Threading.Tasks.TaskCompletionSource();

            tcs1.task.continueWith(function (_) {
                Bridge.Test.NUnit.Assert.false$1(continuationRun, "Continuation should not be run too early.");
            });

            tcs2.task.continueWith(function (_) {
                Bridge.Test.NUnit.Assert.false$1(continuationRun, "Continuation should not be run too early.");
            });

            tcs3.task.continueWith(function (_) {
                Bridge.Test.NUnit.Assert.false$1(continuationRun, "Continuation should not be run too early.");
            });

            var task = System.Threading.Tasks.Task.whenAll(this.makeEnumerable(System.Threading.Tasks.Task$1, [tcs1.task, tcs2.task, tcs3.task]));

            var doneTask = task.continueWith(function (t) {
                Bridge.Test.NUnit.Assert.false$1(continuationRun, "Continuation should only be run once.");
                Bridge.Test.NUnit.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.ranToCompletion, tcs1.task.status, "Task1 should have run to completion");
                Bridge.Test.NUnit.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.ranToCompletion, tcs2.task.status, "Task2 should have run to completion");
                Bridge.Test.NUnit.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.ranToCompletion, tcs3.task.status, "Task3 should have run to completion");

                Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(task, t), "Callback parameter should be correct");

                Bridge.Test.NUnit.Assert.areEqual$1(System.Array.init([101, 3, 42], System.Int32), t.getResult(), "Result should be correct");
                Bridge.Test.NUnit.Assert.areEqual$1(null, t.exception, "Exception for the aggregate task should be null");
                Bridge.Test.NUnit.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.ranToCompletion, t.status, "Aggregate task should have run to completion");

                continuationRun = true;
            });

            Bridge.Test.NUnit.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.running, task.status, "task should be running after creation.");

            tcs2.setResult(3);
            tcs1.setResult(101);
            tcs3.setResult(42);

            doneTask.continueWith(function (x) {
                Bridge.Test.NUnit.Assert.true$1(continuationRun, "We should not time out");

                completeAsync();
            });
        },
        whenAllParamArrayWithoutResultWorks: function () {
            var completeAsync = Bridge.Test.NUnit.Assert.async();

            var continuationRun = false;
            var tcs1 = new System.Threading.Tasks.TaskCompletionSource();
            var tcs2 = new System.Threading.Tasks.TaskCompletionSource();
            var tcs3 = new System.Threading.Tasks.TaskCompletionSource();

            tcs1.task.continueWith(function (_) {
                Bridge.Test.NUnit.Assert.false$1(continuationRun, "Continuation should not be run too early.");
            });

            tcs2.task.continueWith(function (_) {
                Bridge.Test.NUnit.Assert.false$1(continuationRun, "Continuation should not be run too early.");
            });

            tcs3.task.continueWith(function (_) {
                Bridge.Test.NUnit.Assert.false$1(continuationRun, "Continuation should not be run too early.");
            });

            var task = System.Threading.Tasks.Task.whenAll(Bridge.cast(tcs1.task, System.Threading.Tasks.Task), Bridge.cast(tcs2.task, System.Threading.Tasks.Task), Bridge.cast(tcs3.task, System.Threading.Tasks.Task));

            var doneTask = task.continueWith(function (t) {
                Bridge.Test.NUnit.Assert.false$1(continuationRun, "Continuation should only be run once.");
                Bridge.Test.NUnit.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.ranToCompletion, tcs1.task.status, "Task1 should have run to completion");
                Bridge.Test.NUnit.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.ranToCompletion, tcs2.task.status, "Task2 should have run to completion");
                Bridge.Test.NUnit.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.ranToCompletion, tcs3.task.status, "Task3 should have run to completion");

                Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(task, t), "Callback parameter should be correct");

                Bridge.Test.NUnit.Assert.areEqual$1(null, t.exception, "Exception for the aggregate task should be null");
                Bridge.Test.NUnit.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.ranToCompletion, t.status, "Aggregate task should have run to completion");

                continuationRun = true;
            });

            Bridge.Test.NUnit.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.running, task.status, "task should be running after creation.");

            tcs2.setResult(3);
            tcs1.setResult(101);
            tcs3.setResult(42);

            doneTask.continueWith(function (x) {
                Bridge.Test.NUnit.Assert.true$1(continuationRun, "We should not time out");

                completeAsync();
            });
        },
        whenAllEnumerableWithoutResultWorks: function () {
            var completeAsync = Bridge.Test.NUnit.Assert.async();

            var continuationRun = false;
            var tcs1 = new System.Threading.Tasks.TaskCompletionSource();
            var tcs2 = new System.Threading.Tasks.TaskCompletionSource();
            var tcs3 = new System.Threading.Tasks.TaskCompletionSource();

            tcs1.task.continueWith(function (_) {
                Bridge.Test.NUnit.Assert.false$1(continuationRun, "Continuation should not be run too early.");
            });

            tcs2.task.continueWith(function (_) {
                Bridge.Test.NUnit.Assert.false$1(continuationRun, "Continuation should not be run too early.");
            });

            tcs3.task.continueWith(function (_) {
                Bridge.Test.NUnit.Assert.false$1(continuationRun, "Continuation should not be run too early.");
            });

            var task = System.Threading.Tasks.Task.whenAll(this.makeEnumerable(System.Threading.Tasks.Task, [Bridge.cast(tcs1.task, System.Threading.Tasks.Task), Bridge.cast(tcs2.task, System.Threading.Tasks.Task), Bridge.cast(tcs3.task, System.Threading.Tasks.Task)]));

            var doneTask = task.continueWith(function (t) {
                Bridge.Test.NUnit.Assert.false$1(continuationRun, "Continuation should only be run once.");
                Bridge.Test.NUnit.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.ranToCompletion, tcs1.task.status, "Task1 should have run to completion");
                Bridge.Test.NUnit.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.ranToCompletion, tcs2.task.status, "Task2 should have run to completion");
                Bridge.Test.NUnit.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.ranToCompletion, tcs3.task.status, "Task3 should have run to completion");

                Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(task, t), "Callback parameter should be correct");

                Bridge.Test.NUnit.Assert.areEqual$1(null, t.exception, "Exception for the aggregate task should be null");
                Bridge.Test.NUnit.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.ranToCompletion, t.status, "Aggregate task should have run to completion");

                continuationRun = true;
            });

            Bridge.Test.NUnit.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.running, task.status, "task should be running after creation.");

            tcs2.setResult(3);
            tcs1.setResult(101);
            tcs3.setResult(42);

            doneTask.continueWith(function (x) {
                Bridge.Test.NUnit.Assert.true$1(continuationRun, "We should not time out");

                completeAsync();
            });
        },
        whenAllShouldHaveAnErrorIfAnyIncludedTaskFaulted: function () {
            var completeAsync = Bridge.Test.NUnit.Assert.async();

            var continuationRun = false;
            var tcs1 = new System.Threading.Tasks.TaskCompletionSource();
            var tcs2 = new System.Threading.Tasks.TaskCompletionSource();
            var tcs3 = new System.Threading.Tasks.TaskCompletionSource();
            var tcs4 = new System.Threading.Tasks.TaskCompletionSource();

            tcs1.task.continueWith(function (_) {
                Bridge.Test.NUnit.Assert.false$1(continuationRun, "Continuation should not be run too early.");
            });

            tcs2.task.continueWith(function (_) {
                Bridge.Test.NUnit.Assert.false$1(continuationRun, "Continuation should not be run too early.");
            });

            tcs3.task.continueWith(function (_) {
                Bridge.Test.NUnit.Assert.false$1(continuationRun, "Continuation should not be run too early.");
            });

            tcs4.task.continueWith(function (_) {
                Bridge.Test.NUnit.Assert.false$1(continuationRun, "Continuation should not be run too early.");
            });

            var ex1 = new System.Exception("exception 1");
            var ex2 = new System.Exception("exception 1");

            var task = System.Threading.Tasks.Task.whenAll(this.makeEnumerable(System.Threading.Tasks.Task, [Bridge.cast(tcs1.task, System.Threading.Tasks.Task), Bridge.cast(tcs2.task, System.Threading.Tasks.Task), Bridge.cast(tcs3.task, System.Threading.Tasks.Task), Bridge.cast(tcs4.task, System.Threading.Tasks.Task)]));

            var doneTask = task.continueWith(function (t) {
                Bridge.Test.NUnit.Assert.false$1(continuationRun, "Continuation should only be run once.");
                Bridge.Test.NUnit.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.ranToCompletion, tcs1.task.status, "Task1 should have run to completion");
                Bridge.Test.NUnit.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.faulted, tcs2.task.status, "Task2 should be faulted");
                Bridge.Test.NUnit.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.faulted, tcs3.task.status, "Task3 should be faulted");
                Bridge.Test.NUnit.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.canceled, tcs4.task.status, "Task4 should be cancelled");

                Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(task, t), "Callback parameter should be correct");

                Bridge.Test.NUnit.Assert.true$1(Bridge.hasValue(t.exception), "Exception for the aggregate task should be null");
                Bridge.Test.NUnit.Assert.areEqual$1(2, t.exception.innerExceptions.Count, "Should be 2 inner exceptions");
                Bridge.Test.NUnit.Assert.true$1(t.exception.innerExceptions.contains(ex1), "ex1 should be propagated");
                Bridge.Test.NUnit.Assert.true$1(t.exception.innerExceptions.contains(ex2), "ex2 should be propagated");
                Bridge.Test.NUnit.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.faulted, t.status, "Aggregate task should be faulted");

                continuationRun = true;
            });

            Bridge.Test.NUnit.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.running, task.status, "task should be running after creation.");

            tcs2.setException(ex1);
            tcs1.setResult(101);
            tcs3.setException(ex2);
            tcs4.setCanceled();

            doneTask.continueWith(function (x) {
                Bridge.Test.NUnit.Assert.true$1(continuationRun, "We should not time out");

                completeAsync();
            });
        },
        whenAllShouldBeCancelledIfNoTaskWasFaultedButSomeWasCancelled: function () {
            var completeAsync = Bridge.Test.NUnit.Assert.async();

            var continuationRun = false;
            var tcs1 = new System.Threading.Tasks.TaskCompletionSource();
            var tcs2 = new System.Threading.Tasks.TaskCompletionSource();
            var tcs3 = new System.Threading.Tasks.TaskCompletionSource();
            tcs1.task.continueWith(function (_) {
                Bridge.Test.NUnit.Assert.false$1(continuationRun, "Continuation should not be run too early.");
            });

            tcs2.task.continueWith(function (_) {
                Bridge.Test.NUnit.Assert.false$1(continuationRun, "Continuation should not be run too early.");
            });

            tcs3.task.continueWith(function (_) {
                Bridge.Test.NUnit.Assert.false$1(continuationRun, "Continuation should not be run too early.");
            });

            var task = System.Threading.Tasks.Task.whenAll(tcs1.task, tcs2.task, tcs3.task);

            var doneTask = task.continueWith(function (t) {
                Bridge.Test.NUnit.Assert.false$1(continuationRun, "Continuation should only be run once.");
                Bridge.Test.NUnit.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.canceled, tcs1.task.status, "Task1 should be cancelled");
                Bridge.Test.NUnit.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.ranToCompletion, tcs2.task.status, "Task2 should have run to completion");
                Bridge.Test.NUnit.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.ranToCompletion, tcs3.task.status, "Task3 should have run to completion");

                Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(task, t), "Callback parameter should be correct");

                Bridge.Test.NUnit.Assert.areEqual$1(null, t.exception, "Exception for the aggregate task should be null");
                Bridge.Test.NUnit.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.canceled, t.status, "Aggregate task should have run to completion");

                continuationRun = true;
            });

            Bridge.Test.NUnit.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.running, task.status, "task should be running after creation.");

            tcs2.setResult(3);
            tcs1.setCanceled();
            tcs3.setResult(42);

            doneTask.continueWith(function (x) {
                Bridge.Test.NUnit.Assert.true$1(continuationRun, "We should not time out");

                completeAsync();
            });
        },
        whenAnyParamArrayWithResultWorks: function () {
            var completeAsync = Bridge.Test.NUnit.Assert.async();

            var continuationRun = false;

            var tcs1 = new System.Threading.Tasks.TaskCompletionSource();
            var tcs2 = new System.Threading.Tasks.TaskCompletionSource();
            var tcs3 = new System.Threading.Tasks.TaskCompletionSource();

            var task = System.Threading.Tasks.Task.whenAny(tcs1.task, tcs2.task, tcs3.task);

            var task1 = task.continueWith(function (t) {
                Bridge.Test.NUnit.Assert.false$1(continuationRun, "Continuation should only be run once.");
                Bridge.Test.NUnit.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.ranToCompletion, tcs2.task.status, "Task2 should have run to completion");

                Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(task, t), "Callback parameter should be correct");

                Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(t.getResult(), tcs2.task), "Result should be correct");
                Bridge.Test.NUnit.Assert.areEqual$1(3, t.getResult().getResult(), "Result should be correct");
                Bridge.Test.NUnit.Assert.areEqual$1(null, t.exception, "Exception for the aggregate task should be null");
                Bridge.Test.NUnit.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.ranToCompletion, t.status, "Aggregate task should have run to completion");

                continuationRun = true;
            });

            Bridge.Test.NUnit.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.running, task.status, "task should be running after creation.");

            tcs2.setResult(3);

            var doneTask = task1.continueWith(function (x) {
                Bridge.Test.NUnit.Assert.true$1(continuationRun, "Continuation should be run immediately");

                tcs1.setResult(101);
                tcs3.setResult(42);
            });

            doneTask.continueWith(function (x) {
                Bridge.Test.NUnit.Assert.true$1(continuationRun, "We should not time out");

                completeAsync();
            });
        },
        whenAnyEnumerableWithResultWorks: function () {
            var completeAsync = Bridge.Test.NUnit.Assert.async();

            var continuationRun = false;
            var tcs1 = new System.Threading.Tasks.TaskCompletionSource();
            var tcs2 = new System.Threading.Tasks.TaskCompletionSource();
            var tcs3 = new System.Threading.Tasks.TaskCompletionSource();

            var task = System.Threading.Tasks.Task.whenAny(this.makeEnumerable(System.Threading.Tasks.Task$1, [tcs1.task, tcs2.task, tcs3.task]));

            var task1 = task.continueWith(function (t) {
                Bridge.Test.NUnit.Assert.false$1(continuationRun, "Continuation should only be run once.");
                Bridge.Test.NUnit.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.ranToCompletion, tcs2.task.status, "Task2 should have run to completion");

                Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(task, t), "Callback parameter should be correct");

                Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(t.getResult(), tcs2.task), "Result should be correct");
                Bridge.Test.NUnit.Assert.areEqual$1(3, t.getResult().getResult(), "Result should be correct");
                Bridge.Test.NUnit.Assert.areEqual$1(null, t.exception, "Exception for the aggregate task should be null");
                Bridge.Test.NUnit.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.ranToCompletion, t.status, "Aggregate task should have run to completion");

                continuationRun = true;
            });

            Bridge.Test.NUnit.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.running, task.status, "task should be running after creation.");

            tcs2.setResult(3);

            var doneTask = task1.continueWith(function (x) {
                Bridge.Test.NUnit.Assert.true$1(continuationRun, "Continuation should be run immediately");

                tcs1.setResult(101);
                tcs3.setResult(42);
            });

            doneTask.continueWith(function (x) {
                Bridge.Test.NUnit.Assert.true$1(continuationRun, "We should not time out");

                completeAsync();
            });
        },
        whenAnyParamArrayWithoutResultWorks: function () {
            var completeAsync = Bridge.Test.NUnit.Assert.async();

            var continuationRun = false;

            var tcs1 = new System.Threading.Tasks.TaskCompletionSource();
            var tcs2 = new System.Threading.Tasks.TaskCompletionSource();
            var tcs3 = new System.Threading.Tasks.TaskCompletionSource();

            var task = System.Threading.Tasks.Task.whenAny(Bridge.cast(tcs1.task, System.Threading.Tasks.Task), Bridge.cast(tcs2.task, System.Threading.Tasks.Task), Bridge.cast(tcs3.task, System.Threading.Tasks.Task));

            var task1 = task.continueWith(function (t) {
                Bridge.Test.NUnit.Assert.false$1(continuationRun, "Continuation should only be run once.");
                Bridge.Test.NUnit.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.ranToCompletion, tcs2.task.status, "Task2 should have run to completion");

                Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(task, t), "Callback parameter should be correct");

                Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(t.getResult(), tcs2.task), "Result should be correct");
                Bridge.Test.NUnit.Assert.areEqual$1(null, t.exception, "Exception for the aggregate task should be null");
                Bridge.Test.NUnit.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.ranToCompletion, t.status, "Aggregate task should have run to completion");

                continuationRun = true;
            });

            Bridge.Test.NUnit.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.running, task.status, "task should be running after creation.");

            tcs2.setResult(3);

            var doneTask = task1.continueWith(function (x) {
                Bridge.Test.NUnit.Assert.true$1(continuationRun, "Continuation should be run immediately");

                tcs1.setResult(101);
                tcs3.setResult(42);
            });

            doneTask.continueWith(function (x) {
                Bridge.Test.NUnit.Assert.true$1(continuationRun, "We should not time out");

                completeAsync();
            });
        },
        whenAnyEnumerableWithoutResultWorks: function () {
            var completeAsync = Bridge.Test.NUnit.Assert.async();

            var continuationRun = false;

            var tcs1 = new System.Threading.Tasks.TaskCompletionSource();
            var tcs2 = new System.Threading.Tasks.TaskCompletionSource();
            var tcs3 = new System.Threading.Tasks.TaskCompletionSource();

            var task = System.Threading.Tasks.Task.whenAny(this.makeEnumerable(System.Threading.Tasks.Task, [Bridge.cast(tcs1.task, System.Threading.Tasks.Task), Bridge.cast(tcs2.task, System.Threading.Tasks.Task), Bridge.cast(tcs3.task, System.Threading.Tasks.Task)]));

            var task1 = task.continueWith(function (t) {
                Bridge.Test.NUnit.Assert.false$1(continuationRun, "Continuation should only be run once.");
                Bridge.Test.NUnit.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.ranToCompletion, tcs2.task.status, "Task2 should have run to completion");

                Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(task, t), "Callback parameter should be correct");

                Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(t.getResult(), tcs2.task), "Result should be correct");
                Bridge.Test.NUnit.Assert.areEqual$1(null, t.exception, "Exception for the aggregate task should be null");
                Bridge.Test.NUnit.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.ranToCompletion, task.status, "Aggregate task should have run to completion");

                continuationRun = true;
            });

            Bridge.Test.NUnit.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.running, task.status, "task should be running after creation.");

            tcs2.setResult(3);

            var doneTask = task1.continueWith(function (x) {
                Bridge.Test.NUnit.Assert.true$1(continuationRun, "Continuation should be run immediately");

                tcs1.setResult(101);
                tcs3.setResult(42);
            });

            doneTask.continueWith(function (x) {
                Bridge.Test.NUnit.Assert.true$1(continuationRun, "We should not time out");

                completeAsync();
            });
        },
        whenAnyFaultsIfTheFirstTaskFaulted: function () {
            var completeAsync = Bridge.Test.NUnit.Assert.async();

            var continuationRun = false;

            var tcs1 = new System.Threading.Tasks.TaskCompletionSource();
            var tcs2 = new System.Threading.Tasks.TaskCompletionSource();
            var tcs3 = new System.Threading.Tasks.TaskCompletionSource();
            var ex = new System.Exception("Some text");

            var task = System.Threading.Tasks.Task.whenAny(this.makeEnumerable(System.Threading.Tasks.Task$1, [tcs1.task, tcs2.task, tcs3.task]));

            var task1 = task.continueWith(function (t) {
                Bridge.Test.NUnit.Assert.false$1(continuationRun, "Continuation should only be run once.");
                Bridge.Test.NUnit.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.faulted, tcs2.task.status, "Task2 should have faulted");

                Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(task, t), "Callback parameter should be correct");

                Bridge.Test.NUnit.Assert.areEqual$1(1, t.exception.innerExceptions.Count, "There should be one inner exception");
                Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(t.exception.innerExceptions.get(0), ex), "Exception for the aggregate task should be correct");
                Bridge.Test.NUnit.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.faulted, task.status, "Aggregate task should have faulted");

                continuationRun = true;
            });

            Bridge.Test.NUnit.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.running, task.status, "task should be running after creation.");

            tcs2.setException(ex);

            var doneTask = task1.continueWith(function (x) {
                Bridge.Test.NUnit.Assert.true$1(continuationRun, "Continuation should be run immediately");

                tcs1.setResult(101);
                tcs3.setResult(42);
            });

            doneTask.continueWith(function (x) {
                Bridge.Test.NUnit.Assert.true$1(continuationRun, "We should not time out");

                completeAsync();
            });
        },
        whenAnyIsCancelledIfTheFirstTaskWasCancelled: function () {
            var completeAsync = Bridge.Test.NUnit.Assert.async();

            var continuationRun = false;
            var tcs1 = new System.Threading.Tasks.TaskCompletionSource();
            var tcs2 = new System.Threading.Tasks.TaskCompletionSource();
            var tcs3 = new System.Threading.Tasks.TaskCompletionSource();

            var task = System.Threading.Tasks.Task.whenAny(this.makeEnumerable(System.Threading.Tasks.Task$1, [tcs1.task, tcs2.task, tcs3.task]));

            var task1 = task.continueWith(function (t) {
                Bridge.Test.NUnit.Assert.false$1(continuationRun, "Continuation should only be run once.");
                Bridge.Test.NUnit.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.canceled, tcs2.task.status, "Task2 should be cancelled");

                Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(task, t), "Callback parameter should be correct");

                Bridge.Test.NUnit.Assert.areEqual$1(null, t.exception, "Aggregate task should not have exception");
                Bridge.Test.NUnit.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.canceled, task.status, "Aggregate task should be cancelled");

                continuationRun = true;
            });

            Bridge.Test.NUnit.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.running, task.status, "task should be running after creation.");

            tcs2.setCanceled();

            var doneTask = task1.continueWith(function (x) {
                Bridge.Test.NUnit.Assert.true$1(continuationRun, "Continuation should be run immediately");

                tcs1.setResult(101);
                tcs3.setResult(42);
            });

            doneTask.continueWith(function (x) {
                Bridge.Test.NUnit.Assert.true$1(continuationRun, "We should not time out");

                completeAsync();
            });
        },
        constructorWithOnlyActionWorks: function () {
            var completeAsync = Bridge.Test.NUnit.Assert.async();

            var taskRun = false, continuationRun = false;

            var task = new System.Threading.Tasks.Task(function () {
                taskRun = true;
            });

            var task1 = task.continueWith(function (t) {
                Bridge.Test.NUnit.Assert.true$1(taskRun, "Task should be run before continuation");
                Bridge.Test.NUnit.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.ranToCompletion, task.status, "Task should have run to completion");
                Bridge.Test.NUnit.Assert.true$1(task.exception == null, "Exception should be null");

                continuationRun = true;
            });

            Bridge.Test.NUnit.Assert.areEqual(System.Threading.Tasks.TaskStatus.created, task.status);

            System.Threading.Tasks.Task.run(function () {
                Bridge.Test.NUnit.Assert.false$1(taskRun, "Task should not be run before being started");

                task.start();

                Bridge.Test.NUnit.Assert.areEqual(System.Threading.Tasks.TaskStatus.running, task.status);
            });

            task1.continueWith(function (x) {
                Bridge.Test.NUnit.Assert.true$1(continuationRun, "The continuation should be run");
                completeAsync();
            });
        },
        constructorWithActionAndStateWorks: function () {
            var completeAsync = Bridge.Test.NUnit.Assert.async();

            var taskRun = false, continuationRun = false;
            var state = {  };

            var task = new System.Threading.Tasks.Task(function (s) {
                Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(state, s), "The state should be correct.");
                taskRun = true;
            }, state);

            var task1 = task.continueWith(function (t) {
                Bridge.Test.NUnit.Assert.true$1(taskRun, "Task should be run before continuation");
                Bridge.Test.NUnit.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.ranToCompletion, task.status, "Task should have run to completion");
                Bridge.Test.NUnit.Assert.true$1(task.exception == null, "Exception should be null");

                continuationRun = true;
            });

            Bridge.Test.NUnit.Assert.areEqual(System.Threading.Tasks.TaskStatus.created, task.status);

            System.Threading.Tasks.Task.run(function () {
                Bridge.Test.NUnit.Assert.false$1(taskRun, "Task should not be run before being started");

                task.start();

                Bridge.Test.NUnit.Assert.areEqual(System.Threading.Tasks.TaskStatus.running, task.status);
            });

            task1.continueWith(function (x) {
                Bridge.Test.NUnit.Assert.true$1(continuationRun, "The continuation should be run");

                completeAsync();
            });
        },
        exceptionInManuallyCreatedTaskIsStoredOnTheTask: function () {
            var completeAsync = Bridge.Test.NUnit.Assert.async();

            var taskRun = false, continuationRun = false;
            var ex = new System.Exception();

            var task = new System.Threading.Tasks.Task(function () {
                taskRun = true;
                throw ex;
            });

            var task1 = task.continueWith(function (t) {
                Bridge.Test.NUnit.Assert.true$1(taskRun, "Task should be run before continuation");
                Bridge.Test.NUnit.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.faulted, task.status, "Task should be faulted");
                Bridge.Test.NUnit.Assert.true$1(Bridge.is(task.exception, System.AggregateException), "Exception should be correct");
                Bridge.Test.NUnit.Assert.areEqual$1(1, task.exception.innerExceptions.Count, "There should be one inner exception");
                Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(task.exception.innerExceptions.get(0), ex), "InnerException should be correct");

                continuationRun = true;
            });

            Bridge.Test.NUnit.Assert.areEqual(System.Threading.Tasks.TaskStatus.created, task.status);

            System.Threading.Tasks.Task.run(function () {
                Bridge.Test.NUnit.Assert.false$1(taskRun, "Task should not be run before being started");

                task.start();
            });

            task1.continueWith(function (x) {
                Bridge.Test.NUnit.Assert.true$1(continuationRun, "The continuation should be run");

                completeAsync();
            });
        },
        constructorWithOnlyFunctionWorks: function () {
            var completeAsync = Bridge.Test.NUnit.Assert.async();

            var taskRun = false, continuationRun = false;

            var task = new System.Threading.Tasks.Task$1(function () {
                taskRun = true;
                return 42;
            });

            var doneTask = task.continueWith(function (t) {
                Bridge.Test.NUnit.Assert.true$1(taskRun, "Task should be run before continuation");
                Bridge.Test.NUnit.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.ranToCompletion, task.status, "Task should have run to completion");
                Bridge.Test.NUnit.Assert.areEqual$1(42, task.getResult(), "Result should be correct");
                Bridge.Test.NUnit.Assert.true$1(task.exception == null, "Exception should be null");

                continuationRun = true;
            });

            Bridge.Test.NUnit.Assert.areEqual(System.Threading.Tasks.TaskStatus.created, task.status);

            System.Threading.Tasks.Task.run(function () {
                Bridge.Test.NUnit.Assert.false$1(taskRun, "Task should not be run before being started");

                task.start();

                Bridge.Test.NUnit.Assert.areEqual(System.Threading.Tasks.TaskStatus.running, task.status);
            });

            doneTask.continueWith(function (x) {
                Bridge.Test.NUnit.Assert.true$1(continuationRun, "The continuation should be run");

                completeAsync();
            });
        },
        constructorWithFunctionAndStateWorks: function () {
            var completeAsync = Bridge.Test.NUnit.Assert.async();

            var taskRun = false, continuationRun = false;
            var state = {  };

            var task = new System.Threading.Tasks.Task$1(function (s) {
                Bridge.Test.NUnit.Assert.true$1(Bridge.referenceEquals(state, s), "The state should be correct.");
                taskRun = true;
                return 42;
            }, state);

            var doneTask = task.continueWith(function (t) {
                Bridge.Test.NUnit.Assert.true$1(taskRun, "Task should be run before continuation");
                Bridge.Test.NUnit.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.ranToCompletion, task.status, "Task should have run to completion");
                Bridge.Test.NUnit.Assert.areEqual$1(42, task.getResult(), "Result should be correct");
                Bridge.Test.NUnit.Assert.true$1(task.exception == null, "Exception should be null");

                continuationRun = true;
            });

            Bridge.Test.NUnit.Assert.areEqual(System.Threading.Tasks.TaskStatus.created, task.status);

            System.Threading.Tasks.Task.run(function () {
                Bridge.Test.NUnit.Assert.false$1(taskRun, "Task should not be run before being started");

                task.start();

                Bridge.Test.NUnit.Assert.areEqual(System.Threading.Tasks.TaskStatus.running, task.status);
            });

            doneTask.continueWith(function (x) {
                Bridge.Test.NUnit.Assert.true$1(continuationRun, "The continuation should be run");

                completeAsync();
            });
        }
    });

    Bridge.ns("Bridge.ClientTest.Batch4.Threading.TaskTests", $asm.$);

    Bridge.apply($asm.$.Bridge.ClientTest.Batch4.Threading.TaskTests, {
        f1: function (t) {
            eval("throw 'This is a test message'");
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.UserDefinedStructTests", {
        create: function (T) {
            return Bridge.createInstance(T);
        },
        isClassIsFalse: function () {
            Bridge.Test.NUnit.Assert.false$1(Bridge.Reflection.isClass(Bridge.ClientTest.Batch4.UserDefinedStructTests.S1), "#1");
            Bridge.Test.NUnit.Assert.false$1(Bridge.Reflection.isClass(Bridge.ClientTest.Batch4.UserDefinedStructTests.S2G$1(System.Int32)), "#2");
        },
        userDefinedStructCanBeUsed: function () {
            var s1 = new Bridge.ClientTest.Batch4.UserDefinedStructTests.S1.$ctor1(42);
            Bridge.Test.NUnit.Assert.areEqual(42, s1.i);
        },
        defaultConstructorOfStructReturnsInstanceWithAllMembersInitialized: function () {
            var s2 = Bridge.getDefaultValue(Bridge.ClientTest.Batch4.UserDefinedStructTests.S2);
            Bridge.Test.NUnit.Assert.areEqual$1(0, s2.i, "I");
            Bridge.Test.NUnit.Assert.areEqual$1(0, s2.d, "D");
            Bridge.Test.NUnit.Assert.areEqual$1(Bridge.getDefaultValue(System.DateTime), s2.DT, "DT");
            Bridge.Test.NUnit.Assert.null$1(Bridge.unbox(s2.o), "O");
            Bridge.Test.NUnit.Assert.areEqual$1(0, s2.t, "T");
        },
        defaultConstructorOfStructReturnsInstanceWithAllMembersInitializedGeneric: function () {
            var s2 = Bridge.getDefaultValue(Bridge.ClientTest.Batch4.UserDefinedStructTests.S2G$1(System.Int32));
            Bridge.Test.NUnit.Assert.areEqual$1(0, s2.i, "I");
            Bridge.Test.NUnit.Assert.areEqual$1(0, s2.d, "D");
            Bridge.Test.NUnit.Assert.areEqual$1(Bridge.getDefaultValue(System.DateTime), s2.DT, "DT");
            Bridge.Test.NUnit.Assert.null$1(Bridge.unbox(s2.o), "O");
            Bridge.Test.NUnit.Assert.areEqual$1(0, s2.t, "T");
        },
        defaultValueOfStructIsInstanceWithAllMembersInitialized: function () {
            var s2 = Bridge.getDefaultValue(Bridge.ClientTest.Batch4.UserDefinedStructTests.S2);
            Bridge.Test.NUnit.Assert.areEqual$1(0, s2.i, "I");
            Bridge.Test.NUnit.Assert.areEqual$1(0, s2.d, "D");
            Bridge.Test.NUnit.Assert.areEqual$1(Bridge.getDefaultValue(System.DateTime), s2.DT, "DT");
            Bridge.Test.NUnit.Assert.null$1(Bridge.unbox(s2.o), "O");
            Bridge.Test.NUnit.Assert.areEqual$1(0, s2.t, "T");
        },
        defaultValueOfStructIsInstanceWithAllMembersInitializedGeneric: function () {
            var s2 = Bridge.getDefaultValue(Bridge.ClientTest.Batch4.UserDefinedStructTests.S2G$1(System.Int32));
            Bridge.Test.NUnit.Assert.areEqual$1(0, s2.i, "I");
            Bridge.Test.NUnit.Assert.areEqual$1(0, s2.d, "D");
            Bridge.Test.NUnit.Assert.areEqual$1(Bridge.getDefaultValue(System.DateTime), s2.DT, "DT");
            Bridge.Test.NUnit.Assert.null$1(Bridge.unbox(s2.o), "O");
            Bridge.Test.NUnit.Assert.areEqual$1(0, s2.t, "T");
        },
        defaultValueOfStructIsInstanceWithAllMembersInitializedIndirect: function () {
            var s2 = this.create(Bridge.ClientTest.Batch4.UserDefinedStructTests.S2);
            Bridge.Test.NUnit.Assert.areEqual$1(0, s2.i, "I");
            Bridge.Test.NUnit.Assert.areEqual$1(0, s2.d, "D");
            Bridge.Test.NUnit.Assert.areEqual$1(Bridge.getDefaultValue(System.DateTime), s2.DT, "DT");
            Bridge.Test.NUnit.Assert.null$1(Bridge.unbox(s2.o), "O");
            Bridge.Test.NUnit.Assert.areEqual$1(0, s2.t, "T");
        },
        defaultValueOfStructIsInstanceWithAllMembersInitializedIndirectGeneric: function () {
            var s2 = this.create(Bridge.ClientTest.Batch4.UserDefinedStructTests.S2G$1(System.DateTime));
            Bridge.Test.NUnit.Assert.areEqual$1(0, s2.i, "I");
            Bridge.Test.NUnit.Assert.areEqual$1(0, s2.d, "D");
            Bridge.Test.NUnit.Assert.areEqual$1(Bridge.getDefaultValue(System.DateTime), s2.DT, "DT");
            Bridge.Test.NUnit.Assert.null$1(Bridge.unbox(s2.o), "O");
            Bridge.Test.NUnit.Assert.areEqual$1(Bridge.getDefaultValue(System.DateTime), s2.t, "T");
        },
        defaultValueOfStructWithInlineCodeDefaultConstructorWorks_SPI_1610: function () {
            var s1 = Bridge.getDefaultValue(Bridge.ClientTest.Batch4.UserDefinedStructTests.S6);
            var s2 = this.create(Bridge.ClientTest.Batch4.UserDefinedStructTests.S6);
            // #1610
            Bridge.Test.NUnit.Assert.areEqual$1(42, s1.i, "#1");
            Bridge.Test.NUnit.Assert.areEqual$1(42, s2.i, "#2");
        },
        defaultValueOfStructWithInlineCodeDefaultConstructorWorksGeneric_SPI_1610: function () {
            var s1 = Bridge.getDefaultValue(Bridge.ClientTest.Batch4.UserDefinedStructTests.S6G$1(System.Int32));
            var s2 = this.create(Bridge.ClientTest.Batch4.UserDefinedStructTests.S6G$1(System.Int32));
            // #1610
            Bridge.Test.NUnit.Assert.areEqual$1(42, s1.i, "#1");
            Bridge.Test.NUnit.Assert.areEqual$1(42, s2.i, "#2");
        },
        defaultConstructorOfStructWithInlineCodeDefaultConstructorWorks: function () {
            var s1 = { i: 42 };
            Bridge.Test.NUnit.Assert.areEqual(42, s1.i);
        },
        defaultConstructorOfStructWithInlineCodeDefaultConstructorWorksGeneric: function () {
            var s1 = { i: 42 };
            Bridge.Test.NUnit.Assert.areEqual(42, s1.i);
        },
        defaultGetHashCodeGeneratesHashCodeBasedOnAllInstanceFields: function () {
            Bridge.ClientTest.Batch4.UserDefinedStructTests.S3.staticField = 10;
            var s1 = new Bridge.ClientTest.Batch4.UserDefinedStructTests.S3.$ctor1(235, 45);
            var s2 = new Bridge.ClientTest.Batch4.UserDefinedStructTests.S3.$ctor1(235, 45);
            var s3 = new Bridge.ClientTest.Batch4.UserDefinedStructTests.S3.$ctor1(235, 44);
            Bridge.Test.NUnit.Assert.areEqual$1(Bridge.getHashCode(s2), Bridge.getHashCode(s1), "#1");
            Bridge.Test.NUnit.Assert.areNotEqual$1(Bridge.getHashCode(s3), Bridge.getHashCode(s1), "#2");
            var hc = Bridge.getHashCode(s1);
            Bridge.ClientTest.Batch4.UserDefinedStructTests.S3.staticField = 20;
            Bridge.Test.NUnit.Assert.areEqual$1(hc, Bridge.getHashCode(s1), "#3");
        },
        defaultEqualsUsesValueEqualityForAllMembers: function () {
            var s1 = new Bridge.ClientTest.Batch4.UserDefinedStructTests.S3.$ctor1(235, 45);
            var s2 = new Bridge.ClientTest.Batch4.UserDefinedStructTests.S3.$ctor1(235, 45);
            var s3 = new Bridge.ClientTest.Batch4.UserDefinedStructTests.S3.$ctor1(235, 44);
            var s4 = new Bridge.ClientTest.Batch4.UserDefinedStructTests.S4.$ctor1(235, 45);
            Bridge.Test.NUnit.Assert.true$1(Bridge.equals(s1, s2.$clone()), "#1");
            Bridge.Test.NUnit.Assert.false$1(Bridge.equals(s1, s3.$clone()), "#2");
            Bridge.Test.NUnit.Assert.false$1(Bridge.equals(s1, s4), "#3");
        },
        canOverrideGetHashCode: function () {
            var s1 = new Bridge.ClientTest.Batch4.UserDefinedStructTests.S5.$ctor1(42);
            Bridge.Test.NUnit.Assert.areEqual(43, s1.getHashCode());
        },
        canOverrideEquals: function () {
            var s1 = new Bridge.ClientTest.Batch4.UserDefinedStructTests.S5.$ctor1(42);
            var s2 = new Bridge.ClientTest.Batch4.UserDefinedStructTests.S5.$ctor1(43);
            var s3 = new Bridge.ClientTest.Batch4.UserDefinedStructTests.S5.$ctor1(44);
            Bridge.Test.NUnit.Assert.true$1(s1.equals(s2), "#1");
            Bridge.Test.NUnit.Assert.false$1(s1.equals(s3), "#2");
        },
        canLiftUserDefinedBinaryOperator: function () {
            var a = new Bridge.ClientTest.Batch4.UserDefinedStructTests.S7.$ctor1(42), b = new Bridge.ClientTest.Batch4.UserDefinedStructTests.S7.$ctor1(32), c = null;
            Bridge.Test.NUnit.Assert.areEqual$1(74, System.Nullable.getValue((System.Nullable.lift(Bridge.ClientTest.Batch4.UserDefinedStructTests.S7.op_Addition, a, b))).i, "#1");
            Bridge.Test.NUnit.Assert.null$1((System.Nullable.lift(Bridge.ClientTest.Batch4.UserDefinedStructTests.S7.op_Addition, a, c)), "#2");
        },
        canLiftUserDefinedUnaryOperator_SPI_1634: function () {
            var a = new Bridge.ClientTest.Batch4.UserDefinedStructTests.S7.$ctor1(42), b = null;
            Bridge.Test.NUnit.Assert.areEqual$1(-42, ((-System.Nullable.getValue(a).i) | 0), "#1");
            // #1634 #SPI
            Bridge.Test.NUnit.Assert.null$1(System.Nullable.lift(Bridge.ClientTest.Batch4.UserDefinedStructTests.S7.op_UnaryNegation, b), "#2");
        },
        canLiftUserDefinedConversionOperator_SPI_1611: function () {
            var a = new Bridge.ClientTest.Batch4.UserDefinedStructTests.S7.$ctor1(42), b = null;
            var d1 = null;
            Bridge.ClientTest.Batch4.TestHelper.safe(function () {
                d1 = Bridge.ClientTest.Batch4.UserDefinedStructTests.S7.op_Explicit(a);
            });
            Bridge.Test.NUnit.Assert.areEqual$1(42, d1, "#1");
            // #1611
            var d2 = 1;
            Bridge.ClientTest.Batch4.TestHelper.safe(function () {
                d2 = Bridge.ClientTest.Batch4.UserDefinedStructTests.S7.op_Explicit(b);
            });
            Bridge.Test.NUnit.Assert.null$1(d2, "#2");
        },
        clonedValueTypeIsCorrectType: function () {
            var s1 = Bridge.merge(new Bridge.ClientTest.Batch4.UserDefinedStructTests.MS1(), {
                i: 42
            } );
            var s2 = s1.$clone();
            Bridge.Test.NUnit.Assert.true(Bridge.is(s2.$clone(), Bridge.ClientTest.Batch4.UserDefinedStructTests.MS1));
        },
        fieldsAreClonedWhenValueTypeIsCopied: function () {
            var s1 = Bridge.merge(new Bridge.ClientTest.Batch4.UserDefinedStructTests.MS1(), {
                i: 42
            } );
            var s2 = s1.$clone();
            Bridge.Test.NUnit.Assert.areEqual(42, s2.i);
            s2.i = 43;
            Bridge.Test.NUnit.Assert.areEqual(42, s1.i);
            Bridge.Test.NUnit.Assert.areEqual(43, s2.i);
        },
        autoPropertyBackingFieldsAreClonedWhenValueTypeIsCopied: function () {
            var s1 = Bridge.merge(new Bridge.ClientTest.Batch4.UserDefinedStructTests.MS1(), {
                P1: "hello"
            } );
            var s2 = s1.$clone();
            Bridge.Test.NUnit.Assert.areEqual("hello", s2.P1);
            s2.P1 = "world";
            Bridge.Test.NUnit.Assert.areEqual("hello", s1.P1);
            Bridge.Test.NUnit.Assert.areEqual("world", s2.P1);
        },
        propertiesWithFieldImplementationAreClonedWhenValueTypeIsCopied: function () {
            var s1 = Bridge.merge(new Bridge.ClientTest.Batch4.UserDefinedStructTests.MS1(), {
                P2: 42
            } );
            var s2 = s1.$clone();
            Bridge.Test.NUnit.Assert.areEqual(42, s2.P2);
            s2.P2 = 43;
            Bridge.Test.NUnit.Assert.areEqual(42, s1.P2);
            Bridge.Test.NUnit.Assert.areEqual(43, s2.P2);
        },
        autoEventBackingFieldsAreClonedWhenValueTypeIsCopied_SPI_1612: function () {
            var count = 0;
            var a = function () {
                Bridge.identity(count, (count = (count + 1) | 0));
            };
            var s1 = new Bridge.ClientTest.Batch4.UserDefinedStructTests.MS1();
            s1.addE(a);
            var s2 = s1.$clone();
            s2.addE(a);

            s1.raiseE();
            Bridge.Test.NUnit.Assert.areEqual(1, count);

            s2.raiseE();
            // #1612
            Bridge.Test.NUnit.Assert.areEqual(3, count);
        },
        nestedStructsAreClonedWhenValueTypeIsCopied_SPI_1613: function () {
            var s1 = Bridge.merge(new Bridge.ClientTest.Batch4.UserDefinedStructTests.MS1(), {
                n: Bridge.merge(new Bridge.ClientTest.Batch4.UserDefinedStructTests.MS2(), {
                    i: 42
                } )
            } );
            var s2 = s1.$clone();
            Bridge.Test.NUnit.Assert.areEqual(42, s2.n.i);
            s2.n.i = 43;
            // #1613
            Bridge.Test.NUnit.Assert.areEqual(42, s1.n.i);

            Bridge.Test.NUnit.Assert.areEqual(43, s2.n.i);
        },
        genericMutableValueTypeWorks: function () {
            var s1 = Bridge.merge(new (Bridge.ClientTest.Batch4.UserDefinedStructTests.MS3$1(System.Int32))(), {
                t: 42
            } );
            var s2 = s1.$clone();
            Bridge.Test.NUnit.Assert.areEqual(42, s2.t);
            s2.t = 43;
            Bridge.Test.NUnit.Assert.true(Bridge.is(s2.$clone(), Bridge.ClientTest.Batch4.UserDefinedStructTests.MS3$1(System.Int32)));
            Bridge.Test.NUnit.Assert.areEqual(42, s1.t);
            Bridge.Test.NUnit.Assert.areEqual(43, s2.t);
        },
        cloningValueTypeWithNamedDefaultConstructorWorks: function () {
            var s1 = Bridge.merge(new Bridge.ClientTest.Batch4.UserDefinedStructTests.MS1(), {
                i: 42
            } );
            var s2 = s1.$clone();
            s1.i = 10;
            Bridge.Test.NUnit.Assert.areEqual(42, s2.i);
            Bridge.Test.NUnit.Assert.true(Bridge.is(s2.$clone(), Bridge.ClientTest.Batch4.UserDefinedStructTests.MS1));
        },
        cloningNullableValueTypesWorks: function () {
            var s1 = null;
            var s2 = Bridge.merge(new Bridge.ClientTest.Batch4.UserDefinedStructTests.MS1(), {
                i: 42
            } );
            var s3 = System.Nullable.lift1("$clone", s1);
            var s4 = System.Nullable.lift1("$clone", s2);

            Bridge.Test.NUnit.Assert.null$1(System.Nullable.lift1("$clone", s3), "s3 should be null");
            Bridge.Test.NUnit.Assert.areEqual$1(42, System.Nullable.getValue(s4).i, "s4.i should be 42");
            Bridge.Test.NUnit.Assert.false$1(Bridge.referenceEquals(System.Nullable.lift1("$clone", s2), System.Nullable.lift1("$clone", s4)), "s2 and s4 should not be the same object");
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.UserDefinedStructTests.MS1", {
        $kind: "struct",
        statics: {
            getDefaultValue: function () { return new Bridge.ClientTest.Batch4.UserDefinedStructTests.MS1(); }
        },
        i: 0,
        config: {
            events: {
                E: null
            },
            properties: {
                P1: null,
                P2: 0
            },
            init: function () {
                this.n = new Bridge.ClientTest.Batch4.UserDefinedStructTests.MS2();
            }
        },
        ctor: function () {
            this.$initialize();
        },
        raiseE: function () {
            this.E();
        },
        getHashCode: function () {
            var h = Bridge.addHash([3232589, this.i, this.n, this.P1, this.P2]);
            return h;
        },
        equals: function (o) {
            if (!Bridge.is(o, Bridge.ClientTest.Batch4.UserDefinedStructTests.MS1)) {
                return false;
            }
            return Bridge.equals(this.i, o.i) && Bridge.equals(this.n, o.n) && Bridge.equals(this.P1, o.P1) && Bridge.equals(this.P2, o.P2);
        },
        $clone: function (to) {
            var s = to || new Bridge.ClientTest.Batch4.UserDefinedStructTests.MS1();
            s.i = this.i;
            s.n = this.n.$clone();
            s.P1 = this.P1;
            s.P2 = this.P2;
            return s;
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.UserDefinedStructTests.MS2", {
        $kind: "struct",
        statics: {
            getDefaultValue: function () { return new Bridge.ClientTest.Batch4.UserDefinedStructTests.MS2(); }
        },
        i: 0,
        ctor: function () {
            this.$initialize();
        },
        getHashCode: function () {
            var h = Bridge.addHash([3298125, this.i]);
            return h;
        },
        equals: function (o) {
            if (!Bridge.is(o, Bridge.ClientTest.Batch4.UserDefinedStructTests.MS2)) {
                return false;
            }
            return Bridge.equals(this.i, o.i);
        },
        $clone: function (to) {
            var s = to || new Bridge.ClientTest.Batch4.UserDefinedStructTests.MS2();
            s.i = this.i;
            return s;
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.UserDefinedStructTests.MS3$1", function (T) { return {
        $kind: "struct",
        statics: {
            getDefaultValue: function () { return new (Bridge.ClientTest.Batch4.UserDefinedStructTests.MS3$1(T))(); }
        },
        t: Bridge.getDefaultValue(T),
        ctor: function () {
            this.$initialize();
        },
        getHashCode: function () {
            var h = Bridge.addHash([3363661, this.t]);
            return h;
        },
        equals: function (o) {
            if (!Bridge.is(o, Bridge.ClientTest.Batch4.UserDefinedStructTests.MS3$1(T))) {
                return false;
            }
            return Bridge.equals(this.t, o.t);
        },
        $clone: function (to) {
            var s = to || new (Bridge.ClientTest.Batch4.UserDefinedStructTests.MS3$1(T))();
            s.t = this.t;
            return s;
        }
    }; });

    Bridge.define("Bridge.ClientTest.Batch4.UserDefinedStructTests.MS4", {
        $kind: "struct",
        statics: {
            getDefaultValue: function () { return new Bridge.ClientTest.Batch4.UserDefinedStructTests.MS4(); }
        },
        i: 0,
        $ctor1: function (_) {
            Bridge.ClientTest.Batch4.UserDefinedStructTests.MS4.ctor.call(this);
        },
        ctor: function () {
            this.$initialize();
        },
        getHashCode: function () {
            var h = Bridge.addHash([3429197, this.i]);
            return h;
        },
        equals: function (o) {
            if (!Bridge.is(o, Bridge.ClientTest.Batch4.UserDefinedStructTests.MS4)) {
                return false;
            }
            return Bridge.equals(this.i, o.i);
        },
        $clone: function (to) {
            var s = to || new Bridge.ClientTest.Batch4.UserDefinedStructTests.MS4();
            s.i = this.i;
            return s;
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.UserDefinedStructTests.S1", {
        $kind: "struct",
        statics: {
            getDefaultValue: function () { return new Bridge.ClientTest.Batch4.UserDefinedStructTests.S1(); }
        },
        i: 0,
        $ctor1: function (i) {
            this.$initialize();
            this.i = i;
        },
        ctor: function () {
            this.$initialize();
        },
        getHashCode: function () {
            var h = Bridge.addHash([12627, this.i]);
            return h;
        },
        equals: function (o) {
            if (!Bridge.is(o, Bridge.ClientTest.Batch4.UserDefinedStructTests.S1)) {
                return false;
            }
            return Bridge.equals(this.i, o.i);
        },
        $clone: function (to) {
            var s = to || new Bridge.ClientTest.Batch4.UserDefinedStructTests.S1();
            s.i = this.i;
            return s;
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.UserDefinedStructTests.S2", {
        $kind: "struct",
        statics: {
            getDefaultValue: function () { return new Bridge.ClientTest.Batch4.UserDefinedStructTests.S2(); }
        },
        i: 0,
        d: 0,
        o: null,
        t: 0,
        config: {
            init: function () {
                this.DT = System.DateTime.getDefaultValue();
            }
        },
        ctor: function () {
            this.$initialize();
        },
        getHashCode: function () {
            var h = Bridge.addHash([12883, this.i, this.d, this.DT, this.o, this.t]);
            return h;
        },
        equals: function (o) {
            if (!Bridge.is(o, Bridge.ClientTest.Batch4.UserDefinedStructTests.S2)) {
                return false;
            }
            return Bridge.equals(this.i, o.i) && Bridge.equals(this.d, o.d) && Bridge.equals(this.DT, o.DT) && Bridge.equals(this.o, o.o) && Bridge.equals(this.t, o.t);
        },
        $clone: function (to) {
            var s = to || new Bridge.ClientTest.Batch4.UserDefinedStructTests.S2();
            s.i = this.i;
            s.d = this.d;
            s.DT = this.DT;
            s.o = this.o;
            s.t = this.t;
            return s;
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.UserDefinedStructTests.S2G$1", function (TT) { return {
        $kind: "struct",
        statics: {
            getDefaultValue: function () { return new (Bridge.ClientTest.Batch4.UserDefinedStructTests.S2G$1(TT))(); }
        },
        i: 0,
        d: 0,
        o: null,
        t: Bridge.getDefaultValue(TT),
        config: {
            init: function () {
                this.DT = System.DateTime.getDefaultValue();
            }
        },
        ctor: function () {
            this.$initialize();
        },
        getHashCode: function () {
            var h = Bridge.addHash([4665939, this.i, this.d, this.DT, this.o, this.t]);
            return h;
        },
        equals: function (o) {
            if (!Bridge.is(o, Bridge.ClientTest.Batch4.UserDefinedStructTests.S2G$1(TT))) {
                return false;
            }
            return Bridge.equals(this.i, o.i) && Bridge.equals(this.d, o.d) && Bridge.equals(this.DT, o.DT) && Bridge.equals(this.o, o.o) && Bridge.equals(this.t, o.t);
        },
        $clone: function (to) {
            var s = to || new (Bridge.ClientTest.Batch4.UserDefinedStructTests.S2G$1(TT))();
            s.i = this.i;
            s.d = this.d;
            s.DT = this.DT;
            s.o = this.o;
            s.t = this.t;
            return s;
        }
    }; });

    Bridge.define("Bridge.ClientTest.Batch4.UserDefinedStructTests.S3", {
        $kind: "struct",
        statics: {
            staticField: 0,
            getDefaultValue: function () { return new Bridge.ClientTest.Batch4.UserDefinedStructTests.S3(); }
        },
        I1: 0,
        I2: 0,
        $ctor1: function (i1, i2) {
            this.$initialize();
            this.I1 = i1;
            this.I2 = i2;
        },
        ctor: function () {
            this.$initialize();
        },
        getHashCode: function () {
            var h = Bridge.addHash([13139, this.I1, this.I2]);
            return h;
        },
        equals: function (o) {
            if (!Bridge.is(o, Bridge.ClientTest.Batch4.UserDefinedStructTests.S3)) {
                return false;
            }
            return Bridge.equals(this.I1, o.I1) && Bridge.equals(this.I2, o.I2);
        },
        $clone: function (to) {
            var s = to || new Bridge.ClientTest.Batch4.UserDefinedStructTests.S3();
            s.I1 = this.I1;
            s.I2 = this.I2;
            return s;
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.UserDefinedStructTests.S4", {
        $kind: "struct",
        statics: {
            getDefaultValue: function () { return new Bridge.ClientTest.Batch4.UserDefinedStructTests.S4(); }
        },
        I1: 0,
        I2: 0,
        $ctor1: function (i1, i2) {
            this.$initialize();
            this.I1 = i1;
            this.I2 = i2;
        },
        ctor: function () {
            this.$initialize();
        },
        getHashCode: function () {
            var h = Bridge.addHash([13395, this.I1, this.I2]);
            return h;
        },
        equals: function (o) {
            if (!Bridge.is(o, Bridge.ClientTest.Batch4.UserDefinedStructTests.S4)) {
                return false;
            }
            return Bridge.equals(this.I1, o.I1) && Bridge.equals(this.I2, o.I2);
        },
        $clone: function (to) {
            var s = to || new Bridge.ClientTest.Batch4.UserDefinedStructTests.S4();
            s.I1 = this.I1;
            s.I2 = this.I2;
            return s;
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.UserDefinedStructTests.S5", {
        $kind: "struct",
        statics: {
            getDefaultValue: function () { return new Bridge.ClientTest.Batch4.UserDefinedStructTests.S5(); }
        },
        i: 0,
        $ctor1: function (i) {
            this.$initialize();
            this.i = i;
        },
        ctor: function () {
            this.$initialize();
        },
        getHashCode: function () {
            return ((this.i + 1) | 0);
        },
        equals: function (o) {
            return Math.abs(((System.Nullable.getValue(Bridge.cast(Bridge.unbox(o), Bridge.ClientTest.Batch4.UserDefinedStructTests.S5)).i - this.i) | 0)) <= 1;
        },
        $clone: function (to) {
            var s = to || new Bridge.ClientTest.Batch4.UserDefinedStructTests.S5();
            s.i = this.i;
            return s;
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.UserDefinedStructTests.S6", {
        $kind: "struct",
        statics: {
            getDefaultValue: function () { return new Bridge.ClientTest.Batch4.UserDefinedStructTests.S6(); }
        },
        i: 0,
        ctor: function () {
            this.$initialize();
        },
        getHashCode: function () {
            var h = Bridge.addHash([13907, this.i]);
            return h;
        },
        equals: function (o) {
            if (!Bridge.is(o, Bridge.ClientTest.Batch4.UserDefinedStructTests.S6)) {
                return false;
            }
            return Bridge.equals(this.i, o.i);
        },
        $clone: function (to) {
            var s = to || new Bridge.ClientTest.Batch4.UserDefinedStructTests.S6();
            s.i = this.i;
            return s;
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.UserDefinedStructTests.S6G$1", function (TT) { return {
        $kind: "struct",
        statics: {
            getDefaultValue: function () { return new (Bridge.ClientTest.Batch4.UserDefinedStructTests.S6G$1(TT))(); }
        },
        i: Bridge.getDefaultValue(TT),
        ctor: function () {
            this.$initialize();
        },
        getHashCode: function () {
            var h = Bridge.addHash([4666963, this.i]);
            return h;
        },
        equals: function (o) {
            if (!Bridge.is(o, Bridge.ClientTest.Batch4.UserDefinedStructTests.S6G$1(TT))) {
                return false;
            }
            return Bridge.equals(this.i, o.i);
        },
        $clone: function (to) {
            var s = to || new (Bridge.ClientTest.Batch4.UserDefinedStructTests.S6G$1(TT))();
            s.i = this.i;
            return s;
        }
    }; });

    Bridge.define("Bridge.ClientTest.Batch4.UserDefinedStructTests.S7", {
        $kind: "struct",
        statics: {
            op_Addition: function (a, b) {
                return new Bridge.ClientTest.Batch4.UserDefinedStructTests.S7.$ctor1(((a.i + b.i) | 0));
            },
            op_UnaryNegation: function (s) {
                return new Bridge.ClientTest.Batch4.UserDefinedStructTests.S7.$ctor1(((-s.i) | 0));
            },
            op_Explicit: function (s) {
                return s.i;
            },
            getDefaultValue: function () { return new Bridge.ClientTest.Batch4.UserDefinedStructTests.S7(); }
        },
        i: 0,
        $ctor1: function (i) {
            this.$initialize();
            this.i = i;
        },
        ctor: function () {
            this.$initialize();
        },
        getHashCode: function () {
            var h = Bridge.addHash([14163, this.i]);
            return h;
        },
        equals: function (o) {
            if (!Bridge.is(o, Bridge.ClientTest.Batch4.UserDefinedStructTests.S7)) {
                return false;
            }
            return Bridge.equals(this.i, o.i);
        },
        $clone: function (to) {
            var s = to || new Bridge.ClientTest.Batch4.UserDefinedStructTests.S7();
            s.i = this.i;
            return s;
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.ExceptionTests.E2", {
        inherits: [Bridge.ClientTest.Batch4.ExceptionTests.E1],
        ctor: function (message) {
            this.$initialize();
            Bridge.ClientTest.Batch4.ExceptionTests.E1.ctor.call(this, message);
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.PropertyAccessorTests.D3", {
        inherits: [Bridge.ClientTest.Batch4.PropertyAccessorTests.B3],
        config: {
            properties: {
                P1: {
                    get: function () {
                        return ((Bridge.ensureBaseProperty(this, "P1").$Bridge$ClientTest$Batch4$PropertyAccessorTests$B3$P1 + 1) | 0);
                    },
                    set: function (value) {
                        Bridge.ensureBaseProperty(this, "P1").$Bridge$ClientTest$Batch4$PropertyAccessorTests$B3$P1 = (value - 1) | 0;
                    }
                },
                P2: {
                    get: function () {
                        return ((Bridge.ensureBaseProperty(this, "P2").$Bridge$ClientTest$Batch4$PropertyAccessorTests$B3$P2 + 1) | 0);
                    }
                },
                P3: {
                    set: function (value) {
                        Bridge.ensureBaseProperty(this, "P3").$Bridge$ClientTest$Batch4$PropertyAccessorTests$B3$P3 = (value - 1) | 0;
                    }
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.PropertyAccessorTests.D4$1", function (T) { return {
        inherits: [Bridge.ClientTest.Batch4.PropertyAccessorTests.B4$1(T)],
        config: {
            properties: {
                P1: {
                    get: function () {
                        return Bridge.ensureBaseProperty(this, "P1")["$Bridge$ClientTest$Batch4$PropertyAccessorTests$B4$1$" + Bridge.getTypeAlias(T)+"$P1"] + 1;
                    },
                    set: function (value) {
                        Bridge.ensureBaseProperty(this, "P1")["$Bridge$ClientTest$Batch4$PropertyAccessorTests$B4$1$" + Bridge.getTypeAlias(T)+"$P1"] = value - 1;
                    }
                },
                P2: {
                    get: function () {
                        return Bridge.ensureBaseProperty(this, "P2")["$Bridge$ClientTest$Batch4$PropertyAccessorTests$B4$1$" + Bridge.getTypeAlias(T)+"$P2"] + 1;
                    }
                },
                P3: {
                    set: function (value) {
                        Bridge.ensureBaseProperty(this, "P3")["$Bridge$ClientTest$Batch4$PropertyAccessorTests$B4$1$" + Bridge.getTypeAlias(T)+"$P3"] = value - 1;
                    }
                }
            }
        }
    }; });

    Bridge.define("Bridge.ClientTest.Batch4.Reflection.AttributeTests.C3", {
        inherits: [Bridge.ClientTest.Batch4.Reflection.AttributeTests.C2]
    });

    Bridge.define("Bridge.ClientTest.Batch4.Reflection.AttributeTests.C5", {
        inherits: [Bridge.ClientTest.Batch4.Reflection.AttributeTests.C2]
    });

    Bridge.define("Bridge.ClientTest.Batch4.Reflection.AttributeTests.C6", {
        inherits: [Bridge.ClientTest.Batch4.Reflection.AttributeTests.C2]
    });

    Bridge.define("Bridge.ClientTest.Batch4.Reflection.AttributeTests.C8", {
        inherits: [Bridge.ClientTest.Batch4.Reflection.AttributeTests.C7]
    });

    Bridge.define("Bridge.ClientTest.Batch4.Reflection.GetMembersTests.C1", {
        inherits: [Bridge.ClientTest.Batch4.Reflection.GetMembersTests.B1],
        statics: {
            FCS1: 0,
            FCS2: 0,
            config: {
                properties: {
                    PCS1: 0,
                    PCS2: 0
                }
            },
            addECS1: function (value) {
            },
            removeECS1: function (value) {
            },
            addECS2: function (value) {
            },
            removeECS2: function (value) {
            },
            MCS: function () {
            },
            MCS$1: function (x) {
            },
            MCS$2: function (x, y) {
            },
            MCS2: function (x, y) {
            }
        },
        FC1: 0,
        FC2: 0,
        config: {
            properties: {
                PC1: 0,
                PC2: 0
            }
        },
        ctor: function () {
            this.$initialize();
            Bridge.ClientTest.Batch4.Reflection.GetMembersTests.B1.ctor.call(this);
        },
        $ctor1: function (x) {
            this.$initialize();
            Bridge.ClientTest.Batch4.Reflection.GetMembersTests.B1.ctor.call(this);
        },
        $ctor2: function (x, y) {
            this.$initialize();
            Bridge.ClientTest.Batch4.Reflection.GetMembersTests.B1.ctor.call(this);
        },
        getItem$1: function (x) {
            return 0;
        },
        setItem$1: function (x, value) {
        },
        addEC1: function (value) {
        },
        removeEC1: function (value) {
        },
        addEC2: function (value) {
        },
        removeEC2: function (value) {
        },
        MC: function () {
        },
        MC$1: function (x) {
        },
        MC$2: function (x, y) {
        },
        MC2: function (x, y) {
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.Reflection.GetMembersTests.C2", {
        inherits: [Bridge.ClientTest.Batch4.Reflection.GetMembersTests.B2],
        statics: {
            FS: 0,
            FCS: 0,
            config: {
                events: {
                    ES: null,
                    ECS: null
                },
                properties: {
                    PS: 0,
                    PCS: 0
                }
            },
            MS: function () {
            },
            MCS: function () {
            },
            M2S: function (x) {
            },
            M2S$1: function (x) {
            },
            M2CS: function (x) {
            },
            M2CS$1: function (x) {
            },
            M3S: function (x) {
            }
        },
        f$1: 0,
        FC: 0,
        config: {
            events: {
                E$1: null,
                EC: null
            },
            properties: {
                P$1: 0,
                PC: 0
            }
        },
        getItem$2: function (x) {
            return 0;
        },
        setItem$2: function (x, value) {
        },
        getItem$3: function (x) {
            return 0;
        },
        setItem$3: function (x, value) {
        },
        m$1: function () {
        },
        MC: function () {
        },
        M2$2: function (x) {
        },
        M2$3: function (x) {
        },
        M2C: function (x) {
        },
        M2C$1: function (x) {
        },
        M3$1: function (x) {
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.Reflection.GetMembersTests.I2", {
        inherits: [Bridge.ClientTest.Batch4.Reflection.GetMembersTests.I1],
        $kind: "interface"
    });

    Bridge.define("Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.C10$1", function (T) { return {

    }; });

    Bridge.define("Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.D1", {
        inherits: [Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.C1,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I1]
    });

    Bridge.define("Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.D2$1", function (T) { return {
        inherits: [Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.C2$1(T),Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I2$1(T),Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I1]
    }; });

    Bridge.define("Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.D3", {
        inherits: [Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.C2$1(System.Int32),Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I2$1(System.String)]
    });

    Bridge.define("Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I3", {
        inherits: [Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I1],
        $kind: "interface"
    });

    Bridge.define("Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.DS", {
        inherits: [Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.BS],
        ctor: function () {
            this.$initialize();
            Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.BS.ctor.call(this, 0);
        }
    });

    Bridge.definei("Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I8$2", function (T1, T2) { return {
        inherits: [Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I6$1(T1),Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I7$1(T2)],
        $kind: "interface",
        $variance: [1,2]
    }; });

    Bridge.definei("Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I5$1", function (T1) { return {
        inherits: [Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I2$1(T1)],
        $kind: "interface"
    }; });

    Bridge.define("Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1", {
        inherits: [Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I1]
    });

    Bridge.define("Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y1$1", function (T) { return {
        inherits: [Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I6$1(T)]
    }; });

    Bridge.define("Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y2$1", function (T) { return {
        inherits: [Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I7$1(T)]
    }; });

    Bridge.define("Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y4$2", function (T1, T2) { return {
        inherits: [Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I9$2(T1,T2)]
    }; });

    Bridge.define("Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.I2", {
        inherits: [Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.I1],
        $kind: "interface"
    });

    Bridge.define("Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.BaseMethodInvocationTypes.D", {
        inherits: [Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.BaseMethodInvocationTypes.B],
        f: function (x, y) {
            return ((x + y) | 0);
        },
        g: function (T, x, y) {
            return ((x + y) | 0);
        },
        doIt: function (x, y) {
            return Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.BaseMethodInvocationTypes.B.prototype.f.call(this, x, y);
        },
        doItGeneric: function (x, y) {
            return Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.BaseMethodInvocationTypes.B.prototype.g.call(this, System.String, x, y);
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.BaseNamedConstructorWithArgumentsTypes.D", {
        inherits: [Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.BaseNamedConstructorWithArgumentsTypes.B],
        messageD: null,
        ctor: function (x, y) {
            this.$initialize();
            Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.BaseNamedConstructorWithArgumentsTypes.B.ctor.call(this, ((x + 1) | 0), ((y + 1) | 0));
            this.messageD = x + " " + y;
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.BaseNamedConstructorWithoutArgumentsTypes.D", {
        inherits: [Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.BaseNamedConstructorWithoutArgumentsTypes.B],
        messageD: null,
        ctor: function () {
            this.$initialize();
            Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.BaseNamedConstructorWithoutArgumentsTypes.B.ctor.call(this);
            this.messageD = "Y";
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.BaseUnnamedConstructorWithArgumentsTypes.D", {
        inherits: [Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.BaseUnnamedConstructorWithArgumentsTypes.B],
        messageD: null,
        ctor: function (x, y) {
            this.$initialize();
            Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.BaseUnnamedConstructorWithArgumentsTypes.B.ctor.call(this, ((x + 1) | 0), ((y + 1) | 0));
            this.messageD = x + " " + y;
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.BaseUnnamedConstructorWithoutArgumentsTypes.D", {
        inherits: [Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.BaseUnnamedConstructorWithoutArgumentsTypes.B],
        messageD: null,
        ctor: function () {
            this.$initialize();
            Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.BaseUnnamedConstructorWithoutArgumentsTypes.B.ctor.call(this);
            this.messageD = "Y";
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.I4", {
        inherits: [Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.I3],
        $kind: "interface"
    });

    Bridge.define("Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.ConstructingInstanceWithNamedConstructorTypes.E", {
        inherits: [Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.ConstructingInstanceWithNamedConstructorTypes.D],
        g: null,
        ctor: function () {
            this.$initialize();
            Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.ConstructingInstanceWithNamedConstructorTypes.D.ctor.call(this);
            this.g = " and derived ctor";
        },
        getMessage: function () {
            return System.String.concat(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.ConstructingInstanceWithNamedConstructorTypes.D.prototype.getMessage.call(this), this.g);
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.DS", {
        inherits: [Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.BS],
        ctor: function (x) {
            this.$initialize();
            Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.BS.ctor.call(this, x);
        },
        getX: function () {
            return this.X;
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.DS2", {
        inherits: [Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.BS],
        ctor: function () {
            this.$initialize();
            Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.BS.ctor.call(this, 0);
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.G$2", function (T1, T2) { return {
        inherits: function () { return [Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.BX$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.G$2(T1,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.C)),Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IG$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.G$2(T2,System.String))]; },
        statics: {
            ctor: function () {
                Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.G$2(T1,T2).field = System.String.concat(Bridge.Reflection.getTypeFullName(T1), " ", Bridge.Reflection.getTypeFullName(T2));
            },
            field: null
        }
    }; });

    Bridge.define("Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.D1", {
        inherits: [Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.C1,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I1]
    });

    Bridge.define("Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.D2$1", function (T) { return {
        inherits: [Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.C2$1(T),Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I2$1(T),Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I1]
    }; });

    Bridge.define("Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.D3", {
        inherits: [Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.C2$1(System.Int32),Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I2$1(System.String)]
    });

    Bridge.define("Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I3", {
        inherits: [Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I1],
        $kind: "interface"
    });

    Bridge.definei("Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2", function (T1, T2) { return {
        inherits: [Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I6$1(T1),Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I7$1(T2)],
        $kind: "interface",
        $variance: [1,2]
    }; });

    Bridge.definei("Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I5$1", function (T1) { return {
        inherits: [Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I2$1(T1)],
        $kind: "interface"
    }; });

    Bridge.define("Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1", {
        inherits: [Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I1]
    });

    Bridge.define("Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y1$1", function (T) { return {
        inherits: [Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I6$1(T)]
    }; });

    Bridge.define("Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y2$1", function (T) { return {
        inherits: [Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I7$1(T)]
    }; });

    Bridge.define("Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y4$2", function (T1, T2) { return {
        inherits: [Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I9$2(T1,T2)]
    }; });

    Bridge.define("Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsSubclassOfTypes.D1", {
        inherits: [Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsSubclassOfTypes.C1]
    });

    Bridge.define("Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsSubclassOfTypes.D2$1", function (T) { return {
        inherits: [Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsSubclassOfTypes.C2$1(T)]
    }; });

    Bridge.define("Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsSubclassOfTypes.D3", {
        inherits: [Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsSubclassOfTypes.C2$1(System.Int32)]
    });

    Bridge.define("Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.MethodGroupConversionTypes.D", {
        inherits: [Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.MethodGroupConversionTypes.B],
        ctor: function (m) {
            this.$initialize();
            Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.MethodGroupConversionTypes.B.ctor.call(this, m);
        },
        f: function (x, y) {
            return ((((x - y) | 0) - this.m) | 0);
        },
        g: function (T, x, y) {
            return System.String.concat(((((x - y) | 0) - this.m) | 0), Bridge.Reflection.getTypeName(T));
        },
        getF: function () {
            return Bridge.fn.cacheBind(this, Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.MethodGroupConversionTypes.B.prototype.f);
        },
        getG: function () {
            return Bridge.fn.bind(this, function (x, y) { return this.g(System.String, x, y); });
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.SimpleTypes.ObjectTests.C2", {
        inherits: [Bridge.ClientTest.Batch4.SimpleTypes.ObjectTests.C1]
    });

    Bridge.define("Bridge.ClientTest.Batch4.Reflection.AttributeTests.C4", {
        inherits: [Bridge.ClientTest.Batch4.Reflection.AttributeTests.C3]
    });

    Bridge.define("Bridge.ClientTest.Batch4.Reflection.GetMembersTests.D1", {
        inherits: [Bridge.ClientTest.Batch4.Reflection.GetMembersTests.C1,Bridge.ClientTest.Batch4.Reflection.GetMembersTests.I1],
        statics: {
            FDS1: 0,
            FDS2: 0,
            config: {
                properties: {
                    PDS1: 0,
                    PDS2: 0
                }
            },
            addEDS1: function (value) {
            },
            removeEDS1: function (value) {
            },
            addEDS2: function (value) {
            },
            removeEDS2: function (value) {
            },
            MDS: function () {
            },
            MDS$1: function (x) {
            },
            MDS$2: function (x, y) {
            },
            MDS2: function (x, y) {
            }
        },
        FD1: 0,
        FD2: 0,
        config: {
            properties: {
                PD1: 0,
                PD2: 0,
                Bridge$ClientTest$Batch4$Reflection$GetMembersTests$I1$PI11: {
                    get: function () {
                        throw new System.NotImplementedException();
                    },
                    set: function (value) {
                        throw new System.NotImplementedException();
                    }
                },
                Bridge$ClientTest$Batch4$Reflection$GetMembersTests$I1$PI12: {
                    get: function () {
                        throw new System.NotImplementedException();
                    },
                    set: function (value) {
                        throw new System.NotImplementedException();
                    }
                }
            }
        },
        ctor: function () {
            this.$initialize();
            Bridge.ClientTest.Batch4.Reflection.GetMembersTests.C1.ctor.call(this);
        },
        $ctor1: function (x) {
            this.$initialize();
            Bridge.ClientTest.Batch4.Reflection.GetMembersTests.C1.ctor.call(this);
        },
        $ctor2: function (x, y) {
            this.$initialize();
            Bridge.ClientTest.Batch4.Reflection.GetMembersTests.C1.ctor.call(this);
        },
        getItem$2: function (x) {
            return 0;
        },
        setItem$2: function (x, value) {
        },
        get_i1item: function (x) {
            return 0;
        },
        set_i1item: function (x, value) {
        },
        addED1: function (value) {
        },
        removeED1: function (value) {
        },
        addED2: function (value) {
        },
        removeED2: function (value) {
        },
        Bridge$ClientTest$Batch4$Reflection$GetMembersTests$I1$addEI11: function (value) {
            throw new System.NotImplementedException();
        },
        Bridge$ClientTest$Batch4$Reflection$GetMembersTests$I1$removeEI11: function (value) {
            throw new System.NotImplementedException();
        },
        Bridge$ClientTest$Batch4$Reflection$GetMembersTests$I1$addEI12: function (value) {
            throw new System.NotImplementedException();
        },
        Bridge$ClientTest$Batch4$Reflection$GetMembersTests$I1$removeEI12: function (value) {
            throw new System.NotImplementedException();
        },
        MD: function () {
        },
        MD$1: function (x) {
        },
        MD$2: function (x, y) {
        },
        MD2: function (x, y) {
        },
        Bridge$ClientTest$Batch4$Reflection$GetMembersTests$I1$MI1: function () {
            throw new System.NotImplementedException();
        },
        Bridge$ClientTest$Batch4$Reflection$GetMembersTests$I1$MI1$1: function (x) {
            throw new System.NotImplementedException();
        },
        Bridge$ClientTest$Batch4$Reflection$GetMembersTests$I1$MI1$2: function (x, y) {
            throw new System.NotImplementedException();
        },
        Bridge$ClientTest$Batch4$Reflection$GetMembersTests$I1$MI12: function (x, y) {
            throw new System.NotImplementedException();
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.Reflection.GetMembersTests.D2", {
        inherits: [Bridge.ClientTest.Batch4.Reflection.GetMembersTests.C2],
        statics: {
            FS: 0,
            FDS: 0,
            config: {
                events: {
                    ES: null,
                    EDS: null
                },
                properties: {
                    PS: 0,
                    PDS: 0
                }
            },
            MS: function () {
            },
            MDS: function () {
            },
            M2S: function (x) {
            },
            M2S$1: function (x) {
            },
            M2DS: function (x) {
            },
            M2DS$1: function (x) {
            },
            M3S: function (x) {
            }
        },
        f$2: 0,
        FD: 0,
        config: {
            events: {
                E$2: null,
                ED: null
            },
            properties: {
                P$2: 0,
                PD: 0
            }
        },
        getItem$4: function (x) {
            return 0;
        },
        setItem$4: function (x, value) {
        },
        getItem$5: function (x) {
            return 0;
        },
        setItem$5: function (x, value) {
        },
        m$2: function () {
        },
        MD: function () {
        },
        M2$4: function (x) {
        },
        M2$5: function (x) {
        },
        M2D: function (x) {
        },
        M2D$1: function (x) {
        },
        M3$2: function (x) {
        }
    });

    Bridge.define("Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.C11$1", function (T) { return {
        inherits: [Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.C10$1(T)]
    }; });

    Bridge.define("Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.D4", {
        inherits: [Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I3,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I4]
    });

    Bridge.definei("Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I10$2", function (T1, T2) { return {
        inherits: [Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I8$2(T1,T2)],
        $kind: "interface",
        $variance: [1,2]
    }; });

    Bridge.define("Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2", {
        inherits: [Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1]
    });

    Bridge.define("Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y1X1", {
        inherits: [Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y1$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1)]
    });

    Bridge.define("Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y1X2", {
        inherits: [Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y1$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2)]
    });

    Bridge.define("Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y2X1", {
        inherits: [Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y2$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1)]
    });

    Bridge.define("Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y2X2", {
        inherits: [Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y2$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2)]
    });

    Bridge.define("Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y3$2", function (T1, T2) { return {
        inherits: [Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I8$2(T1,T2)]
    }; });

    Bridge.define("Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y5$2", function (T1, T2) { return {
        inherits: [Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I8$2(T1,T2))]
    }; });

    Bridge.define("Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y6$2", function (T1, T2) { return {
        inherits: [Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.I8$2(T1,T2))]
    }; });

    Bridge.define("Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.B", {
        inherits: [Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.I2]
    });

    Bridge.define("Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.D4", {
        inherits: [Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I3,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I4]
    });

    Bridge.definei("Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I10$2", function (T1, T2) { return {
        inherits: [Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(T1,T2)],
        $kind: "interface",
        $variance: [1,2]
    }; });

    Bridge.define("Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2", {
        inherits: [Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1]
    });

    Bridge.define("Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y1X1", {
        inherits: [Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y1$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)]
    });

    Bridge.define("Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y1X2", {
        inherits: [Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y1$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)]
    });

    Bridge.define("Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y2X1", {
        inherits: [Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y2$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)]
    });

    Bridge.define("Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y2X2", {
        inherits: [Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y2$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)]
    });

    Bridge.define("Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y3$2", function (T1, T2) { return {
        inherits: [Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(T1,T2)]
    }; });

    Bridge.define("Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y5$2", function (T1, T2) { return {
        inherits: [Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I6$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(T1,T2))]
    }; });

    Bridge.define("Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y6$2", function (T1, T2) { return {
        inherits: [Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I7$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(T1,T2))]
    }; });

    Bridge.define("Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.C12", {
        inherits: [Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.C11$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.K)]
    });

    Bridge.define("Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y3X1X1", {
        inherits: [Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y3$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1)]
    });

    Bridge.define("Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y3X1X2", {
        inherits: [Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y3$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2)]
    });

    Bridge.define("Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y3X2X1", {
        inherits: [Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y3$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X1)]
    });

    Bridge.define("Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y3X2X2", {
        inherits: [Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.Y3$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.X2)]
    });

    Bridge.define("Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.C", {
        inherits: [Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.B,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.I4]
    });

    Bridge.define("Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y3X1X1", {
        inherits: [Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y3$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)]
    });

    Bridge.define("Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y3X1X2", {
        inherits: [Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y3$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)]
    });

    Bridge.define("Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y3X2X1", {
        inherits: [Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y3$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)]
    });

    Bridge.define("Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y3X2X2", {
        inherits: [Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.Y3$2(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)]
    });

    var $box_ = {};

    Bridge.ns("System.Nullable$1", $box_);

    Bridge.apply($box_.System.Nullable$1, {
        toString: function(obj) {return System.Nullable.toString(obj);}
    });


    Bridge.ns("System.Double", $box_);

    Bridge.apply($box_.System.Double, {
        toString: function(obj) {return System.Double.format(obj, 'G');}
    });


    Bridge.ns("Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.E2", $box_);

    Bridge.apply($box_.Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.E2, {
        toString: function(obj) {return System.Enum.toString(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.E2, obj);}
    });


    Bridge.ns("Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.E1", $box_);

    Bridge.apply($box_.Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.E1, {
        toString: function(obj) {return System.Enum.toString(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests.E1, obj);}
    });


    Bridge.ns("Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.E2", $box_);

    Bridge.apply($box_.Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.E2, {
        toString: function(obj) {return System.Enum.toString(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.E2, obj);}
    });


    Bridge.ns("Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.E1", $box_);

    Bridge.apply($box_.Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.E1, {
        toString: function(obj) {return System.Enum.toString(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.E1, obj);}
    });


    Bridge.ns("System.Boolean", $box_);

    Bridge.apply($box_.System.Boolean, {
        toString: function(obj) {return System.Boolean.toString(obj);}
    });


    Bridge.ns("Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.NamedValuesEnum", $box_);

    Bridge.apply($box_.Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.NamedValuesEnum, {
        toString: function(obj) {return System.Enum.toString(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.NamedValuesEnum, obj);}
    });


    Bridge.ns("Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.ImportedNamedValuesEnum", $box_);

    Bridge.apply($box_.Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.ImportedNamedValuesEnum, {
        toString: function(obj) {return System.Enum.toString(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests.ImportedNamedValuesEnum, obj);}
    });


    Bridge.ns("System.DateTime", $box_);

    Bridge.apply($box_.System.DateTime, {
        toString: function(obj) {return System.DateTime.format(obj);}
    });


    Bridge.ns("Bridge.ClientTest.Batch4.SimpleTypes.EnumTests.TestEnum", $box_);

    Bridge.apply($box_.Bridge.ClientTest.Batch4.SimpleTypes.EnumTests.TestEnum, {
        toString: function(obj) {return System.Enum.toString(Bridge.ClientTest.Batch4.SimpleTypes.EnumTests.TestEnum, obj);}
    });


    Bridge.ns("Bridge.ClientTest.Batch4.SimpleTypes.EnumTests.FlagsEnum", $box_);

    Bridge.apply($box_.Bridge.ClientTest.Batch4.SimpleTypes.EnumTests.FlagsEnum, {
        toString: function(obj) {return System.Enum.toString(Bridge.ClientTest.Batch4.SimpleTypes.EnumTests.FlagsEnum, obj);}
    });


    Bridge.ns("System.Single", $box_);

    Bridge.apply($box_.System.Single, {
        toString: function(obj) {return System.Single.format(obj, 'G');}
    });

    var $m = Bridge.setMetadata,
        $n = [System,Bridge.ClientTest.Batch4.Linq.Expressions,Bridge.ClientTest.Batch4.Reflection,Bridge.ClientTest.Batch4];
    $m($n[1].ExpressionTests.C, function () { return {"m":[{"a":2,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":".ctor","t":1,"p":[$n[0].Int32,$n[0].Int32],"pi":[{"n":"a","pt":$n[0].Int32,"ps":0},{"n":"b","pt":$n[0].Int32,"ps":1}],"sn":"$ctor1"},{"a":2,"n":"M1","t":8,"pi":[{"n":"a","pt":$n[0].Int32,"ps":0},{"n":"b","pt":$n[0].String,"ps":1}],"sn":"M1","rt":$n[0].Int32,"p":[$n[0].Int32,$n[0].String]},{"a":2,"n":"M2","is":true,"t":8,"pi":[{"n":"a","pt":$n[0].Int32,"ps":0},{"n":"b","pt":$n[0].String,"ps":1}],"sn":"M2","rt":$n[0].Int32,"p":[$n[0].Int32,$n[0].String]},{"a":2,"n":"M4","t":8,"pi":[{"n":"a","pt":$n[0].Int32,"ps":0}],"sn":"M4","rt":$n[0].Int32,"p":[$n[0].Int32]},{"a":2,"n":"op_Addition","is":true,"t":8,"pi":[{"n":"a","pt":$n[1].ExpressionTests.C,"ps":0},{"n":"b","pt":$n[1].ExpressionTests.C,"ps":1}],"sn":"op_Addition","rt":$n[1].ExpressionTests.C,"p":[$n[1].ExpressionTests.C,$n[1].ExpressionTests.C]},{"a":2,"n":"op_BitwiseAnd","is":true,"t":8,"pi":[{"n":"a","pt":$n[1].ExpressionTests.C,"ps":0},{"n":"b","pt":$n[1].ExpressionTests.C,"ps":1}],"sn":"op_BitwiseAnd","rt":$n[1].ExpressionTests.C,"p":[$n[1].ExpressionTests.C,$n[1].ExpressionTests.C]},{"a":2,"n":"op_BitwiseOr","is":true,"t":8,"pi":[{"n":"a","pt":$n[1].ExpressionTests.C,"ps":0},{"n":"b","pt":$n[1].ExpressionTests.C,"ps":1}],"sn":"op_BitwiseOr","rt":$n[1].ExpressionTests.C,"p":[$n[1].ExpressionTests.C,$n[1].ExpressionTests.C]},{"a":2,"n":"op_Decrement","is":true,"t":8,"pi":[{"n":"a","pt":$n[1].ExpressionTests.C,"ps":0}],"sn":"op_Decrement","rt":$n[1].ExpressionTests.C,"p":[$n[1].ExpressionTests.C]},{"a":2,"n":"op_Division","is":true,"t":8,"pi":[{"n":"a","pt":$n[1].ExpressionTests.C,"ps":0},{"n":"b","pt":$n[1].ExpressionTests.C,"ps":1}],"sn":"op_Division","rt":$n[1].ExpressionTests.C,"p":[$n[1].ExpressionTests.C,$n[1].ExpressionTests.C]},{"a":2,"n":"op_Equality","is":true,"t":8,"pi":[{"n":"a","pt":$n[1].ExpressionTests.C,"ps":0},{"n":"b","pt":$n[1].ExpressionTests.C,"ps":1}],"sn":"op_Equality","rt":$n[0].Boolean,"p":[$n[1].ExpressionTests.C,$n[1].ExpressionTests.C]},{"a":2,"n":"op_ExclusiveOr","is":true,"t":8,"pi":[{"n":"a","pt":$n[1].ExpressionTests.C,"ps":0},{"n":"b","pt":$n[1].ExpressionTests.C,"ps":1}],"sn":"op_ExclusiveOr","rt":$n[1].ExpressionTests.C,"p":[$n[1].ExpressionTests.C,$n[1].ExpressionTests.C]},{"a":2,"n":"op_Explicit","is":true,"t":8,"pi":[{"n":"a","pt":$n[1].ExpressionTests.C,"ps":0}],"sn":"op_Explicit","rt":$n[0].Int32,"p":[$n[1].ExpressionTests.C]},{"a":2,"n":"op_False","is":true,"t":8,"pi":[{"n":"a","pt":$n[1].ExpressionTests.C,"ps":0}],"sn":"op_False","rt":$n[0].Boolean,"p":[$n[1].ExpressionTests.C]},{"a":2,"n":"op_GreaterThan","is":true,"t":8,"pi":[{"n":"a","pt":$n[1].ExpressionTests.C,"ps":0},{"n":"b","pt":$n[1].ExpressionTests.C,"ps":1}],"sn":"op_GreaterThan","rt":$n[0].Boolean,"p":[$n[1].ExpressionTests.C,$n[1].ExpressionTests.C]},{"a":2,"n":"op_GreaterThanOrEqual","is":true,"t":8,"pi":[{"n":"a","pt":$n[1].ExpressionTests.C,"ps":0},{"n":"b","pt":$n[1].ExpressionTests.C,"ps":1}],"sn":"op_GreaterThanOrEqual","rt":$n[0].Boolean,"p":[$n[1].ExpressionTests.C,$n[1].ExpressionTests.C]},{"a":2,"n":"op_Increment","is":true,"t":8,"pi":[{"n":"a","pt":$n[1].ExpressionTests.C,"ps":0}],"sn":"op_Increment","rt":$n[1].ExpressionTests.C,"p":[$n[1].ExpressionTests.C]},{"a":2,"n":"op_Inequality","is":true,"t":8,"pi":[{"n":"a","pt":$n[1].ExpressionTests.C,"ps":0},{"n":"b","pt":$n[1].ExpressionTests.C,"ps":1}],"sn":"op_Inequality","rt":$n[0].Boolean,"p":[$n[1].ExpressionTests.C,$n[1].ExpressionTests.C]},{"a":2,"n":"op_LeftShift","is":true,"t":8,"pi":[{"n":"a","pt":$n[1].ExpressionTests.C,"ps":0},{"n":"b","pt":$n[0].Int32,"ps":1}],"sn":"op_LeftShift","rt":$n[1].ExpressionTests.C,"p":[$n[1].ExpressionTests.C,$n[0].Int32]},{"a":2,"n":"op_LessThan","is":true,"t":8,"pi":[{"n":"a","pt":$n[1].ExpressionTests.C,"ps":0},{"n":"b","pt":$n[1].ExpressionTests.C,"ps":1}],"sn":"op_LessThan","rt":$n[0].Boolean,"p":[$n[1].ExpressionTests.C,$n[1].ExpressionTests.C]},{"a":2,"n":"op_LessThanOrEqual","is":true,"t":8,"pi":[{"n":"a","pt":$n[1].ExpressionTests.C,"ps":0},{"n":"b","pt":$n[1].ExpressionTests.C,"ps":1}],"sn":"op_LessThanOrEqual","rt":$n[0].Boolean,"p":[$n[1].ExpressionTests.C,$n[1].ExpressionTests.C]},{"a":2,"n":"op_LogicalNot","is":true,"t":8,"pi":[{"n":"a","pt":$n[1].ExpressionTests.C,"ps":0}],"sn":"op_LogicalNot","rt":$n[0].Boolean,"p":[$n[1].ExpressionTests.C]},{"a":2,"n":"op_Modulus","is":true,"t":8,"pi":[{"n":"a","pt":$n[1].ExpressionTests.C,"ps":0},{"n":"b","pt":$n[1].ExpressionTests.C,"ps":1}],"sn":"op_Modulus","rt":$n[1].ExpressionTests.C,"p":[$n[1].ExpressionTests.C,$n[1].ExpressionTests.C]},{"a":2,"n":"op_Multiply","is":true,"t":8,"pi":[{"n":"a","pt":$n[1].ExpressionTests.C,"ps":0},{"n":"b","pt":$n[1].ExpressionTests.C,"ps":1}],"sn":"op_Multiply","rt":$n[1].ExpressionTests.C,"p":[$n[1].ExpressionTests.C,$n[1].ExpressionTests.C]},{"a":2,"n":"op_OnesComplement","is":true,"t":8,"pi":[{"n":"a","pt":$n[1].ExpressionTests.C,"ps":0}],"sn":"op_OnesComplement","rt":$n[1].ExpressionTests.C,"p":[$n[1].ExpressionTests.C]},{"a":2,"n":"op_Power","is":true,"t":8,"pi":[{"n":"a","pt":$n[1].ExpressionTests.C,"ps":0},{"n":"b","pt":$n[1].ExpressionTests.C,"ps":1}],"sn":"op_Power","rt":$n[1].ExpressionTests.C,"p":[$n[1].ExpressionTests.C,$n[1].ExpressionTests.C]},{"a":2,"n":"op_RightShift","is":true,"t":8,"pi":[{"n":"a","pt":$n[1].ExpressionTests.C,"ps":0},{"n":"b","pt":$n[0].Int32,"ps":1}],"sn":"op_RightShift","rt":$n[1].ExpressionTests.C,"p":[$n[1].ExpressionTests.C,$n[0].Int32]},{"a":2,"n":"op_Subtraction","is":true,"t":8,"pi":[{"n":"a","pt":$n[1].ExpressionTests.C,"ps":0},{"n":"b","pt":$n[1].ExpressionTests.C,"ps":1}],"sn":"op_Subtraction","rt":$n[1].ExpressionTests.C,"p":[$n[1].ExpressionTests.C,$n[1].ExpressionTests.C]},{"a":2,"n":"op_True","is":true,"t":8,"pi":[{"n":"a","pt":$n[1].ExpressionTests.C,"ps":0}],"sn":"op_True","rt":$n[0].Boolean,"p":[$n[1].ExpressionTests.C]},{"a":2,"n":"op_UnaryNegation","is":true,"t":8,"pi":[{"n":"a","pt":$n[1].ExpressionTests.C,"ps":0}],"sn":"op_UnaryNegation","rt":$n[1].ExpressionTests.C,"p":[$n[1].ExpressionTests.C]},{"a":2,"n":"op_UnaryPlus","is":true,"t":8,"pi":[{"n":"a","pt":$n[1].ExpressionTests.C,"ps":0}],"sn":"op_UnaryPlus","rt":$n[1].ExpressionTests.C,"p":[$n[1].ExpressionTests.C]},{"a":2,"n":"CP","t":16,"rt":$n[1].ExpressionTests.C,"g":{"a":2,"n":"get_CP","t":8,"rt":$n[1].ExpressionTests.C,"fg":"CP"},"s":{"a":2,"n":"set_CP","t":8,"p":[$n[1].ExpressionTests.C],"rt":$n[0].Object,"fs":"CP"},"fn":"CP"},{"a":2,"n":"Item","t":16,"rt":$n[0].String,"p":[$n[0].Int32,$n[0].String],"i":true,"ipi":[{"n":"a","pt":$n[0].Int32,"ps":0},{"n":"b","pt":$n[0].String,"ps":1}],"g":{"a":2,"n":"get_Item","t":8,"pi":[{"n":"a","pt":$n[0].Int32,"ps":0},{"n":"b","pt":$n[0].String,"ps":1}],"sn":"getItem","rt":$n[0].String,"p":[$n[0].Int32,$n[0].String]}},{"a":2,"n":"LP","t":16,"rt":$n[1].ExpressionTests.MyList,"g":{"a":2,"n":"get_LP","t":8,"rt":$n[1].ExpressionTests.MyList,"fg":"LP"},"s":{"a":2,"n":"set_LP","t":8,"p":[$n[1].ExpressionTests.MyList],"rt":$n[0].Object,"fs":"LP"},"fn":"LP"},{"a":2,"n":"P1","t":16,"rt":$n[0].Int32,"g":{"a":2,"n":"get_P1","t":8,"rt":$n[0].Int32,"fg":"P1"},"s":{"a":2,"n":"set_P1","t":8,"p":[$n[0].Int32],"rt":$n[0].Object,"fs":"P1"},"fn":"P1"},{"a":2,"n":"CF","t":4,"rt":$n[1].ExpressionTests.C,"sn":"CF"},{"a":2,"n":"F1","t":4,"rt":$n[0].Int32,"sn":"F1"},{"a":2,"n":"LF","t":4,"rt":$n[1].ExpressionTests.MyList,"sn":"LF"}]}; });
    $m($n[1].ExpressionTests.MyList, function () { return {"m":[{"a":2,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"Add","t":8,"pi":[{"n":"i","pt":$n[0].Int32,"ps":0}],"sn":"add","rt":$n[0].Object,"p":[$n[0].Int32]},{"a":2,"n":"Add","t":8,"pi":[{"n":"i","pt":$n[0].Int32,"ps":0},{"n":"j","pt":$n[0].Int32,"ps":1}],"sn":"add$1","rt":$n[0].Object,"p":[$n[0].Int32,$n[0].Int32]}]}; });
    $m($n[2].AttributeTests.A2Attribute, function () { return {"am":true}; });
    $m($n[2].AttributeTests.A5Attribute, function () { return {"ni":true}; });
    $m($n[2].AttributeTests.C10$2, function (T1, T2) { return {"at":[new Bridge.ClientTest.Batch4.Reflection.AttributeTests.A1Attribute(11)]}; });
    $m($n[2].AttributeTests.C11, function () { return {"at":[new Bridge.ClientTest.Batch4.Reflection.AttributeTests.A6Attribute(true, 43, 68, 45.5, 46.5, 47, System.Int64(48), 49, 1, "Test_string", null, System.String)]}; });
    $m($n[2].AttributeTests.C12, function () { return {"at":[new Bridge.ClientTest.Batch4.Reflection.AttributeTests.A7Attribute(System.Array.init([42, 17, 31], System.Int32), System.Array.init(["X", "Y2", "Z3"], System.String))]}; });
    $m($n[2].AttributeTests.C13, function () { return {"at":[new Bridge.ClientTest.Batch4.Reflection.AttributeTests.A8Attribute("v2")]}; });
    $m($n[2].AttributeTests.C14, function () { return {"at":[Bridge.merge(new Bridge.ClientTest.Batch4.Reflection.AttributeTests.A9Attribute(), {
        P1: 42
    } )]}; });
    $m($n[2].AttributeTests.C15, function () { return {"at":[Bridge.merge(new Bridge.ClientTest.Batch4.Reflection.AttributeTests.A9Attribute(), {

    }, function () {
        this.$$XX$$ = 18;
    } )]}; });
    $m($n[2].AttributeTests.C16, function () { return {"at":[Bridge.merge(new Bridge.ClientTest.Batch4.Reflection.AttributeTests.A9Attribute(), {
        P3: 43
    } )]}; });
    $m($n[2].AttributeTests.C18, function () { return {"at":[Bridge.merge(new Bridge.ClientTest.Batch4.Reflection.AttributeTests.A9Attribute(), {
        F1: 13
    } )]}; });
    $m($n[2].AttributeTests.C19, function () { return {"at":[new Bridge.ClientTest.Batch4.Reflection.AttributeTests.A1Attribute(12)]}; });
    $m($n[2].AttributeTests.C2, function () { return {"at":[new Bridge.ClientTest.Batch4.Reflection.AttributeTests.A1Attribute(1),new Bridge.ClientTest.Batch4.Reflection.AttributeTests.A2Attribute(2)]}; });
    $m($n[2].AttributeTests.C20, function () { return {"at":[new Bridge.ClientTest.Batch4.Reflection.AttributeTests.A11Attribute.$ctor1(42)]}; });
    $m($n[2].AttributeTests.C21, function () { return {"at":[{ i: 18 }]}; });
    $m($n[2].AttributeTests.C22, function () { return {"at":[new Bridge.ClientTest.Batch4.Reflection.AttributeTests.A12Attribute(),new Bridge.ClientTest.Batch4.Reflection.AttributeTests.A13Attribute()],"m":[{"at":[new Bridge.ClientTest.Batch4.Reflection.AttributeTests.A12Attribute(),new Bridge.ClientTest.Batch4.Reflection.AttributeTests.A13Attribute()],"a":2,"n":"M","t":8,"sn":"m","rt":$n[0].Object}]}; });
    $m($n[2].AttributeTests.C7, function () { return {"at":[new Bridge.ClientTest.Batch4.Reflection.AttributeTests.A5Attribute()]}; });
    $m($n[2].AttributeTests.C9, function () { return {"at":[new Bridge.ClientTest.Batch4.Reflection.AttributeTests.A1Attribute(7),new Bridge.ClientTest.Batch4.Reflection.AttributeTests.A2Attribute(8),new Bridge.ClientTest.Batch4.Reflection.AttributeTests.A2Attribute(9),new Bridge.ClientTest.Batch4.Reflection.AttributeTests.A3Attribute(10)]}; });
    $m($n[2].AttributeTests.E1, function () { return {"at":[new Bridge.ClientTest.Batch4.Reflection.AttributeTests.A1Attribute(1),new Bridge.ClientTest.Batch4.Reflection.AttributeTests.A2Attribute(2)]}; });
    $m($n[2].AttributeTests.I1, function () { return {"at":[new Bridge.ClientTest.Batch4.Reflection.AttributeTests.A1Attribute(1),new Bridge.ClientTest.Batch4.Reflection.AttributeTests.A2Attribute(2)]}; });
    $m($n[2].AttributeTests.I2$2, function (T1, T2) { return {"at":[new Bridge.ClientTest.Batch4.Reflection.AttributeTests.A1Attribute(12)]}; });
    $m($n[2].GetMembersTests.B1, function () { return {"m":[{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(101)],"a":2,"n":".ctor","t":1,"sn":"ctor"},{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(102)],"a":2,"n":".ctor","t":1,"p":[$n[0].Int32],"pi":[{"n":"x","pt":$n[0].Int32,"ps":0}],"sn":"$ctor1"},{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(103)],"a":2,"n":".ctor","t":1,"p":[$n[0].Int32,$n[0].String],"pi":[{"n":"x","pt":$n[0].Int32,"ps":0},{"n":"y","pt":$n[0].String,"ps":1}],"sn":"$ctor2"},{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(111)],"a":2,"n":"MB","t":8,"sn":"MB","rt":$n[0].Object},{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(112)],"a":2,"n":"MB","t":8,"pi":[{"n":"x","pt":$n[0].Int32,"ps":0}],"sn":"MB$1","rt":$n[0].Object,"p":[$n[0].Int32]},{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(113)],"a":2,"n":"MB","t":8,"pi":[{"n":"x","pt":$n[0].Int32,"ps":0},{"n":"y","pt":$n[0].String,"ps":1}],"sn":"MB$2","rt":$n[0].Object,"p":[$n[0].Int32,$n[0].String]},{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(114)],"a":2,"n":"MB2","t":8,"pi":[{"n":"x","pt":$n[0].Int32,"ps":0},{"n":"y","pt":$n[0].String,"ps":1}],"sn":"MB2","rt":$n[0].Object,"p":[$n[0].Int32,$n[0].String]},{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(121)],"a":2,"n":"MBS","is":true,"t":8,"sn":"MBS","rt":$n[0].Object},{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(122)],"a":2,"n":"MBS","is":true,"t":8,"pi":[{"n":"x","pt":$n[0].Int32,"ps":0}],"sn":"MBS$1","rt":$n[0].Object,"p":[$n[0].Int32]},{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(123)],"a":2,"n":"MBS","is":true,"t":8,"pi":[{"n":"x","pt":$n[0].Int32,"ps":0},{"n":"y","pt":$n[0].String,"ps":1}],"sn":"MBS$2","rt":$n[0].Object,"p":[$n[0].Int32,$n[0].String]},{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(124)],"a":2,"n":"MBS2","is":true,"t":8,"pi":[{"n":"x","pt":$n[0].Int32,"ps":0},{"n":"y","pt":$n[0].String,"ps":1}],"sn":"MBS2","rt":$n[0].Object,"p":[$n[0].Int32,$n[0].String]},{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(157)],"a":2,"n":"Item","t":16,"rt":$n[0].Int32,"p":[$n[0].Int32],"i":true,"ipi":[{"n":"x","pt":$n[0].Int32,"ps":0}],"g":{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(158)],"a":2,"n":"get_Item","t":8,"pi":[{"n":"x","pt":$n[0].Int32,"ps":0}],"sn":"getItem","rt":$n[0].Int32,"p":[$n[0].Int32]},"s":{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(159)],"a":2,"n":"set_Item","t":8,"pi":[{"n":"x","pt":$n[0].Int32,"ps":0},{"n":"value","pt":$n[0].Int32,"ps":1}],"sn":"setItem","rt":$n[0].Object,"p":[$n[0].Int32,$n[0].Int32]}},{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(151)],"a":2,"n":"PB1","t":16,"rt":$n[0].Int32,"g":{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(152)],"a":2,"n":"get_PB1","t":8,"rt":$n[0].Int32,"fg":"PB1"},"s":{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(153)],"a":2,"n":"set_PB1","t":8,"p":[$n[0].Int32],"rt":$n[0].Object,"fs":"PB1"},"fn":"PB1"},{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(154)],"a":2,"n":"PB2","t":16,"rt":$n[0].Int32,"g":{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(155)],"a":2,"n":"get_PB2","t":8,"rt":$n[0].Int32,"fg":"PB2"},"s":{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(156)],"a":2,"n":"set_PB2","t":8,"p":[$n[0].Int32],"rt":$n[0].Object,"fs":"PB2"},"fn":"PB2"},{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(161)],"a":2,"n":"PBS1","is":true,"t":16,"rt":$n[0].Int32,"g":{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(162)],"a":2,"n":"get_PBS1","t":8,"rt":$n[0].Int32,"fg":"PBS1","is":true},"s":{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(163)],"a":2,"n":"set_PBS1","t":8,"p":[$n[0].Int32],"rt":$n[0].Object,"fs":"PBS1","is":true},"fn":"PBS1"},{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(164)],"a":2,"n":"PBS2","is":true,"t":16,"rt":$n[0].Int32,"g":{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(165)],"a":2,"n":"get_PBS2","t":8,"rt":$n[0].Int32,"fg":"PBS2","is":true},"s":{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(166)],"a":2,"n":"set_PBS2","t":8,"p":[$n[0].Int32],"rt":$n[0].Object,"fs":"PBS2","is":true},"fn":"PBS2"},{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(131)],"a":2,"n":"FB1","t":4,"rt":$n[0].Int32,"sn":"FB1"},{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(132)],"a":2,"n":"FB2","t":4,"rt":$n[0].Int32,"sn":"FB2"},{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(141)],"a":2,"n":"FBS1","is":true,"t":4,"rt":$n[0].Int32,"sn":"FBS1"},{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(142)],"a":2,"n":"FBS2","is":true,"t":4,"rt":$n[0].Int32,"sn":"FBS2"},{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(171)],"a":2,"n":"EB1","t":2,"ad":{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(172)],"a":2,"n":"add_EB1","t":8,"pi":[{"n":"value","pt":Function,"ps":0}],"sn":"addEB1","rt":$n[0].Object,"p":[Function]},"r":{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(173)],"a":2,"n":"remove_EB1","t":8,"pi":[{"n":"value","pt":Function,"ps":0}],"sn":"removeEB1","rt":$n[0].Object,"p":[Function]}},{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(174)],"a":2,"n":"EB2","t":2,"ad":{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(175)],"a":2,"n":"add_EB2","t":8,"pi":[{"n":"value","pt":Function,"ps":0}],"sn":"addEB2","rt":$n[0].Object,"p":[Function]},"r":{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(176)],"a":2,"n":"remove_EB2","t":8,"pi":[{"n":"value","pt":Function,"ps":0}],"sn":"removeEB2","rt":$n[0].Object,"p":[Function]}},{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(181)],"a":2,"n":"EBS1","is":true,"t":2,"ad":{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(182)],"a":2,"n":"add_EBS1","is":true,"t":8,"pi":[{"n":"value","pt":Function,"ps":0}],"sn":"addEBS1","rt":$n[0].Object,"p":[Function]},"r":{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(183)],"a":2,"n":"remove_EBS1","is":true,"t":8,"pi":[{"n":"value","pt":Function,"ps":0}],"sn":"removeEBS1","rt":$n[0].Object,"p":[Function]}},{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(184)],"a":2,"n":"EBS2","is":true,"t":2,"ad":{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(185)],"a":2,"n":"add_EBS2","is":true,"t":8,"pi":[{"n":"value","pt":Function,"ps":0}],"sn":"addEBS2","rt":$n[0].Object,"p":[Function]},"r":{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(186)],"a":2,"n":"remove_EBS2","is":true,"t":8,"pi":[{"n":"value","pt":Function,"ps":0}],"sn":"removeEBS2","rt":$n[0].Object,"p":[Function]}}]}; });
    $m($n[2].GetMembersTests.B2, function () { return {"m":[{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(111)],"a":2,"n":"M","t":8,"sn":"m","rt":$n[0].Object},{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(113)],"a":2,"n":"M2","t":8,"pi":[{"n":"x","pt":$n[0].Int32,"ps":0}],"sn":"M2","rt":$n[0].Object,"p":[$n[0].Int32]},{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(114)],"a":2,"n":"M2","t":8,"pi":[{"n":"x","pt":$n[0].String,"ps":0}],"sn":"M2$1","rt":$n[0].Object,"p":[$n[0].String]},{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(115)],"a":2,"n":"M2B","t":8,"pi":[{"n":"x","pt":$n[0].Int32,"ps":0}],"sn":"M2B","rt":$n[0].Object,"p":[$n[0].Int32]},{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(116)],"a":2,"n":"M2B","t":8,"pi":[{"n":"x","pt":$n[0].String,"ps":0}],"sn":"M2B$1","rt":$n[0].Object,"p":[$n[0].String]},{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(125)],"a":2,"n":"M2BS","is":true,"t":8,"pi":[{"n":"x","pt":$n[0].Int32,"ps":0}],"sn":"M2BS","rt":$n[0].Object,"p":[$n[0].Int32]},{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(126)],"a":2,"n":"M2BS","is":true,"t":8,"pi":[{"n":"x","pt":$n[0].String,"ps":0}],"sn":"M2BS$1","rt":$n[0].Object,"p":[$n[0].String]},{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(123)],"a":2,"n":"M2S","is":true,"t":8,"pi":[{"n":"x","pt":$n[0].Int32,"ps":0}],"sn":"M2S","rt":$n[0].Object,"p":[$n[0].Int32]},{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(124)],"a":2,"n":"M2S","is":true,"t":8,"pi":[{"n":"x","pt":$n[0].String,"ps":0}],"sn":"M2S$1","rt":$n[0].Object,"p":[$n[0].String]},{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(117)],"a":2,"n":"M3","t":8,"pi":[{"n":"x","pt":$n[0].Int32,"ps":0}],"sn":"M3","rt":$n[0].Object,"p":[$n[0].Int32]},{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(127)],"a":2,"n":"M3S","is":true,"t":8,"pi":[{"n":"x","pt":$n[0].Int32,"ps":0}],"sn":"M3S","rt":$n[0].Object,"p":[$n[0].Int32]},{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(112)],"a":2,"n":"MB","t":8,"sn":"MB","rt":$n[0].Object},{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(122)],"a":2,"n":"MBS","is":true,"t":8,"sn":"MBS","rt":$n[0].Object},{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(121)],"a":2,"n":"MS","is":true,"t":8,"sn":"MS","rt":$n[0].Object},{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(153)],"a":2,"n":"Item","t":16,"rt":$n[0].Int32,"p":[$n[0].Int32],"i":true,"ipi":[{"n":"x","pt":$n[0].Int32,"ps":0}],"g":{"a":2,"n":"get_Item","t":8,"pi":[{"n":"x","pt":$n[0].Int32,"ps":0}],"sn":"getItem","rt":$n[0].Int32,"p":[$n[0].Int32]},"s":{"a":2,"n":"set_Item","t":8,"pi":[{"n":"x","pt":$n[0].Int32,"ps":0},{"n":"value","pt":$n[0].Int32,"ps":1}],"sn":"setItem","rt":$n[0].Object,"p":[$n[0].Int32,$n[0].Int32]}},{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(154)],"a":2,"n":"Item","t":16,"rt":$n[0].Int32,"p":[$n[0].String],"i":true,"ipi":[{"n":"x","pt":$n[0].String,"ps":0}],"g":{"a":2,"n":"get_Item","t":8,"pi":[{"n":"x","pt":$n[0].String,"ps":0}],"sn":"getItem$1","rt":$n[0].Int32,"p":[$n[0].String]},"s":{"a":2,"n":"set_Item","t":8,"pi":[{"n":"x","pt":$n[0].String,"ps":0},{"n":"value","pt":$n[0].Int32,"ps":1}],"sn":"setItem$1","rt":$n[0].Object,"p":[$n[0].String,$n[0].Int32]}},{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(151)],"a":2,"n":"P","t":16,"rt":$n[0].Int32,"g":{"a":2,"n":"get_P","t":8,"rt":$n[0].Int32,"fg":"P"},"s":{"a":2,"n":"set_P","t":8,"p":[$n[0].Int32],"rt":$n[0].Object,"fs":"P"},"fn":"P"},{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(152)],"a":2,"n":"PB","t":16,"rt":$n[0].Int32,"g":{"a":2,"n":"get_PB","t":8,"rt":$n[0].Int32,"fg":"PB"},"s":{"a":2,"n":"set_PB","t":8,"p":[$n[0].Int32],"rt":$n[0].Object,"fs":"PB"},"fn":"PB"},{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(162)],"a":2,"n":"PBS","is":true,"t":16,"rt":$n[0].Int32,"g":{"a":2,"n":"get_PBS","t":8,"rt":$n[0].Int32,"fg":"PBS","is":true},"s":{"a":2,"n":"set_PBS","t":8,"p":[$n[0].Int32],"rt":$n[0].Object,"fs":"PBS","is":true},"fn":"PBS"},{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(161)],"a":2,"n":"PS","is":true,"t":16,"rt":$n[0].Int32,"g":{"a":2,"n":"get_PS","t":8,"rt":$n[0].Int32,"fg":"PS","is":true},"s":{"a":2,"n":"set_PS","t":8,"p":[$n[0].Int32],"rt":$n[0].Object,"fs":"PS","is":true},"fn":"PS"},{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(131)],"a":2,"n":"F","t":4,"rt":$n[0].Int32,"sn":"f"},{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(132)],"a":2,"n":"FB","t":4,"rt":$n[0].Int32,"sn":"FB"},{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(142)],"a":2,"n":"FBS","is":true,"t":4,"rt":$n[0].Int32,"sn":"FBS"},{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(141)],"a":2,"n":"FS","is":true,"t":4,"rt":$n[0].Int32,"sn":"FS"},{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(171)],"a":2,"n":"E","t":2,"ad":{"a":2,"n":"add_E","t":8,"pi":[{"n":"value","pt":Function,"ps":0}],"sn":"addE","rt":$n[0].Object,"p":[Function]},"r":{"a":2,"n":"remove_E","t":8,"pi":[{"n":"value","pt":Function,"ps":0}],"sn":"removeE","rt":$n[0].Object,"p":[Function]}},{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(172)],"a":2,"n":"EB","t":2,"ad":{"a":2,"n":"add_EB","t":8,"pi":[{"n":"value","pt":Function,"ps":0}],"sn":"addEB","rt":$n[0].Object,"p":[Function]},"r":{"a":2,"n":"remove_EB","t":8,"pi":[{"n":"value","pt":Function,"ps":0}],"sn":"removeEB","rt":$n[0].Object,"p":[Function]}},{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(182)],"a":2,"n":"EBS","is":true,"t":2,"ad":{"a":2,"n":"add_EBS","is":true,"t":8,"pi":[{"n":"value","pt":Function,"ps":0}],"sn":"addEBS","rt":$n[0].Object,"p":[Function]},"r":{"a":2,"n":"remove_EBS","is":true,"t":8,"pi":[{"n":"value","pt":Function,"ps":0}],"sn":"removeEBS","rt":$n[0].Object,"p":[Function]}},{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(181)],"a":2,"n":"ES","is":true,"t":2,"ad":{"a":2,"n":"add_ES","is":true,"t":8,"pi":[{"n":"value","pt":Function,"ps":0}],"sn":"addES","rt":$n[0].Object,"p":[Function]},"r":{"a":2,"n":"remove_ES","is":true,"t":8,"pi":[{"n":"value","pt":Function,"ps":0}],"sn":"removeES","rt":$n[0].Object,"p":[Function]}}]}; });
    $m($n[2].GetMembersTests.C3, function () { return {"m":[{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(1)],"a":2,"n":"Item","t":16,"rt":$n[0].Int32,"p":[$n[0].Int32],"i":true,"ipi":[{"n":"x","pt":$n[0].Int32,"ps":0}],"g":{"a":2,"n":"get_Item","t":8,"pi":[{"n":"x","pt":$n[0].Int32,"ps":0}],"sn":"getItem","rt":$n[0].Int32,"p":[$n[0].Int32]},"s":{"a":2,"n":"set_Item","t":8,"pi":[{"n":"x","pt":$n[0].Int32,"ps":0},{"n":"value","pt":$n[0].Int32,"ps":1}],"sn":"setItem","rt":$n[0].Object,"p":[$n[0].Int32,$n[0].Int32]}}]}; });
    $m($n[2].GetMembersTests.I1, function () { return {"m":[{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(411)],"ab":true,"a":2,"n":"MI1","t":8,"sn":"Bridge$ClientTest$Batch4$Reflection$GetMembersTests$I1$MI1","rt":$n[0].Object},{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(412)],"ab":true,"a":2,"n":"MI1","t":8,"pi":[{"n":"x","pt":$n[0].Int32,"ps":0}],"sn":"Bridge$ClientTest$Batch4$Reflection$GetMembersTests$I1$MI1$1","rt":$n[0].Object,"p":[$n[0].Int32]},{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(413)],"ab":true,"a":2,"n":"MI1","t":8,"pi":[{"n":"x","pt":$n[0].Int32,"ps":0},{"n":"y","pt":$n[0].String,"ps":1}],"sn":"Bridge$ClientTest$Batch4$Reflection$GetMembersTests$I1$MI1$2","rt":$n[0].Object,"p":[$n[0].Int32,$n[0].String]},{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(414)],"ab":true,"a":2,"n":"MI12","t":8,"pi":[{"n":"x","pt":$n[0].Int32,"ps":0},{"n":"y","pt":$n[0].String,"ps":1}],"sn":"Bridge$ClientTest$Batch4$Reflection$GetMembersTests$I1$MI12","rt":$n[0].Object,"p":[$n[0].Int32,$n[0].String]},{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(457)],"ab":true,"a":2,"n":"Item","t":16,"rt":$n[0].Int32,"p":[$n[0].Int32],"i":true,"ipi":[{"n":"x","pt":$n[0].Int32,"ps":0}],"g":{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(458)],"ab":true,"a":2,"n":"get_Item","t":8,"pi":[{"n":"x","pt":$n[0].Int32,"ps":0}],"sn":"Bridge$ClientTest$Batch4$Reflection$GetMembersTests$I1$get_i1item","rt":$n[0].Int32,"p":[$n[0].Int32]},"s":{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(459)],"ab":true,"a":2,"n":"set_Item","t":8,"pi":[{"n":"x","pt":$n[0].Int32,"ps":0},{"n":"value","pt":$n[0].Int32,"ps":1}],"sn":"Bridge$ClientTest$Batch4$Reflection$GetMembersTests$I1$set_i1item","rt":$n[0].Object,"p":[$n[0].Int32,$n[0].Int32]}},{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(451)],"ab":true,"a":2,"n":"PI11","t":16,"rt":$n[0].Int32,"g":{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(452)],"ab":true,"a":2,"n":"get_PI11","t":8,"rt":$n[0].Int32,"fg":"Bridge$ClientTest$Batch4$Reflection$GetMembersTests$I1$PI11"},"s":{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(453)],"ab":true,"a":2,"n":"set_PI11","t":8,"p":[$n[0].Int32],"rt":$n[0].Object,"fs":"Bridge$ClientTest$Batch4$Reflection$GetMembersTests$I1$PI11"},"fn":"Bridge$ClientTest$Batch4$Reflection$GetMembersTests$I1$PI11"},{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(454)],"ab":true,"a":2,"n":"PI12","t":16,"rt":$n[0].Int32,"g":{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(455)],"ab":true,"a":2,"n":"get_PI12","t":8,"rt":$n[0].Int32,"fg":"Bridge$ClientTest$Batch4$Reflection$GetMembersTests$I1$PI12"},"s":{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(456)],"ab":true,"a":2,"n":"set_PI12","t":8,"p":[$n[0].Int32],"rt":$n[0].Object,"fs":"Bridge$ClientTest$Batch4$Reflection$GetMembersTests$I1$PI12"},"fn":"Bridge$ClientTest$Batch4$Reflection$GetMembersTests$I1$PI12"},{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(471)],"ab":true,"a":2,"n":"EI11","t":2,"ad":{"ab":true,"a":2,"n":"add_EI11","t":8,"pi":[{"n":"value","pt":Function,"ps":0}],"sn":"Bridge$ClientTest$Batch4$Reflection$GetMembersTests$I1$addEI11","rt":$n[0].Object,"p":[Function]},"r":{"ab":true,"a":2,"n":"remove_EI11","t":8,"pi":[{"n":"value","pt":Function,"ps":0}],"sn":"Bridge$ClientTest$Batch4$Reflection$GetMembersTests$I1$removeEI11","rt":$n[0].Object,"p":[Function]}},{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(474)],"ab":true,"a":2,"n":"EI12","t":2,"ad":{"ab":true,"a":2,"n":"add_EI12","t":8,"pi":[{"n":"value","pt":Function,"ps":0}],"sn":"Bridge$ClientTest$Batch4$Reflection$GetMembersTests$I1$addEI12","rt":$n[0].Object,"p":[Function]},"r":{"ab":true,"a":2,"n":"remove_EI12","t":8,"pi":[{"n":"value","pt":Function,"ps":0}],"sn":"Bridge$ClientTest$Batch4$Reflection$GetMembersTests$I1$removeEI12","rt":$n[0].Object,"p":[Function]}}]}; });
    $m($n[2].ReflectionTests.C1, function () { return {"m":[{"at":[new Bridge.ClientTest.Batch4.Reflection.ReflectionTests.A1Attribute.ctor()],"a":2,"n":"M2","t":8,"sn":"M2","rt":$n[0].Object},{"a":2,"n":"M3","t":8,"sn":"M3","rt":$n[0].Object}]}; });
    $m($n[2].ReflectionTests.C10, function () { return {"m":[{"a":2,"n":".ctor","t":1,"p":[$n[0].Int32],"pi":[{"n":"x","pt":$n[0].Int32,"ps":0}],"sn":"ctor"},{"a":2,"n":".ctor","t":1,"p":[$n[0].Int32,$n[0].String],"pi":[{"n":"x","pt":$n[0].Int32,"ps":0},{"n":"s","pt":$n[0].String,"ps":1}],"sn":"$ctor1"}]}; });
    $m($n[2].ReflectionTests.C11, function () { return {"m":[{"a":2,"n":".ctor","t":1,"p":[$n[0].DateTime],"pi":[{"n":"dt","pt":$n[0].DateTime,"ps":0}],"sn":"ctor"}]}; });
    $m($n[2].ReflectionTests.C12, function () { return {"m":[{"a":2,"n":"F1","t":4,"rt":$n[0].Int32,"sn":"F1"},{"a":2,"n":"F2","t":4,"rt":$n[0].DateTime,"sn":"renamedF2"},{"a":2,"n":"F3","is":true,"t":4,"rt":$n[0].String,"sn":"F3"}]}; });
    $m($n[2].ReflectionTests.C13, function () { return {"m":[{"a":2,"n":"E1","t":2,"ad":{"a":2,"n":"add_E1","t":8,"pi":[{"n":"value","pt":Function,"ps":0}],"sn":"addE1","rt":$n[0].Object,"p":[Function]},"r":{"a":2,"n":"remove_E1","t":8,"pi":[{"n":"value","pt":Function,"ps":0}],"sn":"removeE1","rt":$n[0].Object,"p":[Function]}},{"a":2,"n":"E2","is":true,"t":2,"ad":{"a":2,"n":"add_E2","is":true,"t":8,"pi":[{"n":"value","pt":Function,"ps":0}],"sn":"addE2","rt":$n[0].Object,"p":[Function]},"r":{"a":2,"n":"remove_E2","is":true,"t":8,"pi":[{"n":"value","pt":Function,"ps":0}],"sn":"removeE2","rt":$n[0].Object,"p":[Function]}},{"a":2,"n":"E3","t":2,"ad":{"a":2,"n":"add_E3","t":8,"pi":[{"n":"value","pt":Function,"ps":0}],"tpc":0,"def":function (value) { return this.addedE3Handler = value; },"rt":$n[0].Object,"p":[Function]},"r":{"a":2,"n":"remove_E3","t":8,"pi":[{"n":"value","pt":Function,"ps":0}],"tpc":0,"def":function (value) { return this.removedE3Handler = value; },"rt":$n[0].Object,"p":[Function]}},{"a":2,"n":"E4","is":true,"t":2,"ad":{"a":2,"n":"add_E4","is":true,"t":8,"pi":[{"n":"value","pt":Function,"ps":0}],"tpc":0,"def":function (value) { return Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C13.addedE4Handler = value; },"rt":$n[0].Object,"p":[Function]},"r":{"a":2,"n":"remove_E4","is":true,"t":8,"pi":[{"n":"value","pt":Function,"ps":0}],"tpc":0,"def":function (value) { return Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C13.removedE4Handler = value; },"rt":$n[0].Object,"p":[Function]}}]}; });
    $m($n[2].ReflectionTests.C14, function () { return {"m":[{"a":2,"n":"P1","t":16,"rt":$n[0].Int32,"g":{"a":2,"n":"get_P1","t":8,"rt":$n[0].Int32,"fg":"P1"},"s":{"a":2,"n":"set_P1","t":8,"p":[$n[0].Int32],"rt":$n[0].Object,"fs":"P1"},"fn":"P1"},{"a":2,"n":"P10","t":16,"rt":$n[0].String,"g":{"a":2,"n":"get_P10","t":8,"rt":$n[0].String,"fg":"P10"},"s":{"a":2,"n":"set_P10","t":8,"p":[$n[0].String],"rt":$n[0].Object,"fs":"P10"},"fn":"P10"},{"a":2,"n":"P11","is":true,"t":16,"rt":$n[0].DateTime,"s":{"a":2,"n":"set_P11","t":8,"p":[$n[0].DateTime],"rt":$n[0].Object,"fs":"P11","is":true},"fn":"P11"},{"a":2,"n":"P12","is":true,"t":16,"rt":$n[0].Double,"g":{"a":2,"n":"get_P12","t":8,"rt":$n[0].Double,"fg":"P12","is":true},"s":{"a":2,"n":"set_P12","t":8,"p":[$n[0].Double],"rt":$n[0].Object,"fs":"P12","is":true},"fn":"P12"},{"a":2,"n":"P13","t":16,"rt":$n[0].Int32,"g":{"a":2,"n":"get_P13","t":8,"tpc":0,"def":function () { return this.p13Field; },"rt":$n[0].Int32},"s":{"a":2,"n":"set_P13","t":8,"pi":[{"n":"value","pt":$n[0].Int32,"ps":0}],"tpc":0,"def":function (value) { return this.p13Field = value; },"rt":$n[0].Object,"p":[$n[0].Int32]}},{"a":2,"n":"P14","is":true,"t":16,"rt":$n[0].Int32,"g":{"a":2,"n":"get_P14","is":true,"t":8,"tpc":0,"def":function () { return Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C14.p14Field; },"rt":$n[0].Int32},"s":{"a":2,"n":"set_P14","is":true,"t":8,"pi":[{"n":"value","pt":$n[0].Int32,"ps":0}],"tpc":0,"def":function (value) { return Bridge.ClientTest.Batch4.Reflection.ReflectionTests.C14.p14Field = value; },"rt":$n[0].Object,"p":[$n[0].Int32]}},{"a":2,"n":"P2","t":16,"rt":$n[0].String,"g":{"a":2,"n":"get_P2","t":8,"rt":$n[0].String,"fg":"P2"},"s":{"a":2,"n":"set_P2","t":8,"p":[$n[0].String],"rt":$n[0].Object,"fs":"P2"},"fn":"P2"},{"a":2,"n":"P3","is":true,"t":16,"rt":$n[0].DateTime,"g":{"a":2,"n":"get_P3","t":8,"rt":$n[0].DateTime,"fg":"P3","is":true},"s":{"a":2,"n":"set_P3","t":8,"p":[$n[0].DateTime],"rt":$n[0].Object,"fs":"P3","is":true},"fn":"P3"},{"a":2,"n":"P4","is":true,"t":16,"rt":$n[0].Double,"g":{"a":2,"n":"get_P4","t":8,"rt":$n[0].Double,"fg":"P4","is":true},"s":{"a":2,"n":"set_P4","t":8,"p":[$n[0].Double],"rt":$n[0].Object,"fs":"P4","is":true},"fn":"P4"},{"a":2,"n":"P5","t":16,"rt":$n[0].Int32,"g":{"a":2,"n":"get_P5","t":8,"rt":$n[0].Int32,"fg":"P5"},"fn":"P5"},{"a":2,"n":"P6","t":16,"rt":$n[0].String,"g":{"a":2,"n":"get_P6","t":8,"rt":$n[0].String,"fg":"P6"},"s":{"a":2,"n":"set_P6","t":8,"p":[$n[0].String],"rt":$n[0].Object,"fs":"P6"},"fn":"P6"},{"a":2,"n":"P7","is":true,"t":16,"rt":$n[0].DateTime,"g":{"a":2,"n":"get_P7","t":8,"rt":$n[0].DateTime,"fg":"P7","is":true},"fn":"P7"},{"a":2,"n":"P8","is":true,"t":16,"rt":$n[0].Double,"g":{"a":2,"n":"get_P8","t":8,"rt":$n[0].Double,"fg":"P8","is":true},"s":{"a":2,"n":"set_P8","t":8,"p":[$n[0].Double],"rt":$n[0].Object,"fs":"P8","is":true},"fn":"P8"},{"a":2,"n":"P9","t":16,"rt":$n[0].Int32,"s":{"a":2,"n":"set_P9","t":8,"p":[$n[0].Int32],"rt":$n[0].Object,"fs":"P9"},"fn":"P9"}]}; });
    $m($n[2].ReflectionTests.C15, function () { return {"m":[{"a":2,"n":"Item","t":16,"rt":$n[0].String,"p":[$n[0].Int32,$n[0].String],"i":true,"ipi":[{"n":"x","pt":$n[0].Int32,"ps":0},{"n":"s","pt":$n[0].String,"ps":1}],"g":{"a":2,"n":"get_Item","t":8,"pi":[{"n":"x","pt":$n[0].Int32,"ps":0},{"n":"s","pt":$n[0].String,"ps":1}],"sn":"getItem","rt":$n[0].String,"p":[$n[0].Int32,$n[0].String]},"s":{"a":2,"n":"set_Item","t":8,"pi":[{"n":"x","pt":$n[0].Int32,"ps":0},{"n":"s","pt":$n[0].String,"ps":1},{"n":"value","pt":$n[0].String,"ps":2}],"sn":"setItem","rt":$n[0].Object,"p":[$n[0].Int32,$n[0].String,$n[0].String]}}]}; });
    $m($n[2].ReflectionTests.C16, function () { return {"m":[{"a":2,"n":"Item","t":16,"rt":$n[0].String,"p":[$n[0].Int32,$n[0].String],"i":true,"ipi":[{"n":"x","pt":$n[0].Int32,"ps":0},{"n":"s","pt":$n[0].String,"ps":1}],"g":{"a":2,"n":"get_Item","t":8,"pi":[{"n":"x","pt":$n[0].Int32,"ps":0},{"n":"s","pt":$n[0].String,"ps":1}],"sn":"getItem","rt":$n[0].String,"p":[$n[0].Int32,$n[0].String]}}]}; });
    $m($n[2].ReflectionTests.C17, function () { return {"m":[{"a":2,"n":"Item","t":16,"rt":$n[0].String,"p":[$n[0].Int32,$n[0].String],"i":true,"ipi":[{"n":"x","pt":$n[0].Int32,"ps":0},{"n":"s","pt":$n[0].String,"ps":1}],"s":{"a":2,"n":"set_Item","t":8,"pi":[{"n":"x","pt":$n[0].Int32,"ps":0},{"n":"s","pt":$n[0].String,"ps":1},{"n":"value","pt":$n[0].String,"ps":2}],"sn":"setItem","rt":$n[0].Object,"p":[$n[0].Int32,$n[0].String,$n[0].String]}}]}; });
    $m($n[2].ReflectionTests.C18, function () { return {"m":[{"at":[new Bridge.ClientTest.Batch4.Reflection.ReflectionTests.A1Attribute.$ctor1(1),new Bridge.ClientTest.Batch4.Reflection.ReflectionTests.A3Attribute()],"a":2,"n":".ctor","t":1,"sn":"ctor"},{"at":[new Bridge.ClientTest.Batch4.Reflection.ReflectionTests.A1Attribute.$ctor1(2),new Bridge.ClientTest.Batch4.Reflection.ReflectionTests.A3Attribute()],"a":2,"n":"M","t":8,"sn":"m","rt":$n[0].Object},{"at":[new Bridge.ClientTest.Batch4.Reflection.ReflectionTests.A1Attribute.$ctor1(4),new Bridge.ClientTest.Batch4.Reflection.ReflectionTests.A3Attribute()],"a":2,"n":"P","t":16,"rt":$n[0].Int32,"g":{"at":[new Bridge.ClientTest.Batch4.Reflection.ReflectionTests.A1Attribute.$ctor1(5),new Bridge.ClientTest.Batch4.Reflection.ReflectionTests.A3Attribute()],"a":2,"n":"get_P","t":8,"rt":$n[0].Int32,"fg":"P"},"s":{"at":[new Bridge.ClientTest.Batch4.Reflection.ReflectionTests.A1Attribute.$ctor1(6),new Bridge.ClientTest.Batch4.Reflection.ReflectionTests.A3Attribute()],"a":2,"n":"set_P","t":8,"p":[$n[0].Int32],"rt":$n[0].Object,"fs":"P"},"fn":"P"},{"at":[new Bridge.ClientTest.Batch4.Reflection.ReflectionTests.A1Attribute.$ctor1(3),new Bridge.ClientTest.Batch4.Reflection.ReflectionTests.A3Attribute()],"a":2,"n":"F","t":4,"rt":$n[0].Int32,"sn":"f"},{"at":[new Bridge.ClientTest.Batch4.Reflection.ReflectionTests.A1Attribute.$ctor1(7),new Bridge.ClientTest.Batch4.Reflection.ReflectionTests.A3Attribute()],"a":2,"n":"E","t":2,"ad":{"at":[new Bridge.ClientTest.Batch4.Reflection.ReflectionTests.A1Attribute.$ctor1(8),new Bridge.ClientTest.Batch4.Reflection.ReflectionTests.A3Attribute()],"a":2,"n":"add_E","t":8,"pi":[{"n":"value","pt":Function,"ps":0}],"sn":"addE","rt":$n[0].Object,"p":[Function]},"r":{"at":[new Bridge.ClientTest.Batch4.Reflection.ReflectionTests.A1Attribute.$ctor1(9),new Bridge.ClientTest.Batch4.Reflection.ReflectionTests.A3Attribute()],"a":2,"n":"remove_E","t":8,"pi":[{"n":"value","pt":Function,"ps":0}],"sn":"removeE","rt":$n[0].Object,"p":[Function]}}]}; });
    $m($n[2].ReflectionTests.C19, function () { return {"m":[{"a":2,"n":".ctor","t":1,"p":[$n[0].Int32,$n[0].String],"pi":[{"n":"a","pt":$n[0].Int32,"ps":0},{"n":"b","pt":$n[0].String,"ps":1}],"def":function(a, b) { return {a: a, b: b};}}]}; });
    $m($n[2].ReflectionTests.C2, function () { return {"m":[{"a":2,"n":"M1","t":8,"sn":"M1","rt":$n[0].Object},{"a":2,"n":"M2","is":true,"t":8,"sn":"M2","rt":$n[0].Object}]}; });
    $m($n[2].ReflectionTests.C20, function () { return {"m":[{"a":2,"n":".ctor","t":1,"p":[$n[0].Int32,$n[0].String],"pi":[{"n":"a","pt":$n[0].Int32,"ps":0},{"n":"b","pt":$n[0].String,"ps":1}],"def":function (a, b) { return { a: a, b: b }; }}]}; });
    $m($n[2].ReflectionTests.C21, function () { return {"m":[{"a":2,"n":"M1","t":8,"pi":[{"n":"a","pt":$n[0].Int32,"ps":0},{"n":"b","pt":$n[0].Int32,"ps":1}],"tpc":0,"def":function (a, b) { return this.X + a + b; },"rt":$n[0].Int32,"p":[$n[0].Int32,$n[0].Int32]},{"a":2,"n":"M2","is":true,"t":8,"pi":[{"n":"a","pt":$n[0].Int32,"ps":0},{"n":"b","pt":$n[0].Int32,"ps":1}],"tpc":0,"def":function (a, b) { return a + b; },"rt":$n[0].Int32,"p":[$n[0].Int32,$n[0].Int32]},{"a":2,"n":"M3","t":8,"pi":[{"n":"s","pt":$n[0].String,"ps":0}],"tpc":1,"def":function (T, s) { return this.X + Bridge.Reflection.getTypeFullName(T) + s; },"rt":$n[0].String,"p":[$n[0].String]}]}; });
    $m($n[2].ReflectionTests.C22, function () { return {"m":[{"a":2,"n":".ctor","t":1,"p":[$n[0].Int32,$n[0].Array.type(System.Int32)],"pi":[{"n":"a","pt":$n[0].Int32,"ps":0},{"n":"b","ip":true,"pt":$n[0].Array.type(System.Int32),"ps":1}],"sn":"ctor"},{"a":2,"n":".ctor","t":1,"p":[$n[0].String,$n[0].Array.type(System.String)],"pi":[{"n":"a","pt":$n[0].String,"ps":0},{"n":"b","ip":true,"pt":$n[0].Array.type(System.String),"ps":1}],"sn":"$ctor1","exp":true},{"a":2,"n":"M1","t":8,"pi":[{"n":"a","pt":$n[0].Int32,"ps":0},{"n":"b","ip":true,"pt":$n[0].Array.type(System.Int32),"ps":1}],"sn":"M1","rt":$n[0].Array.type(System.Object),"p":[$n[0].Int32,$n[0].Array.type(System.Int32)]},{"a":2,"n":"M2","exp":true,"t":8,"pi":[{"n":"a","pt":$n[0].Int32,"ps":0},{"n":"b","ip":true,"pt":$n[0].Array.type(System.Int32),"ps":1}],"sn":"M2","rt":$n[0].Array.type(System.Object),"p":[$n[0].Int32,$n[0].Array.type(System.Int32)]}]}; });
    $m($n[2].ReflectionTests.C23, function () { return {"m":[{"a":2,"n":".ctor","t":1,"p":[$n[0].Int32,$n[0].Array.type(System.Int32)],"pi":[{"n":"a","pt":$n[0].Int32,"ps":0},{"n":"b","ip":true,"pt":$n[0].Array.type(System.Int32),"ps":1}],"sn":"ctor"},{"a":2,"n":".ctor","t":1,"p":[$n[0].String,$n[0].Array.type(System.String)],"pi":[{"n":"a","pt":$n[0].String,"ps":0},{"n":"b","ip":true,"pt":$n[0].Array.type(System.String),"ps":1}],"sn":"$ctor1","exp":true},{"a":2,"n":"M1","t":8,"pi":[{"n":"a","pt":$n[0].Int32,"ps":0},{"n":"b","ip":true,"pt":$n[0].Array.type(System.Int32),"ps":1}],"sn":"M1","rt":$n[0].Array.type(System.Object),"p":[$n[0].Int32,$n[0].Array.type(System.Int32)]},{"a":2,"n":"M2","exp":true,"t":8,"pi":[{"n":"a","pt":$n[0].Int32,"ps":0},{"n":"b","ip":true,"pt":$n[0].Array.type(System.Int32),"ps":1}],"sn":"M2","rt":$n[0].Array.type(System.Object),"p":[$n[0].Int32,$n[0].Array.type(System.Int32)]}]}; });
    $m($n[2].ReflectionTests.C24, function () { return {"m":[{"a":2,"n":"Item","t":16,"rt":$n[0].String,"p":[$n[0].Int32,$n[0].String],"i":true,"ipi":[{"n":"x","pt":$n[0].Int32,"ps":0},{"n":"s","pt":$n[0].String,"ps":1}],"g":{"a":2,"n":"get_Item","t":8,"pi":[{"n":"x","pt":$n[0].Int32,"ps":0},{"n":"s","pt":$n[0].String,"ps":1}],"tpc":0,"def":function (x, s) { return this.v + ' ' + x + ' ' + s; },"rt":$n[0].String,"p":[$n[0].Int32,$n[0].String]},"s":{"a":2,"n":"set_Item","t":8,"pi":[{"n":"x","pt":$n[0].Int32,"ps":0},{"n":"s","pt":$n[0].String,"ps":1},{"n":"value","pt":$n[0].String,"ps":2}],"tpc":0,"def":function (x, s, value) { return (function(t, x, s) { t.x = x; t.s = s; t.v = value; })(this, x, s); },"rt":$n[0].Object,"p":[$n[0].Int32,$n[0].String,$n[0].String]}}]}; });
    $m($n[2].ReflectionTests.C3, function () { return {"m":[{"a":2,"n":"M1","t":8,"sn":"M1","rt":$n[0].Int32},{"a":2,"n":"M2","t":8,"pi":[{"n":"x","pt":$n[0].String,"ps":0}],"sn":"M2","rt":$n[0].Int32,"p":[$n[0].String]},{"a":2,"n":"M3","t":8,"pi":[{"n":"x","pt":$n[0].String,"ps":0},{"n":"y","pt":$n[0].Int32,"ps":1}],"sn":"M3","rt":$n[0].Int32,"p":[$n[0].String,$n[0].Int32]},{"a":2,"n":"M4","t":8,"sn":"M4","rt":$n[0].Object}]}; });
    $m($n[2].ReflectionTests.C4, function () { return {"m":[{"a":2,"n":"M","t":8,"sn":"m","rt":$n[0].Object},{"a":2,"n":"M","t":8,"pi":[{"n":"i","pt":$n[0].Int32,"ps":0}],"sn":"m$1","rt":$n[0].Object,"p":[$n[0].Int32]},{"a":2,"n":"M","t":8,"pi":[{"n":"i","pt":$n[0].Int32,"ps":0},{"n":"s","pt":$n[0].String,"ps":1}],"sn":"x","rt":$n[0].Object,"p":[$n[0].Int32,$n[0].String]}]}; });
    $m($n[2].ReflectionTests.C5$2, function (T1, T2) { return {"m":[{"a":2,"n":"M","t":8,"pi":[{"n":"t2","pt":T2,"ps":0},{"n":"s","pt":$n[0].String,"ps":1}],"sn":"m","rt":T1,"p":[T2,$n[0].String]},{"a":2,"n":"M2","t":8,"sn":"M2","rt":$n[0].Object}]}; });
    $m($n[2].ReflectionTests.C6, function () { return {"m":[{"a":2,"n":"M1","t":8,"pi":[{"n":"t2","pt":System.Object,"ps":0},{"n":"s","pt":$n[0].String,"ps":1}],"tpc":2,"tprm":["T1","T2"],"sn":"M1","rt":System.Object,"p":[System.Object,$n[0].String]},{"a":2,"n":"M2","t":8,"pi":[{"n":"s","pt":$n[0].String,"ps":0}],"tpc":1,"tprm":["T1"],"sn":"M2","rt":System.Object,"p":[$n[0].String]},{"a":2,"n":"M3","t":8,"pi":[{"n":"s","pt":$n[0].String,"ps":0}],"sn":"M3","rt":$n[0].Object,"p":[$n[0].String]}]}; });
    $m($n[2].ReflectionTests.C7, function () { return {"m":[{"a":2,"n":"M1","t":8,"pi":[{"n":"x","pt":$n[0].Int32,"ps":0}],"sn":"M1","rt":$n[0].Int32,"p":[$n[0].Int32]},{"a":2,"n":"M2","is":true,"t":8,"pi":[{"n":"x","pt":$n[0].String,"ps":0}],"sn":"M2","rt":$n[0].Object,"p":[$n[0].String]},{"a":2,"n":"M3","t":8,"pi":[{"n":"s","pt":$n[0].String,"ps":0}],"tpc":2,"tprm":["T1","T2"],"sn":"M3","rt":$n[0].String,"p":[$n[0].String]}]}; });
    $m($n[2].ReflectionTests.C8, function () { return {"m":[{"a":2,"n":"M1","t":8,"pi":[{"n":"a","pt":$n[0].String,"ps":0},{"n":"b","pt":$n[0].String,"ps":1}],"sn":"M1","rt":$n[0].String,"p":[$n[0].String,$n[0].String]},{"a":2,"n":"M2","is":true,"t":8,"pi":[{"n":"a","pt":$n[0].String,"ps":0},{"n":"b","pt":$n[0].String,"ps":1}],"sn":"M2","rt":$n[0].String,"p":[$n[0].String,$n[0].String]},{"a":2,"n":"M3","t":8,"pi":[{"n":"a","pt":$n[0].String,"ps":0}],"tpc":2,"tprm":["T1","T2"],"sn":"M3","rt":$n[0].String,"p":[$n[0].String]},{"a":2,"n":"M4","is":true,"t":8,"pi":[{"n":"a","pt":$n[0].String,"ps":0}],"tpc":2,"tprm":["T1","T2"],"sn":"M4","rt":$n[0].String,"p":[$n[0].String]}]}; });
    $m($n[2].ReflectionTests.C9$2, function (T1, T2) { return {"m":[{"a":2,"n":"M","is":true,"t":8,"pi":[{"n":"a","pt":$n[0].String,"ps":0}],"sn":"m","rt":$n[0].String,"p":[$n[0].String]}]}; });
    $m($n[2].ReflectionTests.S1, function () { return {"m":[{"at":[new Bridge.ClientTest.Batch4.Reflection.ReflectionTests.A1Attribute.ctor()],"a":2,"n":"M2","t":8,"sn":"M2","rt":$n[0].Object},{"a":2,"n":"M3","t":8,"sn":"M3","rt":$n[0].Object}]}; });
    $m($n[2].AttributeTests.C3, function () { return {"at":[new Bridge.ClientTest.Batch4.Reflection.AttributeTests.A3Attribute(3)]}; });
    $m($n[2].AttributeTests.C5, function () { return {"at":[new Bridge.ClientTest.Batch4.Reflection.AttributeTests.A1Attribute(5)]}; });
    $m($n[2].AttributeTests.C6, function () { return {"at":[new Bridge.ClientTest.Batch4.Reflection.AttributeTests.A2Attribute(6)]}; });
    $m($n[2].GetMembersTests.C1, function () { return {"m":[{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(201)],"a":2,"n":".ctor","t":1,"sn":"ctor"},{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(202)],"a":2,"n":".ctor","t":1,"p":[$n[0].Int32],"pi":[{"n":"x","pt":$n[0].Int32,"ps":0}],"sn":"$ctor1"},{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(203)],"a":2,"n":".ctor","t":1,"p":[$n[0].Int32,$n[0].String],"pi":[{"n":"x","pt":$n[0].Int32,"ps":0},{"n":"y","pt":$n[0].String,"ps":1}],"sn":"$ctor2"},{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(211)],"a":2,"n":"MC","t":8,"sn":"MC","rt":$n[0].Object},{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(212)],"a":2,"n":"MC","t":8,"pi":[{"n":"x","pt":$n[0].Int32,"ps":0}],"sn":"MC$1","rt":$n[0].Object,"p":[$n[0].Int32]},{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(213)],"a":2,"n":"MC","t":8,"pi":[{"n":"x","pt":$n[0].Int32,"ps":0},{"n":"y","pt":$n[0].String,"ps":1}],"sn":"MC$2","rt":$n[0].Object,"p":[$n[0].Int32,$n[0].String]},{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(214)],"a":2,"n":"MC2","t":8,"pi":[{"n":"x","pt":$n[0].Int32,"ps":0},{"n":"y","pt":$n[0].String,"ps":1}],"sn":"MC2","rt":$n[0].Object,"p":[$n[0].Int32,$n[0].String]},{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(221)],"a":2,"n":"MCS","is":true,"t":8,"sn":"MCS","rt":$n[0].Object},{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(222)],"a":2,"n":"MCS","is":true,"t":8,"pi":[{"n":"x","pt":$n[0].Int32,"ps":0}],"sn":"MCS$1","rt":$n[0].Object,"p":[$n[0].Int32]},{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(223)],"a":2,"n":"MCS","is":true,"t":8,"pi":[{"n":"x","pt":$n[0].Int32,"ps":0},{"n":"y","pt":$n[0].String,"ps":1}],"sn":"MCS$2","rt":$n[0].Object,"p":[$n[0].Int32,$n[0].String]},{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(224)],"a":2,"n":"MCS2","is":true,"t":8,"pi":[{"n":"x","pt":$n[0].Int32,"ps":0},{"n":"y","pt":$n[0].String,"ps":1}],"sn":"MCS2","rt":$n[0].Object,"p":[$n[0].Int32,$n[0].String]},{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(257)],"a":2,"n":"Item","t":16,"rt":$n[0].Int32,"p":[$n[0].String],"i":true,"ipi":[{"n":"x","pt":$n[0].String,"ps":0}],"g":{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(258)],"a":2,"n":"get_Item","t":8,"pi":[{"n":"x","pt":$n[0].String,"ps":0}],"sn":"getItem$1","rt":$n[0].Int32,"p":[$n[0].String]},"s":{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(259)],"a":2,"n":"set_Item","t":8,"pi":[{"n":"x","pt":$n[0].String,"ps":0},{"n":"value","pt":$n[0].Int32,"ps":1}],"sn":"setItem$1","rt":$n[0].Object,"p":[$n[0].String,$n[0].Int32]}},{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(251)],"a":2,"n":"PC1","t":16,"rt":$n[0].Int32,"g":{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(252)],"a":2,"n":"get_PC1","t":8,"rt":$n[0].Int32,"fg":"PC1"},"s":{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(253)],"a":2,"n":"set_PC1","t":8,"p":[$n[0].Int32],"rt":$n[0].Object,"fs":"PC1"},"fn":"PC1"},{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(254)],"a":2,"n":"PC2","t":16,"rt":$n[0].Int32,"g":{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(255)],"a":2,"n":"get_PC2","t":8,"rt":$n[0].Int32,"fg":"PC2"},"s":{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(256)],"a":2,"n":"set_PC2","t":8,"p":[$n[0].Int32],"rt":$n[0].Object,"fs":"PC2"},"fn":"PC2"},{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(261)],"a":2,"n":"PCS1","is":true,"t":16,"rt":$n[0].Int32,"g":{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(262)],"a":2,"n":"get_PCS1","t":8,"rt":$n[0].Int32,"fg":"PCS1","is":true},"s":{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(263)],"a":2,"n":"set_PCS1","t":8,"p":[$n[0].Int32],"rt":$n[0].Object,"fs":"PCS1","is":true},"fn":"PCS1"},{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(264)],"a":2,"n":"PCS2","is":true,"t":16,"rt":$n[0].Int32,"g":{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(265)],"a":2,"n":"get_PCS2","t":8,"rt":$n[0].Int32,"fg":"PCS2","is":true},"s":{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(266)],"a":2,"n":"set_PCS2","t":8,"p":[$n[0].Int32],"rt":$n[0].Object,"fs":"PCS2","is":true},"fn":"PCS2"},{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(231)],"a":2,"n":"FC1","t":4,"rt":$n[0].Int32,"sn":"FC1"},{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(232)],"a":2,"n":"FC2","t":4,"rt":$n[0].Int32,"sn":"FC2"},{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(241)],"a":2,"n":"FCS1","is":true,"t":4,"rt":$n[0].Int32,"sn":"FCS1"},{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(242)],"a":2,"n":"FCS2","is":true,"t":4,"rt":$n[0].Int32,"sn":"FCS2"},{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(271)],"a":2,"n":"EC1","t":2,"ad":{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(272)],"a":2,"n":"add_EC1","t":8,"pi":[{"n":"value","pt":Function,"ps":0}],"sn":"addEC1","rt":$n[0].Object,"p":[Function]},"r":{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(273)],"a":2,"n":"remove_EC1","t":8,"pi":[{"n":"value","pt":Function,"ps":0}],"sn":"removeEC1","rt":$n[0].Object,"p":[Function]}},{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(274)],"a":2,"n":"EC2","t":2,"ad":{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(275)],"a":2,"n":"add_EC2","t":8,"pi":[{"n":"value","pt":Function,"ps":0}],"sn":"addEC2","rt":$n[0].Object,"p":[Function]},"r":{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(276)],"a":2,"n":"remove_EC2","t":8,"pi":[{"n":"value","pt":Function,"ps":0}],"sn":"removeEC2","rt":$n[0].Object,"p":[Function]}},{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(281)],"a":2,"n":"ECS1","is":true,"t":2,"ad":{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(282)],"a":2,"n":"add_ECS1","is":true,"t":8,"pi":[{"n":"value","pt":Function,"ps":0}],"sn":"addECS1","rt":$n[0].Object,"p":[Function]},"r":{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(283)],"a":2,"n":"remove_ECS1","is":true,"t":8,"pi":[{"n":"value","pt":Function,"ps":0}],"sn":"removeECS1","rt":$n[0].Object,"p":[Function]}},{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(284)],"a":2,"n":"ECS2","is":true,"t":2,"ad":{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(285)],"a":2,"n":"add_ECS2","is":true,"t":8,"pi":[{"n":"value","pt":Function,"ps":0}],"sn":"addECS2","rt":$n[0].Object,"p":[Function]},"r":{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(286)],"a":2,"n":"remove_ECS2","is":true,"t":8,"pi":[{"n":"value","pt":Function,"ps":0}],"sn":"removeECS2","rt":$n[0].Object,"p":[Function]}}]}; });
    $m($n[2].GetMembersTests.C2, function () { return {"m":[{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(211)],"a":2,"n":"M","t":8,"sn":"m$1","rt":$n[0].Object},{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(213)],"a":2,"n":"M2","t":8,"pi":[{"n":"x","pt":$n[0].Int32,"ps":0}],"sn":"M2$2","rt":$n[0].Object,"p":[$n[0].Int32]},{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(214)],"a":2,"n":"M2","t":8,"pi":[{"n":"x","pt":$n[0].String,"ps":0}],"sn":"M2$3","rt":$n[0].Object,"p":[$n[0].String]},{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(215)],"a":2,"n":"M2C","t":8,"pi":[{"n":"x","pt":$n[0].Int32,"ps":0}],"sn":"M2C","rt":$n[0].Object,"p":[$n[0].Int32]},{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(216)],"a":2,"n":"M2C","t":8,"pi":[{"n":"x","pt":$n[0].String,"ps":0}],"sn":"M2C$1","rt":$n[0].Object,"p":[$n[0].String]},{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(225)],"a":2,"n":"M2CS","is":true,"t":8,"pi":[{"n":"x","pt":$n[0].Int32,"ps":0}],"sn":"M2CS","rt":$n[0].Object,"p":[$n[0].Int32]},{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(226)],"a":2,"n":"M2CS","is":true,"t":8,"pi":[{"n":"x","pt":$n[0].String,"ps":0}],"sn":"M2CS$1","rt":$n[0].Object,"p":[$n[0].String]},{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(223)],"a":2,"n":"M2S","is":true,"t":8,"pi":[{"n":"x","pt":$n[0].Int32,"ps":0}],"sn":"M2S","rt":$n[0].Object,"p":[$n[0].Int32]},{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(224)],"a":2,"n":"M2S","is":true,"t":8,"pi":[{"n":"x","pt":$n[0].String,"ps":0}],"sn":"M2S$1","rt":$n[0].Object,"p":[$n[0].String]},{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(217)],"a":2,"n":"M3","t":8,"pi":[{"n":"x","pt":$n[0].String,"ps":0}],"sn":"M3$1","rt":$n[0].Object,"p":[$n[0].String]},{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(227)],"a":2,"n":"M3S","is":true,"t":8,"pi":[{"n":"x","pt":$n[0].String,"ps":0}],"sn":"M3S","rt":$n[0].Object,"p":[$n[0].String]},{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(212)],"a":2,"n":"MC","t":8,"sn":"MC","rt":$n[0].Object},{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(222)],"a":2,"n":"MCS","is":true,"t":8,"sn":"MCS","rt":$n[0].Object},{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(221)],"a":2,"n":"MS","is":true,"t":8,"sn":"MS","rt":$n[0].Object},{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(253)],"a":2,"n":"Item","t":16,"rt":$n[0].Int32,"p":[$n[0].Int32],"i":true,"ipi":[{"n":"x","pt":$n[0].Int32,"ps":0}],"g":{"a":2,"n":"get_Item","t":8,"pi":[{"n":"x","pt":$n[0].Int32,"ps":0}],"sn":"getItem$2","rt":$n[0].Int32,"p":[$n[0].Int32]},"s":{"a":2,"n":"set_Item","t":8,"pi":[{"n":"x","pt":$n[0].Int32,"ps":0},{"n":"value","pt":$n[0].Int32,"ps":1}],"sn":"setItem$2","rt":$n[0].Object,"p":[$n[0].Int32,$n[0].Int32]}},{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(254)],"a":2,"n":"Item","t":16,"rt":$n[0].Int32,"p":[$n[0].Double],"i":true,"ipi":[{"n":"x","pt":$n[0].Double,"ps":0}],"g":{"a":2,"n":"get_Item","t":8,"pi":[{"n":"x","pt":$n[0].Double,"ps":0}],"sn":"getItem$3","rt":$n[0].Int32,"p":[$n[0].Double]},"s":{"a":2,"n":"set_Item","t":8,"pi":[{"n":"x","pt":$n[0].Double,"ps":0},{"n":"value","pt":$n[0].Int32,"ps":1}],"sn":"setItem$3","rt":$n[0].Object,"p":[$n[0].Double,$n[0].Int32]}},{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(251)],"a":2,"n":"P","t":16,"rt":$n[0].Int32,"g":{"a":2,"n":"get_P","t":8,"rt":$n[0].Int32,"fg":"P$1"},"s":{"a":2,"n":"set_P","t":8,"p":[$n[0].Int32],"rt":$n[0].Object,"fs":"P$1"},"fn":"P$1"},{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(252)],"a":2,"n":"PC","t":16,"rt":$n[0].Int32,"g":{"a":2,"n":"get_PC","t":8,"rt":$n[0].Int32,"fg":"PC"},"s":{"a":2,"n":"set_PC","t":8,"p":[$n[0].Int32],"rt":$n[0].Object,"fs":"PC"},"fn":"PC"},{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(262)],"a":2,"n":"PCS","is":true,"t":16,"rt":$n[0].Int32,"g":{"a":2,"n":"get_PCS","t":8,"rt":$n[0].Int32,"fg":"PCS","is":true},"s":{"a":2,"n":"set_PCS","t":8,"p":[$n[0].Int32],"rt":$n[0].Object,"fs":"PCS","is":true},"fn":"PCS"},{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(261)],"a":2,"n":"PS","is":true,"t":16,"rt":$n[0].Int32,"g":{"a":2,"n":"get_PS","t":8,"rt":$n[0].Int32,"fg":"PS","is":true},"s":{"a":2,"n":"set_PS","t":8,"p":[$n[0].Int32],"rt":$n[0].Object,"fs":"PS","is":true},"fn":"PS"},{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(231)],"a":2,"n":"F","t":4,"rt":$n[0].Int32,"sn":"f$1"},{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(232)],"a":2,"n":"FC","t":4,"rt":$n[0].Int32,"sn":"FC"},{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(242)],"a":2,"n":"FCS","is":true,"t":4,"rt":$n[0].Int32,"sn":"FCS"},{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(241)],"a":2,"n":"FS","is":true,"t":4,"rt":$n[0].Int32,"sn":"FS"},{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(271)],"a":2,"n":"E","t":2,"ad":{"a":2,"n":"add_E","t":8,"pi":[{"n":"value","pt":Function,"ps":0}],"sn":"addE$1","rt":$n[0].Object,"p":[Function]},"r":{"a":2,"n":"remove_E","t":8,"pi":[{"n":"value","pt":Function,"ps":0}],"sn":"removeE$1","rt":$n[0].Object,"p":[Function]}},{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(272)],"a":2,"n":"EC","t":2,"ad":{"a":2,"n":"add_EC","t":8,"pi":[{"n":"value","pt":Function,"ps":0}],"sn":"addEC","rt":$n[0].Object,"p":[Function]},"r":{"a":2,"n":"remove_EC","t":8,"pi":[{"n":"value","pt":Function,"ps":0}],"sn":"removeEC","rt":$n[0].Object,"p":[Function]}},{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(282)],"a":2,"n":"ECS","is":true,"t":2,"ad":{"a":2,"n":"add_ECS","is":true,"t":8,"pi":[{"n":"value","pt":Function,"ps":0}],"sn":"addECS","rt":$n[0].Object,"p":[Function]},"r":{"a":2,"n":"remove_ECS","is":true,"t":8,"pi":[{"n":"value","pt":Function,"ps":0}],"sn":"removeECS","rt":$n[0].Object,"p":[Function]}},{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(281)],"a":2,"n":"ES","is":true,"t":2,"ad":{"a":2,"n":"add_ES","is":true,"t":8,"pi":[{"n":"value","pt":Function,"ps":0}],"sn":"addES","rt":$n[0].Object,"p":[Function]},"r":{"a":2,"n":"remove_ES","is":true,"t":8,"pi":[{"n":"value","pt":Function,"ps":0}],"sn":"removeES","rt":$n[0].Object,"p":[Function]}}]}; });
    $m($n[2].GetMembersTests.I2, function () { return {"m":[{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(511)],"ab":true,"a":2,"n":"MI2","t":8,"sn":"Bridge$ClientTest$Batch4$Reflection$GetMembersTests$I2$MI2","rt":$n[0].Object},{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(512)],"ab":true,"a":2,"n":"MI2","t":8,"pi":[{"n":"x","pt":$n[0].Int32,"ps":0}],"sn":"Bridge$ClientTest$Batch4$Reflection$GetMembersTests$I2$MI2$1","rt":$n[0].Object,"p":[$n[0].Int32]},{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(513)],"ab":true,"a":2,"n":"MI2","t":8,"pi":[{"n":"x","pt":$n[0].Int32,"ps":0},{"n":"y","pt":$n[0].String,"ps":1}],"sn":"Bridge$ClientTest$Batch4$Reflection$GetMembersTests$I2$MI2$2","rt":$n[0].Object,"p":[$n[0].Int32,$n[0].String]},{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(514)],"ab":true,"a":2,"n":"MI22","t":8,"pi":[{"n":"x","pt":$n[0].Int32,"ps":0},{"n":"y","pt":$n[0].String,"ps":1}],"sn":"Bridge$ClientTest$Batch4$Reflection$GetMembersTests$I2$MI22","rt":$n[0].Object,"p":[$n[0].Int32,$n[0].String]},{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(557)],"ab":true,"a":2,"n":"Item","t":16,"rt":$n[0].Int32,"p":[$n[0].String],"i":true,"ipi":[{"n":"x","pt":$n[0].String,"ps":0}],"g":{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(558)],"ab":true,"a":2,"n":"get_Item","t":8,"pi":[{"n":"x","pt":$n[0].String,"ps":0}],"sn":"Bridge$ClientTest$Batch4$Reflection$GetMembersTests$I2$get_item2","rt":$n[0].Int32,"p":[$n[0].String]},"s":{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(559)],"ab":true,"a":2,"n":"set_Item","t":8,"pi":[{"n":"x","pt":$n[0].String,"ps":0},{"n":"value","pt":$n[0].Int32,"ps":1}],"sn":"Bridge$ClientTest$Batch4$Reflection$GetMembersTests$I2$set_item2","rt":$n[0].Object,"p":[$n[0].String,$n[0].Int32]}},{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(551)],"ab":true,"a":2,"n":"PI21","t":16,"rt":$n[0].Int32,"g":{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(552)],"ab":true,"a":2,"n":"get_PI21","t":8,"rt":$n[0].Int32,"fg":"Bridge$ClientTest$Batch4$Reflection$GetMembersTests$I2$PI21"},"s":{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(553)],"ab":true,"a":2,"n":"set_PI21","t":8,"p":[$n[0].Int32],"rt":$n[0].Object,"fs":"Bridge$ClientTest$Batch4$Reflection$GetMembersTests$I2$PI21"},"fn":"Bridge$ClientTest$Batch4$Reflection$GetMembersTests$I2$PI21"},{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(554)],"ab":true,"a":2,"n":"PI22","t":16,"rt":$n[0].Int32,"g":{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(555)],"ab":true,"a":2,"n":"get_PI22","t":8,"rt":$n[0].Int32,"fg":"Bridge$ClientTest$Batch4$Reflection$GetMembersTests$I2$PI22"},"s":{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(556)],"ab":true,"a":2,"n":"set_PI22","t":8,"p":[$n[0].Int32],"rt":$n[0].Object,"fs":"Bridge$ClientTest$Batch4$Reflection$GetMembersTests$I2$PI22"},"fn":"Bridge$ClientTest$Batch4$Reflection$GetMembersTests$I2$PI22"},{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(571)],"ab":true,"a":2,"n":"EI21","t":2,"ad":{"ab":true,"a":2,"n":"add_EI21","t":8,"pi":[{"n":"value","pt":Function,"ps":0}],"sn":"Bridge$ClientTest$Batch4$Reflection$GetMembersTests$I2$addEI21","rt":$n[0].Object,"p":[Function]},"r":{"ab":true,"a":2,"n":"remove_EI21","t":8,"pi":[{"n":"value","pt":Function,"ps":0}],"sn":"Bridge$ClientTest$Batch4$Reflection$GetMembersTests$I2$removeEI21","rt":$n[0].Object,"p":[Function]}},{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(574)],"ab":true,"a":2,"n":"EI22","t":2,"ad":{"ab":true,"a":2,"n":"add_EI22","t":8,"pi":[{"n":"value","pt":Function,"ps":0}],"sn":"Bridge$ClientTest$Batch4$Reflection$GetMembersTests$I2$addEI22","rt":$n[0].Object,"p":[Function]},"r":{"ab":true,"a":2,"n":"remove_EI22","t":8,"pi":[{"n":"value","pt":Function,"ps":0}],"sn":"Bridge$ClientTest$Batch4$Reflection$GetMembersTests$I2$removeEI22","rt":$n[0].Object,"p":[Function]}}]}; });
    $m($n[2].AttributeTests.C4, function () { return {"at":[new Bridge.ClientTest.Batch4.Reflection.AttributeTests.A4Attribute(4)]}; });
    $m($n[2].GetMembersTests.D1, function () { return {"m":[{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(301)],"a":2,"n":".ctor","t":1,"sn":"ctor"},{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(302)],"a":2,"n":".ctor","t":1,"p":[$n[0].Int32],"pi":[{"n":"x","pt":$n[0].Int32,"ps":0}],"sn":"$ctor1"},{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(303)],"a":2,"n":".ctor","t":1,"p":[$n[0].Int32,$n[0].String],"pi":[{"n":"x","pt":$n[0].Int32,"ps":0},{"n":"y","pt":$n[0].String,"ps":1}],"sn":"$ctor2"},{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(311)],"a":2,"n":"MD","t":8,"sn":"MD","rt":$n[0].Object},{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(312)],"a":2,"n":"MD","t":8,"pi":[{"n":"x","pt":$n[0].Int32,"ps":0}],"sn":"MD$1","rt":$n[0].Object,"p":[$n[0].Int32]},{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(313)],"a":2,"n":"MD","t":8,"pi":[{"n":"x","pt":$n[0].Int32,"ps":0},{"n":"y","pt":$n[0].String,"ps":1}],"sn":"MD$2","rt":$n[0].Object,"p":[$n[0].Int32,$n[0].String]},{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(314)],"a":2,"n":"MD2","t":8,"pi":[{"n":"x","pt":$n[0].Int32,"ps":0},{"n":"y","pt":$n[0].String,"ps":1}],"sn":"MD2","rt":$n[0].Object,"p":[$n[0].Int32,$n[0].String]},{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(321)],"a":2,"n":"MDS","is":true,"t":8,"sn":"MDS","rt":$n[0].Object},{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(322)],"a":2,"n":"MDS","is":true,"t":8,"pi":[{"n":"x","pt":$n[0].Int32,"ps":0}],"sn":"MDS$1","rt":$n[0].Object,"p":[$n[0].Int32]},{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(323)],"a":2,"n":"MDS","is":true,"t":8,"pi":[{"n":"x","pt":$n[0].Int32,"ps":0},{"n":"y","pt":$n[0].String,"ps":1}],"sn":"MDS$2","rt":$n[0].Object,"p":[$n[0].Int32,$n[0].String]},{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(324)],"a":2,"n":"MDS2","is":true,"t":8,"pi":[{"n":"x","pt":$n[0].Int32,"ps":0},{"n":"y","pt":$n[0].String,"ps":1}],"sn":"MDS2","rt":$n[0].Object,"p":[$n[0].Int32,$n[0].String]},{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(357)],"a":2,"n":"Item","t":16,"rt":$n[0].Int32,"p":[$n[0].Double],"i":true,"ipi":[{"n":"x","pt":$n[0].Double,"ps":0}],"g":{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(358)],"a":2,"n":"get_Item","t":8,"pi":[{"n":"x","pt":$n[0].Double,"ps":0}],"sn":"getItem$2","rt":$n[0].Int32,"p":[$n[0].Double]},"s":{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(359)],"a":2,"n":"set_Item","t":8,"pi":[{"n":"x","pt":$n[0].Double,"ps":0},{"n":"value","pt":$n[0].Int32,"ps":1}],"sn":"setItem$2","rt":$n[0].Object,"p":[$n[0].Double,$n[0].Int32]}},{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(351)],"a":2,"n":"PD1","t":16,"rt":$n[0].Int32,"g":{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(352)],"a":2,"n":"get_PD1","t":8,"rt":$n[0].Int32,"fg":"PD1"},"s":{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(353)],"a":2,"n":"set_PD1","t":8,"p":[$n[0].Int32],"rt":$n[0].Object,"fs":"PD1"},"fn":"PD1"},{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(354)],"a":2,"n":"PD2","t":16,"rt":$n[0].Int32,"g":{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(355)],"a":2,"n":"get_PD2","t":8,"rt":$n[0].Int32,"fg":"PD2"},"s":{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(356)],"a":2,"n":"set_PD2","t":8,"p":[$n[0].Int32],"rt":$n[0].Object,"fs":"PD2"},"fn":"PD2"},{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(361)],"a":2,"n":"PDS1","is":true,"t":16,"rt":$n[0].Int32,"g":{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(362)],"a":2,"n":"get_PDS1","t":8,"rt":$n[0].Int32,"fg":"PDS1","is":true},"s":{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(363)],"a":2,"n":"set_PDS1","t":8,"p":[$n[0].Int32],"rt":$n[0].Object,"fs":"PDS1","is":true},"fn":"PDS1"},{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(364)],"a":2,"n":"PDS2","is":true,"t":16,"rt":$n[0].Int32,"g":{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(365)],"a":2,"n":"get_PDS2","t":8,"rt":$n[0].Int32,"fg":"PDS2","is":true},"s":{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(366)],"a":2,"n":"set_PDS2","t":8,"p":[$n[0].Int32],"rt":$n[0].Object,"fs":"PDS2","is":true},"fn":"PDS2"},{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(331)],"a":2,"n":"FD1","t":4,"rt":$n[0].Int32,"sn":"FD1"},{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(332)],"a":2,"n":"FD2","t":4,"rt":$n[0].Int32,"sn":"FD2"},{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(341)],"a":2,"n":"FDS1","is":true,"t":4,"rt":$n[0].Int32,"sn":"FDS1"},{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(342)],"a":2,"n":"FDS2","is":true,"t":4,"rt":$n[0].Int32,"sn":"FDS2"},{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(371)],"a":2,"n":"ED1","t":2,"ad":{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(372)],"a":2,"n":"add_ED1","t":8,"pi":[{"n":"value","pt":Function,"ps":0}],"sn":"addED1","rt":$n[0].Object,"p":[Function]},"r":{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(373)],"a":2,"n":"remove_ED1","t":8,"pi":[{"n":"value","pt":Function,"ps":0}],"sn":"removeED1","rt":$n[0].Object,"p":[Function]}},{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(374)],"a":2,"n":"ED2","t":2,"ad":{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(375)],"a":2,"n":"add_ED2","t":8,"pi":[{"n":"value","pt":Function,"ps":0}],"sn":"addED2","rt":$n[0].Object,"p":[Function]},"r":{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(376)],"a":2,"n":"remove_ED2","t":8,"pi":[{"n":"value","pt":Function,"ps":0}],"sn":"removeED2","rt":$n[0].Object,"p":[Function]}},{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(381)],"a":2,"n":"EDS1","is":true,"t":2,"ad":{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(382)],"a":2,"n":"add_EDS1","is":true,"t":8,"pi":[{"n":"value","pt":Function,"ps":0}],"sn":"addEDS1","rt":$n[0].Object,"p":[Function]},"r":{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(383)],"a":2,"n":"remove_EDS1","is":true,"t":8,"pi":[{"n":"value","pt":Function,"ps":0}],"sn":"removeEDS1","rt":$n[0].Object,"p":[Function]}},{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(384)],"a":2,"n":"EDS2","is":true,"t":2,"ad":{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(385)],"a":2,"n":"add_EDS2","is":true,"t":8,"pi":[{"n":"value","pt":Function,"ps":0}],"sn":"addEDS2","rt":$n[0].Object,"p":[Function]},"r":{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(386)],"a":2,"n":"remove_EDS2","is":true,"t":8,"pi":[{"n":"value","pt":Function,"ps":0}],"sn":"removeEDS2","rt":$n[0].Object,"p":[Function]}}]}; });
    $m($n[2].GetMembersTests.D2, function () { return {"m":[{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(311)],"a":2,"n":"M","t":8,"sn":"m$2","rt":$n[0].Object},{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(313)],"a":2,"n":"M2","t":8,"pi":[{"n":"x","pt":$n[0].Int32,"ps":0}],"sn":"M2$4","rt":$n[0].Object,"p":[$n[0].Int32]},{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(314)],"a":2,"n":"M2","t":8,"pi":[{"n":"x","pt":$n[0].String,"ps":0}],"sn":"M2$5","rt":$n[0].Object,"p":[$n[0].String]},{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(315)],"a":2,"n":"M2D","t":8,"pi":[{"n":"x","pt":$n[0].Int32,"ps":0}],"sn":"M2D","rt":$n[0].Object,"p":[$n[0].Int32]},{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(316)],"a":2,"n":"M2D","t":8,"pi":[{"n":"x","pt":$n[0].String,"ps":0}],"sn":"M2D$1","rt":$n[0].Object,"p":[$n[0].String]},{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(325)],"a":2,"n":"M2DS","is":true,"t":8,"pi":[{"n":"x","pt":$n[0].Int32,"ps":0}],"sn":"M2DS","rt":$n[0].Object,"p":[$n[0].Int32]},{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(326)],"a":2,"n":"M2DS","is":true,"t":8,"pi":[{"n":"x","pt":$n[0].String,"ps":0}],"sn":"M2DS$1","rt":$n[0].Object,"p":[$n[0].String]},{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(323)],"a":2,"n":"M2S","is":true,"t":8,"pi":[{"n":"x","pt":$n[0].Int32,"ps":0}],"sn":"M2S","rt":$n[0].Object,"p":[$n[0].Int32]},{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(324)],"a":2,"n":"M2S","is":true,"t":8,"pi":[{"n":"x","pt":$n[0].String,"ps":0}],"sn":"M2S$1","rt":$n[0].Object,"p":[$n[0].String]},{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(317)],"a":2,"n":"M3","t":8,"pi":[{"n":"x","pt":$n[0].DateTime,"ps":0}],"sn":"M3$2","rt":$n[0].Object,"p":[$n[0].DateTime]},{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(327)],"a":2,"n":"M3S","is":true,"t":8,"pi":[{"n":"x","pt":$n[0].DateTime,"ps":0}],"sn":"M3S","rt":$n[0].Object,"p":[$n[0].DateTime]},{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(312)],"a":2,"n":"MD","t":8,"sn":"MD","rt":$n[0].Object},{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(322)],"a":2,"n":"MDS","is":true,"t":8,"sn":"MDS","rt":$n[0].Object},{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(321)],"a":2,"n":"MS","is":true,"t":8,"sn":"MS","rt":$n[0].Object},{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(353)],"a":2,"n":"Item","t":16,"rt":$n[0].Int32,"p":[$n[0].Int32],"i":true,"ipi":[{"n":"x","pt":$n[0].Int32,"ps":0}],"g":{"a":2,"n":"get_Item","t":8,"pi":[{"n":"x","pt":$n[0].Int32,"ps":0}],"sn":"getItem$4","rt":$n[0].Int32,"p":[$n[0].Int32]},"s":{"a":2,"n":"set_Item","t":8,"pi":[{"n":"x","pt":$n[0].Int32,"ps":0},{"n":"value","pt":$n[0].Int32,"ps":1}],"sn":"setItem$4","rt":$n[0].Object,"p":[$n[0].Int32,$n[0].Int32]}},{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(354)],"a":2,"n":"Item","t":16,"rt":$n[0].Int32,"p":[$n[0].DateTime],"i":true,"ipi":[{"n":"x","pt":$n[0].DateTime,"ps":0}],"g":{"a":2,"n":"get_Item","t":8,"pi":[{"n":"x","pt":$n[0].DateTime,"ps":0}],"sn":"getItem$5","rt":$n[0].Int32,"p":[$n[0].DateTime]},"s":{"a":2,"n":"set_Item","t":8,"pi":[{"n":"x","pt":$n[0].DateTime,"ps":0},{"n":"value","pt":$n[0].Int32,"ps":1}],"sn":"setItem$5","rt":$n[0].Object,"p":[$n[0].DateTime,$n[0].Int32]}},{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(351)],"a":2,"n":"P","t":16,"rt":$n[0].Int32,"g":{"a":2,"n":"get_P","t":8,"rt":$n[0].Int32,"fg":"P$2"},"s":{"a":2,"n":"set_P","t":8,"p":[$n[0].Int32],"rt":$n[0].Object,"fs":"P$2"},"fn":"P$2"},{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(352)],"a":2,"n":"PD","t":16,"rt":$n[0].Int32,"g":{"a":2,"n":"get_PD","t":8,"rt":$n[0].Int32,"fg":"PD"},"s":{"a":2,"n":"set_PD","t":8,"p":[$n[0].Int32],"rt":$n[0].Object,"fs":"PD"},"fn":"PD"},{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(362)],"a":2,"n":"PDS","is":true,"t":16,"rt":$n[0].Int32,"g":{"a":2,"n":"get_PDS","t":8,"rt":$n[0].Int32,"fg":"PDS","is":true},"s":{"a":2,"n":"set_PDS","t":8,"p":[$n[0].Int32],"rt":$n[0].Object,"fs":"PDS","is":true},"fn":"PDS"},{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(361)],"a":2,"n":"PS","is":true,"t":16,"rt":$n[0].Int32,"g":{"a":2,"n":"get_PS","t":8,"rt":$n[0].Int32,"fg":"PS","is":true},"s":{"a":2,"n":"set_PS","t":8,"p":[$n[0].Int32],"rt":$n[0].Object,"fs":"PS","is":true},"fn":"PS"},{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(331)],"a":2,"n":"F","t":4,"rt":$n[0].Int32,"sn":"f$2"},{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(332)],"a":2,"n":"FD","t":4,"rt":$n[0].Int32,"sn":"FD"},{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(342)],"a":2,"n":"FDS","is":true,"t":4,"rt":$n[0].Int32,"sn":"FDS"},{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(341)],"a":2,"n":"FS","is":true,"t":4,"rt":$n[0].Int32,"sn":"FS"},{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(371)],"a":2,"n":"E","t":2,"ad":{"a":2,"n":"add_E","t":8,"pi":[{"n":"value","pt":Function,"ps":0}],"sn":"addE$2","rt":$n[0].Object,"p":[Function]},"r":{"a":2,"n":"remove_E","t":8,"pi":[{"n":"value","pt":Function,"ps":0}],"sn":"removeE$2","rt":$n[0].Object,"p":[Function]}},{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(372)],"a":2,"n":"ED","t":2,"ad":{"a":2,"n":"add_ED","t":8,"pi":[{"n":"value","pt":Function,"ps":0}],"sn":"addED","rt":$n[0].Object,"p":[Function]},"r":{"a":2,"n":"remove_ED","t":8,"pi":[{"n":"value","pt":Function,"ps":0}],"sn":"removeED","rt":$n[0].Object,"p":[Function]}},{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(382)],"a":2,"n":"EDS","is":true,"t":2,"ad":{"a":2,"n":"add_EDS","is":true,"t":8,"pi":[{"n":"value","pt":Function,"ps":0}],"sn":"addEDS","rt":$n[0].Object,"p":[Function]},"r":{"a":2,"n":"remove_EDS","is":true,"t":8,"pi":[{"n":"value","pt":Function,"ps":0}],"sn":"removeEDS","rt":$n[0].Object,"p":[Function]}},{"at":[new Bridge.ClientTest.Batch4.Reflection.GetMembersTests.A1Attribute(381)],"a":2,"n":"ES","is":true,"t":2,"ad":{"a":2,"n":"add_ES","is":true,"t":8,"pi":[{"n":"value","pt":Function,"ps":0}],"sn":"addES","rt":$n[0].Object,"p":[Function]},"r":{"a":2,"n":"remove_ES","is":true,"t":8,"pi":[{"n":"value","pt":Function,"ps":0}],"sn":"removeES","rt":$n[0].Object,"p":[Function]}}]}; });
    $m($n[3].DelegateTests, function () { return {"att":1048577,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":1,"n":"A","t":8,"sn":"a","rt":$n[0].Object},{"a":2,"n":"AddAssignWorks","t":8,"sn":"addAssignWorks","rt":$n[0].Object},{"a":1,"n":"AddForCreateWorks","t":8,"pi":[{"n":"x","pt":$n[0].Int32,"ps":0}],"sn":"addForCreateWorks","rt":$n[0].Int32,"p":[$n[0].Int32]},{"a":2,"n":"AddWorks","t":8,"sn":"addWorks","rt":$n[0].Object},{"a":2,"n":"Call","t":8,"pi":[{"n":"t","pt":$n[0].Object,"ps":0},{"n":"d","pt":Function,"ps":1},{"n":"args","ip":true,"pt":$n[0].Array.type(System.Object),"ps":2}],"tpc":0,"def":function (t, d, args) { return d.apply(t, args); },"rt":$n[0].Object,"p":[$n[0].Object,Function,$n[0].Array.type(System.Object)]},{"a":2,"n":"CloneWorks_SPI_1563","t":8,"sn":"cloneWorks_SPI_1563","rt":$n[0].Object},{"a":2,"n":"CloningDelegateToADifferentTypeIsANoOp","t":8,"sn":"cloningDelegateToADifferentTypeIsANoOp","rt":$n[0].Object},{"a":2,"n":"CloningDelegateToTheSameTypeCreatesANewClone_SPI_1563","t":8,"sn":"cloningDelegateToTheSameTypeCreatesANewClone_SPI_1563","rt":$n[0].Object},{"a":2,"n":"CombineDoesAddsDuplicateDelegates","t":8,"sn":"combineDoesAddsDuplicateDelegates","rt":$n[0].Object},{"a":2,"n":"CombineDoesNotAffectOriginal_SPI_1563","t":8,"sn":"combineDoesNotAffectOriginal_SPI_1563","rt":$n[0].Object},{"a":2,"n":"CombineWorks","t":8,"sn":"combineWorks","rt":$n[0].Object},{"a":2,"n":"CreateWorks","t":8,"sn":"createWorks","rt":$n[0].Object},{"a":2,"n":"CreatingAndInvokingADelegateWorks","t":8,"sn":"creatingAndInvokingADelegateWorks","rt":$n[0].Object},{"a":2,"n":"EqualityAndInequalityOperatorsAndEqualsMethod_SPI_1563","t":8,"sn":"equalityAndInequalityOperatorsAndEqualsMethod_SPI_1563","rt":$n[0].Object},{"a":2,"n":"GetInvocationListWorksForImportedFunction_SPI_1563","t":8,"sn":"getInvocationListWorksForImportedFunction_SPI_1563","rt":$n[0].Object},{"a":2,"n":"GetInvocationListWorksForMulticastDelegate","t":8,"sn":"getInvocationListWorksForMulticastDelegate","rt":$n[0].Object},{"a":2,"n":"RemoveDoesNotAffectOriginal_SPI_1563","t":8,"sn":"removeDoesNotAffectOriginal_SPI_1563","rt":$n[0].Object},{"a":2,"n":"RemoveWorks","t":8,"sn":"removeWorks","rt":$n[0].Object},{"a":2,"n":"RemoveWorksWithMethodGroupConversion_SPI_1563","t":8,"sn":"removeWorksWithMethodGroupConversion_SPI_1563","rt":$n[0].Object},{"a":2,"n":"SubtractAssignWorks","t":8,"sn":"subtractAssignWorks","rt":$n[0].Object},{"a":2,"n":"SubtractWorks","t":8,"sn":"subtractWorks","rt":$n[0].Object},{"a":2,"n":"SubtractingDelegateFromItselfReturnsNull","t":8,"sn":"subtractingDelegateFromItselfReturnsNull","rt":$n[0].Object},{"a":2,"n":"TypePropertiesAreCorrect","t":8,"sn":"typePropertiesAreCorrect","rt":$n[0].Object},{"a":1,"n":"testField","t":4,"rt":$n[0].Int32,"sn":"testField"}]}; });
    $m($n[2].ReflectionTests.C25, function () { return {"td":$n[2].ReflectionTests,"att":1048578,"a":2,"m":[{"a":2,"n":"B1","t":4,"rt":$n[0].Int32,"sn":"B1"},{"a":4,"n":"B2","t":4,"rt":$n[0].Int32,"sn":"B2"},{"a":3,"n":"B3","t":4,"rt":$n[0].Int32,"sn":"B3"},{"a":5,"n":"B4","t":4,"rt":$n[0].Int32,"sn":"B4"},{"a":1,"n":"B5","t":4,"rt":$n[0].Int32,"sn":"B5"},{"a":2,"n":"C1","t":4,"rt":$n[0].Int32,"sn":"C1"},{"a":4,"n":"C2","t":4,"rt":$n[0].Int32,"sn":"C2"},{"a":3,"n":"C3","t":4,"rt":$n[0].Int32,"sn":"C3"},{"a":5,"n":"C4","t":4,"rt":$n[0].Int32,"sn":"C4"},{"a":1,"n":"C5","t":4,"rt":$n[0].Int32,"sn":"C5"}]}; });
    $m($n[2].ReflectionTests.C26, function () { return {"td":$n[2].ReflectionTests,"att":1048578,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"A1","t":4,"rt":$n[0].Int32,"sn":"A1"},{"a":3,"n":"A3","t":4,"rt":$n[0].Int32,"sn":"A3"},{"a":5,"n":"A4","t":4,"rt":$n[0].Int32,"sn":"A4"},{"a":2,"n":"B1","t":4,"rt":$n[0].Int32,"sn":"B1"},{"a":4,"n":"B2","t":4,"rt":$n[0].Int32,"sn":"B2"},{"a":3,"n":"B3","t":4,"rt":$n[0].Int32,"sn":"B3"},{"a":5,"n":"B4","t":4,"rt":$n[0].Int32,"sn":"B4"},{"a":1,"n":"B5","t":4,"rt":$n[0].Int32,"sn":"B5"},{"a":2,"n":"C1","t":4,"rt":$n[0].Int32,"sn":"C1"},{"a":4,"n":"C2","t":4,"rt":$n[0].Int32,"sn":"C2"},{"a":3,"n":"C3","t":4,"rt":$n[0].Int32,"sn":"C3"},{"a":5,"n":"C4","t":4,"rt":$n[0].Int32,"sn":"C4"},{"a":1,"n":"C5","t":4,"rt":$n[0].Int32,"sn":"C5"}]}; });
    $m($n[2].ReflectionTests.C27, function () { return {"td":$n[2].ReflectionTests,"att":1048578,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"A1","t":4,"rt":$n[0].Int32,"sn":"A1"},{"a":4,"n":"A2","t":4,"rt":$n[0].Int32,"sn":"A2"},{"a":3,"n":"A3","t":4,"rt":$n[0].Int32,"sn":"A3"},{"a":5,"n":"A4","t":4,"rt":$n[0].Int32,"sn":"A4"},{"a":2,"n":"B1","t":4,"rt":$n[0].Int32,"sn":"B1"},{"a":4,"n":"B2","t":4,"rt":$n[0].Int32,"sn":"B2"},{"a":3,"n":"B3","t":4,"rt":$n[0].Int32,"sn":"B3"},{"a":5,"n":"B4","t":4,"rt":$n[0].Int32,"sn":"B4"},{"a":1,"n":"B5","t":4,"rt":$n[0].Int32,"sn":"B5"},{"a":2,"n":"C1","t":4,"rt":$n[0].Int32,"sn":"C1"},{"a":4,"n":"C2","t":4,"rt":$n[0].Int32,"sn":"C2"},{"a":3,"n":"C3","t":4,"rt":$n[0].Int32,"sn":"C3"},{"a":5,"n":"C4","t":4,"rt":$n[0].Int32,"sn":"C4"},{"a":1,"n":"C5","t":4,"rt":$n[0].Int32,"sn":"C5"}]}; });
    $m($n[2].ReflectionTests.C28, function () { return {"td":$n[2].ReflectionTests,"att":1048578,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"A1","t":4,"rt":$n[0].Int32,"sn":"A1"},{"a":4,"n":"A2","t":4,"rt":$n[0].Int32,"sn":"A2"},{"a":3,"n":"A3","t":4,"rt":$n[0].Int32,"sn":"A3"},{"a":5,"n":"A4","t":4,"rt":$n[0].Int32,"sn":"A4"},{"a":1,"n":"A5","t":4,"rt":$n[0].Int32,"sn":"A5"},{"a":2,"n":"B1","t":4,"rt":$n[0].Int32,"sn":"B1"},{"a":4,"n":"B2","t":4,"rt":$n[0].Int32,"sn":"B2"},{"a":3,"n":"B3","t":4,"rt":$n[0].Int32,"sn":"B3"},{"a":5,"n":"B4","t":4,"rt":$n[0].Int32,"sn":"B4"},{"a":1,"n":"B5","t":4,"rt":$n[0].Int32,"sn":"B5"},{"a":2,"n":"C1","t":4,"rt":$n[0].Int32,"sn":"C1"},{"a":4,"n":"C2","t":4,"rt":$n[0].Int32,"sn":"C2"},{"a":3,"n":"C3","t":4,"rt":$n[0].Int32,"sn":"C3"},{"a":5,"n":"C4","t":4,"rt":$n[0].Int32,"sn":"C4"},{"a":1,"n":"C5","t":4,"rt":$n[0].Int32,"sn":"C5"}]}; });
    $asm.attr= [Bridge.merge(new Bridge.ClientTest.Batch4.Reflection.AssemblyTests.A2Attribute.$ctor1(64), {
        P: 23
    } ),Bridge.merge(new Bridge.ClientTest.Batch4.Reflection.AssemblyTests.A3Attribute.$ctor1(15), {
        P: 45
    } )];
});
