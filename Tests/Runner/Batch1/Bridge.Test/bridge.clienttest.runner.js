/**
 * @compiler Bridge.NET 16.0.0
 */
Bridge.assembly("Bridge.Test.Bridge.ClientTest", function ($asm, globals) {
    

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner", {
        $main: function () {
            Bridge.Test.Runtime.ContextHelper.init();
            QUnit.module("[ObjectLiteral]");
            QUnit.test("Methods and properties - TestObjectLiteral", Bridge.Test.Runtime.BridgeClientTestRunner.Bridge1529.testObjectLiteral);
            QUnit.test("CreateAndInitializationModes - Test", Bridge.Test.Runtime.BridgeClientTestRunner.CreateAndInitializationModesTests.test);
            QUnit.test("ObjectCreateMode - Test", Bridge.Test.Runtime.BridgeClientTestRunner.CreateModeTests.test);
            QUnit.test("ObjectInitializationMode - Test", Bridge.Test.Runtime.BridgeClientTestRunner.InitializationModeTests.test);
            QUnit.module("BitConverter");
            QUnit.test("BitConverter - ValueArgumentNull", Bridge.Test.Runtime.BridgeClientTestRunner.BitConverterTests.valueArgumentNull);
            QUnit.test("BitConverter - StartIndexBeyondLength", Bridge.Test.Runtime.BridgeClientTestRunner.BitConverterTests.startIndexBeyondLength);
            QUnit.test("BitConverter - StartIndexPlusNeededLengthTooLong", Bridge.Test.Runtime.BridgeClientTestRunner.BitConverterTests.startIndexPlusNeededLengthTooLong);
            QUnit.test("BitConverter - RoundtripDoubleToInt64Bits", Bridge.Test.Runtime.BridgeClientTestRunner.BitConverterTests.roundtripDoubleToInt64Bits);
            QUnit.test("BitConverter - Int64BitsToDouble", Bridge.Test.Runtime.BridgeClientTestRunner.BitConverterTests.int64BitsToDouble);
            QUnit.test("BitConverter - DoubleToInt64Bits", Bridge.Test.Runtime.BridgeClientTestRunner.BitConverterTests.doubleToInt64Bits);
            QUnit.test("BitConverter - RoundtripBoolean", Bridge.Test.Runtime.BridgeClientTestRunner.BitConverterTests.roundtripBoolean);
            QUnit.test("BitConverter - RoundtripChar", Bridge.Test.Runtime.BridgeClientTestRunner.BitConverterTests.roundtripChar);
            QUnit.test("BitConverter - RoundtripDouble", Bridge.Test.Runtime.BridgeClientTestRunner.BitConverterTests.roundtripDouble);
            QUnit.test("BitConverter - RoundtripSingle", Bridge.Test.Runtime.BridgeClientTestRunner.BitConverterTests.roundtripSingle);
            QUnit.test("BitConverter - RoundtripInt16", Bridge.Test.Runtime.BridgeClientTestRunner.BitConverterTests.roundtripInt16);
            QUnit.test("BitConverter - RoundtripInt32", Bridge.Test.Runtime.BridgeClientTestRunner.BitConverterTests.roundtripInt32);
            QUnit.test("BitConverter - RoundtripInt64", Bridge.Test.Runtime.BridgeClientTestRunner.BitConverterTests.roundtripInt64);
            QUnit.test("BitConverter - RoundtripUInt16", Bridge.Test.Runtime.BridgeClientTestRunner.BitConverterTests.roundtripUInt16);
            QUnit.test("BitConverter - RoundtripUInt32", Bridge.Test.Runtime.BridgeClientTestRunner.BitConverterTests.roundtripUInt32);
            QUnit.test("BitConverter - RoundtripUInt64", Bridge.Test.Runtime.BridgeClientTestRunner.BitConverterTests.roundtripUInt64);
            QUnit.test("BitConverter - RoundtripString", Bridge.Test.Runtime.BridgeClientTestRunner.BitConverterTests.roundtripString);
            QUnit.test("BitConverter - ToString_ByteArray_Long", Bridge.Test.Runtime.BridgeClientTestRunner.BitConverterTests.toString_ByteArray_Long);
            QUnit.module("Bridge Console");
            QUnit.test("TestLogMessageObject", Bridge.Test.Runtime.BridgeClientTestRunner.BridgeConsoleTests.testLogMessageObject);
            QUnit.test("TestLogMessageString", Bridge.Test.Runtime.BridgeClientTestRunner.BridgeConsoleTests.testLogMessageString);
            QUnit.test("TestDebugMessageString", Bridge.Test.Runtime.BridgeClientTestRunner.BridgeConsoleTests.testDebugMessageString);
            QUnit.test("TestErrorMessageString", Bridge.Test.Runtime.BridgeClientTestRunner.BridgeConsoleTests.testErrorMessageString);
            QUnit.test("TestToggling", Bridge.Test.Runtime.BridgeClientTestRunner.BridgeConsoleTests.testToggling);
            QUnit.module("C#");
            QUnit.test("Abstract types - TestB", Bridge.Test.Runtime.BridgeClientTestRunner.TestAbstractClass.testB);
            QUnit.test("Abstract types - TestC", Bridge.Test.Runtime.BridgeClientTestRunner.TestAbstractClass.testC);
            QUnit.test("Abstract types - TestBC", Bridge.Test.Runtime.BridgeClientTestRunner.TestAbstractClass.testBC);
            QUnit.test("Enum - TestParse", Bridge.Test.Runtime.BridgeClientTestRunner.TestEnum.testParse);
            QUnit.test("Enum - TestParseIgnoreCase", Bridge.Test.Runtime.BridgeClientTestRunner.TestEnum.testParseIgnoreCase);
            QUnit.test("Enum - TestToString", Bridge.Test.Runtime.BridgeClientTestRunner.TestEnum.testToString);
            QUnit.test("Enum - TestGetValues", Bridge.Test.Runtime.BridgeClientTestRunner.TestEnum.testGetValues);
            QUnit.test("Enum - TestCompareTo", Bridge.Test.Runtime.BridgeClientTestRunner.TestEnum.testCompareTo);
            QUnit.test("Enum - TestFormat", Bridge.Test.Runtime.BridgeClientTestRunner.TestEnum.testFormat);
            QUnit.test("Enum - TestGetName", Bridge.Test.Runtime.BridgeClientTestRunner.TestEnum.testGetName);
            QUnit.test("Enum - TestGetNames", Bridge.Test.Runtime.BridgeClientTestRunner.TestEnum.testGetNames);
            QUnit.test("Enum - TestHasFlag", Bridge.Test.Runtime.BridgeClientTestRunner.TestEnum.testHasFlag);
            QUnit.test("Enum - TestIsDefined", Bridge.Test.Runtime.BridgeClientTestRunner.TestEnum.testIsDefined);
            QUnit.test("Enum - TestTryParse", Bridge.Test.Runtime.BridgeClientTestRunner.TestEnum.testTryParse);
            QUnit.test("Goto - TestGotoCase", Bridge.Test.Runtime.BridgeClientTestRunner.TestGoto.testGotoCase);
            QUnit.test("Goto - TestGotoLabel", Bridge.Test.Runtime.BridgeClientTestRunner.TestGoto.testGotoLabel);
            QUnit.test("Static overloads - TestA", Bridge.Test.Runtime.BridgeClientTestRunner.TestInheritance.testA);
            QUnit.test("Static overloads - TestB", Bridge.Test.Runtime.BridgeClientTestRunner.TestInheritance.testB);
            QUnit.test("Static overloads - TestAB", Bridge.Test.Runtime.BridgeClientTestRunner.TestInheritance.testAB);
            QUnit.test("Interfaces - TestInterfaceMethodAndProperty", Bridge.Test.Runtime.BridgeClientTestRunner.TestInterfaces.testInterfaceMethodAndProperty);
            QUnit.test("Interfaces - TestExplicitInterfaceMethodAndProperty", Bridge.Test.Runtime.BridgeClientTestRunner.TestInterfaces.testExplicitInterfaceMethodAndProperty);
            QUnit.test("Interfaces - TestTwoInterfaces", Bridge.Test.Runtime.BridgeClientTestRunner.TestInterfaces.testTwoInterfaces);
            QUnit.test("Method parameters - Test", Bridge.Test.Runtime.BridgeClientTestRunner.TestMethodParametersClass.test);
            QUnit.test("Instance overloads - TestInstance", Bridge.Test.Runtime.BridgeClientTestRunner.TestOverloadInstanceMethods.testInstance);
            QUnit.test("Static overloads - TestStatic", Bridge.Test.Runtime.BridgeClientTestRunner.TestOverloadStaticMethods.testStatic);
            QUnit.test("Reference types - TestInstanceConstructorsAndMethods", Bridge.Test.Runtime.BridgeClientTestRunner.TestReferenceTypes.testInstanceConstructorsAndMethods);
            QUnit.test("Reference types - TestStaticConstructorsAndMethods", Bridge.Test.Runtime.BridgeClientTestRunner.TestReferenceTypes.testStaticConstructorsAndMethods);
            QUnit.test("Reference types - TestMethodParameters", Bridge.Test.Runtime.BridgeClientTestRunner.TestReferenceTypes.testMethodParameters);
            QUnit.test("Try/Catch - SimpleTryCatch", Bridge.Test.Runtime.BridgeClientTestRunner.TestTryCatchBlocks.simpleTryCatch);
            QUnit.test("Try/Catch - CaughtExceptions", Bridge.Test.Runtime.BridgeClientTestRunner.TestTryCatchBlocks.caughtExceptions);
            QUnit.test("Try/Catch - ThrownExceptions", Bridge.Test.Runtime.BridgeClientTestRunner.TestTryCatchBlocks.thrownExceptions);
            QUnit.test("Try/Catch - Bridge320", Bridge.Test.Runtime.BridgeClientTestRunner.TestTryCatchBlocks.bridge320);
            QUnit.test("Try/Catch - Bridge343", Bridge.Test.Runtime.BridgeClientTestRunner.TestTryCatchBlocks.bridge343);
            QUnit.test("Try/Catch/Finally - SimpleTryCatchFinally", Bridge.Test.Runtime.BridgeClientTestRunner.TestTryCatchFinallyBlocks.simpleTryCatchFinally);
            QUnit.test("Try/Catch/Finally - CaughtExceptions", Bridge.Test.Runtime.BridgeClientTestRunner.TestTryCatchFinallyBlocks.caughtExceptions);
            QUnit.test("Try/Catch/Finally - ThrownExceptions", Bridge.Test.Runtime.BridgeClientTestRunner.TestTryCatchFinallyBlocks.thrownExceptions);
            QUnit.test("Value types - TestInstanceConstructorsAndMethods", Bridge.Test.Runtime.BridgeClientTestRunner.TestValueTypes.testInstanceConstructorsAndMethods);
            QUnit.test("Value types - TestStaticConstructorsAndMethods", Bridge.Test.Runtime.BridgeClientTestRunner.TestValueTypes.testStaticConstructorsAndMethods);
            QUnit.test("Virtual methods - TestB", Bridge.Test.Runtime.BridgeClientTestRunner.TestVirtualMethods.testB);
            QUnit.test("Auto properties - TestBasic", Bridge.Test.Runtime.BridgeClientTestRunner.TestAutoProps.testBasic);
            QUnit.test("Await in catch and finally - TestBasic", Bridge.Test.Runtime.BridgeClientTestRunner.TestAwaitInCatchFinally.testBasic);
            QUnit.test("ConditionAccess - TestBasic", Bridge.Test.Runtime.BridgeClientTestRunner.TestConditionAccess.testBasic);
            QUnit.test("Exception filter - TestFalseFilter", Bridge.Test.Runtime.BridgeClientTestRunner.TestExceptionFilter.testFalseFilter);
            QUnit.test("Exception filter - TestTrueFilter", Bridge.Test.Runtime.BridgeClientTestRunner.TestExceptionFilter.testTrueFilter);
            QUnit.test("Exception filter - TestMultipleCatchClauses_2223", Bridge.Test.Runtime.BridgeClientTestRunner.TestExceptionFilter.testMultipleCatchClauses_2223);
            QUnit.test("Exception filter - TestFailedFilter_2223", Bridge.Test.Runtime.BridgeClientTestRunner.TestExceptionFilter.testFailedFilter_2223);
            QUnit.test("Exception filter - TestFailedFilter2_2223", Bridge.Test.Runtime.BridgeClientTestRunner.TestExceptionFilter.testFailedFilter2_2223);
            QUnit.test("Expression-bodied function members - TestBasic", Bridge.Test.Runtime.BridgeClientTestRunner.TestExpressionBodyFunction.testBasic);
            QUnit.test("Index initializer - TestBasic", Bridge.Test.Runtime.BridgeClientTestRunner.TestIndexInitializer.testBasic);
            QUnit.test("Interpolated Strings - TestBasic", Bridge.Test.Runtime.BridgeClientTestRunner.TestInterpolatedStrings.testBasic);
            QUnit.test("NameOf - TestBasic", Bridge.Test.Runtime.BridgeClientTestRunner.TestNameOf.testBasic);
            QUnit.test("Using static - TestBasic", Bridge.Test.Runtime.BridgeClientTestRunner.TestUsingStatic.testBasic);
            QUnit.module("Checked/Unckecked");
            QUnit.test("CheckedInsideUnchecked - TestInt32", Bridge.Test.Runtime.BridgeClientTestRunner.CheckedInsideUncheckedTests.testInt32);
            QUnit.test("CheckedInsideUnchecked - TestUInt32", Bridge.Test.Runtime.BridgeClientTestRunner.CheckedInsideUncheckedTests.testUInt32);
            QUnit.test("CheckedInsideUnchecked - TestLong", Bridge.Test.Runtime.BridgeClientTestRunner.CheckedInsideUncheckedTests.testLong);
            QUnit.test("CheckedInsideUnchecked - TestULong", Bridge.Test.Runtime.BridgeClientTestRunner.CheckedInsideUncheckedTests.testULong);
            QUnit.test("Checked - TestInt32", Bridge.Test.Runtime.BridgeClientTestRunner.CheckedTests.testInt32);
            QUnit.test("Checked - TestUInt32", Bridge.Test.Runtime.BridgeClientTestRunner.CheckedTests.testUInt32);
            QUnit.test("Checked - TestLong", Bridge.Test.Runtime.BridgeClientTestRunner.CheckedTests.testLong);
            QUnit.test("Checked - TestULong", Bridge.Test.Runtime.BridgeClientTestRunner.CheckedTests.testULong);
            QUnit.test("UncheckedInsideChecked - TestInt32", Bridge.Test.Runtime.BridgeClientTestRunner.UncheckedInsideCheckedTests.testInt32);
            QUnit.test("UncheckedInsideChecked - TestUInt32", Bridge.Test.Runtime.BridgeClientTestRunner.UncheckedInsideCheckedTests.testUInt32);
            QUnit.test("UncheckedInsideChecked - TestLong", Bridge.Test.Runtime.BridgeClientTestRunner.UncheckedInsideCheckedTests.testLong);
            QUnit.test("UncheckedInsideChecked - TestULong", Bridge.Test.Runtime.BridgeClientTestRunner.UncheckedInsideCheckedTests.testULong);
            QUnit.test("Unchecked - TestInt32", Bridge.Test.Runtime.BridgeClientTestRunner.UncheckedTests.testInt32);
            QUnit.test("Unchecked - TestUInt32", Bridge.Test.Runtime.BridgeClientTestRunner.UncheckedTests.testUInt32);
            QUnit.test("Unchecked - TestLong", Bridge.Test.Runtime.BridgeClientTestRunner.UncheckedTests.testLong);
            QUnit.test("Unchecked - TestULong", Bridge.Test.Runtime.BridgeClientTestRunner.UncheckedTests.testULong);
            QUnit.test("WithNoUncheckedKeyword - TestInt32", Bridge.Test.Runtime.BridgeClientTestRunner.WithNoUncheckedKeywordTests.testInt32);
            QUnit.test("WithNoUncheckedKeyword - TestUInt32", Bridge.Test.Runtime.BridgeClientTestRunner.WithNoUncheckedKeywordTests.testUInt32);
            QUnit.test("WithNoUncheckedKeyword - TestLong", Bridge.Test.Runtime.BridgeClientTestRunner.WithNoUncheckedKeywordTests.testLong);
            QUnit.test("WithNoUncheckedKeyword - TestULong", Bridge.Test.Runtime.BridgeClientTestRunner.WithNoUncheckedKeywordTests.testULong);
            QUnit.module("Collections");
            QUnit.test("Array - Set1 TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1.typePropertiesAreCorrect);
            QUnit.test("Array - Set1 CreateWithNegativeLenghtShouldThrow", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1.createWithNegativeLenghtShouldThrow);
            QUnit.test("Array - Set1 LengthWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1.lengthWorks);
            QUnit.test("Array - Set1 RankIsOne", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1.rankIsOne);
            QUnit.test("Array - Set1 GetLengthWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1.getLengthWorks);
            QUnit.test("Array - Set1 GetLowerBound", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1.getLowerBound);
            QUnit.test("Array - Set1 GetUpperBoundWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1.getUpperBoundWorks);
            QUnit.test("Array - Set1 GettingValueByIndexWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1.gettingValueByIndexWorks);
            QUnit.test("Array - Set1 GetValueWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1.getValueWorks);
            QUnit.test("Array - Set1 SettingValueByIndexWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1.settingValueByIndexWorks);
            QUnit.test("Array - Set1 SetValueWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1.setValueWorks);
            QUnit.test("Array - Set1 ForeachWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1.foreachWorks);
            QUnit.test("Array - Set1 CloneWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1.cloneWorks);
            QUnit.test("Array - Set1 ConcatWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1.concatWorks);
            QUnit.test("Array - Set1 ContainsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1.containsWorks);
            QUnit.test("Array - Set1 CopyToSameBoundWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1.copyToSameBoundWorks);
            QUnit.test("Array - Set1 CopyToOffsetBoundWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1.copyToOffsetBoundWorks);
            QUnit.test("Array - Set1 CopyToIllegalBoundWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1.copyToIllegalBoundWorks);
            QUnit.test("Array - Set1 ContainsUsesEqualsMethod", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1.containsUsesEqualsMethod);
            QUnit.test("Array - Set1 AllWithArrayItemFilterCallbackWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1.allWithArrayItemFilterCallbackWorks);
            QUnit.test("Array - Set1 SliceWithoutEndWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1.sliceWithoutEndWorks);
            QUnit.test("Array - Set1 ForeachWithArrayItemCallbackWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1.foreachWithArrayItemCallbackWorks);
            QUnit.test("Array - Set1 ForeachWithArrayCallbackWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1.foreachWithArrayCallbackWorks);
            QUnit.test("Array - Set1 IndexOfWithoutStartIndexWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1.indexOfWithoutStartIndexWorks);
            QUnit.test("Array - Set1 IndexOfWithoutStartIndexUsesEqualsMethod", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1.indexOfWithoutStartIndexUsesEqualsMethod);
            QUnit.test("Array - Set1 IndexOfWithStartIndexWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1.indexOfWithStartIndexWorks);
            QUnit.test("Array - Set1 JoinWithoutDelimiterWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1.joinWithoutDelimiterWorks);
            QUnit.test("Array - Set1 ReverseWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1.reverseWorks);
            QUnit.test("Array - Set1 AnyWithArrayItemFilterCallbackWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1.anyWithArrayItemFilterCallbackWorks);
            QUnit.test("Array - Set1 BinarySearch1Works", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1.binarySearch1Works);
            QUnit.test("Array - Set1 BinarySearch2Works", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1.binarySearch2Works);
            QUnit.test("Array - Set1 BinarySearch3Works", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1.binarySearch3Works);
            QUnit.test("Array - Set1 BinarySearch4Works", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1.binarySearch4Works);
            QUnit.test("Array - Set1 BinarySearchExceptionsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1.binarySearchExceptionsWorks);
            QUnit.test("Array - Set1 SortWithDefaultCompareWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1.sortWithDefaultCompareWorks);
            QUnit.test("Array - Set1 Sort1Works", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1.sort1Works);
            QUnit.test("Array - Set1 Sort2Works", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1.sort2Works);
            QUnit.test("Array - Set1 Sort3Works", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1.sort3Works);
            QUnit.test("Array - Set1 Sort4Works", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1.sort4Works);
            QUnit.test("Array - Set1 SortExceptionsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1.sortExceptionsWorks);
            QUnit.test("Array - Set1 ForeachWhenCastToIListWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1.foreachWhenCastToIListWorks);
            QUnit.test("Array - Set1 ICollectionCountWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1.iCollectionCountWorks);
            QUnit.test("Array - Set1 ICollectionIsReadOnlyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1.iCollectionIsReadOnlyWorks);
            QUnit.test("Array - Set1 ICollectionAddWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1.iCollectionAddWorks);
            QUnit.test("Array - Set1 ICollectionClearWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1.iCollectionClearWorks);
            QUnit.test("Array - Set1 ICollectionContainsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1.iCollectionContainsWorks);
            QUnit.test("Array - Set1 ICollectionContainsUsesEqualsMethod", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1.iCollectionContainsUsesEqualsMethod);
            QUnit.test("Array - Set1 ICollectionCopyToSameBoundWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1.iCollectionCopyToSameBoundWorks);
            QUnit.test("Array - Set1 ICollectionCopyToOffsetBoundWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1.iCollectionCopyToOffsetBoundWorks);
            QUnit.test("Array - Set1 ICollectionCopyToIllegalBoundWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1.iCollectionCopyToIllegalBoundWorks);
            QUnit.test("Array - Set1 ICollectionRemoveWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1.iCollectionRemoveWorks);
            QUnit.test("Array - Set1 IListIsReadOnlyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1.iListIsReadOnlyWorks);
            QUnit.test("Array - Set1 IListIndexingWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1.iListIndexingWorks);
            QUnit.test("Array - Set1 IListIndexOfWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1.iListIndexOfWorks);
            QUnit.test("Array - Set1 IListIndexOfUsesEqualsMethod", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1.iListIndexOfUsesEqualsMethod);
            QUnit.test("Array - Set1 IListInsertWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1.iListInsertWorks);
            QUnit.test("Array - Set1 IListRemoveAtWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1.iListRemoveAtWorks);
            QUnit.test("Array - Set2 TestArrayAsIListOfT", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet2.testArrayAsIListOfT);
            QUnit.test("Array - Set2 TestTrivials", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet2.testTrivials);
            QUnit.test("Array - Set2 TestGetAndSetValue", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet2.testGetAndSetValue);
            QUnit.test("Array - Set2 TestClear", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet2.testClear);
            QUnit.test("Array - Set2 TestCopy_GCRef", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet2.testCopy_GCRef);
            QUnit.test("Array - Set2 TestCopy_VTToObj", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet2.testCopy_VTToObj);
            QUnit.test("Array - Set2 TestCopy_VTWithGCRef", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet2.testCopy_VTWithGCRef);
            QUnit.test("Array - Set2 TestCopy_VTNoGCRef", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet2.testCopy_VTNoGCRef);
            QUnit.test("Array - Set2 TestFind", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet2.testFind);
            QUnit.test("Array - Set2 TestForEach", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet2.testForEach);
            QUnit.test("Array - Set2 TestGetEnumerator", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet2.testGetEnumerator);
            QUnit.test("Array - Set2 TestIndexOf", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet2.testIndexOf);
            QUnit.test("Array - Set2 TestLastIndexOf", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet2.testLastIndexOf);
            QUnit.test("Array - Set2 TestResize", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet2.testResize);
            QUnit.test("Array - Set2 TestReverse", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet2.testReverse);
            QUnit.test("Array - Set2 TestSort", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet2.testSort);
            QUnit.test("Array - Set2 TestTrueForAll", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet2.testTrueForAll);
            QUnit.test("Array - Set2 TestSetValueCasting", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet2.testSetValueCasting);
            QUnit.test("Array - Set2 TestValueTypeToReferenceCopy", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet2.testValueTypeToReferenceCopy);
            QUnit.test("Array - Set2 TestReferenceToValueTypeCopy", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet2.testReferenceToValueTypeCopy);
            QUnit.test("Array - Set2 TestArrayConstructionMultidimArrays", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet2.testArrayConstructionMultidimArrays);
            QUnit.test("GenericDictionary - TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestRunner.GenericDictionaryTests.typePropertiesAreCorrect);
            QUnit.test("GenericDictionary - DefaultConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.GenericDictionaryTests.defaultConstructorWorks);
            QUnit.test("GenericDictionary - CapacityConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.GenericDictionaryTests.capacityConstructorWorks);
            QUnit.test("GenericDictionary - CapacityAndEqualityComparerWorks", Bridge.Test.Runtime.BridgeClientTestRunner.GenericDictionaryTests.capacityAndEqualityComparerWorks);
            QUnit.test("GenericDictionary - EqualityComparerOnlyConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.GenericDictionaryTests.equalityComparerOnlyConstructorWorks);
            QUnit.test("GenericDictionary - CountWorks", Bridge.Test.Runtime.BridgeClientTestRunner.GenericDictionaryTests.countWorks);
            QUnit.test("GenericDictionary - KeysWorks", Bridge.Test.Runtime.BridgeClientTestRunner.GenericDictionaryTests.keysWorks);
            QUnit.test("GenericDictionary - ValuesWorks", Bridge.Test.Runtime.BridgeClientTestRunner.GenericDictionaryTests.valuesWorks);
            QUnit.test("GenericDictionary - IndexerGetterWorksForExistingItems", Bridge.Test.Runtime.BridgeClientTestRunner.GenericDictionaryTests.indexerGetterWorksForExistingItems);
            QUnit.test("GenericDictionary - IndexerSetterWorks", Bridge.Test.Runtime.BridgeClientTestRunner.GenericDictionaryTests.indexerSetterWorks);
            QUnit.test("GenericDictionary - IndexerGetterThrowsForNonExistingItems", Bridge.Test.Runtime.BridgeClientTestRunner.GenericDictionaryTests.indexerGetterThrowsForNonExistingItems);
            QUnit.test("GenericDictionary - AddWorks", Bridge.Test.Runtime.BridgeClientTestRunner.GenericDictionaryTests.addWorks);
            QUnit.test("GenericDictionary - AddThrowsIfItemAlreadyExists", Bridge.Test.Runtime.BridgeClientTestRunner.GenericDictionaryTests.addThrowsIfItemAlreadyExists);
            QUnit.test("GenericDictionary - ClearWorks", Bridge.Test.Runtime.BridgeClientTestRunner.GenericDictionaryTests.clearWorks);
            QUnit.test("GenericDictionary - ContainsKeyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.GenericDictionaryTests.containsKeyWorks);
            QUnit.test("GenericDictionary - EnumeratingWorks", Bridge.Test.Runtime.BridgeClientTestRunner.GenericDictionaryTests.enumeratingWorks);
            QUnit.test("GenericDictionary - RemoveWorks", Bridge.Test.Runtime.BridgeClientTestRunner.GenericDictionaryTests.removeWorks);
            QUnit.test("GenericDictionary - TryGetValueWithIntKeysWorks", Bridge.Test.Runtime.BridgeClientTestRunner.GenericDictionaryTests.tryGetValueWithIntKeysWorks);
            QUnit.test("GenericDictionary - TryGetValueWithObjectKeysWorks", Bridge.Test.Runtime.BridgeClientTestRunner.GenericDictionaryTests.tryGetValueWithObjectKeysWorks);
            QUnit.test("GenericDictionary - CanUseCustomComparer", Bridge.Test.Runtime.BridgeClientTestRunner.GenericDictionaryTests.canUseCustomComparer);
            QUnit.test("ICollection - ArrayImplementsICollection", Bridge.Test.Runtime.BridgeClientTestRunner.ICollectionTests.arrayImplementsICollection);
            QUnit.test("ICollection - CustomClassThatShouldImplementICollectionDoesSo", Bridge.Test.Runtime.BridgeClientTestRunner.ICollectionTests.customClassThatShouldImplementICollectionDoesSo);
            QUnit.test("ICollection - ArrayCastToICollectionCountWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ICollectionTests.arrayCastToICollectionCountWorks);
            QUnit.test("ICollection - ClassImplementingICollectionCountWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ICollectionTests.classImplementingICollectionCountWorks);
            QUnit.test("ICollection - ClassImplementingICollectionCastToICollectionCountWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ICollectionTests.classImplementingICollectionCastToICollectionCountWorks);
            QUnit.test("ICollection - ArrayCastToICollectionIsReadOnlyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ICollectionTests.arrayCastToICollectionIsReadOnlyWorks);
            QUnit.test("ICollection - ClassImplementingICollectionIsReadOnlyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ICollectionTests.classImplementingICollectionIsReadOnlyWorks);
            QUnit.test("ICollection - ClassImplementingICollectionCastToICollectionIsReadOnlyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ICollectionTests.classImplementingICollectionCastToICollectionIsReadOnlyWorks);
            QUnit.test("ICollection - ClassImplementingICollectionAddWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ICollectionTests.classImplementingICollectionAddWorks);
            QUnit.test("ICollection - ClassImplementingICollectionCastToICollectionAddWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ICollectionTests.classImplementingICollectionCastToICollectionAddWorks);
            QUnit.test("ICollection - ClassImplementingICollectionClearWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ICollectionTests.classImplementingICollectionClearWorks);
            QUnit.test("ICollection - ClassImplementingICollectionCastToICollectionClearWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ICollectionTests.classImplementingICollectionCastToICollectionClearWorks);
            QUnit.test("ICollection - ArrayCastToICollectionContainsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ICollectionTests.arrayCastToICollectionContainsWorks);
            QUnit.test("ICollection - ClassImplementingICollectionContainsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ICollectionTests.classImplementingICollectionContainsWorks);
            QUnit.test("ICollection - ClassImplementingICollectionCastToICollectionContainsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ICollectionTests.classImplementingICollectionCastToICollectionContainsWorks);
            QUnit.test("ICollection - ClassImplementingICollectionRemoveWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ICollectionTests.classImplementingICollectionRemoveWorks);
            QUnit.test("ICollection - ClassImplementingICollectionCastToICollectionRemoveWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ICollectionTests.classImplementingICollectionCastToICollectionRemoveWorks);
            QUnit.test("ICollection - ClassImplementingICollectionCopyToWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ICollectionTests.classImplementingICollectionCopyToWorks);
            QUnit.test("ICollection - ClassImplementingICollectionCastToICollectionCopyToWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ICollectionTests.classImplementingICollectionCastToICollectionCopyToWorks);
            QUnit.test("IDictionary - TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestRunner.IDictionaryTests.typePropertiesAreCorrect);
            QUnit.test("IDictionary - ClassImplementsInterfaces", Bridge.Test.Runtime.BridgeClientTestRunner.IDictionaryTests.classImplementsInterfaces);
            QUnit.test("IDictionary - CountWorks", Bridge.Test.Runtime.BridgeClientTestRunner.IDictionaryTests.countWorks);
            QUnit.test("IDictionary - KeysWorks", Bridge.Test.Runtime.BridgeClientTestRunner.IDictionaryTests.keysWorks);
            QUnit.test("IDictionary - GetItemWorks", Bridge.Test.Runtime.BridgeClientTestRunner.IDictionaryTests.getItemWorks);
            QUnit.test("IDictionary - ValuesWorks", Bridge.Test.Runtime.BridgeClientTestRunner.IDictionaryTests.valuesWorks);
            QUnit.test("IDictionary - ContainsKeyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.IDictionaryTests.containsKeyWorks);
            QUnit.test("IDictionary - TryGetValueWorks", Bridge.Test.Runtime.BridgeClientTestRunner.IDictionaryTests.tryGetValueWorks);
            QUnit.test("IDictionary - AddWorks", Bridge.Test.Runtime.BridgeClientTestRunner.IDictionaryTests.addWorks);
            QUnit.test("IDictionary - ClearWorks", Bridge.Test.Runtime.BridgeClientTestRunner.IDictionaryTests.clearWorks);
            QUnit.test("IDictionary - RemoveWorks", Bridge.Test.Runtime.BridgeClientTestRunner.IDictionaryTests.removeWorks);
            QUnit.test("IDictionary - SetItemWorks", Bridge.Test.Runtime.BridgeClientTestRunner.IDictionaryTests.setItemWorks);
            QUnit.test("IEnumerable - ArrayImplementsIEnumerable", Bridge.Test.Runtime.BridgeClientTestRunner.IEnumerableTests.arrayImplementsIEnumerable);
            QUnit.test("IEnumerable - CustomClassThatShouldImplementIEnumerableDoesSo", Bridge.Test.Runtime.BridgeClientTestRunner.IEnumerableTests.customClassThatShouldImplementIEnumerableDoesSo);
            QUnit.test("IEnumerable - ArrayGetEnumeratorMethodWorks", Bridge.Test.Runtime.BridgeClientTestRunner.IEnumerableTests.arrayGetEnumeratorMethodWorks);
            QUnit.test("IEnumerable - ArrayCastToIEnumerableCanBeEnumerated", Bridge.Test.Runtime.BridgeClientTestRunner.IEnumerableTests.arrayCastToIEnumerableCanBeEnumerated);
            QUnit.test("IEnumerable - ClassImplementingIEnumerableCanBeEnumerated", Bridge.Test.Runtime.BridgeClientTestRunner.IEnumerableTests.classImplementingIEnumerableCanBeEnumerated);
            QUnit.test("IEnumerable - ClassImplementingIEnumerableCastToIEnumerableCanBeEnumerated", Bridge.Test.Runtime.BridgeClientTestRunner.IEnumerableTests.classImplementingIEnumerableCastToIEnumerableCanBeEnumerated);
            QUnit.test("IList - TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestRunner.IListTests.typePropertiesAreCorrect);
            QUnit.test("IList - ArrayImplementsIList", Bridge.Test.Runtime.BridgeClientTestRunner.IListTests.arrayImplementsIList);
            QUnit.test("IList - CustomClassThatShouldImplementIListDoesSo", Bridge.Test.Runtime.BridgeClientTestRunner.IListTests.customClassThatShouldImplementIListDoesSo);
            QUnit.test("IList - ArrayCastToIListGetItemWorks", Bridge.Test.Runtime.BridgeClientTestRunner.IListTests.arrayCastToIListGetItemWorks);
            QUnit.test("IList - ArrayCastToIListSetItemWorks", Bridge.Test.Runtime.BridgeClientTestRunner.IListTests.arrayCastToIListSetItemWorks);
            QUnit.test("IList - ClassImplementingIListGetItemWorks", Bridge.Test.Runtime.BridgeClientTestRunner.IListTests.classImplementingIListGetItemWorks);
            QUnit.test("IList - ClassImplementingIListCastToIListGetItemWorks", Bridge.Test.Runtime.BridgeClientTestRunner.IListTests.classImplementingIListCastToIListGetItemWorks);
            QUnit.test("IList - ClassImplementingIListSetItemWorks", Bridge.Test.Runtime.BridgeClientTestRunner.IListTests.classImplementingIListSetItemWorks);
            QUnit.test("IList - ClassImplementingIListCastToIListSetItemWorks", Bridge.Test.Runtime.BridgeClientTestRunner.IListTests.classImplementingIListCastToIListSetItemWorks);
            QUnit.test("IList - ArrayCastToIListIsReadOnlyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.IListTests.arrayCastToIListIsReadOnlyWorks);
            QUnit.test("IList - ClassImplementingIListIsReadOnlyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.IListTests.classImplementingIListIsReadOnlyWorks);
            QUnit.test("IList - ClassImplementingIListCastToIListIsReadOnlyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.IListTests.classImplementingIListCastToIListIsReadOnlyWorks);
            QUnit.test("IList - ArrayCastToIListIndexOfWorks", Bridge.Test.Runtime.BridgeClientTestRunner.IListTests.arrayCastToIListIndexOfWorks);
            QUnit.test("IList - ClassImplementingIListIndexOfWorks", Bridge.Test.Runtime.BridgeClientTestRunner.IListTests.classImplementingIListIndexOfWorks);
            QUnit.test("IList - ClassImplementingIListCastToIListIndexOfWorks", Bridge.Test.Runtime.BridgeClientTestRunner.IListTests.classImplementingIListCastToIListIndexOfWorks);
            QUnit.test("IList - ClassImplementingIListInsertWorks", Bridge.Test.Runtime.BridgeClientTestRunner.IListTests.classImplementingIListInsertWorks);
            QUnit.test("IList - ClassImplementingIListCastToIListInsertWorks", Bridge.Test.Runtime.BridgeClientTestRunner.IListTests.classImplementingIListCastToIListInsertWorks);
            QUnit.test("IList - ClassImplementingIListRemoveAtWorks", Bridge.Test.Runtime.BridgeClientTestRunner.IListTests.classImplementingIListRemoveAtWorks);
            QUnit.test("IList - ClassImplementingIListCastToIListRemoveAtWorks", Bridge.Test.Runtime.BridgeClientTestRunner.IListTests.classImplementingIListCastToIListRemoveAtWorks);
            QUnit.test("IList - ClassImplementingIListCopyToWorks", Bridge.Test.Runtime.BridgeClientTestRunner.IListTests.classImplementingIListCopyToWorks);
            QUnit.test("IList - ClassImplementingIListCastToIListCopyToWorks", Bridge.Test.Runtime.BridgeClientTestRunner.IListTests.classImplementingIListCastToIListCopyToWorks);
            QUnit.test("IteratorBlock - TypeReturnedByIteratorBlockReturningIEnumeratorImplementsThatInterfaceAndIDisposable", Bridge.Test.Runtime.BridgeClientTestRunner.IteratorBlockTests.typeReturnedByIteratorBlockReturningIEnumeratorImplementsThatInterfaceAndIDisposable);
            QUnit.test("IteratorBlock - EnumeratingIEnumeratorIteratorToEndWorks", Bridge.Test.Runtime.BridgeClientTestRunner.IteratorBlockTests.enumeratingIEnumeratorIteratorToEndWorks);
            QUnit.test("IteratorBlock - PrematureDisposalOfIEnumeratorIteratorExecutesFinallyBlocks", Bridge.Test.Runtime.BridgeClientTestRunner.IteratorBlockTests.prematureDisposalOfIEnumeratorIteratorExecutesFinallyBlocks);
            QUnit.test("IteratorBlock - ExceptionInIEnumeratorIteratorBodyExecutesFinallyBlocks Exception thrown not caught", Bridge.Test.Runtime.BridgeClientTestRunner.IteratorBlockTests.exceptionInIEnumeratorIteratorBodyExecutesFinallyBlocks);
            QUnit.test("IteratorBlock - TypeReturnedByIteratorBlockReturningIEnumerableImplementsThatInterface", Bridge.Test.Runtime.BridgeClientTestRunner.IteratorBlockTests.typeReturnedByIteratorBlockReturningIEnumerableImplementsThatInterface);
            QUnit.test("IteratorBlock - EnumeratingIEnumerableIteratorToEndWorks", Bridge.Test.Runtime.BridgeClientTestRunner.IteratorBlockTests.enumeratingIEnumerableIteratorToEndWorks);
            QUnit.test("IteratorBlock - PrematureDisposalOfIEnumerableIteratorExecutesFinallyBlocks", Bridge.Test.Runtime.BridgeClientTestRunner.IteratorBlockTests.prematureDisposalOfIEnumerableIteratorExecutesFinallyBlocks);
            QUnit.test("IteratorBlock - ExceptionInIEnumerableIteratorBodyExecutesFinallyBlocks exception thrown not caught", Bridge.Test.Runtime.BridgeClientTestRunner.IteratorBlockTests.exceptionInIEnumerableIteratorBodyExecutesFinallyBlocks);
            QUnit.test("IteratorBlock - EnumeratingAnIteratorBlockReturningIEnumerableMultipleTimesUsesTheInitialValuesForParameters", Bridge.Test.Runtime.BridgeClientTestRunner.IteratorBlockTests.enumeratingAnIteratorBlockReturningIEnumerableMultipleTimesUsesTheInitialValuesForParameters);
            QUnit.test("IteratorBlock - DifferentGetEnumeratorCallsOnIteratorBlockReturningIEnumerableGetOwnCopiesOfLocals", Bridge.Test.Runtime.BridgeClientTestRunner.IteratorBlockTests.differentGetEnumeratorCallsOnIteratorBlockReturningIEnumerableGetOwnCopiesOfLocals);
            QUnit.test("List - TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestRunner.ListTests.typePropertiesAreCorrect);
            QUnit.test("List - DefaultConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ListTests.defaultConstructorWorks);
            QUnit.test("List - ConstructorWithCapacityWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ListTests.constructorWithCapacityWorks);
            QUnit.test("List - ConstructingFromArrayWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ListTests.constructingFromArrayWorks);
            QUnit.test("List - ConstructingFromListWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ListTests.constructingFromListWorks);
            QUnit.test("List - ConstructingFromIEnumerableWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ListTests.constructingFromIEnumerableWorks);
            QUnit.test("List - CountWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ListTests.countWorks);
            QUnit.test("List - IndexingWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ListTests.indexingWorks);
            QUnit.test("List - ForeachWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ListTests.foreachWorks);
            QUnit.test("List - GetEnumeratorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ListTests.getEnumeratorWorks);
            QUnit.test("List - AddWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ListTests.addWorks);
            QUnit.test("List - AddRangeWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ListTests.addRangeWorks);
            QUnit.test("List - BinarySearch1Works", Bridge.Test.Runtime.BridgeClientTestRunner.ListTests.binarySearch1Works);
            QUnit.test("List - BinarySearch2Works", Bridge.Test.Runtime.BridgeClientTestRunner.ListTests.binarySearch2Works);
            QUnit.test("List - BinarySearch3Works", Bridge.Test.Runtime.BridgeClientTestRunner.ListTests.binarySearch3Works);
            QUnit.test("List - BinarySearch4Works", Bridge.Test.Runtime.BridgeClientTestRunner.ListTests.binarySearch4Works);
            QUnit.test("List - ClearWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ListTests.clearWorks);
            QUnit.test("List - ContainsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ListTests.containsWorks);
            QUnit.test("List - ContainsUsesEqualsMethod", Bridge.Test.Runtime.BridgeClientTestRunner.ListTests.containsUsesEqualsMethod);
            QUnit.test("List - CopyToMethodSameBound", Bridge.Test.Runtime.BridgeClientTestRunner.ListTests.copyToMethodSameBound);
            QUnit.test("List - CopyToMethodOffsetBound", Bridge.Test.Runtime.BridgeClientTestRunner.ListTests.copyToMethodOffsetBound);
            QUnit.test("List - CopyToMethodIllegalBound", Bridge.Test.Runtime.BridgeClientTestRunner.ListTests.copyToMethodIllegalBound);
            QUnit.test("List - SliceWithoutEndWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ListTests.sliceWithoutEndWorks);
            QUnit.test("List - SliceWithEndWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ListTests.sliceWithEndWorks);
            QUnit.test("List - ForeachWithListItemCallbackWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ListTests.foreachWithListItemCallbackWorks);
            QUnit.test("List - ForeachWithListCallbackWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ListTests.foreachWithListCallbackWorks);
            QUnit.test("List - IndexOfWithoutStartIndexWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ListTests.indexOfWithoutStartIndexWorks);
            QUnit.test("List - IndexOfWithoutStartIndexUsesEqualsMethod", Bridge.Test.Runtime.BridgeClientTestRunner.ListTests.indexOfWithoutStartIndexUsesEqualsMethod);
            QUnit.test("List - IndexOfWithStartIndexWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ListTests.indexOfWithStartIndexWorks);
            QUnit.test("List - IndexOfWithStartIndexUsesEqualsMethod", Bridge.Test.Runtime.BridgeClientTestRunner.ListTests.indexOfWithStartIndexUsesEqualsMethod);
            QUnit.test("List - InsertWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ListTests.insertWorks);
            QUnit.test("List - InsertRangeWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ListTests.insertRangeWorks);
            QUnit.test("List - JoinWithoutDelimiterWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ListTests.joinWithoutDelimiterWorks);
            QUnit.test("List - JoinWithDelimiterWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ListTests.joinWithDelimiterWorks);
            QUnit.test("List - RemoveWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ListTests.removeWorks);
            QUnit.test("List - RemoveReturnsFalseIfTheElementWasNotFound", Bridge.Test.Runtime.BridgeClientTestRunner.ListTests.removeReturnsFalseIfTheElementWasNotFound);
            QUnit.test("List - RemoveCanRemoveNullItem", Bridge.Test.Runtime.BridgeClientTestRunner.ListTests.removeCanRemoveNullItem);
            QUnit.test("List - RemoveUsesEqualsMethod", Bridge.Test.Runtime.BridgeClientTestRunner.ListTests.removeUsesEqualsMethod);
            QUnit.test("List - RemoveAtWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ListTests.removeAtWorks);
            QUnit.test("List - RemoveRangeWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ListTests.removeRangeWorks);
            QUnit.test("List - ReverseWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ListTests.reverseWorks);
            QUnit.test("List - SortWithDefaultCompareWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ListTests.sortWithDefaultCompareWorks);
            QUnit.test("List - SortWithCompareCallbackWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ListTests.sortWithCompareCallbackWorks);
            QUnit.test("List - SortWithIComparerWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ListTests.sortWithIComparerWorks);
            QUnit.test("List - ForeachWhenCastToIEnumerableWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ListTests.foreachWhenCastToIEnumerableWorks);
            QUnit.test("List - IEnumerableGetEnumeratorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ListTests.iEnumerableGetEnumeratorWorks);
            QUnit.test("List - ICollectionCountWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ListTests.iCollectionCountWorks);
            QUnit.test("List - ICollectionAddWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ListTests.iCollectionAddWorks);
            QUnit.test("List - ICollectionClearWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ListTests.iCollectionClearWorks);
            QUnit.test("List - ICollectionContainsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ListTests.iCollectionContainsWorks);
            QUnit.test("List - ICollectionContainsUsesEqualsMethod", Bridge.Test.Runtime.BridgeClientTestRunner.ListTests.iCollectionContainsUsesEqualsMethod);
            QUnit.test("List - ICollectionRemoveWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ListTests.iCollectionRemoveWorks);
            QUnit.test("List - ICollectionRemoveCanRemoveNullItem", Bridge.Test.Runtime.BridgeClientTestRunner.ListTests.iCollectionRemoveCanRemoveNullItem);
            QUnit.test("List - ICollectionRemoveUsesEqualsMethod", Bridge.Test.Runtime.BridgeClientTestRunner.ListTests.iCollectionRemoveUsesEqualsMethod);
            QUnit.test("List - IListIndexingWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ListTests.iListIndexingWorks);
            QUnit.test("List - IListIndexOfWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ListTests.iListIndexOfWorks);
            QUnit.test("List - IListIndexOfUsesEqualsMethod", Bridge.Test.Runtime.BridgeClientTestRunner.ListTests.iListIndexOfUsesEqualsMethod);
            QUnit.test("List - IListInsertWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ListTests.iListInsertWorks);
            QUnit.test("List - IListRemoveAtWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ListTests.iListRemoveAtWorks);
            QUnit.test("List - ToArrayWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ListTests.toArrayWorks);
            QUnit.test("ReadOnlyCollection - TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestRunner.ReadOnlyCollectionTests.typePropertiesAreCorrect);
            QUnit.test("ReadOnlyCollection - ConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ReadOnlyCollectionTests.constructorWorks);
            QUnit.test("ReadOnlyCollection - CountWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ReadOnlyCollectionTests.countWorks);
            QUnit.test("ReadOnlyCollection - IndexingWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ReadOnlyCollectionTests.indexingWorks);
            QUnit.test("ReadOnlyCollection - ForeachWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ReadOnlyCollectionTests.foreachWorks);
            QUnit.test("ReadOnlyCollection - GetEnumeratorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ReadOnlyCollectionTests.getEnumeratorWorks);
            QUnit.test("ReadOnlyCollection - ContainsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ReadOnlyCollectionTests.containsWorks);
            QUnit.test("ReadOnlyCollection - ContainsUsesEqualsMethod", Bridge.Test.Runtime.BridgeClientTestRunner.ReadOnlyCollectionTests.containsUsesEqualsMethod);
            QUnit.test("ReadOnlyCollection - CopyToMethodSameBound", Bridge.Test.Runtime.BridgeClientTestRunner.ReadOnlyCollectionTests.copyToMethodSameBound);
            QUnit.test("ReadOnlyCollection - CopyToMethodOffsetBound", Bridge.Test.Runtime.BridgeClientTestRunner.ReadOnlyCollectionTests.copyToMethodOffsetBound);
            QUnit.test("ReadOnlyCollection - CopyToMethodIllegalBound", Bridge.Test.Runtime.BridgeClientTestRunner.ReadOnlyCollectionTests.copyToMethodIllegalBound);
            QUnit.test("ReadOnlyCollection - CopyToMethodWhenCastToIListSameBound", Bridge.Test.Runtime.BridgeClientTestRunner.ReadOnlyCollectionTests.copyToMethodWhenCastToIListSameBound);
            QUnit.test("ReadOnlyCollection - CopyToMethodWhenCastToIListOffsetBound", Bridge.Test.Runtime.BridgeClientTestRunner.ReadOnlyCollectionTests.copyToMethodWhenCastToIListOffsetBound);
            QUnit.test("ReadOnlyCollection - CopyToMethodWhenCastToIListIllegalBound", Bridge.Test.Runtime.BridgeClientTestRunner.ReadOnlyCollectionTests.copyToMethodWhenCastToIListIllegalBound);
            QUnit.test("ReadOnlyCollection - CopyToMethodWhenCastToICollectionSameBound", Bridge.Test.Runtime.BridgeClientTestRunner.ReadOnlyCollectionTests.copyToMethodWhenCastToICollectionSameBound);
            QUnit.test("ReadOnlyCollection - CopyToMethodWhenCastToICollectionOffsetBound", Bridge.Test.Runtime.BridgeClientTestRunner.ReadOnlyCollectionTests.copyToMethodWhenCastToICollectionOffsetBound);
            QUnit.test("ReadOnlyCollection - CopyToMethodWhenCastToICollectionIllegalBound", Bridge.Test.Runtime.BridgeClientTestRunner.ReadOnlyCollectionTests.copyToMethodWhenCastToICollectionIllegalBound);
            QUnit.test("ReadOnlyCollection - IndexOfWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ReadOnlyCollectionTests.indexOfWorks);
            QUnit.test("ReadOnlyCollection - ForeachWhenCastToIEnumerableWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ReadOnlyCollectionTests.foreachWhenCastToIEnumerableWorks);
            QUnit.test("ReadOnlyCollection - IEnumerableGetEnumeratorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ReadOnlyCollectionTests.iEnumerableGetEnumeratorWorks);
            QUnit.test("ReadOnlyCollection - ICollectionCountWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ReadOnlyCollectionTests.iCollectionCountWorks);
            QUnit.test("ReadOnlyCollection - ICollectionIsReadOnlyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ReadOnlyCollectionTests.iCollectionIsReadOnlyWorks);
            QUnit.test("ReadOnlyCollection - ICollectionContainsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ReadOnlyCollectionTests.iCollectionContainsWorks);
            QUnit.test("ReadOnlyCollection - ICollectionContainsUsesEqualsMethod", Bridge.Test.Runtime.BridgeClientTestRunner.ReadOnlyCollectionTests.iCollectionContainsUsesEqualsMethod);
            QUnit.test("ReadOnlyCollection - IListIndexingWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ReadOnlyCollectionTests.iListIndexingWorks);
            QUnit.test("ReadOnlyCollection - IListIndexOfWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ReadOnlyCollectionTests.iListIndexOfWorks);
            QUnit.test("ReadOnlyCollection - IListIndexOfUsesEqualsMethod", Bridge.Test.Runtime.BridgeClientTestRunner.ReadOnlyCollectionTests.iListIndexOfUsesEqualsMethod);
            QUnit.test("ReadOnlyCollection - IListIsReadOnlyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ReadOnlyCollectionTests.iListIsReadOnlyWorks);
            QUnit.test("WeakMap - GettingSettingAndDeletingWorks", Bridge.Test.Runtime.BridgeClientTestRunner.WeakMapTests.gettingSettingAndDeletingWorks);
            QUnit.test("MultidimArray - TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestRunner.MultidimArrayTests.typePropertiesAreCorrect);
            QUnit.test("MultidimArray - LengthWorks", Bridge.Test.Runtime.BridgeClientTestRunner.MultidimArrayTests.lengthWorks);
            QUnit.test("MultidimArray - GetValueWorksForUninitializedElement", Bridge.Test.Runtime.BridgeClientTestRunner.MultidimArrayTests.getValueWorksForUninitializedElement);
            QUnit.test("MultidimArray - GetValueByIndexWorksForUninitializedElement", Bridge.Test.Runtime.BridgeClientTestRunner.MultidimArrayTests.getValueByIndexWorksForUninitializedElement);
            QUnit.test("MultidimArray - SettingValueByIndexWorks", Bridge.Test.Runtime.BridgeClientTestRunner.MultidimArrayTests.settingValueByIndexWorks);
            QUnit.test("MultidimArray - SetValueWorks", Bridge.Test.Runtime.BridgeClientTestRunner.MultidimArrayTests.setValueWorks);
            QUnit.test("MultidimArray - GetValueWorks", Bridge.Test.Runtime.BridgeClientTestRunner.MultidimArrayTests.getValueWorks);
            QUnit.test("MultidimArray - GettingValueByIndexWorks", Bridge.Test.Runtime.BridgeClientTestRunner.MultidimArrayTests.gettingValueByIndexWorks);
            QUnit.test("MultidimArray - GetLengthWorks", Bridge.Test.Runtime.BridgeClientTestRunner.MultidimArrayTests.getLengthWorks);
            QUnit.test("MultidimArray - GetLowerBoundWorks", Bridge.Test.Runtime.BridgeClientTestRunner.MultidimArrayTests.getLowerBoundWorks);
            QUnit.test("MultidimArray - GetUpperBoundWorks", Bridge.Test.Runtime.BridgeClientTestRunner.MultidimArrayTests.getUpperBoundWorks);
            QUnit.test("MultidimArray - ForeachWorks", Bridge.Test.Runtime.BridgeClientTestRunner.MultidimArrayTests.foreachWorks);
            QUnit.test("MultidimArray - RankWorks", Bridge.Test.Runtime.BridgeClientTestRunner.MultidimArrayTests.rankWorks);
            QUnit.test("MultidimArray - GetValueWithIndexOutOfRangeThrowsAnException", Bridge.Test.Runtime.BridgeClientTestRunner.MultidimArrayTests.getValueWithIndexOutOfRangeThrowsAnException);
            QUnit.test("MultidimArray - SetValueWithIndexOutOfRangeThrowsAnException", Bridge.Test.Runtime.BridgeClientTestRunner.MultidimArrayTests.setValueWithIndexOutOfRangeThrowsAnException);
            QUnit.module("Comparer");
            QUnit.test("TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestRunner.ComparerTests.typePropertiesAreCorrect);
            QUnit.test("DefaultComparerCanOrderNumbers", Bridge.Test.Runtime.BridgeClientTestRunner.ComparerTests.defaultComparerCanOrderNumbers);
            QUnit.test("DefaultComparerCanOrderNullValues", Bridge.Test.Runtime.BridgeClientTestRunner.ComparerTests.defaultComparerCanOrderNullValues);
            QUnit.test("DefaultComparerUsesCompareMethodIfClassImplementsIComparable", Bridge.Test.Runtime.BridgeClientTestRunner.ComparerTests.defaultComparerUsesCompareMethodIfClassImplementsIComparable);
            QUnit.test("CreateWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ComparerTests.createWorks);
            QUnit.module("Convert");
            QUnit.test("Convert.FromBase64 - Roundtrip1", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertFromBase64Tests.roundtrip1);
            QUnit.test("Convert.FromBase64 - Roundtrip2", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertFromBase64Tests.roundtrip2);
            QUnit.test("Convert.FromBase64 - Roundtrip3", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertFromBase64Tests.roundtrip3);
            QUnit.test("Convert.FromBase64 - EmptyString", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertFromBase64Tests.emptyString);
            QUnit.test("Convert.FromBase64 - ZeroLengthArray", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertFromBase64Tests.zeroLengthArray);
            QUnit.test("Convert.FromBase64 - RoundtripWithPadding1", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertFromBase64Tests.roundtripWithPadding1);
            QUnit.test("Convert.FromBase64 - RoundtripWithPadding2", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertFromBase64Tests.roundtripWithPadding2);
            QUnit.test("Convert.FromBase64 - PartialRoundtripWithPadding1", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertFromBase64Tests.partialRoundtripWithPadding1);
            QUnit.test("Convert.FromBase64 - PartialRoundtripWithPadding2", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertFromBase64Tests.partialRoundtripWithPadding2);
            QUnit.test("Convert.FromBase64 - ParseWithWhitespace", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertFromBase64Tests.parseWithWhitespace);
            QUnit.test("Convert.FromBase64 - RoundtripWithWhitespace2", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertFromBase64Tests.roundtripWithWhitespace2);
            QUnit.test("Convert.FromBase64 - RoundtripWithWhitespace3", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertFromBase64Tests.roundtripWithWhitespace3);
            QUnit.test("Convert.FromBase64 - RoundtripWithWhitespace4", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertFromBase64Tests.roundtripWithWhitespace4);
            QUnit.test("Convert.FromBase64 - RoundtripWithWhitespace5", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertFromBase64Tests.roundtripWithWhitespace5);
            QUnit.test("Convert.FromBase64 - RoundtripWithWhitespace6", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertFromBase64Tests.roundtripWithWhitespace6);
            QUnit.test("Convert.FromBase64 - RoundtripWithWhitespace7", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertFromBase64Tests.roundtripWithWhitespace7);
            QUnit.test("Convert.FromBase64 - RoundtripLargeString", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertFromBase64Tests.roundtripLargeString);
            QUnit.test("Convert.FromBase64 - InvalidOffset", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertFromBase64Tests.invalidOffset);
            QUnit.test("Convert.FromBase64 - InvalidLength", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertFromBase64Tests.invalidLength);
            QUnit.test("Convert.FromBase64 - InvalidInput", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertFromBase64Tests.invalidInput);
            QUnit.test("Convert.FromBase64 - InvalidCharactersInInput", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertFromBase64Tests.invalidCharactersInInput);
            QUnit.test("Convert.ToBase64CharArray - ValidOffsetIn", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToBase64CharArrayTests.validOffsetIn);
            QUnit.test("Convert.ToBase64CharArray - ShortInputArray", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToBase64CharArrayTests.shortInputArray);
            QUnit.test("Convert.ToBase64CharArray - ValidOffsetOut", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToBase64CharArrayTests.validOffsetOut);
            QUnit.test("Convert.ToBase64CharArray - InvalidInputBuffer", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToBase64CharArrayTests.invalidInputBuffer);
            QUnit.test("Convert.ToBase64CharArray - InvalidOutputBuffer", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToBase64CharArrayTests.invalidOutputBuffer);
            QUnit.test("Convert.ToBase64CharArray - InvalidOffsetIn", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToBase64CharArrayTests.invalidOffsetIn);
            QUnit.test("Convert.ToBase64CharArray - InvalidOffsetOut", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToBase64CharArrayTests.invalidOffsetOut);
            QUnit.test("Convert.ToBase64CharArray - InvalidInputLength", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToBase64CharArrayTests.invalidInputLength);
            QUnit.test("Convert.ToBase64String - KnownByteSequence", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToBase64StringTests.knownByteSequence);
            QUnit.test("Convert.ToBase64String - ZeroLength", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToBase64StringTests.zeroLength);
            QUnit.test("Convert.ToBase64String - InvalidInputBuffer", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToBase64StringTests.invalidInputBuffer);
            QUnit.test("Convert.ToBase64String - InvalidOffset", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToBase64StringTests.invalidOffset);
            QUnit.test("Convert.ToBase64String - InvalidLength", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToBase64StringTests.invalidLength);
            QUnit.test("Convert.ToString - FromBoxedObject", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests.fromBoxedObject);
            QUnit.test("Convert.ToString - FromObject", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests.fromObject);
            QUnit.test("Convert.ToString - FromDateTime", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests.fromDateTime);
            QUnit.test("Convert.ToString - FromChar", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests.fromChar);
            QUnit.test("Convert.ToString - FromByteBase2", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests.fromByteBase2);
            QUnit.test("Convert.ToString - FromByteBase8", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests.fromByteBase8);
            QUnit.test("Convert.ToString - FromByteBase10", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests.fromByteBase10);
            QUnit.test("Convert.ToString - FromByteBase16", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests.fromByteBase16);
            QUnit.test("Convert.ToString - FromByteInvalidBase", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests.fromByteInvalidBase);
            QUnit.test("Convert.ToString - FromInt16Base2", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests.fromInt16Base2);
            QUnit.test("Convert.ToString - FromInt16Base8", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests.fromInt16Base8);
            QUnit.test("Convert.ToString - FromInt16Base10", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests.fromInt16Base10);
            QUnit.test("Convert.ToString - FromInt16Base16", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests.fromInt16Base16);
            QUnit.test("Convert.ToString - FromInt16InvalidBase", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests.fromInt16InvalidBase);
            QUnit.test("Convert.ToString - FromInt32Base2", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests.fromInt32Base2);
            QUnit.test("Convert.ToString - FromInt32Base8", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests.fromInt32Base8);
            QUnit.test("Convert.ToString - FromInt32Base10", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests.fromInt32Base10);
            QUnit.test("Convert.ToString - FromInt32Base16", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests.fromInt32Base16);
            QUnit.test("Convert.ToString - FromInt32InvalidBase", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests.fromInt32InvalidBase);
            QUnit.test("Convert.ToString - FromInt64Base2", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests.fromInt64Base2);
            QUnit.test("Convert.ToString - FromInt64Base8", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests.fromInt64Base8);
            QUnit.test("Convert.ToString - FromInt64Base10", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests.fromInt64Base10);
            QUnit.test("Convert.ToString - FromInt64Base16", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests.fromInt64Base16);
            QUnit.test("Convert.ToString - FromInt64InvalidBase", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests.fromInt64InvalidBase);
            QUnit.test("Convert.ToString - FromBoolean", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests.fromBoolean);
            QUnit.test("Convert.ToString - FromSByte", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests.fromSByte);
            QUnit.test("Convert.ToString - FromByte", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests.fromByte);
            QUnit.test("Convert.ToString - FromInt16Array", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests.fromInt16Array);
            QUnit.test("Convert.ToString - FromUInt16Array", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests.fromUInt16Array);
            QUnit.test("Convert.ToString - FromInt32Array", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests.fromInt32Array);
            QUnit.test("Convert.ToString - FromUInt32Array", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests.fromUInt32Array);
            QUnit.test("Convert.ToString - FromInt64Array", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests.fromInt64Array);
            QUnit.test("Convert.ToString - FromUInt64Array", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests.fromUInt64Array);
            QUnit.test("Convert.ToString - FromSingleArray", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests.fromSingleArray);
            QUnit.test("Convert.ToString - FromDoubleArray", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests.fromDoubleArray);
            QUnit.test("Convert.ToString - FromDecimalArray", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests.fromDecimalArray);
            QUnit.test("Convert.ToString - FromDateTimeArray", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests.fromDateTimeArray);
            QUnit.test("Convert.ToString - FromString", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests.fromString);
            QUnit.test("Convert.ToString - FromIFormattable", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests.fromIFormattable);
            QUnit.test("Convert.ToString - FromNonIConvertible", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests.fromNonIConvertible);
            QUnit.test("Convert.ToBoolean - FromBoolean", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToBooleanTests.fromBoolean);
            QUnit.test("Convert.ToBoolean - FromByte", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToBooleanTests.fromByte);
            QUnit.test("Convert.ToBoolean - FromDecimal", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToBooleanTests.fromDecimal);
            QUnit.test("Convert.ToBoolean - FromDouble", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToBooleanTests.fromDouble);
            QUnit.test("Convert.ToBoolean - FromInt16", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToBooleanTests.fromInt16);
            QUnit.test("Convert.ToBoolean - FromInt32", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToBooleanTests.fromInt32);
            QUnit.test("Convert.ToBoolean - FromInt64", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToBooleanTests.fromInt64);
            QUnit.test("Convert.ToBoolean - FromString", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToBooleanTests.fromString);
            QUnit.test("Convert.ToBoolean - FromObject", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToBooleanTests.fromObject);
            QUnit.test("Convert.ToBoolean - FromSByte", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToBooleanTests.fromSByte);
            QUnit.test("Convert.ToBoolean - FromSingle", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToBooleanTests.fromSingle);
            QUnit.test("Convert.ToBoolean - FromUInt16", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToBooleanTests.fromUInt16);
            QUnit.test("Convert.ToBoolean - FromUInt32", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToBooleanTests.fromUInt32);
            QUnit.test("Convert.ToBoolean - FromUInt64", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToBooleanTests.fromUInt64);
            QUnit.test("Convert.ToByte - FromBoolean", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToByteTests.fromBoolean);
            QUnit.test("Convert.ToByte - FromChar", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToByteTests.fromChar);
            QUnit.test("Convert.ToByte - FromDecimal", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToByteTests.fromDecimal);
            QUnit.test("Convert.ToByte - FromDouble", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToByteTests.fromDouble);
            QUnit.test("Convert.ToByte - FromInt16", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToByteTests.fromInt16);
            QUnit.test("Convert.ToByte - FromInt32", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToByteTests.fromInt32);
            QUnit.test("Convert.ToByte - FromInt64", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToByteTests.fromInt64);
            QUnit.test("Convert.ToByte - FromObject", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToByteTests.fromObject);
            QUnit.test("Convert.ToByte - FromSByte", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToByteTests.fromSByte);
            QUnit.test("Convert.ToByte - FromSingle", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToByteTests.fromSingle);
            QUnit.test("Convert.ToByte - FromString", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToByteTests.fromString);
            QUnit.test("Convert.ToByte - FromStringWithBase", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToByteTests.fromStringWithBase);
            QUnit.test("Convert.ToByte - FromUInt16", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToByteTests.fromUInt16);
            QUnit.test("Convert.ToByte - FromUInt32", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToByteTests.fromUInt32);
            QUnit.test("Convert.ToByte - FromUInt64", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToByteTests.fromUInt64);
            QUnit.test("Convert.ToChar - FromByte", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToCharTests.fromByte);
            QUnit.test("Convert.ToChar - FromChar", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToCharTests.fromChar);
            QUnit.test("Convert.ToChar - FromDecimal", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToCharTests.fromDecimal);
            QUnit.test("Convert.ToChar - FromDecimalViaObject", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToCharTests.fromDecimalViaObject);
            QUnit.test("Convert.ToChar - FromDouble", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToCharTests.fromDouble);
            QUnit.test("Convert.ToChar - FromDoubleViaObject", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToCharTests.fromDoubleViaObject);
            QUnit.test("Convert.ToChar - FromInt16", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToCharTests.fromInt16);
            QUnit.test("Convert.ToChar - FromInt32", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToCharTests.fromInt32);
            QUnit.test("Convert.ToChar - FromInt64", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToCharTests.fromInt64);
            QUnit.test("Convert.ToChar - FromObject", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToCharTests.fromObject);
            QUnit.test("Convert.ToChar - FromSByte", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToCharTests.fromSByte);
            QUnit.test("Convert.ToChar - FromSingle", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToCharTests.fromSingle);
            QUnit.test("Convert.ToChar - FromSingleViaObject", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToCharTests.fromSingleViaObject);
            QUnit.test("Convert.ToChar - FromString", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToCharTests.fromString);
            QUnit.test("Convert.ToChar - FromUInt16", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToCharTests.fromUInt16);
            QUnit.test("Convert.ToChar - FromUInt32", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToCharTests.fromUInt32);
            QUnit.test("Convert.ToChar - FromUInt64", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToCharTests.fromUInt64);
            QUnit.test("Convert.ToDateTime - FromString", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDateTimeTests.fromString);
            QUnit.test("Convert.ToDateTime - FromStringWithCustomFormatProvider", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDateTimeTests.fromStringWithCustomFormatProvider);
            QUnit.test("Convert.ToDateTime - FromDateTime", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDateTimeTests.fromDateTime);
            QUnit.test("Convert.ToDateTime - FromObject", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDateTimeTests.fromObject);
            QUnit.test("Convert.ToDateTime - FromBoolean", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDateTimeTests.fromBoolean);
            QUnit.test("Convert.ToDateTime - FromChar", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDateTimeTests.fromChar);
            QUnit.test("Convert.ToDateTime - FromInt16", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDateTimeTests.fromInt16);
            QUnit.test("Convert.ToDateTime - FromInt32", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDateTimeTests.fromInt32);
            QUnit.test("Convert.ToDateTime - FromInt64", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDateTimeTests.fromInt64);
            QUnit.test("Convert.ToDateTime - FromUInt16", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDateTimeTests.fromUInt16);
            QUnit.test("Convert.ToDateTime - FromUInt32", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDateTimeTests.fromUInt32);
            QUnit.test("Convert.ToDateTime - FromUInt64", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDateTimeTests.fromUInt64);
            QUnit.test("Convert.ToDateTime - FromSingle", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDateTimeTests.fromSingle);
            QUnit.test("Convert.ToDateTime - FromDouble", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDateTimeTests.fromDouble);
            QUnit.test("Convert.ToDateTime - FromDecimal", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDateTimeTests.fromDecimal);
            QUnit.test("Convert.ToDecimal - FromBoolean", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDecimalTests.fromBoolean);
            QUnit.test("Convert.ToDecimal - FromByte", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDecimalTests.fromByte);
            QUnit.test("Convert.ToDecimal - FromDecimal", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDecimalTests.fromDecimal);
            QUnit.test("Convert.ToDecimal - FromDouble", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDecimalTests.fromDouble);
            QUnit.test("Convert.ToDecimal - FromInt16", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDecimalTests.fromInt16);
            QUnit.test("Convert.ToDecimal - FromInt32", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDecimalTests.fromInt32);
            QUnit.test("Convert.ToDecimal - FromInt64", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDecimalTests.fromInt64);
            QUnit.test("Convert.ToDecimal - FromObject", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDecimalTests.fromObject);
            QUnit.test("Convert.ToDecimal - FromSByte", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDecimalTests.fromSByte);
            QUnit.test("Convert.ToDecimal - FromSingle", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDecimalTests.fromSingle);
            QUnit.test("Convert.ToDecimal - FromString", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDecimalTests.fromString);
            QUnit.test("Convert.ToDecimal - FromUInt16", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDecimalTests.fromUInt16);
            QUnit.test("Convert.ToDecimal - FromUInt32", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDecimalTests.fromUInt32);
            QUnit.test("Convert.ToDecimal - FromUInt64", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDecimalTests.fromUInt64);
            QUnit.test("Convert.ToDouble - FromBoolean", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDoubleTests.fromBoolean);
            QUnit.test("Convert.ToDouble - FromByte", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDoubleTests.fromByte);
            QUnit.test("Convert.ToDouble - FromDecimal", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDoubleTests.fromDecimal);
            QUnit.test("Convert.ToDouble - FromDouble", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDoubleTests.fromDouble);
            QUnit.test("Convert.ToDouble - FromInt16", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDoubleTests.fromInt16);
            QUnit.test("Convert.ToDouble - FromInt32", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDoubleTests.fromInt32);
            QUnit.test("Convert.ToDouble - FromInt64", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDoubleTests.fromInt64);
            QUnit.test("Convert.ToDouble - FromObject", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDoubleTests.fromObject);
            QUnit.test("Convert.ToDouble - FromSByte", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDoubleTests.fromSByte);
            QUnit.test("Convert.ToDouble - FromSingle", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDoubleTests.fromSingle);
            QUnit.test("Convert.ToDouble - FromString", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDoubleTests.fromString);
            QUnit.test("Convert.ToDouble - FromUInt16", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDoubleTests.fromUInt16);
            QUnit.test("Convert.ToDouble - FromUInt32", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDoubleTests.fromUInt32);
            QUnit.test("Convert.ToDouble - FromUInt64", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDoubleTests.fromUInt64);
            QUnit.test("Convert.ToInt16 - FromBoolean", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt16Tests.fromBoolean);
            QUnit.test("Convert.ToInt16 - FromByte", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt16Tests.fromByte);
            QUnit.test("Convert.ToInt16 - FromChar", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt16Tests.fromChar);
            QUnit.test("Convert.ToInt16 - FromDecimal", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt16Tests.fromDecimal);
            QUnit.test("Convert.ToInt16 - FromDouble", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt16Tests.fromDouble);
            QUnit.test("Convert.ToInt16 - FromInt16", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt16Tests.fromInt16);
            QUnit.test("Convert.ToInt16 - FromInt32", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt16Tests.fromInt32);
            QUnit.test("Convert.ToInt16 - FromInt64", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt16Tests.fromInt64);
            QUnit.test("Convert.ToInt16 - FromObject", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt16Tests.fromObject);
            QUnit.test("Convert.ToInt16 - FromSByte", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt16Tests.fromSByte);
            QUnit.test("Convert.ToInt16 - FromSingle", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt16Tests.fromSingle);
            QUnit.test("Convert.ToInt16 - FromString", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt16Tests.fromString);
            QUnit.test("Convert.ToInt16 - FromStringWithBase", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt16Tests.fromStringWithBase);
            QUnit.test("Convert.ToInt16 - FromUInt16", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt16Tests.fromUInt16);
            QUnit.test("Convert.ToInt16 - FromUInt32", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt16Tests.fromUInt32);
            QUnit.test("Convert.ToInt16 - FromUInt64", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt16Tests.fromUInt64);
            QUnit.test("Convert.ToInt32 - FromBoolean", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt32Tests.fromBoolean);
            QUnit.test("Convert.ToInt32 - FromByte", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt32Tests.fromByte);
            QUnit.test("Convert.ToInt32 - FromChar", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt32Tests.fromChar);
            QUnit.test("Convert.ToInt32 - FromDecimal", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt32Tests.fromDecimal);
            QUnit.test("Convert.ToInt32 - FromDouble", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt32Tests.fromDouble);
            QUnit.test("Convert.ToInt32 - FromInt16", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt32Tests.fromInt16);
            QUnit.test("Convert.ToInt32 - FromInt32", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt32Tests.fromInt32);
            QUnit.test("Convert.ToInt32 - FromInt64", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt32Tests.fromInt64);
            QUnit.test("Convert.ToInt32 - FromObject", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt32Tests.fromObject);
            QUnit.test("Convert.ToInt32 - FromSByte", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt32Tests.fromSByte);
            QUnit.test("Convert.ToInt32 - FromSingle", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt32Tests.fromSingle);
            QUnit.test("Convert.ToInt32 - FromString", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt32Tests.fromString);
            QUnit.test("Convert.ToInt32 - FromStringWithBase", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt32Tests.fromStringWithBase);
            QUnit.test("Convert.ToInt32 - FromUInt16", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt32Tests.fromUInt16);
            QUnit.test("Convert.ToInt32 - FromUInt32", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt32Tests.fromUInt32);
            QUnit.test("Convert.ToInt32 - FromUInt64", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt32Tests.fromUInt64);
            QUnit.test("Convert.ToInt64 - FromBoolean", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt64Tests.fromBoolean);
            QUnit.test("Convert.ToInt64 - FromByte", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt64Tests.fromByte);
            QUnit.test("Convert.ToInt64 - FromChar", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt64Tests.fromChar);
            QUnit.test("Convert.ToInt64 - FromDecimal", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt64Tests.fromDecimal);
            QUnit.test("Convert.ToInt64 - FromDouble", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt64Tests.fromDouble);
            QUnit.test("Convert.ToInt64 - FromInt16", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt64Tests.fromInt16);
            QUnit.test("Convert.ToInt64 - FromInt32", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt64Tests.fromInt32);
            QUnit.test("Convert.ToInt64 - FromInt64", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt64Tests.fromInt64);
            QUnit.test("Convert.ToInt64 - FromObject", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt64Tests.fromObject);
            QUnit.test("Convert.ToInt64 - FromSByte", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt64Tests.fromSByte);
            QUnit.test("Convert.ToInt64 - FromSingle", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt64Tests.fromSingle);
            QUnit.test("Convert.ToInt64 - FromString", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt64Tests.fromString);
            QUnit.test("Convert.ToInt64 - FromStringWithBase", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt64Tests.fromStringWithBase);
            QUnit.test("Convert.ToInt64 - FromUInt16", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt64Tests.fromUInt16);
            QUnit.test("Convert.ToInt64 - FromUInt32", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt64Tests.fromUInt32);
            QUnit.test("Convert.ToInt64 - FromUInt64", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt64Tests.fromUInt64);
            QUnit.test("Convert.ToSByte - FromBoolean", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToSByteTests.fromBoolean);
            QUnit.test("Convert.ToSByte - FromByte", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToSByteTests.fromByte);
            QUnit.test("Convert.ToSByte - FromChar", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToSByteTests.fromChar);
            QUnit.test("Convert.ToSByte - FromDecimal", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToSByteTests.fromDecimal);
            QUnit.test("Convert.ToSByte - FromDouble", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToSByteTests.fromDouble);
            QUnit.test("Convert.ToSByte - FromInt16", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToSByteTests.fromInt16);
            QUnit.test("Convert.ToSByte - FromInt32", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToSByteTests.fromInt32);
            QUnit.test("Convert.ToSByte - FromInt64", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToSByteTests.fromInt64);
            QUnit.test("Convert.ToSByte - FromObject", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToSByteTests.fromObject);
            QUnit.test("Convert.ToSByte - FromSByte", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToSByteTests.fromSByte);
            QUnit.test("Convert.ToSByte - FromSingle", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToSByteTests.fromSingle);
            QUnit.test("Convert.ToSByte - FromString", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToSByteTests.fromString);
            QUnit.test("Convert.ToSByte - FromStringWithBase", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToSByteTests.fromStringWithBase);
            QUnit.test("Convert.ToSByte - FromUInt16", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToSByteTests.fromUInt16);
            QUnit.test("Convert.ToSByte - FromUInt32", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToSByteTests.fromUInt32);
            QUnit.test("Convert.ToSByte - FromUInt64", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToSByteTests.fromUInt64);
            QUnit.test("Convert.ToSingle - FromBoolean", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToSingleTests.fromBoolean);
            QUnit.test("Convert.ToSingle - FromByte", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToSingleTests.fromByte);
            QUnit.test("Convert.ToSingle - FromDecimal", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToSingleTests.fromDecimal);
            QUnit.test("Convert.ToSingle - FromDouble", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToSingleTests.fromDouble);
            QUnit.test("Convert.ToSingle - FromInt16", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToSingleTests.fromInt16);
            QUnit.test("Convert.ToSingle - FromInt32", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToSingleTests.fromInt32);
            QUnit.test("Convert.ToSingle - FromInt64", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToSingleTests.fromInt64);
            QUnit.test("Convert.ToSingle - FromObject", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToSingleTests.fromObject);
            QUnit.test("Convert.ToSingle - FromSByte", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToSingleTests.fromSByte);
            QUnit.test("Convert.ToSingle - FromSingle", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToSingleTests.fromSingle);
            QUnit.test("Convert.ToSingle - FromString", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToSingleTests.fromString);
            QUnit.test("Convert.ToSingle - FromUInt16", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToSingleTests.fromUInt16);
            QUnit.test("Convert.ToSingle - FromUInt32", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToSingleTests.fromUInt32);
            QUnit.test("Convert.ToSingle - FromUInt64", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToSingleTests.fromUInt64);
            QUnit.test("Convert.ToUInt16 - FromBoolean", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt16Tests.fromBoolean);
            QUnit.test("Convert.ToUInt16 - FromByte", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt16Tests.fromByte);
            QUnit.test("Convert.ToUInt16 - FromChar", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt16Tests.fromChar);
            QUnit.test("Convert.ToUInt16 - FromDecimal", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt16Tests.fromDecimal);
            QUnit.test("Convert.ToUInt16 - FromDouble", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt16Tests.fromDouble);
            QUnit.test("Convert.ToUInt16 - FromInt16", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt16Tests.fromInt16);
            QUnit.test("Convert.ToUInt16 - FromInt32", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt16Tests.fromInt32);
            QUnit.test("Convert.ToUInt16 - FromInt64", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt16Tests.fromInt64);
            QUnit.test("Convert.ToUInt16 - FromObject", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt16Tests.fromObject);
            QUnit.test("Convert.ToUInt16 - FromSByte", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt16Tests.fromSByte);
            QUnit.test("Convert.ToUInt16 - FromSingle", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt16Tests.fromSingle);
            QUnit.test("Convert.ToUInt16 - FromString", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt16Tests.fromString);
            QUnit.test("Convert.ToUInt16 - FromStringWithBase", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt16Tests.fromStringWithBase);
            QUnit.test("Convert.ToUInt16 - FromUInt16", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt16Tests.fromUInt16);
            QUnit.test("Convert.ToUInt16 - FromUInt32", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt16Tests.fromUInt32);
            QUnit.test("Convert.ToUInt16 - FromUInt64", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt16Tests.fromUInt64);
            QUnit.test("Convert.ToUInt32 - FromBoolean", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt32Tests.fromBoolean);
            QUnit.test("Convert.ToUInt32 - FromByte", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt32Tests.fromByte);
            QUnit.test("Convert.ToUInt32 - FromChar", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt32Tests.fromChar);
            QUnit.test("Convert.ToUInt32 - FromDecimal", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt32Tests.fromDecimal);
            QUnit.test("Convert.ToUInt32 - FromDouble", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt32Tests.fromDouble);
            QUnit.test("Convert.ToUInt32 - FromInt16", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt32Tests.fromInt16);
            QUnit.test("Convert.ToUInt32 - FromInt32", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt32Tests.fromInt32);
            QUnit.test("Convert.ToUInt32 - FromInt64", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt32Tests.fromInt64);
            QUnit.test("Convert.ToUInt32 - FromObject", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt32Tests.fromObject);
            QUnit.test("Convert.ToUInt32 - FromSByte", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt32Tests.fromSByte);
            QUnit.test("Convert.ToUInt32 - FromSingle", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt32Tests.fromSingle);
            QUnit.test("Convert.ToUInt32 - FromString", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt32Tests.fromString);
            QUnit.test("Convert.ToUInt32 - FromStringWithBase", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt32Tests.fromStringWithBase);
            QUnit.test("Convert.ToUInt32 - FromUInt16", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt32Tests.fromUInt16);
            QUnit.test("Convert.ToUInt32 - FromUInt32", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt32Tests.fromUInt32);
            QUnit.test("Convert.ToUInt32 - FromUInt64", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt32Tests.fromUInt64);
            QUnit.test("Convert.ToUInt64 - FromBoolean", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt64Tests.fromBoolean);
            QUnit.test("Convert.ToUInt64 - FromByte", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt64Tests.fromByte);
            QUnit.test("Convert.ToUInt64 - FromChar", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt64Tests.fromChar);
            QUnit.test("Convert.ToUInt64 - FromDecimal", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt64Tests.fromDecimal);
            QUnit.test("Convert.ToUInt64 - FromDouble", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt64Tests.fromDouble);
            QUnit.test("Convert.ToUInt64 - FromInt16", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt64Tests.fromInt16);
            QUnit.test("Convert.ToUInt64 - FromInt32", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt64Tests.fromInt32);
            QUnit.test("Convert.ToUInt64 - FromInt64", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt64Tests.fromInt64);
            QUnit.test("Convert.ToUInt64 - FromObject", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt64Tests.fromObject);
            QUnit.test("Convert.ToUInt64 - FromSByte", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt64Tests.fromSByte);
            QUnit.test("Convert.ToUInt64 - FromSingle", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt64Tests.fromSingle);
            QUnit.test("Convert.ToUInt64 - FromString", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt64Tests.fromString);
            QUnit.test("Convert.ToUInt64 - FromStringWithBase", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt64Tests.fromStringWithBase);
            QUnit.test("Convert.ToUInt64 - FromUInt16", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt64Tests.fromUInt16);
            QUnit.test("Convert.ToUInt64 - FromUInt32", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt64Tests.fromUInt32);
            QUnit.test("Convert.ToUInt64 - FromUInt64", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt64Tests.fromUInt64);
            QUnit.module("Date and time");
            QUnit.test("DateTimeFormatInfo - TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestRunner.DateTimeFormatInfoTests.typePropertiesAreCorrect);
            QUnit.test("DateTimeFormatInfo - GetFormatWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DateTimeFormatInfoTests.getFormatWorks);
            QUnit.test("DateTimeFormatInfo - InvariantWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DateTimeFormatInfoTests.invariantWorks);
            QUnit.test("DateTime - TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.typePropertiesAreCorrect);
            QUnit.test("DateTime - DefaultConstructorWorks_SPI_1606", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.defaultConstructorWorks_SPI_1606);
            QUnit.test("DateTime - DefaultValueWorks_SPI_1606", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.defaultValueWorks_SPI_1606);
            QUnit.test("DateTime - CreatingInstanceReturnsDateWithZeroValue_SPI_1606", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.creatingInstanceReturnsDateWithZeroValue_SPI_1606);
            QUnit.test("DateTime - LongConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.longConstructorWorks);
            QUnit.test("DateTime - StringConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.stringConstructorWorks);
            QUnit.test("DateTime - YMDConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.yMDConstructorWorks);
            QUnit.test("DateTime - YMDHConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.yMDHConstructorWorks);
            QUnit.test("DateTime - YMDHNConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.yMDHNConstructorWorks);
            QUnit.test("DateTime - YMDHNSConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.yMDHNSConstructorWorks);
            QUnit.test("DateTime - YMDHNSUConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.yMDHNSUConstructorWorks);
            QUnit.test("DateTime - MinWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.minWorks);
            QUnit.test("DateTime - MaxWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.maxWorks);
            QUnit.test("DateTime - NowWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.nowWorks);
            QUnit.test("DateTime - UTCNowWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.uTCNowWorks);
            QUnit.test("DateTime - ToUniversalWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.toUniversalWorks);
            QUnit.test("DateTime - ToLocalWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.toLocalWorks);
            QUnit.test("DateTime - TodayWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.todayWorks);
            QUnit.test("DateTime - FormatWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.formatWorks);
            QUnit.test("DateTime - IFormattableToStringWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.iFormattableToStringWorks);
            QUnit.test("DateTime - LocaleFormatWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.localeFormatWorks);
            QUnit.test("DateTime - GetFullYearWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.getFullYearWorks);
            QUnit.test("DateTime - GetMonthWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.getMonthWorks);
            QUnit.test("DateTime - GetDateWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.getDateWorks);
            QUnit.test("DateTime - GetHoursWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.getHoursWorks);
            QUnit.test("DateTime - GetMinutesWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.getMinutesWorks);
            QUnit.test("DateTime - GetSecondsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.getSecondsWorks);
            QUnit.test("DateTime - GetMillisecondsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.getMillisecondsWorks);
            QUnit.test("DateTime - GetDayWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.getDayWorks);
            QUnit.test("DateTime - GetTimeWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.getTimeWorks);
            QUnit.test("DateTime - ValueOfWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.valueOfWorks);
            QUnit.test("DateTime - TicksWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.ticksWorks);
            QUnit.test("DateTime - GetUTCFullYearWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.getUTCFullYearWorks);
            QUnit.test("DateTime - GetUtcMonthWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.getUtcMonthWorks);
            QUnit.test("DateTime - GetUTCDateWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.getUTCDateWorks);
            QUnit.test("DateTime - GetUTCHoursWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.getUTCHoursWorks);
            QUnit.test("DateTime - GetUTCMinutesWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.getUTCMinutesWorks);
            QUnit.test("DateTime - GetUTCSecondsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.getUTCSecondsWorks);
            QUnit.test("DateTime - GetUTCMillisecondsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.getUTCMillisecondsWorks);
            QUnit.test("DateTime - GetUTCDayWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.getUTCDayWorks);
            QUnit.test("DateTime - ParseWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.parseWorks);
            QUnit.test("DateTime - ParseExactWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.parseExactWorks);
            QUnit.test("DateTime - ParseExactWithCultureWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.parseExactWithCultureWorks);
            QUnit.test("DateTime - ParseExactUTCWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.parseExactUTCWorks);
            QUnit.test("DateTime - ParseExactUTCWithCultureWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.parseExactUTCWithCultureWorks);
            QUnit.test("DateTime - ToDateStringWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.toDateStringWorks);
            QUnit.test("DateTime - ToTimeStringWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.toTimeStringWorks);
            QUnit.test("DateTime - ToUTCStringWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.toUTCStringWorks);
            QUnit.test("DateTime - ToLocaleDateStringWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.toLocaleDateStringWorks);
            QUnit.test("DateTime - ToLocaleTimeStringWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.toLocaleTimeStringWorks);
            QUnit.test("DateTime - SubtractingDatesWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.subtractingDatesWorks);
            QUnit.test("DateTime - SubtractMethodReturningTimeSpanWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.subtractMethodReturningTimeSpanWorks);
            QUnit.test("DateTime - DateEqualityWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.dateEqualityWorks);
            QUnit.test("DateTime - DateInequalityWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.dateInequalityWorks);
            QUnit.test("DateTime - DateLessThanWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.dateLessThanWorks);
            QUnit.test("DateTime - DateLessEqualWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.dateLessEqualWorks);
            QUnit.test("DateTime - DateGreaterThanWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.dateGreaterThanWorks);
            QUnit.test("DateTime - DateGreaterEqualWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.dateGreaterEqualWorks);
            QUnit.test("DateTime - GetHashCodeWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.getHashCodeWorks);
            QUnit.test("DateTime - EqualsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.equalsWorks);
            QUnit.test("DateTime - DateTimeEqualsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.dateTimeEqualsWorks);
            QUnit.test("DateTime - CompareToWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.compareToWorks);
            QUnit.test("DateTime - DateTimes", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.dateTimes);
            QUnit.test("DateTime - CreateUnixTimestampAndConvertBackToDateTime", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.createUnixTimestampAndConvertBackToDateTime);
            QUnit.test("#2149 - ToShortDateStringWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.toShortDateStringWorks);
            QUnit.test("#2149 - ToShortTimeStringWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.toShortTimeStringWorks);
            QUnit.test("TimeSpan - TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestRunner.TimeSpanTests.typePropertiesAreCorrect);
            QUnit.test("TimeSpan - DefaultConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TimeSpanTests.defaultConstructorWorks);
            QUnit.test("TimeSpan - DefaultValueWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TimeSpanTests.defaultValueWorks);
            QUnit.test("TimeSpan - ZeroWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TimeSpanTests.zeroWorks);
            QUnit.test("TimeSpan - CreatingInstanceReturnsTimeSpanWithZeroValue", Bridge.Test.Runtime.BridgeClientTestRunner.TimeSpanTests.creatingInstanceReturnsTimeSpanWithZeroValue);
            QUnit.test("TimeSpan - ParameterConstructorsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TimeSpanTests.parameterConstructorsWorks);
            QUnit.test("TimeSpan - FactoryMethodsWork", Bridge.Test.Runtime.BridgeClientTestRunner.TimeSpanTests.factoryMethodsWork);
            QUnit.test("TimeSpan - PropertiesWork", Bridge.Test.Runtime.BridgeClientTestRunner.TimeSpanTests.propertiesWork);
            QUnit.test("TimeSpan - CompareToWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TimeSpanTests.compareToWorks);
            QUnit.test("TimeSpan - CompareWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TimeSpanTests.compareWorks);
            QUnit.test("TimeSpan - StaticEqualsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TimeSpanTests.staticEqualsWorks);
            QUnit.test("TimeSpan - EqualsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TimeSpanTests.equalsWorks);
            QUnit.test("TimeSpan - IEquatableEqualsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TimeSpanTests.iEquatableEqualsWorks);
            QUnit.test("TimeSpan - ToStringWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TimeSpanTests.toStringWorks);
            QUnit.test("TimeSpan - AddWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TimeSpanTests.addWorks);
            QUnit.test("TimeSpan - SubtractWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TimeSpanTests.subtractWorks);
            QUnit.test("TimeSpan - DurationWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TimeSpanTests.durationWorks);
            QUnit.test("TimeSpan - NegateWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TimeSpanTests.negateWorks);
            QUnit.test("TimeSpan - ComparisonOperatorsWork", Bridge.Test.Runtime.BridgeClientTestRunner.TimeSpanTests.comparisonOperatorsWork);
            QUnit.test("TimeSpan - AdditionOperatorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TimeSpanTests.additionOperatorWorks);
            QUnit.test("TimeSpan - SubtractionOperatorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TimeSpanTests.subtractionOperatorWorks);
            QUnit.test("TimeSpan - UnaryPlusWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TimeSpanTests.unaryPlusWorks);
            QUnit.test("TimeSpan - UnaryMinusWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TimeSpanTests.unaryMinusWorks);
            QUnit.module("Decimal Math");
            QUnit.test("TestSubtractOperator", Bridge.Test.Runtime.BridgeClientTestRunner.DecimalMathTests.testSubtractOperator);
            QUnit.test("TestRemainderOperator", Bridge.Test.Runtime.BridgeClientTestRunner.DecimalMathTests.testRemainderOperator);
            QUnit.test("TestMultiplyOperator", Bridge.Test.Runtime.BridgeClientTestRunner.DecimalMathTests.testMultiplyOperator);
            QUnit.test("TestDivideOperator", Bridge.Test.Runtime.BridgeClientTestRunner.DecimalMathTests.testDivideOperator);
            QUnit.test("TestAddOperator", Bridge.Test.Runtime.BridgeClientTestRunner.DecimalMathTests.testAddOperator);
            QUnit.test("TestAddMethod", Bridge.Test.Runtime.BridgeClientTestRunner.DecimalMathTests.testAddMethod);
            QUnit.test("TestDivideMethod", Bridge.Test.Runtime.BridgeClientTestRunner.DecimalMathTests.testDivideMethod);
            QUnit.test("TestMultiplyMethod", Bridge.Test.Runtime.BridgeClientTestRunner.DecimalMathTests.testMultiplyMethod);
            QUnit.test("TestRemainderMethod", Bridge.Test.Runtime.BridgeClientTestRunner.DecimalMathTests.testRemainderMethod);
            QUnit.test("TestSubtractMethod", Bridge.Test.Runtime.BridgeClientTestRunner.DecimalMathTests.testSubtractMethod);
            QUnit.test("TestCeilingMethod", Bridge.Test.Runtime.BridgeClientTestRunner.DecimalMathTests.testCeilingMethod);
            QUnit.test("TestFloorMethod", Bridge.Test.Runtime.BridgeClientTestRunner.DecimalMathTests.testFloorMethod);
            QUnit.module("Diagnostics");
            QUnit.test("Contract - Assume", Bridge.Test.Runtime.BridgeClientTestRunner.ContractTests.assume);
            QUnit.test("Contract - AssumeWithUserMessage", Bridge.Test.Runtime.BridgeClientTestRunner.ContractTests.assumeWithUserMessage);
            QUnit.test("Contract - _Assert", Bridge.Test.Runtime.BridgeClientTestRunner.ContractTests._Assert);
            QUnit.test("Contract - AssertWithUserMessage", Bridge.Test.Runtime.BridgeClientTestRunner.ContractTests.assertWithUserMessage);
            QUnit.test("Contract - Requires", Bridge.Test.Runtime.BridgeClientTestRunner.ContractTests.requires);
            QUnit.test("Contract - RequiresWithUserMessage", Bridge.Test.Runtime.BridgeClientTestRunner.ContractTests.requiresWithUserMessage);
            QUnit.test("Contract - RequiresWithTypeException", Bridge.Test.Runtime.BridgeClientTestRunner.ContractTests.requiresWithTypeException);
            QUnit.test("Contract - RequiredWithTypeExceptionAndUserMessage", Bridge.Test.Runtime.BridgeClientTestRunner.ContractTests.requiredWithTypeExceptionAndUserMessage);
            QUnit.test("Contract - ForAll", Bridge.Test.Runtime.BridgeClientTestRunner.ContractTests.forAll);
            QUnit.test("Contract - ForAllWithCollection", Bridge.Test.Runtime.BridgeClientTestRunner.ContractTests.forAllWithCollection);
            QUnit.test("Contract - Exists", Bridge.Test.Runtime.BridgeClientTestRunner.ContractTests.exists);
            QUnit.test("Contract - ExistsWithCollection", Bridge.Test.Runtime.BridgeClientTestRunner.ContractTests.existsWithCollection);
            QUnit.test("Stopwatch - GetTimestamp", Bridge.Test.Runtime.BridgeClientTestRunner.StopwatchTests.getTimestamp);
            QUnit.test("Stopwatch - ConstructStartAndStop", Bridge.Test.Runtime.BridgeClientTestRunner.StopwatchTests.constructStartAndStop);
            QUnit.test("Stopwatch - StartNewAndReset", Bridge.Test.Runtime.BridgeClientTestRunner.StopwatchTests.startNewAndReset);
            QUnit.test("Stopwatch - StartNewAndRestart", Bridge.Test.Runtime.BridgeClientTestRunner.StopwatchTests.startNewAndRestart);
            QUnit.test("Stopwatch - StopShouldContinue", Bridge.Test.Runtime.BridgeClientTestRunner.StopwatchTests.stopShouldContinue);
            QUnit.test("Stopwatch - DefaultConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StopwatchTests.defaultConstructorWorks);
            QUnit.test("Stopwatch - ConstantsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StopwatchTests.constantsWorks);
            QUnit.test("Stopwatch - StartNewWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StopwatchTests.startNewWorks);
            QUnit.test("Stopwatch - StartAndStopWork", Bridge.Test.Runtime.BridgeClientTestRunner.StopwatchTests.startAndStopWork);
            QUnit.test("Stopwatch - ElapsedWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StopwatchTests.elapsedWorks);
            QUnit.test("Stopwatch - GetTimestampWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StopwatchTests.getTimestampWorks);
            QUnit.module("Enum");
            QUnit.test("Enum - TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestRunner.EnumTests.typePropertiesAreCorrect);
            QUnit.test("Enum - DefaultValueOfEnumClassIsNull", Bridge.Test.Runtime.BridgeClientTestRunner.EnumTests.defaultValueOfEnumClassIsNull);
            QUnit.test("Enum - DefaultValueOfEnumTypeIsFirstValue", Bridge.Test.Runtime.BridgeClientTestRunner.EnumTests.defaultValueOfEnumTypeIsFirstValue);
            QUnit.test("Enum - DefaultConstructorOfEnumTypeReturnsZero", Bridge.Test.Runtime.BridgeClientTestRunner.EnumTests.defaultConstructorOfEnumTypeReturnsZero);
            QUnit.test("Enum - FirstValueOfEnumIsZero", Bridge.Test.Runtime.BridgeClientTestRunner.EnumTests.firstValueOfEnumIsZero);
            QUnit.test("Enum - CreatingInstanceOfEnumTypeReturnsZero", Bridge.Test.Runtime.BridgeClientTestRunner.EnumTests.creatingInstanceOfEnumTypeReturnsZero);
            QUnit.test("Enum - DefaultExpressionWithEnumReturnsZero", Bridge.Test.Runtime.BridgeClientTestRunner.EnumTests.defaultExpressionWithEnumReturnsZero);
            QUnit.test("Enum - GetHashCodeWorks", Bridge.Test.Runtime.BridgeClientTestRunner.EnumTests.getHashCodeWorks);
            QUnit.test("Enum - EqualsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.EnumTests.equalsWorks);
            QUnit.test("Enum - ParseWorks", Bridge.Test.Runtime.BridgeClientTestRunner.EnumTests.parseWorks);
            QUnit.test("Enum - StaticToStringWorks", Bridge.Test.Runtime.BridgeClientTestRunner.EnumTests.staticToStringWorks);
            QUnit.test("Enum - ConversionsToEnumAreTreatedAsConversionsToTheUnderlyingType", Bridge.Test.Runtime.BridgeClientTestRunner.EnumTests.conversionsToEnumAreTreatedAsConversionsToTheUnderlyingType);
            QUnit.test("Enum - GetValuesWorks", Bridge.Test.Runtime.BridgeClientTestRunner.EnumTests.getValuesWorks);
            QUnit.module("EqualityComparer");
            QUnit.test("TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestRunner.EqualityComparerTests.typePropertiesAreCorrect);
            QUnit.test("DefaultComparerCanGetHashCodeOfNumber", Bridge.Test.Runtime.BridgeClientTestRunner.EqualityComparerTests.defaultComparerCanGetHashCodeOfNumber);
            QUnit.test("DefaultComparerReturnsZeroAsHashCodeForNullAndUndefined", Bridge.Test.Runtime.BridgeClientTestRunner.EqualityComparerTests.defaultComparerReturnsZeroAsHashCodeForNullAndUndefined);
            QUnit.test("DefaultComparerCanDetermineEquality", Bridge.Test.Runtime.BridgeClientTestRunner.EqualityComparerTests.defaultComparerCanDetermineEquality);
            QUnit.test("DefaultComparerInvokesOverriddenGetHashCode", Bridge.Test.Runtime.BridgeClientTestRunner.EqualityComparerTests.defaultComparerInvokesOverriddenGetHashCode);
            QUnit.test("DefaultComparerInvokesOverriddenEquals", Bridge.Test.Runtime.BridgeClientTestRunner.EqualityComparerTests.defaultComparerInvokesOverriddenEquals);
            QUnit.module("Exceptions");
            QUnit.test("AggregateException - TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestRunner.AggregateExceptionTests.typePropertiesAreCorrect);
            QUnit.test("AggregateException - DefaultConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.AggregateExceptionTests.defaultConstructorWorks);
            QUnit.test("AggregateException - ConstructorWithIEnumerableInnerExceptionsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.AggregateExceptionTests.constructorWithIEnumerableInnerExceptionsWorks);
            QUnit.test("AggregateException - ConstructorWithInnerExceptionArrayWorks", Bridge.Test.Runtime.BridgeClientTestRunner.AggregateExceptionTests.constructorWithInnerExceptionArrayWorks);
            QUnit.test("AggregateException - ConstructorWithMessageWorks", Bridge.Test.Runtime.BridgeClientTestRunner.AggregateExceptionTests.constructorWithMessageWorks);
            QUnit.test("AggregateException - ConstructorWithMessageAndIEnumerableInnerExceptionsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.AggregateExceptionTests.constructorWithMessageAndIEnumerableInnerExceptionsWorks);
            QUnit.test("AggregateException - ConstructorWithMessageAndInnerExceptionArrayWorks", Bridge.Test.Runtime.BridgeClientTestRunner.AggregateExceptionTests.constructorWithMessageAndInnerExceptionArrayWorks);
            QUnit.test("AggregateException - FlattenWorks", Bridge.Test.Runtime.BridgeClientTestRunner.AggregateExceptionTests.flattenWorks);
            QUnit.test("AmbiguousMatchException - TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestRunner.AmbiguousMatchExceptionTests.typePropertiesAreCorrect);
            QUnit.test("AmbiguousMatchException - DefaultConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.AmbiguousMatchExceptionTests.defaultConstructorWorks);
            QUnit.test("AmbiguousMatchException - ConstructorWithMessageWorks", Bridge.Test.Runtime.BridgeClientTestRunner.AmbiguousMatchExceptionTests.constructorWithMessageWorks);
            QUnit.test("AmbiguousMatchException - ConstructorWithMessageAndInnerExceptionWorks", Bridge.Test.Runtime.BridgeClientTestRunner.AmbiguousMatchExceptionTests.constructorWithMessageAndInnerExceptionWorks);
            QUnit.test("ArgumentException - TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestRunner.ArgumentExceptionTests.typePropertiesAreCorrect);
            QUnit.test("ArgumentException - DefaultConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ArgumentExceptionTests.defaultConstructorWorks);
            QUnit.test("ArgumentException - ConstructorWithMessageWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ArgumentExceptionTests.constructorWithMessageWorks);
            QUnit.test("ArgumentException - ConstructorWithMessageAndInnerExceptionWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ArgumentExceptionTests.constructorWithMessageAndInnerExceptionWorks);
            QUnit.test("ArgumentException - ConstructorWithMessageAndParamNameWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ArgumentExceptionTests.constructorWithMessageAndParamNameWorks);
            QUnit.test("ArgumentException - ConstructorWithMessageAndParamNameAndInnerExceptionWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ArgumentExceptionTests.constructorWithMessageAndParamNameAndInnerExceptionWorks);
            QUnit.test("ArgumentNullException - TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestRunner.ArgumentNullExceptionTests.typePropertiesAreCorrect);
            QUnit.test("ArgumentNullException - DefaultConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ArgumentNullExceptionTests.defaultConstructorWorks);
            QUnit.test("ArgumentNullException - ConstructorWithParamNameWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ArgumentNullExceptionTests.constructorWithParamNameWorks);
            QUnit.test("ArgumentNullException - ConstructorWithParamNameAndMessageWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ArgumentNullExceptionTests.constructorWithParamNameAndMessageWorks);
            QUnit.test("ArgumentNullException - ConstructorWithMessageAndInnerExceptionWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ArgumentNullExceptionTests.constructorWithMessageAndInnerExceptionWorks);
            QUnit.test("ArgumentOutOfRangeException - TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestRunner.ArgumentOutOfRangeExceptionTests.typePropertiesAreCorrect);
            QUnit.test("ArgumentOutOfRangeException - DefaultConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ArgumentOutOfRangeExceptionTests.defaultConstructorWorks);
            QUnit.test("ArgumentOutOfRangeException - ConstructorWithParamNameWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ArgumentOutOfRangeExceptionTests.constructorWithParamNameWorks);
            QUnit.test("ArgumentOutOfRangeException - ConstructorWithParamNameAndMessageWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ArgumentOutOfRangeExceptionTests.constructorWithParamNameAndMessageWorks);
            QUnit.test("ArgumentOutOfRangeException - ConstructorWithMessageAndInnerExceptionWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ArgumentOutOfRangeExceptionTests.constructorWithMessageAndInnerExceptionWorks);
            QUnit.test("ArgumentOutOfRangeException - ConstructorWithParamNameAndActualValueAndMessageWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ArgumentOutOfRangeExceptionTests.constructorWithParamNameAndActualValueAndMessageWorks);
            QUnit.test("ArithmeticException - TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestRunner.ArithmeticExceptionTests.typePropertiesAreCorrect);
            QUnit.test("ArithmeticException - DefaultConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ArithmeticExceptionTests.defaultConstructorWorks);
            QUnit.test("ArithmeticException - ConstructorWithMessageWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ArithmeticExceptionTests.constructorWithMessageWorks);
            QUnit.test("ArithmeticException - ConstructorWithMessageAndInnerExceptionWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ArithmeticExceptionTests.constructorWithMessageAndInnerExceptionWorks);
            QUnit.test("Try/Catch/Finally - ThrowingAndCatchingExceptionsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.CommonExceptionTests.throwingAndCatchingExceptionsWorks);
            QUnit.test("Try/Catch/Finally - ExceptionOfWrongTypeIsNotCaught", Bridge.Test.Runtime.BridgeClientTestRunner.CommonExceptionTests.exceptionOfWrongTypeIsNotCaught);
            QUnit.test("Try/Catch/Finally - CanCatchExceptionAsBaseType", Bridge.Test.Runtime.BridgeClientTestRunner.CommonExceptionTests.canCatchExceptionAsBaseType);
            QUnit.test("Try/Catch/Finally - CanCatchStringAsException", Bridge.Test.Runtime.BridgeClientTestRunner.CommonExceptionTests.canCatchStringAsException);
            QUnit.test("Exception - CanCatchStringAsCatchAll", Bridge.Test.Runtime.BridgeClientTestRunner.CommonExceptionTests.canCatchStringAsCatchAll);
            QUnit.test("CultureNotFoundException - TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestRunner.CultureNotFoundExceptionTests.typePropertiesAreCorrect);
            QUnit.test("CultureNotFoundException - DefaultConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.CultureNotFoundExceptionTests.defaultConstructorWorks);
            QUnit.test("CultureNotFoundException - ConstructorWithMessageWorks", Bridge.Test.Runtime.BridgeClientTestRunner.CultureNotFoundExceptionTests.constructorWithMessageWorks);
            QUnit.test("CultureNotFoundException - ConstructorWithMessageAndInnerExceptionWorks", Bridge.Test.Runtime.BridgeClientTestRunner.CultureNotFoundExceptionTests.constructorWithMessageAndInnerExceptionWorks);
            QUnit.test("CultureNotFoundException - ConstructorWithMessageAndParamNameWorks", Bridge.Test.Runtime.BridgeClientTestRunner.CultureNotFoundExceptionTests.constructorWithMessageAndParamNameWorks);
            QUnit.test("CultureNotFoundException - ConstructorWithMessageAndCultureNameAndInnerExceptionWorks", Bridge.Test.Runtime.BridgeClientTestRunner.CultureNotFoundExceptionTests.constructorWithMessageAndCultureNameAndInnerExceptionWorks);
            QUnit.test("CultureNotFoundException - ConstructorWithParamNameAndCultureNameAndMessage", Bridge.Test.Runtime.BridgeClientTestRunner.CultureNotFoundExceptionTests.constructorWithParamNameAndCultureNameAndMessage);
            QUnit.test("CultureNotFoundException - ConstructorWithMessageAndCultureIdAndInnerExceptionWorks", Bridge.Test.Runtime.BridgeClientTestRunner.CultureNotFoundExceptionTests.constructorWithMessageAndCultureIdAndInnerExceptionWorks);
            QUnit.test("CultureNotFoundException - ConstructorWithParamNameAndCultureIdAndMessage", Bridge.Test.Runtime.BridgeClientTestRunner.CultureNotFoundExceptionTests.constructorWithParamNameAndCultureIdAndMessage);
            QUnit.test("DivideByZeroException - TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestRunner.DivideByZeroExceptionTests.typePropertiesAreCorrect);
            QUnit.test("DivideByZeroException - DefaultConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DivideByZeroExceptionTests.defaultConstructorWorks);
            QUnit.test("DivideByZeroException - ConstructorWithMessageWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DivideByZeroExceptionTests.constructorWithMessageWorks);
            QUnit.test("DivideByZeroException - ConstructorWithMessageAndInnerExceptionWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DivideByZeroExceptionTests.constructorWithMessageAndInnerExceptionWorks);
            QUnit.test("Exception - TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestRunner.ExceptionTests.typePropertiesAreCorrect);
            QUnit.test("Exception - DefaultConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ExceptionTests.defaultConstructorWorks);
            QUnit.test("Exception - ConstructorWithMessageWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ExceptionTests.constructorWithMessageWorks);
            QUnit.test("Exception - ConstructorWithMessageAndInnerExceptionWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ExceptionTests.constructorWithMessageAndInnerExceptionWorks);
            QUnit.test("Exception - MessagePropertyCanBeOverridden", Bridge.Test.Runtime.BridgeClientTestRunner.ExceptionTests.messagePropertyCanBeOverridden);
            QUnit.test("Exception - InnerExceptionPropertyCanBeOverridden", Bridge.Test.Runtime.BridgeClientTestRunner.ExceptionTests.innerExceptionPropertyCanBeOverridden);
            QUnit.test("FormatException - TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestRunner.FormatExceptionTests.typePropertiesAreCorrect);
            QUnit.test("FormatException - DefaultConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.FormatExceptionTests.defaultConstructorWorks);
            QUnit.test("FormatException - ConstructorWithMessageWorks", Bridge.Test.Runtime.BridgeClientTestRunner.FormatExceptionTests.constructorWithMessageWorks);
            QUnit.test("FormatException - ConstructorWithMessageAndInnerExceptionWorks", Bridge.Test.Runtime.BridgeClientTestRunner.FormatExceptionTests.constructorWithMessageAndInnerExceptionWorks);
            QUnit.test("IndexOutOfRangeException - TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestRunner.IndexOutOfRangeExceptionTests.typePropertiesAreCorrect);
            QUnit.test("IndexOutOfRangeException - DefaultConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.IndexOutOfRangeExceptionTests.defaultConstructorWorks);
            QUnit.test("IndexOutOfRangeException - ConstructorWithMessageWorks", Bridge.Test.Runtime.BridgeClientTestRunner.IndexOutOfRangeExceptionTests.constructorWithMessageWorks);
            QUnit.test("IndexOutOfRangeException - ConstructorWithMessageAndInnerExceptionWorks", Bridge.Test.Runtime.BridgeClientTestRunner.IndexOutOfRangeExceptionTests.constructorWithMessageAndInnerExceptionWorks);
            QUnit.test("InvalidCastException - TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestRunner.InvalidCastExceptionTests.typePropertiesAreCorrect);
            QUnit.test("InvalidCastException - DefaultConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.InvalidCastExceptionTests.defaultConstructorWorks);
            QUnit.test("InvalidCastException - ConstructorWithMessageWorks", Bridge.Test.Runtime.BridgeClientTestRunner.InvalidCastExceptionTests.constructorWithMessageWorks);
            QUnit.test("InvalidCastException - ConstructorWithMessageAndInnerExceptionWorks", Bridge.Test.Runtime.BridgeClientTestRunner.InvalidCastExceptionTests.constructorWithMessageAndInnerExceptionWorks);
            QUnit.test("InvalidOperationException - TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestRunner.InvalidOperationExceptionTests.typePropertiesAreCorrect);
            QUnit.test("InvalidOperationException - DefaultConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.InvalidOperationExceptionTests.defaultConstructorWorks);
            QUnit.test("InvalidOperationException - ConstructorWithMessageWorks", Bridge.Test.Runtime.BridgeClientTestRunner.InvalidOperationExceptionTests.constructorWithMessageWorks);
            QUnit.test("InvalidOperationException - ConstructorWithMessageAndInnerExceptionWorks", Bridge.Test.Runtime.BridgeClientTestRunner.InvalidOperationExceptionTests.constructorWithMessageAndInnerExceptionWorks);
            QUnit.test("KeyNotFoundException - TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestRunner.KeyNotFoundExceptionTests.typePropertiesAreCorrect);
            QUnit.test("KeyNotFoundException - DefaultConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.KeyNotFoundExceptionTests.defaultConstructorWorks);
            QUnit.test("KeyNotFoundException - ConstructorWithMessageWorks", Bridge.Test.Runtime.BridgeClientTestRunner.KeyNotFoundExceptionTests.constructorWithMessageWorks);
            QUnit.test("KeyNotFoundException - ConstructorWithMessageAndInnerExceptionWorks", Bridge.Test.Runtime.BridgeClientTestRunner.KeyNotFoundExceptionTests.constructorWithMessageAndInnerExceptionWorks);
            QUnit.test("NotImplementedException - TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestRunner.NotImplementedExceptionTests.typePropertiesAreCorrect);
            QUnit.test("NotImplementedException - DefaultConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.NotImplementedExceptionTests.defaultConstructorWorks);
            QUnit.test("NotImplementedException - ConstructorWithMessageWorks", Bridge.Test.Runtime.BridgeClientTestRunner.NotImplementedExceptionTests.constructorWithMessageWorks);
            QUnit.test("NotImplementedException - ConstructorWithMessageAndInnerExceptionWorks", Bridge.Test.Runtime.BridgeClientTestRunner.NotImplementedExceptionTests.constructorWithMessageAndInnerExceptionWorks);
            QUnit.test("NotSupportedException - TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestRunner.NotSupportedExceptionTests.typePropertiesAreCorrect);
            QUnit.test("NotSupportedException - DefaultConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.NotSupportedExceptionTests.defaultConstructorWorks);
            QUnit.test("NotSupportedException - ConstructorWithMessageWorks", Bridge.Test.Runtime.BridgeClientTestRunner.NotSupportedExceptionTests.constructorWithMessageWorks);
            QUnit.test("NotSupportedException - ConstructorWithMessageAndInnerExceptionWorks", Bridge.Test.Runtime.BridgeClientTestRunner.NotSupportedExceptionTests.constructorWithMessageAndInnerExceptionWorks);
            QUnit.test("NullReferenceException - TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestRunner.NullReferenceExceptionTests.typePropertiesAreCorrect);
            QUnit.test("NullReferenceException - DefaultConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.NullReferenceExceptionTests.defaultConstructorWorks);
            QUnit.test("NullReferenceException - ConstructorWithMessageWorks", Bridge.Test.Runtime.BridgeClientTestRunner.NullReferenceExceptionTests.constructorWithMessageWorks);
            QUnit.test("NullReferenceException - ConstructorWithMessageAndInnerExceptionWorks", Bridge.Test.Runtime.BridgeClientTestRunner.NullReferenceExceptionTests.constructorWithMessageAndInnerExceptionWorks);
            QUnit.test("NullReferenceException - AccessingAFieldOnANullObjectCausesANullReferenceException", Bridge.Test.Runtime.BridgeClientTestRunner.NullReferenceExceptionTests.accessingAFieldOnANullObjectCausesANullReferenceException);
            QUnit.test("OperationCanceledException - TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestRunner.OperationCanceledExceptionTests.typePropertiesAreCorrect);
            QUnit.test("OperationCanceledException - DefaultConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.OperationCanceledExceptionTests.defaultConstructorWorks);
            QUnit.test("OperationCanceledException - CancellationTokenOnlyConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.OperationCanceledExceptionTests.cancellationTokenOnlyConstructorWorks);
            QUnit.test("OperationCanceledException - MessageOnlyConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.OperationCanceledExceptionTests.messageOnlyConstructorWorks);
            QUnit.test("OperationCanceledException - MessageAndInnerExceptionConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.OperationCanceledExceptionTests.messageAndInnerExceptionConstructorWorks);
            QUnit.test("OperationCanceledException - MessageAndCancellationTokenConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.OperationCanceledExceptionTests.messageAndCancellationTokenConstructorWorks);
            QUnit.test("OperationCanceledException - MessageAndInnerExceptionAndCancellationTokenConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.OperationCanceledExceptionTests.messageAndInnerExceptionAndCancellationTokenConstructorWorks);
            QUnit.test("OutOfMemoryException - TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestRunner.OutOfMemoryExceptionTests.typePropertiesAreCorrect);
            QUnit.test("OutOfMemoryException - DefaultConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.OutOfMemoryExceptionTests.defaultConstructorWorks);
            QUnit.test("OutOfMemoryException - ConstructorWithMessageWorks", Bridge.Test.Runtime.BridgeClientTestRunner.OutOfMemoryExceptionTests.constructorWithMessageWorks);
            QUnit.test("OutOfMemoryException - ConstructorWithMessageAndInnerExceptionWorks", Bridge.Test.Runtime.BridgeClientTestRunner.OutOfMemoryExceptionTests.constructorWithMessageAndInnerExceptionWorks);
            QUnit.test("OverflowException - TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestRunner.OverflowExceptionTests.typePropertiesAreCorrect);
            QUnit.test("OverflowException - DefaultConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.OverflowExceptionTests.defaultConstructorWorks);
            QUnit.test("OverflowException - ConstructorWithMessageWorks", Bridge.Test.Runtime.BridgeClientTestRunner.OverflowExceptionTests.constructorWithMessageWorks);
            QUnit.test("OverflowException - ConstructorWithMessageAndInnerExceptionWorks", Bridge.Test.Runtime.BridgeClientTestRunner.OverflowExceptionTests.constructorWithMessageAndInnerExceptionWorks);
            QUnit.test("PromiseException - TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestRunner.PromiseExceptionTests.typePropertiesAreCorrect);
            QUnit.test("PromiseException - ArgumentsOnlyConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.PromiseExceptionTests.argumentsOnlyConstructorWorks);
            QUnit.test("PromiseException - ArgumentsAndMessageConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.PromiseExceptionTests.argumentsAndMessageConstructorWorks);
            QUnit.test("PromiseException - ArgumentsAndMessageAndInnerExceptionConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.PromiseExceptionTests.argumentsAndMessageAndInnerExceptionConstructorWorks);
            QUnit.test("RankException - TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestRunner.RankExceptionTests.typePropertiesAreCorrect);
            QUnit.test("RankException - DefaultConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.RankExceptionTests.defaultConstructorWorks);
            QUnit.test("RankException - ConstructorWithMessageWorks", Bridge.Test.Runtime.BridgeClientTestRunner.RankExceptionTests.constructorWithMessageWorks);
            QUnit.test("RegexMatchTimeoutException - TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchTimeoutExceptionTests.typePropertiesAreCorrect);
            QUnit.test("RegexMatchTimeoutException - DefaultConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchTimeoutExceptionTests.defaultConstructorWorks);
            QUnit.test("RegexMatchTimeoutException - ConstructorWithMessageWorks", Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchTimeoutExceptionTests.constructorWithMessageWorks);
            QUnit.test("RegexMatchTimeoutException - ConstructorWithMessageAndInnerExceptionWorks", Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchTimeoutExceptionTests.constructorWithMessageAndInnerExceptionWorks);
            QUnit.test("RegexMatchTimeoutException - ConstructorWithExceptionDetailsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchTimeoutExceptionTests.constructorWithExceptionDetailsWorks);
            QUnit.test("SystemException - TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestRunner.SystemExceptionTests.typePropertiesAreCorrect);
            QUnit.test("SystemException - DefaultConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.SystemExceptionTests.defaultConstructorWorks);
            QUnit.test("SystemException - ConstructorWithMessageWorks", Bridge.Test.Runtime.BridgeClientTestRunner.SystemExceptionTests.constructorWithMessageWorks);
            QUnit.test("SystemException - ConstructorWithMessageAndInnerExceptionWorks", Bridge.Test.Runtime.BridgeClientTestRunner.SystemExceptionTests.constructorWithMessageAndInnerExceptionWorks);
            QUnit.test("TaskCanceledException - TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestRunner.TaskCanceledExceptionTests.typePropertiesAreCorrect);
            QUnit.test("TaskCanceledException - DefaultConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TaskCanceledExceptionTests.defaultConstructorWorks);
            QUnit.test("TaskCanceledException - MessageOnlyConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TaskCanceledExceptionTests.messageOnlyConstructorWorks);
            QUnit.test("TaskCanceledException - TaskOnlyConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TaskCanceledExceptionTests.taskOnlyConstructorWorks);
            QUnit.test("TaskCanceledException - MessageAndInnerExceptionConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TaskCanceledExceptionTests.messageAndInnerExceptionConstructorWorks);
            QUnit.test("TimeoutException - TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestRunner.TimeoutExceptionTests.typePropertiesAreCorrect);
            QUnit.test("TimeoutException - DefaultConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TimeoutExceptionTests.defaultConstructorWorks);
            QUnit.test("TimeoutException - ConstructorWithMessageWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TimeoutExceptionTests.constructorWithMessageWorks);
            QUnit.test("TimeoutException - ConstructorWithMessageAndInnerExceptionWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TimeoutExceptionTests.constructorWithMessageAndInnerExceptionWorks);
            QUnit.module("Functions");
            QUnit.test("Arguments - LengthWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ArgumentsTests.lengthWorks);
            QUnit.test("Arguments - GetArgumentWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ArgumentsTests.getArgumentWorks);
            QUnit.test("Arguments - ToArrayWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ArgumentsTests.toArrayWorks);
            QUnit.test("Arguments - ToArrayOfTWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ArgumentsTests.toArrayOfTWorks);
            QUnit.test("Function - TestConstructorArgumentsBodyInOneParameter", Bridge.Test.Runtime.BridgeClientTestRunner.FunctionTests.testConstructorArgumentsBodyInOneParameter);
            QUnit.test("Function - TestConstructorArgumentsBodyInTwoParameters", Bridge.Test.Runtime.BridgeClientTestRunner.FunctionTests.testConstructorArgumentsBodyInTwoParameters);
            QUnit.test("Function - TestConstructorArgumentsInArray", Bridge.Test.Runtime.BridgeClientTestRunner.FunctionTests.testConstructorArgumentsInArray);
            QUnit.test("Mixin - TestGlobalMethods", Bridge.Test.Runtime.BridgeClientTestRunner.MixinTests.testGlobalMethods);
            QUnit.test("Mixin - TestMixin", Bridge.Test.Runtime.BridgeClientTestRunner.MixinTests.testMixin);
            QUnit.module("Guid");
            QUnit.test("Guid - TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestRunner.GuidTests.typePropertiesAreCorrect);
            QUnit.test("Guid - DefaultValueWorks", Bridge.Test.Runtime.BridgeClientTestRunner.GuidTests.defaultValueWorks);
            QUnit.test("Guid - CreateInstanceWorks", Bridge.Test.Runtime.BridgeClientTestRunner.GuidTests.createInstanceWorks);
            QUnit.test("Guid - DefaultConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.GuidTests.defaultConstructorWorks);
            QUnit.test("Guid - EmptyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.GuidTests.emptyWorks);
            QUnit.test("Guid - ToStringWithoutArgumentsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.GuidTests.toStringWithoutArgumentsWorks);
            QUnit.test("Guid - ByteArrayConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.GuidTests.byteArrayConstructorWorks);
            QUnit.test("Guid - Int32Int16Int16ByteArrayConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.GuidTests.int32Int16Int16ByteArrayConstructorWorks);
            QUnit.test("Guid - Int32Int16Int16BytesConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.GuidTests.int32Int16Int16BytesConstructorWorks);
            QUnit.test("Guid - UInt32UInt16UInt16BytesConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.GuidTests.uInt32UInt16UInt16BytesConstructorWorks);
            QUnit.test("Guid - StringConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.GuidTests.stringConstructorWorks);
            QUnit.test("Guid - ParseWorks", Bridge.Test.Runtime.BridgeClientTestRunner.GuidTests.parseWorks);
            QUnit.test("Guid - ParseExactWorks", Bridge.Test.Runtime.BridgeClientTestRunner.GuidTests.parseExactWorks);
            QUnit.test("Guid - TryParseWorks", Bridge.Test.Runtime.BridgeClientTestRunner.GuidTests.tryParseWorks);
            QUnit.test("Guid - TryParseExactWorks", Bridge.Test.Runtime.BridgeClientTestRunner.GuidTests.tryParseExactWorks);
            QUnit.test("Guid - CompareToWorks", Bridge.Test.Runtime.BridgeClientTestRunner.GuidTests.compareToWorks);
            QUnit.test("Guid - IComparableCompareToWorks", Bridge.Test.Runtime.BridgeClientTestRunner.GuidTests.iComparableCompareToWorks);
            QUnit.test("Guid - EqualsObjectWorks", Bridge.Test.Runtime.BridgeClientTestRunner.GuidTests.equalsObjectWorks);
            QUnit.test("Guid - EqualsGuidWorks", Bridge.Test.Runtime.BridgeClientTestRunner.GuidTests.equalsGuidWorks);
            QUnit.test("Guid - IEquatableEqualsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.GuidTests.iEquatableEqualsWorks);
            QUnit.test("Guid - GetHashCodeWorks", Bridge.Test.Runtime.BridgeClientTestRunner.GuidTests.getHashCodeWorks);
            QUnit.test("Guid - EqualityOperatorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.GuidTests.equalityOperatorWorks);
            QUnit.test("Guid - InequalityOperatorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.GuidTests.inequalityOperatorWorks);
            QUnit.test("Guid - ToStringWithFormatWorks", Bridge.Test.Runtime.BridgeClientTestRunner.GuidTests.toStringWithFormatWorks);
            QUnit.test("Guid - NewGuidWorks", Bridge.Test.Runtime.BridgeClientTestRunner.GuidTests.newGuidWorks);
            QUnit.test("Guid - ToByteArrayWorks", Bridge.Test.Runtime.BridgeClientTestRunner.GuidTests.toByteArrayWorks);
            QUnit.module("HTML5");
            QUnit.test("DOMParser #1728 - ConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DOMParserTests.constructorWorks);
            QUnit.test("DOMParser #1728 - XmlParsingWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DOMParserTests.xmlParsingWorks);
            QUnit.test("DOMParser #1728 - XmlParsingShouldThrow", Bridge.Test.Runtime.BridgeClientTestRunner.DOMParserTests.xmlParsingShouldThrow);
            QUnit.test("MutationObserver - TestNewlyAttachedElements", Bridge.Test.Runtime.BridgeClientTestRunner.MutationObserverTests.testNewlyAttachedElements);
            QUnit.module("LINQ");
            QUnit.test("Aggregate - Test", Bridge.Test.Runtime.BridgeClientTestRunner.TestLinqAggregateOperators.test);
            QUnit.test("Aggregate - Bridge315", Bridge.Test.Runtime.BridgeClientTestRunner.TestLinqAggregateOperators.bridge315);
            QUnit.test("Conversion - Test", Bridge.Test.Runtime.BridgeClientTestRunner.TestLinqConversionOperators.test);
            QUnit.test("Element - Test", Bridge.Test.Runtime.BridgeClientTestRunner.TestLinqElementOperators.test);
            QUnit.test("Generation - Test", Bridge.Test.Runtime.BridgeClientTestRunner.TestLinqGenerationOperators.test);
            QUnit.test("Grouping - Test", Bridge.Test.Runtime.BridgeClientTestRunner.TestLinqGroupingOperators.test);
            QUnit.test("Grouping - TestComplexGrouping", Bridge.Test.Runtime.BridgeClientTestRunner.TestLinqGroupingOperators.testComplexGrouping);
            QUnit.test("Grouping - TestAnagrams", Bridge.Test.Runtime.BridgeClientTestRunner.TestLinqGroupingOperators.testAnagrams);
            QUnit.test("Join - Test", Bridge.Test.Runtime.BridgeClientTestRunner.TestLinqJoinOperators.test);
            QUnit.test("Misc - Test", Bridge.Test.Runtime.BridgeClientTestRunner.TestLinqMiscellaneousOperators.test);
            QUnit.test("Ordering - Test", Bridge.Test.Runtime.BridgeClientTestRunner.TestLinqOrderingOperators.test);
            QUnit.test("Partitioning - Test", Bridge.Test.Runtime.BridgeClientTestRunner.TestLinqPartitioningOperators.test);
            QUnit.test("Projection - Test", Bridge.Test.Runtime.BridgeClientTestRunner.TestLinqProjectionOperators.test);
            QUnit.test("Quantifiers - Test", Bridge.Test.Runtime.BridgeClientTestRunner.TestLinqQuantifiers.test);
            QUnit.test("Query - Test", Bridge.Test.Runtime.BridgeClientTestRunner.TestLinqQueryExecution.test);
            QUnit.test("Restriction- Test", Bridge.Test.Runtime.BridgeClientTestRunner.TestLinqRestrictionOperators.test);
            QUnit.test("Set - Test", Bridge.Test.Runtime.BridgeClientTestRunner.TestLinqSetOperators.test);
            QUnit.module("LINQ Expressions");
            QUnit.test("LINQ Expressions - ExpressionProtectedConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests.expressionProtectedConstructorWorks);
            QUnit.test("LINQ Expressions - SimpleExpressionTreeWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests.simpleExpressionTreeWorks);
            QUnit.test("LINQ Expressions - LambdaWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests.lambdaWorks);
            QUnit.test("LINQ Expressions - ParameterAndVariableWork", Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests.parameterAndVariableWork);
            QUnit.test("LINQ Expressions - ConstantWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests.constantWorks);
            QUnit.test("LINQ Expressions - BinaryExpressionsWork", Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests.binaryExpressionsWork);
            QUnit.test("LINQ Expressions - UnaryExpressionsWork", Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests.unaryExpressionsWork);
            QUnit.test("LINQ Expressions - ArrayLengthWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests.arrayLengthWorks);
            QUnit.test("LINQ Expressions - ConversionsWork", Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests.conversionsWork);
            QUnit.test("LINQ Expressions - ArrayIndexWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests.arrayIndexWorks);
            QUnit.test("LINQ Expressions - MultiDimensionalArrayIndexWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests.multiDimensionalArrayIndexWorks);
            QUnit.test("LINQ Expressions - ConditionWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests.conditionWorks);
            QUnit.test("LINQ Expressions - CallWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests.callWorks);
            QUnit.test("LINQ Expressions - MethodGroupConversionWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests.methodGroupConversionWorks);
            QUnit.test("LINQ Expressions - InvokeWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests.invokeWorks);
            QUnit.test("LINQ Expressions - ArrayCreationWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests.arrayCreationWorks);
            QUnit.test("LINQ Expressions - PropertiesAndFieldsWork", Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests.propertiesAndFieldsWork);
            QUnit.test("LINQ Expressions - IndexersWork", Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests.indexersWork);
            QUnit.test("LINQ Expressions - IndexExpressionsWork", Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests.indexExpressionsWork);
            QUnit.test("LINQ Expressions - ObjectConstructionWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests.objectConstructionWorks);
            QUnit.test("LINQ Expressions - AnonymousTypeConstructionWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests.anonymousTypeConstructionWorks);
            QUnit.test("LINQ Expressions - TransparentIdentifiersWork", Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests.transparentIdentifiersWork);
            QUnit.test("LINQ Expressions - NewExpressionWithMembersWork", Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests.newExpressionWithMembersWork);
            QUnit.test("LINQ Expressions - BindWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests.bindWorks);
            QUnit.test("LINQ Expressions - ElementInitWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests.elementInitWorks);
            QUnit.test("LINQ Expressions - ListBindWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests.listBindWorks);
            QUnit.test("LINQ Expressions - MemberBindWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests.memberBindWorks);
            QUnit.test("LINQ Expressions - MemberInitWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests.memberInitWorks);
            QUnit.test("LINQ Expressions - ListInitWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests.listInitWorks);
            QUnit.test("LINQ Expressions - TypeIsAndTypeEqualWork", Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests.typeIsAndTypeEqualWork);
            QUnit.test("LINQ Expressions - QuoteWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests.quoteWorks);
            QUnit.test("LINQ Expressions - LocalVariableReferenceWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests.localVariableReferenceWorks);
            QUnit.test("LINQ Expressions - ThrowAndRethrowWork", Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests.throwAndRethrowWork);
            QUnit.test("LINQ Expressions - DefaultAndEmptyWork", Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests.defaultAndEmptyWork);
            QUnit.test("LINQ Expressions - BlockWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests.blockWorks);
            QUnit.test("LINQ Expressions - IfThenWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests.ifThenWorks);
            QUnit.test("LINQ Expressions - LabelTargetWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests.labelTargetWorks);
            QUnit.test("LINQ Expressions - GotoWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests.gotoWorks);
            QUnit.test("LINQ Expressions - LabelExpressionWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests.labelExpressionWorks);
            QUnit.test("LINQ Expressions - LoopWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests.loopWorks);
            QUnit.test("LINQ Expressions - SwitchCaseWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests.switchCaseWorks);
            QUnit.test("LINQ Expressions - SwitchWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests.switchWorks);
            QUnit.test("LINQ Expressions - CatchBlockWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests.catchBlockWorks);
            QUnit.test("LINQ Expressions - TryWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests.tryWorks);
            QUnit.test("LINQ Expressions - DynamicWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests.dynamicWorks);
            QUnit.module("Math");
            QUnit.test("Math - ConstantsWork", Bridge.Test.Runtime.BridgeClientTestRunner.MathTests.constantsWork);
            QUnit.test("Math - AbsOfDoubleWorks", Bridge.Test.Runtime.BridgeClientTestRunner.MathTests.absOfDoubleWorks);
            QUnit.test("Math - AbsOfIntWorks", Bridge.Test.Runtime.BridgeClientTestRunner.MathTests.absOfIntWorks);
            QUnit.test("Math - AbsOfLongWorks", Bridge.Test.Runtime.BridgeClientTestRunner.MathTests.absOfLongWorks);
            QUnit.test("Math - AbsOfSbyteWorks", Bridge.Test.Runtime.BridgeClientTestRunner.MathTests.absOfSbyteWorks);
            QUnit.test("Math - AbsOfShortWorks", Bridge.Test.Runtime.BridgeClientTestRunner.MathTests.absOfShortWorks);
            QUnit.test("Math - AbsOfFloatWorks", Bridge.Test.Runtime.BridgeClientTestRunner.MathTests.absOfFloatWorks);
            QUnit.test("Math - AbsOfDecimalWorks", Bridge.Test.Runtime.BridgeClientTestRunner.MathTests.absOfDecimalWorks);
            QUnit.test("Math - AcosWorks", Bridge.Test.Runtime.BridgeClientTestRunner.MathTests.acosWorks);
            QUnit.test("Math - AsinWorks", Bridge.Test.Runtime.BridgeClientTestRunner.MathTests.asinWorks);
            QUnit.test("Math - AtanWorks", Bridge.Test.Runtime.BridgeClientTestRunner.MathTests.atanWorks);
            QUnit.test("Math - Atan2Works", Bridge.Test.Runtime.BridgeClientTestRunner.MathTests.atan2Works);
            QUnit.test("Math - CosWorks", Bridge.Test.Runtime.BridgeClientTestRunner.MathTests.cosWorks);
            QUnit.test("Math - DivRemWorks", Bridge.Test.Runtime.BridgeClientTestRunner.MathTests.divRemWorks);
            QUnit.test("Math - ExpWorks", Bridge.Test.Runtime.BridgeClientTestRunner.MathTests.expWorks);
            QUnit.test("Math - FloorOfDoubleWorks", Bridge.Test.Runtime.BridgeClientTestRunner.MathTests.floorOfDoubleWorks);
            QUnit.test("Math - FloorOfDecimalWorks", Bridge.Test.Runtime.BridgeClientTestRunner.MathTests.floorOfDecimalWorks);
            QUnit.test("Math - LogWorks", Bridge.Test.Runtime.BridgeClientTestRunner.MathTests.logWorks);
            QUnit.test("Math - MaxOfByteWorks", Bridge.Test.Runtime.BridgeClientTestRunner.MathTests.maxOfByteWorks);
            QUnit.test("Math - MaxOfDecimalWorks", Bridge.Test.Runtime.BridgeClientTestRunner.MathTests.maxOfDecimalWorks);
            QUnit.test("Math - MaxOfDoubleWorks", Bridge.Test.Runtime.BridgeClientTestRunner.MathTests.maxOfDoubleWorks);
            QUnit.test("Math - MaxOfShortWorks", Bridge.Test.Runtime.BridgeClientTestRunner.MathTests.maxOfShortWorks);
            QUnit.test("Math - MaxOfIntWorks", Bridge.Test.Runtime.BridgeClientTestRunner.MathTests.maxOfIntWorks);
            QUnit.test("Math - MaxOfLongWorks", Bridge.Test.Runtime.BridgeClientTestRunner.MathTests.maxOfLongWorks);
            QUnit.test("Math - MaxOfSByteWorks", Bridge.Test.Runtime.BridgeClientTestRunner.MathTests.maxOfSByteWorks);
            QUnit.test("Math - MaxOfFloatWorks", Bridge.Test.Runtime.BridgeClientTestRunner.MathTests.maxOfFloatWorks);
            QUnit.test("Math - MaxOfUShortWorks", Bridge.Test.Runtime.BridgeClientTestRunner.MathTests.maxOfUShortWorks);
            QUnit.test("Math - MaxOfUIntWorks", Bridge.Test.Runtime.BridgeClientTestRunner.MathTests.maxOfUIntWorks);
            QUnit.test("Math - MaxOfULongWorks", Bridge.Test.Runtime.BridgeClientTestRunner.MathTests.maxOfULongWorks);
            QUnit.test("Math - MinOfByteWorks", Bridge.Test.Runtime.BridgeClientTestRunner.MathTests.minOfByteWorks);
            QUnit.test("Math - MinOfDecimalWorks", Bridge.Test.Runtime.BridgeClientTestRunner.MathTests.minOfDecimalWorks);
            QUnit.test("Math - MinOfDoubleWorks", Bridge.Test.Runtime.BridgeClientTestRunner.MathTests.minOfDoubleWorks);
            QUnit.test("Math - MinOfShortWorks", Bridge.Test.Runtime.BridgeClientTestRunner.MathTests.minOfShortWorks);
            QUnit.test("Math - MinOfIntWorks", Bridge.Test.Runtime.BridgeClientTestRunner.MathTests.minOfIntWorks);
            QUnit.test("Math - MinOfLongWorks", Bridge.Test.Runtime.BridgeClientTestRunner.MathTests.minOfLongWorks);
            QUnit.test("Math - MinOfSByteWorks", Bridge.Test.Runtime.BridgeClientTestRunner.MathTests.minOfSByteWorks);
            QUnit.test("Math - MinOfFloatWorks", Bridge.Test.Runtime.BridgeClientTestRunner.MathTests.minOfFloatWorks);
            QUnit.test("Math - MinOfUShortWorks", Bridge.Test.Runtime.BridgeClientTestRunner.MathTests.minOfUShortWorks);
            QUnit.test("Math - MinOfUIntWorks", Bridge.Test.Runtime.BridgeClientTestRunner.MathTests.minOfUIntWorks);
            QUnit.test("Math - MinOfULongWorks", Bridge.Test.Runtime.BridgeClientTestRunner.MathTests.minOfULongWorks);
            QUnit.test("Math - PowWorks", Bridge.Test.Runtime.BridgeClientTestRunner.MathTests.powWorks);
            QUnit.test("Math - RandomWorks", Bridge.Test.Runtime.BridgeClientTestRunner.MathTests.randomWorks);
            QUnit.test("Math - RoundOfDoubleWorks", Bridge.Test.Runtime.BridgeClientTestRunner.MathTests.roundOfDoubleWorks);
            QUnit.test("Math - RoundDecimalWithModeWorks", Bridge.Test.Runtime.BridgeClientTestRunner.MathTests.roundDecimalWithModeWorks);
            QUnit.test("Math - RoundDecimalWithPrecisionAndModeWorks", Bridge.Test.Runtime.BridgeClientTestRunner.MathTests.roundDecimalWithPrecisionAndModeWorks);
            QUnit.test("Math - RoundDoubleWithModeWorks", Bridge.Test.Runtime.BridgeClientTestRunner.MathTests.roundDoubleWithModeWorks);
            QUnit.test("Math - RoundDoubleWithPrecisionAndModeWorks", Bridge.Test.Runtime.BridgeClientTestRunner.MathTests.roundDoubleWithPrecisionAndModeWorks);
            QUnit.test("Math - JsRoundWorks", Bridge.Test.Runtime.BridgeClientTestRunner.MathTests.jsRoundWorks);
            QUnit.test("Math - IEEERemainderWorks", Bridge.Test.Runtime.BridgeClientTestRunner.MathTests.iEEERemainderWorks);
            QUnit.test("Math - SinWorks", Bridge.Test.Runtime.BridgeClientTestRunner.MathTests.sinWorks);
            QUnit.test("Math - SqrtWorks", Bridge.Test.Runtime.BridgeClientTestRunner.MathTests.sqrtWorks);
            QUnit.test("Math - TanWorks", Bridge.Test.Runtime.BridgeClientTestRunner.MathTests.tanWorks);
            QUnit.module("Nullable");
            QUnit.test("Nullable - TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests.typePropertiesAreCorrect);
            QUnit.test("Nullable - ConvertingToNullableWorks", Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests.convertingToNullableWorks);
            QUnit.test("Nullable - HasValueWorks", Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests.hasValueWorks);
            QUnit.test("Nullable - BoxingWorks", Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests.boxingWorks);
            QUnit.test("Nullable - UnboxingWorks", Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests.unboxingWorks);
            QUnit.test("Nullable - ValueWorks", Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests.valueWorks);
            QUnit.test("Nullable - UnboxingValueOfWrongTypeThrowsAnException", Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests.unboxingValueOfWrongTypeThrowsAnException);
            QUnit.test("Nullable - GetValueOrDefaultWithArgWorks", Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests.getValueOrDefaultWithArgWorks);
            QUnit.test("Nullable - LiftedEqualityWorks", Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests.liftedEqualityWorks);
            QUnit.test("Nullable - LiftedInequalityWorks", Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests.liftedInequalityWorks);
            QUnit.test("Nullable - LiftedLessThanWorks", Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests.liftedLessThanWorks);
            QUnit.test("Nullable - LiftedGreaterThanWorks", Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests.liftedGreaterThanWorks);
            QUnit.test("Nullable - LiftedLessThanOrEqualWorks", Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests.liftedLessThanOrEqualWorks);
            QUnit.test("Nullable - LiftedGreaterThanOrEqualWorks", Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests.liftedGreaterThanOrEqualWorks);
            QUnit.test("Nullable - LiftedSubtractionWorks", Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests.liftedSubtractionWorks);
            QUnit.test("Nullable - LiftedAdditionWorks", Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests.liftedAdditionWorks);
            QUnit.test("Nullable - LiftedModWorks", Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests.liftedModWorks);
            QUnit.test("Nullable - LiftedFloatingPointDivisionWorks", Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests.liftedFloatingPointDivisionWorks);
            QUnit.test("Nullable - LiftedIntegerDivisionWorks", Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests.liftedIntegerDivisionWorks);
            QUnit.test("Nullable - LiftedMultiplicationWorks", Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests.liftedMultiplicationWorks);
            QUnit.test("Nullable - LiftedBitwiseAndWorks", Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests.liftedBitwiseAndWorks);
            QUnit.test("Nullable - LiftedBitwiseOrWorks", Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests.liftedBitwiseOrWorks);
            QUnit.test("Nullable - LiftedBitwiseXorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests.liftedBitwiseXorWorks);
            QUnit.test("Nullable - LiftedLeftShiftWorks", Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests.liftedLeftShiftWorks);
            QUnit.test("Nullable - LiftedSignedRightShiftWorks", Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests.liftedSignedRightShiftWorks);
            QUnit.test("Nullable - LiftedUnsignedRightShiftWorks", Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests.liftedUnsignedRightShiftWorks);
            QUnit.test("LiftedBooleanAndWorks #314", Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests.liftedBooleanAndWorks);
            QUnit.test("LiftedBooleanOrWorks #314", Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests.liftedBooleanOrWorks);
            QUnit.test("Nullable - LiftedBooleanNotWorks", Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests.liftedBooleanNotWorks);
            QUnit.test("Nullable - LiftedNegationWorks", Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests.liftedNegationWorks);
            QUnit.test("Nullable - LiftedUnaryPlusWorks", Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests.liftedUnaryPlusWorks);
            QUnit.test("Nullable - LiftedOnesComplementWorks", Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests.liftedOnesComplementWorks);
            QUnit.test("CoalesceWorks #314", Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests.coalesceWorks);
            QUnit.module("NumberFormatInfo");
            QUnit.test("NumberFormatInfoTests - TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestRunner.NumberFormatInfoTests.typePropertiesAreCorrect);
            QUnit.test("NumberFormatInfoTests - GetFormatWorks", Bridge.Test.Runtime.BridgeClientTestRunner.NumberFormatInfoTests.getFormatWorks);
            QUnit.test("NumberFormatInfoTests - InvariantWorks", Bridge.Test.Runtime.BridgeClientTestRunner.NumberFormatInfoTests.invariantWorks);
            QUnit.test("NumberFormatSpecifiersTests - CurrencyFormatSpecifierWorks", Bridge.Test.Runtime.BridgeClientTestRunner.NumberFormatSpecifiersTests.currencyFormatSpecifierWorks);
            QUnit.test("NumberFormatSpecifiersTests - DecimalFormatSpecifierWorks", Bridge.Test.Runtime.BridgeClientTestRunner.NumberFormatSpecifiersTests.decimalFormatSpecifierWorks);
            QUnit.test("NumberFormatSpecifiersTests - ExponentialFormatSpecifierWorks", Bridge.Test.Runtime.BridgeClientTestRunner.NumberFormatSpecifiersTests.exponentialFormatSpecifierWorks);
            QUnit.test("NumberFormatSpecifiersTests - FixedPointFormatSpecifierWorks", Bridge.Test.Runtime.BridgeClientTestRunner.NumberFormatSpecifiersTests.fixedPointFormatSpecifierWorks);
            QUnit.test("NumberFormatSpecifiersTests - GeneralFormatSpecifierWorks", Bridge.Test.Runtime.BridgeClientTestRunner.NumberFormatSpecifiersTests.generalFormatSpecifierWorks);
            QUnit.test("NumberFormatSpecifiersTests - NumericFormatSpecifierWorks", Bridge.Test.Runtime.BridgeClientTestRunner.NumberFormatSpecifiersTests.numericFormatSpecifierWorks);
            QUnit.test("NumberFormatSpecifiersTests - PercentFormatSpecifierWorks", Bridge.Test.Runtime.BridgeClientTestRunner.NumberFormatSpecifiersTests.percentFormatSpecifierWorks);
            QUnit.test("NumberFormatSpecifiersTests - RoundTripFormatSpecifierWorks", Bridge.Test.Runtime.BridgeClientTestRunner.NumberFormatSpecifiersTests.roundTripFormatSpecifierWorks);
            QUnit.test("NumberFormatSpecifiersTests - HexadecimalFormatSpecifierWorks", Bridge.Test.Runtime.BridgeClientTestRunner.NumberFormatSpecifiersTests.hexadecimalFormatSpecifierWorks);
            QUnit.test("NumberFormatSpecifiersTests - CustomZeroFormatSpecifierWorks", Bridge.Test.Runtime.BridgeClientTestRunner.NumberFormatSpecifiersTests.customZeroFormatSpecifierWorks);
            QUnit.test("NumberFormatSpecifiersTests - CustomHashFormatSpecifierWorks", Bridge.Test.Runtime.BridgeClientTestRunner.NumberFormatSpecifiersTests.customHashFormatSpecifierWorks);
            QUnit.test("NumberFormatSpecifiersTests - CustomDotFormatSpecifierWorks", Bridge.Test.Runtime.BridgeClientTestRunner.NumberFormatSpecifiersTests.customDotFormatSpecifierWorks);
            QUnit.test("NumberFormatSpecifiersTests - CustomCommaFormatSpecifierWorks", Bridge.Test.Runtime.BridgeClientTestRunner.NumberFormatSpecifiersTests.customCommaFormatSpecifierWorks);
            QUnit.test("NumberFormatSpecifiersTests - CustomPercentFormatSpecifierWorks", Bridge.Test.Runtime.BridgeClientTestRunner.NumberFormatSpecifiersTests.customPercentFormatSpecifierWorks);
            QUnit.test("NumberFormatSpecifiersTests - CustomPerMileFormatSpecifierWorks", Bridge.Test.Runtime.BridgeClientTestRunner.NumberFormatSpecifiersTests.customPerMileFormatSpecifierWorks);
            QUnit.test("NumberFormatSpecifiersTests - CustomEscapeFormatSpecifierWorks", Bridge.Test.Runtime.BridgeClientTestRunner.NumberFormatSpecifiersTests.customEscapeFormatSpecifierWorks);
            QUnit.test("NumberFormatSpecifiersTests - CustomSemicolonFormatSpecifierWorks", Bridge.Test.Runtime.BridgeClientTestRunner.NumberFormatSpecifiersTests.customSemicolonFormatSpecifierWorks);
            QUnit.module("Property accessor");
            QUnit.test("AccessorsCanBeInvokedInstance", Bridge.Test.Runtime.BridgeClientTestRunner.PropertyAccessorTests.accessorsCanBeInvokedInstance);
            QUnit.test("AccessorsCanBeInvokedStatic", Bridge.Test.Runtime.BridgeClientTestRunner.PropertyAccessorTests.accessorsCanBeInvokedStatic);
            QUnit.test("AccessorsCanBeInvokedGeneric", Bridge.Test.Runtime.BridgeClientTestRunner.PropertyAccessorTests.accessorsCanBeInvokedGeneric);
            QUnit.test("AccessorsCanBeInvokedGenericStatic", Bridge.Test.Runtime.BridgeClientTestRunner.PropertyAccessorTests.accessorsCanBeInvokedGenericStatic);
            QUnit.test("BaseAccessorsCanBeInvoked", Bridge.Test.Runtime.BridgeClientTestRunner.PropertyAccessorTests.baseAccessorsCanBeInvoked);
            QUnit.test("BaseAccessorsCanBeInvokedGeneric", Bridge.Test.Runtime.BridgeClientTestRunner.PropertyAccessorTests.baseAccessorsCanBeInvokedGeneric);
            QUnit.module("Random");
            QUnit.test("Random - Unseeded", Bridge.Test.Runtime.BridgeClientTestRunner.RandomTests.unseeded);
            QUnit.test("Random - Seeded", Bridge.Test.Runtime.BridgeClientTestRunner.RandomTests.seeded);
            QUnit.test("Random - Sample", Bridge.Test.Runtime.BridgeClientTestRunner.RandomTests.sample);
            QUnit.module("Reflection");
            QUnit.test("Reflection - Assembly GetExecutingAssemblyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.AssemblyTests.getExecutingAssemblyWorks);
            QUnit.test("Reflection - Assembly GetAssemblyForTypeWorks", Bridge.Test.Runtime.BridgeClientTestRunner.AssemblyTests.getAssemblyForTypeWorks);
            QUnit.test("Reflection - Assembly FullNameWorks", Bridge.Test.Runtime.BridgeClientTestRunner.AssemblyTests.fullNameWorks);
            QUnit.test("Reflection - Assembly ToStringWorks", Bridge.Test.Runtime.BridgeClientTestRunner.AssemblyTests.toStringWorks);
            QUnit.test("Reflection - Assembly GetTypesWorks", Bridge.Test.Runtime.BridgeClientTestRunner.AssemblyTests.getTypesWorks);
            QUnit.test("Reflection - Assembly GetTypesWithImportedModuleWorks", Bridge.Test.Runtime.BridgeClientTestRunner.AssemblyTests.getTypesWithImportedModuleWorks);
            QUnit.test("Reflection - Assembly GetTypeWorks", Bridge.Test.Runtime.BridgeClientTestRunner.AssemblyTests.getTypeWorks);
            QUnit.test("Reflection - Assembly GetTypeWorksWithGenerics", Bridge.Test.Runtime.BridgeClientTestRunner.AssemblyTests.getTypeWorksWithGenerics);
            QUnit.test("Reflection - Assembly GetTypeWithImportedModuleWorks", Bridge.Test.Runtime.BridgeClientTestRunner.AssemblyTests.getTypeWithImportedModuleWorks);
            QUnit.test("Reflection - Assembly AssemblyOfBuiltInTypes", Bridge.Test.Runtime.BridgeClientTestRunner.AssemblyTests.assemblyOfBuiltInTypes);
            QUnit.test("Reflection - Assembly CreateInstanceWorks", Bridge.Test.Runtime.BridgeClientTestRunner.AssemblyTests.createInstanceWorks);
            QUnit.test("Reflection - Assembly GetCustomAttributesWorks", Bridge.Test.Runtime.BridgeClientTestRunner.AssemblyTests.getCustomAttributesWorks);
            QUnit.test("Reflection - Assembly LoadCanReturnReferenceToLoadedAssembly", Bridge.Test.Runtime.BridgeClientTestRunner.AssemblyTests.loadCanReturnReferenceToLoadedAssembly);
            QUnit.test("Reflection - Assembly GetManifestResourceNamesWorks", Bridge.Test.Runtime.BridgeClientTestRunner.AssemblyTests.getManifestResourceNamesWorks);
            QUnit.test("Reflection - Assembly GetManifestResourceDataAsBase64WithoutTypeWorks", Bridge.Test.Runtime.BridgeClientTestRunner.AssemblyTests.getManifestResourceDataAsBase64WithoutTypeWorks);
            QUnit.test("Reflection - Assembly GetManifestResourceDataAsBase64WithTypeWorks", Bridge.Test.Runtime.BridgeClientTestRunner.AssemblyTests.getManifestResourceDataAsBase64WithTypeWorks);
            QUnit.test("Reflection - Assembly GetManifestResourceDataWithoutTypeWorks", Bridge.Test.Runtime.BridgeClientTestRunner.AssemblyTests.getManifestResourceDataWithoutTypeWorks);
            QUnit.test("Reflection - Assembly GetManifestResourceDataWithTypeWorks", Bridge.Test.Runtime.BridgeClientTestRunner.AssemblyTests.getManifestResourceDataWithTypeWorks);
            QUnit.test("Reflection - Attribute GetCustomAttributesForAssemblyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.AttributeTests.getCustomAttributesForAssemblyWorks);
            QUnit.test("Reflection - Attribute GetCustomAttributesForMemberInfoWorks", Bridge.Test.Runtime.BridgeClientTestRunner.AttributeTests.getCustomAttributesForMemberInfoWorks);
            QUnit.test("Reflection - Attribute GetCustomAttributesForMemberInfoInheritTrueWorks", Bridge.Test.Runtime.BridgeClientTestRunner.AttributeTests.getCustomAttributesForMemberInfoInheritTrueWorks);
            QUnit.test("Reflection - Attribute GetCustomAttributesForMemberInfoInheritFalseWorks", Bridge.Test.Runtime.BridgeClientTestRunner.AttributeTests.getCustomAttributesForMemberInfoInheritFalseWorks);
            QUnit.test("Reflection - Attribute GetCustomAttributesForMemberInfoTypeWorks", Bridge.Test.Runtime.BridgeClientTestRunner.AttributeTests.getCustomAttributesForMemberInfoTypeWorks);
            QUnit.test("Reflection - Attribute GetCustomAttributesForMemberInfoTypeInheritFalseWorks", Bridge.Test.Runtime.BridgeClientTestRunner.AttributeTests.getCustomAttributesForMemberInfoTypeInheritFalseWorks);
            QUnit.test("Reflection - Attribute GetCustomAttributesForMemberInfoTypeInheritTrueWorks", Bridge.Test.Runtime.BridgeClientTestRunner.AttributeTests.getCustomAttributesForMemberInfoTypeInheritTrueWorks);
            QUnit.test("Reflection - Attribute GetCustomAttributesForParameterInfoWorks", Bridge.Test.Runtime.BridgeClientTestRunner.AttributeTests.getCustomAttributesForParameterInfoWorks);
            QUnit.test("Reflection - Attribute GetCustomAttributesForParameterInfoInheritTrueWorks", Bridge.Test.Runtime.BridgeClientTestRunner.AttributeTests.getCustomAttributesForParameterInfoInheritTrueWorks);
            QUnit.test("Reflection - Attribute GetCustomAttributesForParameterInfoInheritFalseWorks", Bridge.Test.Runtime.BridgeClientTestRunner.AttributeTests.getCustomAttributesForParameterInfoInheritFalseWorks);
            QUnit.test("Reflection - Attribute GetCustomAttributesForParameterInfoTypeWorks", Bridge.Test.Runtime.BridgeClientTestRunner.AttributeTests.getCustomAttributesForParameterInfoTypeWorks);
            QUnit.test("Reflection - Attribute GetCustomAttributesForParameterInfoTypeInheritFalseWorks", Bridge.Test.Runtime.BridgeClientTestRunner.AttributeTests.getCustomAttributesForParameterInfoTypeInheritFalseWorks);
            QUnit.test("Reflection - Attribute GetCustomAttributesForParameterInfoTypeInheritTrueWorks", Bridge.Test.Runtime.BridgeClientTestRunner.AttributeTests.getCustomAttributesForParameterInfoTypeInheritTrueWorks);
            QUnit.test("Reflection - GetMembers GetMembersWithoutBindingFlagsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.GetMembersTests.getMembersWithoutBindingFlagsWorks);
            QUnit.test("Reflection - GetMembers GetMembersWorksForInterface", Bridge.Test.Runtime.BridgeClientTestRunner.GetMembersTests.getMembersWorksForInterface);
            QUnit.test("Reflection - GetMembers GetMembersWithBindingFlagsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.GetMembersTests.getMembersWithBindingFlagsWorks);
            QUnit.test("Reflection - GetMembers GetMemberWithNameWorks", Bridge.Test.Runtime.BridgeClientTestRunner.GetMembersTests.getMemberWithNameWorks);
            QUnit.test("Reflection - GetMembers GetMemberWithNameAndBindingFlagsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.GetMembersTests.getMemberWithNameAndBindingFlagsWorks);
            QUnit.test("Reflection - GetMembers GetConstructorsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.GetMembersTests.getConstructorsWorks);
            QUnit.test("Reflection - GetMembers GetConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.GetMembersTests.getConstructorWorks);
            QUnit.test("Reflection - GetMembers GetMethodsWithoutBindingFlagsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.GetMembersTests.getMethodsWithoutBindingFlagsWorks);
            QUnit.test("Reflection - GetMembers GetMethodsWithBindingFlagsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.GetMembersTests.getMethodsWithBindingFlagsWorks);
            QUnit.test("Reflection - GetMembers GetMethodWithNameWorks", Bridge.Test.Runtime.BridgeClientTestRunner.GetMembersTests.getMethodWithNameWorks);
            QUnit.test("Reflection - GetMembers GetMethodWithNameAndBindingFlagsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.GetMembersTests.getMethodWithNameAndBindingFlagsWorks);
            QUnit.test("Reflection - GetMembers GetMethodWithNameAndArgumentTypesWorks", Bridge.Test.Runtime.BridgeClientTestRunner.GetMembersTests.getMethodWithNameAndArgumentTypesWorks);
            QUnit.test("Reflection - GetMembers GetMethodWithNameAndArgumentTypesAndBindingFlagsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.GetMembersTests.getMethodWithNameAndArgumentTypesAndBindingFlagsWorks);
            QUnit.test("Reflection - GetMembers GetPropertiesWithoutBindingFlagsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.GetMembersTests.getPropertiesWithoutBindingFlagsWorks);
            QUnit.test("Reflection - GetMembers GetPropertiesWithBindingFlagsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.GetMembersTests.getPropertiesWithBindingFlagsWorks);
            QUnit.test("Reflection - GetMembers GetPropertyWithNameWorks", Bridge.Test.Runtime.BridgeClientTestRunner.GetMembersTests.getPropertyWithNameWorks);
            QUnit.test("Reflection - GetMembers GetPropertyWithNameAndBindingFlagsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.GetMembersTests.getPropertyWithNameAndBindingFlagsWorks);
            QUnit.test("Reflection - GetMembers GetPropertyWithNameAndArgumentTypesWorks", Bridge.Test.Runtime.BridgeClientTestRunner.GetMembersTests.getPropertyWithNameAndArgumentTypesWorks);
            QUnit.test("Reflection - GetMembers GetPropertyWithNameAndArgumentTypesAndBindingFlagsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.GetMembersTests.getPropertyWithNameAndArgumentTypesAndBindingFlagsWorks);
            QUnit.test("Reflection - GetMembers GetFieldsWithoutBindingFlagsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.GetMembersTests.getFieldsWithoutBindingFlagsWorks);
            QUnit.test("Reflection - GetMembers GetFieldsWithBindingFlagsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.GetMembersTests.getFieldsWithBindingFlagsWorks);
            QUnit.test("Reflection - GetMembers GetFieldWithNameWorks", Bridge.Test.Runtime.BridgeClientTestRunner.GetMembersTests.getFieldWithNameWorks);
            QUnit.test("Reflection - GetMembers GetFieldWithNameAndBindingFlagsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.GetMembersTests.getFieldWithNameAndBindingFlagsWorks);
            QUnit.test("Reflection - GetMembers GetEventsWithoutBindingFlagsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.GetMembersTests.getEventsWithoutBindingFlagsWorks);
            QUnit.test("Reflection - GetMembers GetEventsWithBindingFlagsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.GetMembersTests.getEventsWithBindingFlagsWorks);
            QUnit.test("Reflection - GetMembers GetEventWithNameWorks", Bridge.Test.Runtime.BridgeClientTestRunner.GetMembersTests.getEventWithNameWorks);
            QUnit.test("Reflection - GetMembers GetEventWithNameAndBindingFlagsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.GetMembersTests.getEventWithNameAndBindingFlagsWorks);
            QUnit.test("Reflection - GetMembers IsOperatorForMemberInfoWorks", Bridge.Test.Runtime.BridgeClientTestRunner.GetMembersTests.isOperatorForMemberInfoWorks);
            QUnit.test("Reflection - Reflection GetMembersReturnsMethodsWithAnyScriptableAttributeOrReflectableAttribute", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.getMembersReturnsMethodsWithAnyScriptableAttributeOrReflectableAttribute);
            QUnit.test("Reflection - Reflection StructMemberReflectionWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.structMemberReflectionWorks);
            QUnit.test("Reflection - Reflection IsStaticFlagWorksForMethod", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.isStaticFlagWorksForMethod);
            QUnit.test("Reflection - Reflection MemberTypeIsMethodForMethod", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.memberTypeIsMethodForMethod);
            QUnit.test("Reflection - Reflection IsConstructorIsFalseForMethod", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.isConstructorIsFalseForMethod);
            QUnit.test("Reflection - Reflection IsConstructorIsTrueForAllKindsOfConstructors", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.isConstructorIsTrueForAllKindsOfConstructors);
            QUnit.test("Reflection - Reflection IsStaticIsFalseForAllKindsOfConstructors", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.isStaticIsFalseForAllKindsOfConstructors);
            QUnit.test("Reflection - Reflection MemberTypeIsConstructorForAllKindsOfConstructors", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.memberTypeIsConstructorForAllKindsOfConstructors);
            QUnit.test("Reflection - Reflection NameIsCtorForAllKindsOfConstructors", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.nameIsCtorForAllKindsOfConstructors);
            QUnit.test("Reflection - Reflection DeclaringTypeIsCorrectForAllKindsOfConstructors", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.declaringTypeIsCorrectForAllKindsOfConstructors);
            QUnit.test("Reflection - Reflection ScriptNameIsCorrectForAllKindsOfConstructors", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.scriptNameIsCorrectForAllKindsOfConstructors);
            QUnit.test("Reflection - Reflection IsStaticMethodIsTrueOnlyForStaticMethodConstructors", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.isStaticMethodIsTrueOnlyForStaticMethodConstructors);
            QUnit.test("Reflection - Reflection IsExpandParamsIsCorrectForConstructors", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.isExpandParamsIsCorrectForConstructors);
            QUnit.test("Reflection - Reflection SpecialImplementationExistsOnlyForObjectLiteralAndInlineCodeConstructors", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.specialImplementationExistsOnlyForObjectLiteralAndInlineCodeConstructors);
            QUnit.test("Reflection - Reflection DeclaringTypeShouldBeCorrectForMethods", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.declaringTypeShouldBeCorrectForMethods);
            QUnit.test("Reflection - Reflection ReturnTypeAndParameterTypesAreCorrectForMethods", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.returnTypeAndParameterTypesAreCorrectForMethods);
            QUnit.test("Reflection - Reflection ParameterTypesShouldBeCorrectForConstructors", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.parameterTypesShouldBeCorrectForConstructors);
            QUnit.test("Reflection - Reflection VoidIsConsideredObjectAsReturnType", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.voidIsConsideredObjectAsReturnType);
            QUnit.test("Reflection - Reflection MethodNameIsTheCSharpName", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.methodNameIsTheCSharpName);
            QUnit.test("Reflection - Reflection TypeParametersAreReplacedWithObjectForReturnAndParameterTypesForOpenGenericTypes", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.typeParametersAreReplacedWithObjectForReturnAndParameterTypesForOpenGenericTypes);
            QUnit.test("Reflection - Reflection TypeParametersAreCorrectForReturnAndParameterTypesForConstructedGenericTypes", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.typeParametersAreCorrectForReturnAndParameterTypesForConstructedGenericTypes);
            QUnit.test("Reflection - Reflection MethodTypeParametersAreReplacedWithObjectForReturnAndParameterTypes", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.methodTypeParametersAreReplacedWithObjectForReturnAndParameterTypes);
            QUnit.test("Reflection - Reflection IsGenericMethodDefinitionAndTypeParameterCountWork", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.isGenericMethodDefinitionAndTypeParameterCountWork);
            QUnit.test("Reflection - Reflection ScriptNameWorksForAllKindsOfMethods", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.scriptNameWorksForAllKindsOfMethods);
            QUnit.test("Reflection - Reflection SpecialImplementationExistsOnlyForMethodsImplementedAsInlineCode", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.specialImplementationExistsOnlyForMethodsImplementedAsInlineCode);
            QUnit.test("Reflection - Reflection IsExpandParamsIsCorrectForMethods", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.isExpandParamsIsCorrectForMethods);
            QUnit.test("Reflection - Reflection CreateDelegateWorksForNonGenericInstanceMethods", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.createDelegateWorksForNonGenericInstanceMethods);
            QUnit.test("Reflection - Reflection DelegateCreateDelegateWorksForNonGenericInstanceMethods", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.delegateCreateDelegateWorksForNonGenericInstanceMethods);
            QUnit.test("Reflection - Reflection CreateDelegateWorksNonGenericStaticMethods", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.createDelegateWorksNonGenericStaticMethods);
            QUnit.test("Reflection - Reflection CreateDelegateWorksNonGenericStaticMethodOfGenericType", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.createDelegateWorksNonGenericStaticMethodOfGenericType);
            QUnit.test("Reflection - Reflection CreateDelegateWorksForGenericInstanceMethods", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.createDelegateWorksForGenericInstanceMethods);
            QUnit.test("Reflection - Reflection CreateDelegateWorksForGenericStaticMethods", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.createDelegateWorksForGenericStaticMethods);
            QUnit.test("Reflection - Reflection InvokeWorksForNonGenericInstanceMethods", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.invokeWorksForNonGenericInstanceMethods);
            QUnit.test("Reflection - Reflection InvokeWorksForNonGenericStaticMethods", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.invokeWorksForNonGenericStaticMethods);
            QUnit.test("Reflection - Reflection InvokeWorksForNonGenericInstanceMethodsOnSerializableTypes", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.invokeWorksForNonGenericInstanceMethodsOnSerializableTypes);
            QUnit.test("Reflection - Reflection InvokeWorksForNonGenericInlineCodeMethods", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.invokeWorksForNonGenericInlineCodeMethods);
            QUnit.test("Reflection - Reflection InvokeWorksForGenericInlineCodeMethods", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.invokeWorksForGenericInlineCodeMethods);
            QUnit.test("Reflection - Reflection InvokeWorksForGenericInstanceMethod", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.invokeWorksForGenericInstanceMethod);
            QUnit.test("Reflection - Reflection InvokeWorksForGenericStaticMethod", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.invokeWorksForGenericStaticMethod);
            QUnit.test("Reflection - Reflection InvokeWorksForGenericInstanceMethodsOnSerializableTypes", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.invokeWorksForGenericInstanceMethodsOnSerializableTypes);
            QUnit.test("Reflection - Reflection InvokeWorksForExpandParamsMethods", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.invokeWorksForExpandParamsMethods);
            QUnit.test("Reflection - Reflection InvokeWorksForAllKindsOfConstructors", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.invokeWorksForAllKindsOfConstructors);
            QUnit.test("Reflection - Reflection InvokeWorksForExpandParamsConstructors", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.invokeWorksForExpandParamsConstructors);
            QUnit.test("Reflection - Reflection MemberTypeIsFieldForField", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.memberTypeIsFieldForField);
            QUnit.test("Reflection - Reflection DeclaringTypeIsCorrectForField", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.declaringTypeIsCorrectForField);
            QUnit.test("Reflection - Reflection NameIsCorrectForField", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.nameIsCorrectForField);
            QUnit.test("Reflection - Reflection IsStaticIsCorrectForField", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.isStaticIsCorrectForField);
            QUnit.test("Reflection - Reflection FieldTypeIsCorrectForField", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.fieldTypeIsCorrectForField);
            QUnit.test("Reflection - Reflection ScriptNameIsCorrectForField", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.scriptNameIsCorrectForField);
            QUnit.test("Reflection - Reflection GetValueWorksForInstanceField", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.getValueWorksForInstanceField);
            QUnit.test("Reflection - Reflection GetValueWorksForStaticField", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.getValueWorksForStaticField);
            QUnit.test("Reflection - Reflection SetValueWorksForInstanceField", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.setValueWorksForInstanceField);
            QUnit.test("Reflection - Reflection SetValueWorksForStaticField", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.setValueWorksForStaticField);
            QUnit.test("Reflection - Reflection MemberTypeIsEventForEvent", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.memberTypeIsEventForEvent);
            QUnit.test("Reflection - Reflection DeclaringTypeIsCorrectForEvent", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.declaringTypeIsCorrectForEvent);
            QUnit.test("Reflection - Reflection NameIsCorrectForEvent", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.nameIsCorrectForEvent);
            QUnit.test("Reflection - Reflection IsStaticIsCorrectForEvent", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.isStaticIsCorrectForEvent);
            QUnit.test("Reflection - Reflection AddEventHandlerMethodWorksForInstanceEvent", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.addEventHandlerMethodWorksForInstanceEvent);
            QUnit.test("Reflection - Reflection AddEventHandlerMethodWorksForInstanceEventWithInlineCodeAddMethod", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.addEventHandlerMethodWorksForInstanceEventWithInlineCodeAddMethod);
            QUnit.test("Reflection - Reflection AddEventHandlerMethodWorksForStaticEvent", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.addEventHandlerMethodWorksForStaticEvent);
            QUnit.test("Reflection - Reflection AddEventHandlerMethodWorksForStaticEventWithInlineCodeAddMethod", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.addEventHandlerMethodWorksForStaticEventWithInlineCodeAddMethod);
            QUnit.test("Reflection - Reflection RemoveEventHandlerMethodWorksForInstanceEvent", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.removeEventHandlerMethodWorksForInstanceEvent);
            QUnit.test("Reflection - Reflection RemoveEventHandlerMethodWorksForInstanceEventWithInlineCodeRemoveMethod", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.removeEventHandlerMethodWorksForInstanceEventWithInlineCodeRemoveMethod);
            QUnit.test("Reflection - Reflection RemoveEventHandlerMethodWorksForStaticEvent", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.removeEventHandlerMethodWorksForStaticEvent);
            QUnit.test("Reflection - Reflection RemoveEventHandlerMethodWorksForStaticEventWithInlineCodeRemoveMethod", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.removeEventHandlerMethodWorksForStaticEventWithInlineCodeRemoveMethod);
            QUnit.test("Reflection - Reflection PropertiesForAddMethodAreCorrect", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.propertiesForAddMethodAreCorrect);
            QUnit.test("Reflection - Reflection PropertiesForRemoveMethodAreCorrect", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.propertiesForRemoveMethodAreCorrect);
            QUnit.test("Reflection - Reflection MemberTypeIsPropertyForProperty", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.memberTypeIsPropertyForProperty);
            QUnit.test("Reflection - Reflection ScriptFieldNameIsCorrectForPropertiesImplementedAsFieldAndNullForOtherProperties", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.scriptFieldNameIsCorrectForPropertiesImplementedAsFieldAndNullForOtherProperties);
            QUnit.test("Reflection - Reflection MemberTypeIsPropertyForIndexer", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.memberTypeIsPropertyForIndexer);
            QUnit.test("Reflection - Reflection DeclaringTypeIsCorrectForProperty", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.declaringTypeIsCorrectForProperty);
            QUnit.test("Reflection - Reflection DeclaringTypeIsCorrectForIndexer", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.declaringTypeIsCorrectForIndexer);
            QUnit.test("Reflection - Reflection NameIsCorrectForProperty", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.nameIsCorrectForProperty);
            QUnit.test("Reflection - Reflection NameIsCorrectForIndexer", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.nameIsCorrectForIndexer);
            QUnit.test("Reflection - Reflection IsStaticIsCorrectForProperty", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.isStaticIsCorrectForProperty);
            QUnit.test("Reflection - Reflection IsStaticIsFalseForIndexer", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.isStaticIsFalseForIndexer);
            QUnit.test("Reflection - Reflection PropertyTypeIsCorrectForProperty", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.propertyTypeIsCorrectForProperty);
            QUnit.test("Reflection - Reflection PropertyTypeIsCorrectForIndexer", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.propertyTypeIsCorrectForIndexer);
            QUnit.test("Reflection - Reflection IndexParameterTypesAreEmptyForProperty", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.indexParameterTypesAreEmptyForProperty);
            QUnit.test("Reflection - Reflection IndexParameterTypesAreCorrectForIndexer", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.indexParameterTypesAreCorrectForIndexer);
            QUnit.test("Reflection - Reflection PropertiesForGetMethodAreCorrectForPropertyImplementedAsGetAndSetMethods", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.propertiesForGetMethodAreCorrectForPropertyImplementedAsGetAndSetMethods);
            QUnit.test("Reflection - Reflection PropertiesForSetMethodAreCorrectForPropertyImplementedAsGetAndSetMethods", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.propertiesForSetMethodAreCorrectForPropertyImplementedAsGetAndSetMethods);
            QUnit.test("Reflection - Reflection PropertiesForGetMethodAreCorrectForPropertyImplementedAsFields", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.propertiesForGetMethodAreCorrectForPropertyImplementedAsFields);
            QUnit.test("Reflection - Reflection PropertiesForSetMethodAreCorrectForPropertyImplementedAsFields", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.propertiesForSetMethodAreCorrectForPropertyImplementedAsFields);
            QUnit.test("Reflection - Reflection PropertiesForGetMethodAreCorrectForIndexer", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.propertiesForGetMethodAreCorrectForIndexer);
            QUnit.test("Reflection - Reflection PropertiesForSetMethodAreCorrectForIndexer", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.propertiesForSetMethodAreCorrectForIndexer);
            QUnit.test("Reflection - Reflection CanReadAndWriteAndPropertiesWithOnlyOneAccessor", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.canReadAndWriteAndPropertiesWithOnlyOneAccessor);
            QUnit.test("Reflection - Reflection CanReadAndWriteAndIndexersWithOnlyOneAccessor", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.canReadAndWriteAndIndexersWithOnlyOneAccessor);
            QUnit.test("Reflection - Reflection PropertyInfoGetValueWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.propertyInfoGetValueWorks);
            QUnit.test("Reflection - Reflection PropertyInfoSetValueWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.propertyInfoSetValueWorks);
            QUnit.test("Reflection - Reflection MemberAttributesWork", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.memberAttributesWork);
            QUnit.test("Reflection - Reflection MembersReflectableAttributeWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.membersReflectableAttributeWorks);
            QUnit.test("Reflection - Type attributes CanGetCustomTypeAttributesForTypeWithNoAttributes", Bridge.Test.Runtime.BridgeClientTestRunner.TypeAttributeTests.canGetCustomTypeAttributesForTypeWithNoAttributes);
            QUnit.test("Reflection - Type attributes CanGetCustomTypeAttributesForClassWithAttributes", Bridge.Test.Runtime.BridgeClientTestRunner.TypeAttributeTests.canGetCustomTypeAttributesForClassWithAttributes);
            QUnit.test("Reflection - Type attributes NonScriptableAttributesAreNotIncluded", Bridge.Test.Runtime.BridgeClientTestRunner.TypeAttributeTests.nonScriptableAttributesAreNotIncluded);
            QUnit.test("Reflection - Type attributes CanGetCustomTypeAttributesForInterfaceWithAttributes", Bridge.Test.Runtime.BridgeClientTestRunner.TypeAttributeTests.canGetCustomTypeAttributesForInterfaceWithAttributes);
            QUnit.test("Reflection - Type attributes CanGetCustomTypeAttributesForEnumWithAttributes", Bridge.Test.Runtime.BridgeClientTestRunner.TypeAttributeTests.canGetCustomTypeAttributesForEnumWithAttributes);
            QUnit.test("Reflection - Type attributes InheritedFlagToGetCustomAttributesWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TypeAttributeTests.inheritedFlagToGetCustomAttributesWorks);
            QUnit.test("Reflection - Type attributes DeepInheritanceWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TypeAttributeTests.deepInheritanceWorks);
            QUnit.test("Reflection - Type attributes OverridingSingleUseAttributeReplacesTheAttributeOnTheBaseClass", Bridge.Test.Runtime.BridgeClientTestRunner.TypeAttributeTests.overridingSingleUseAttributeReplacesTheAttributeOnTheBaseClass);
            QUnit.test("Reflection - Type attributes ApplyingNewInstanceOfMultipleUseAttributeAddsTheAttribute", Bridge.Test.Runtime.BridgeClientTestRunner.TypeAttributeTests.applyingNewInstanceOfMultipleUseAttributeAddsTheAttribute);
            QUnit.test("Reflection - Type attributes NonInheritedAttributeIsNotInherited", Bridge.Test.Runtime.BridgeClientTestRunner.TypeAttributeTests.nonInheritedAttributeIsNotInherited);
            QUnit.test("Reflection - Type attributes GetCustomAttributesTypeFilterWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TypeAttributeTests.getCustomAttributesTypeFilterWorks);
            QUnit.test("Reflection - Type attributes GetCustomAttributesWorksForOpenGenericClass", Bridge.Test.Runtime.BridgeClientTestRunner.TypeAttributeTests.getCustomAttributesWorksForOpenGenericClass);
            QUnit.test("Reflection - Type attributes GetCustomAttributesWorksForConstructedGenericClass", Bridge.Test.Runtime.BridgeClientTestRunner.TypeAttributeTests.getCustomAttributesWorksForConstructedGenericClass);
            QUnit.test("Reflection - Type attributes GetCustomAttributesWorksForOpenGenericInterface", Bridge.Test.Runtime.BridgeClientTestRunner.TypeAttributeTests.getCustomAttributesWorksForOpenGenericInterface);
            QUnit.test("Reflection - Type attributes GetCustomAttributesWorksForConstructedGenericInterface", Bridge.Test.Runtime.BridgeClientTestRunner.TypeAttributeTests.getCustomAttributesWorksForConstructedGenericInterface);
            QUnit.test("Reflection - Type attributes AllSupportedScalarTypesCanBeUsedAsAttributeArguments", Bridge.Test.Runtime.BridgeClientTestRunner.TypeAttributeTests.allSupportedScalarTypesCanBeUsedAsAttributeArguments);
            QUnit.test("Reflection - Type attributes ArraysCanBeUsedAsAttributeArguments", Bridge.Test.Runtime.BridgeClientTestRunner.TypeAttributeTests.arraysCanBeUsedAsAttributeArguments);
            QUnit.test("Reflection - Type attributes NamedValuesEnumCanBeUsedAsAttributeArgument", Bridge.Test.Runtime.BridgeClientTestRunner.TypeAttributeTests.namedValuesEnumCanBeUsedAsAttributeArgument);
            QUnit.test("Reflection - Type attributes PropertiesWithSetMethodsImplementedAsNormalMethodsCanBeSetInAttributeDeclaration", Bridge.Test.Runtime.BridgeClientTestRunner.TypeAttributeTests.propertiesWithSetMethodsImplementedAsNormalMethodsCanBeSetInAttributeDeclaration);
            QUnit.test("Reflection - Type attributes PropertiesWithSetMethodsImplementedAsInlineCodeCanBeSetInAttributeDeclaration", Bridge.Test.Runtime.BridgeClientTestRunner.TypeAttributeTests.propertiesWithSetMethodsImplementedAsInlineCodeCanBeSetInAttributeDeclaration);
            QUnit.test("Reflection - Type attributes PropertiesImplementedAsFieldsCanBeAssignedInAttributeDeclaration", Bridge.Test.Runtime.BridgeClientTestRunner.TypeAttributeTests.propertiesImplementedAsFieldsCanBeAssignedInAttributeDeclaration);
            QUnit.test("Reflection - Type attributes FieldsCanBeAssignedInAttributeDeclaration", Bridge.Test.Runtime.BridgeClientTestRunner.TypeAttributeTests.fieldsCanBeAssignedInAttributeDeclaration);
            QUnit.test("Reflection - Type attributes CreatingAttributeWithNamedConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TypeAttributeTests.creatingAttributeWithNamedConstructorWorks);
            QUnit.test("Reflection - Type attributes CreatingAttributeWithInlineCodeConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TypeAttributeTests.creatingAttributeWithInlineCodeConstructorWorks);
            QUnit.test("Reflection - Type attributes ConditionalAttributesWhoseSymbolsAreNotDefinedAreRemoved", Bridge.Test.Runtime.BridgeClientTestRunner.TypeAttributeTests.conditionalAttributesWhoseSymbolsAreNotDefinedAreRemoved);
            QUnit.test("Reflection - TypeSystemLanguageSupport TypeIsWorksForReferenceTypes", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemLanguageSupportTests.typeIsWorksForReferenceTypes);
            QUnit.test("Reflection - TypeSystemLanguageSupport TypeAsWorksForReferenceTypes", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemLanguageSupportTests.typeAsWorksForReferenceTypes);
            QUnit.test("Reflection - TypeSystemLanguageSupport CastWorksForReferenceTypes", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemLanguageSupportTests.castWorksForReferenceTypes);
            QUnit.test("Reflection - TypeSystemLanguageSupport GetTypeWorksOnObjects", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemLanguageSupportTests.getTypeWorksOnObjects);
            QUnit.test("Reflection - TypeSystemLanguageSupport GetTypeOnNullInstanceThrowsException", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemLanguageSupportTests.getTypeOnNullInstanceThrowsException);
            QUnit.test("Reflection - TypeSystemLanguageSupport CastOperatorForSerializableTypeWithoutTypeCheckCodeAlwaysSucceedsGeneric", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemLanguageSupportTests.castOperatorForSerializableTypeWithoutTypeCheckCodeAlwaysSucceedsGeneric);
            QUnit.test("Reflection - TypeSystemLanguageSupport TypeCheckForSubTypeOfGenericType", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemLanguageSupportTests.typeCheckForSubTypeOfGenericType);
            QUnit.test("Reflection - TypeSystem FullNamePropertyReturnsTheNameWithTheNamespace", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests.fullNamePropertyReturnsTheNameWithTheNamespace);
            QUnit.test("Reflection - TypeSystem AssemblyQualifiedNameReturnsTheNameWithTheNamespaceAndAssemblyName", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests.assemblyQualifiedNameReturnsTheNameWithTheNamespaceAndAssemblyName);
            QUnit.test("Reflection - TypeSystem AssemblyPropertyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests.assemblyPropertyWorks);
            QUnit.test("Reflection - TypeSystem NamespacePropertyReturnsTheNamespaceWithoutTheName", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests.namespacePropertyReturnsTheNamespaceWithoutTheName);
            QUnit.test("Reflection - TypeSystem InstantiatingClassWithConstructorThatNeedsToBeAppliedWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests.instantiatingClassWithConstructorThatNeedsToBeAppliedWorks);
            QUnit.test("Reflection - TypeSystem NamePropertyRemovesTheNamespace", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests.namePropertyRemovesTheNamespace);
            QUnit.test("Reflection - TypeSystem GettingBaseTypeWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests.gettingBaseTypeWorks);
            QUnit.test("Reflection - TypeSystem GettingImplementedInterfacesWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests.gettingImplementedInterfacesWorks);
            QUnit.test("Reflection - TypeSystem TypeOfAnOpenGenericClassWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests.typeOfAnOpenGenericClassWorks);
            QUnit.test("Reflection - TypeSystem TypeOfAnOpenGenericInterfaceWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests.typeOfAnOpenGenericInterfaceWorks);
            QUnit.test("Reflection - TypeSystem TypeOfInstantiatedGenericClassWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests.typeOfInstantiatedGenericClassWorks);
            QUnit.test("Reflection - TypeSystem TypeOfInstantiatedGenericInterfaceWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests.typeOfInstantiatedGenericInterfaceWorks);
            QUnit.test("Reflection - TypeSystem ConstructingAGenericTypeTwiceWithTheSameArgumentsReturnsTheSameInstance", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests.constructingAGenericTypeTwiceWithTheSameArgumentsReturnsTheSameInstance);
            QUnit.test("Reflection - TypeSystem AccessingAStaticMemberInAGenericClassWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests.accessingAStaticMemberInAGenericClassWorks);
            QUnit.test("Reflection - TypeSystem TypeOfNestedGenericClassWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests.typeOfNestedGenericClassWorks);
            QUnit.test("Reflection - TypeSystem BaseTypeAndImplementedInterfacesForGenericTypeWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests.baseTypeAndImplementedInterfacesForGenericTypeWorks);
            QUnit.test("Reflection - TypeSystem IsAbstractWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests.isAbstractWorks);
            QUnit.test("Reflection - TypeSystem IsGenericTypeWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests.isGenericTypeWorks);
            QUnit.test("Reflection - TypeSystem IsNestedWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests.isNestedWorks);
            QUnit.test("Reflection - TypeSystem IsPublicWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests.isPublicWorks);
            QUnit.test("Reflection - TypeSystem IsNestedPublicWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests.isNestedPublicWorks);
            QUnit.test("Reflection - TypeSystem IsNestedPrivateWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests.isNestedPrivateWorks);
            QUnit.test("Reflection - TypeSystem IsNestedFamilyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests.isNestedFamilyWorks);
            QUnit.test("Reflection - TypeSystem IsNestedAssemblyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests.isNestedAssemblyWorks);
            QUnit.test("Reflection - TypeSystem IsNotPublicWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests.isNotPublicWorks);
            QUnit.test("Reflection - TypeSystem IsSealedWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests.isSealedWorks);
            QUnit.test("Reflection - TypeSystem AttributesWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests.attributesWorks);
            QUnit.test("Reflection - TypeSystem ContainsGenericParametersWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests.containsGenericParametersWorks);
            QUnit.test("Reflection - TypeSystem DeclaringTypeWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests.declaringTypeWorks);
            QUnit.test("Reflection - TypeSystem IsGenericParameterWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests.isGenericParameterWorks);
            QUnit.test("Reflection - TypeSystem GetEnumNamesWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests.getEnumNamesWorks);
            QUnit.test("Reflection - TypeSystem GetEnumNameWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests.getEnumNameWorks);
            QUnit.test("Reflection - TypeSystem GetEnumValuesWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests.getEnumValuesWorks);
            QUnit.test("Reflection - TypeSystem GetEnumUnderlyingTypeWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests.getEnumUnderlyingTypeWorks);
            QUnit.test("Reflection - TypeSystem IsGenericTypeDefinitionWorksAsExpected", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests.isGenericTypeDefinitionWorksAsExpected);
            QUnit.test("Reflection - TypeSystem GenericParameterCountReturnsZeroForConstructedTypesAndNonZeroForOpenOnes", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests.genericParameterCountReturnsZeroForConstructedTypesAndNonZeroForOpenOnes);
            QUnit.test("Reflection - TypeSystem GetGenericArgumentsReturnsTheCorrectTypesForConstructedTypesOtherwiseNull", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests.getGenericArgumentsReturnsTheCorrectTypesForConstructedTypesOtherwiseNull);
            QUnit.test("Reflection - TypeSystem GetGenericTypeDefinitionReturnsTheGenericTypeDefinitionForConstructedTypeOtherwiseNull", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests.getGenericTypeDefinitionReturnsTheGenericTypeDefinitionForConstructedTypeOtherwiseNull);
            QUnit.test("Reflection - TypeSystem IsAssignableFromWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests.isAssignableFromWorks);
            QUnit.test("Reflection - TypeSystem IsSubclassOfWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests.isSubclassOfWorks);
            QUnit.test("Reflection - TypeSystem IsClassWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests.isClassWorks);
            QUnit.test("Reflection - TypeSystem IsEnumWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests.isEnumWorks);
            QUnit.test("Reflection - TypeSystem IsArrayWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests.isArrayWorks);
            QUnit.test("Reflection - TypeSystem IsFlagsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests.isFlagsWorks);
            QUnit.test("Reflection - TypeSystem IsInterfaceWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests.isInterfaceWorks);
            QUnit.test("Reflection - TypeSystem IsInstanceOfTypeWorksForReferenceTypes", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests.isInstanceOfTypeWorksForReferenceTypes);
            QUnit.test("Reflection - TypeSystem InvokingBaseUnnamedConstructorWithoutArgumentsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests.invokingBaseUnnamedConstructorWithoutArgumentsWorks);
            QUnit.test("Reflection - TypeSystem InvokingBaseUnnamedConstructorWithArgumentsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests.invokingBaseUnnamedConstructorWithArgumentsWorks);
            QUnit.test("Reflection - TypeSystem InvokingBaseNamedConstructorWithoutArgumentsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests.invokingBaseNamedConstructorWithoutArgumentsWorks);
            QUnit.test("Reflection - TypeSystem InvokingBaseNamedConstructorWithArgumentsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests.invokingBaseNamedConstructorWithArgumentsWorks);
            QUnit.test("Reflection - TypeSystem ConstructingInstanceWithNamedConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests.constructingInstanceWithNamedConstructorWorks);
            QUnit.test("Reflection - TypeSystem ConstructingInstanceWithNamedConstructorWorks2", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests.constructingInstanceWithNamedConstructorWorks2);
            QUnit.test("Reflection - TypeSystem InvokingBaseMethodWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests.invokingBaseMethodWorks);
            QUnit.test("Reflection - TypeSystem InvokingGenericBaseMethodWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests.invokingGenericBaseMethodWorks);
            QUnit.test("Reflection - TypeSystem MethodGroupConversionWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests.methodGroupConversionWorks);
            QUnit.test("Reflection - TypeSystem MethodGroupConversionOnGenericMethodWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests.methodGroupConversionOnGenericMethodWorks);
            QUnit.test("Reflection - TypeSystem MethodGroupConversionOnBaseMethodWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests.methodGroupConversionOnBaseMethodWorks);
            QUnit.test("Reflection - TypeSystem MethodGroupConversionOnGenericBaseMethodWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests.methodGroupConversionOnGenericBaseMethodWorks);
            QUnit.test("Reflection - TypeSystem ImportedInterfaceAppearsAsObjectWhenUsedAsGenericArgument", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests.importedInterfaceAppearsAsObjectWhenUsedAsGenericArgument);
            QUnit.test("Reflection - TypeSystem FalseIsFunctionShouldReturnFalse", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests.falseIsFunctionShouldReturnFalse);
            QUnit.test("Reflection - TypeSystem CastingUndefinedToOtherTypeShouldReturnUndefined", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests.castingUndefinedToOtherTypeShouldReturnUndefined);
            QUnit.test("Reflection - TypeSystem NonSerializableTypeCanInheritFromSerializableType", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests.nonSerializableTypeCanInheritFromSerializableType);
            QUnit.test("Reflection - TypeSystem InheritingFromRecordWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests.inheritingFromRecordWorks);
            QUnit.test("Reflection - TypeSystem InstanceOfWorksForSerializableTypesWithCustomTypeCheckCode", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests.instanceOfWorksForSerializableTypesWithCustomTypeCheckCode);
            QUnit.test("Reflection - TypeSystem StaticGetTypeMethodWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests.staticGetTypeMethodWorks);
            QUnit.test("Reflection - TypeSystem StaticGetTypeMethodWithGenericsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests.staticGetTypeMethodWithGenericsWorks);
            QUnit.test("Reflection - TypeSystem CastingToNamedValuesEnumCastsToString", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests.castingToNamedValuesEnumCastsToString);
            QUnit.test("Reflection - TypeSystem CastingToImportedNamedValuesEnumCastsToString", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests.castingToImportedNamedValuesEnumCastsToString);
            QUnit.test("Reflection - TypeSystem DefaultValueOfNamedValuesEnumIsNull", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests.defaultValueOfNamedValuesEnumIsNull);
            QUnit.test("Reflection - TypeSystem DefaultValueOfImportedNamedValuesEnumIsNull", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests.defaultValueOfImportedNamedValuesEnumIsNull);
            QUnit.module("Regex");
            QUnit.test("Regex.IsMatch - IsMatchTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexIsMatchTests.isMatchTest);
            QUnit.test("Regex.IsMatch - IsMatchWithOffsetTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexIsMatchTests.isMatchWithOffsetTest);
            QUnit.test("Regex.IsMatch - IsMatchStaticTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexIsMatchTests.isMatchStaticTest);
            QUnit.test("Regex.IsMatch - IsMatchStaticWithOptionsTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexIsMatchTests.isMatchStaticWithOptionsTest);
            QUnit.test("Regex.IsMatch - IsMatchStaticWithOptionsAndTimeoutTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexIsMatchTests.isMatchStaticWithOptionsAndTimeoutTest);
            QUnit.test("Regex.Replace - ReplaceTest1", Bridge.Test.Runtime.BridgeClientTestRunner.RegexReplaceTests.replaceTest1);
            QUnit.test("Regex.Replace - ReplaceAtPositionTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexReplaceTests.replaceAtPositionTest);
            QUnit.test("Regex.Replace - ReplaceAtPositionAndLengthTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexReplaceTests.replaceAtPositionAndLengthTest);
            QUnit.test("Regex.Replace - ReplaceWithEvaluatorTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexReplaceTests.replaceWithEvaluatorTest);
            QUnit.test("Regex.Replace - ReplaceWithEvaluatorAndCountTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexReplaceTests.replaceWithEvaluatorAndCountTest);
            QUnit.test("Regex.Replace - ReplaceWithEvaluatorAndCountAtPostitionTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexReplaceTests.replaceWithEvaluatorAndCountAtPostitionTest);
            QUnit.test("Regex.Replace - ReplaceStaticTest1", Bridge.Test.Runtime.BridgeClientTestRunner.RegexReplaceTests.replaceStaticTest1);
            QUnit.test("Regex.Replace - ReplaceStaticTest2", Bridge.Test.Runtime.BridgeClientTestRunner.RegexReplaceTests.replaceStaticTest2);
            QUnit.test("Regex.Replace - ReplaceStaticWithOptionsTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexReplaceTests.replaceStaticWithOptionsTest);
            QUnit.test("Regex.Replace - ReplaceStaticWithOptionsAndTimeoutTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexReplaceTests.replaceStaticWithOptionsAndTimeoutTest);
            QUnit.test("Regex.Replace - ReplaceStaticWithEvaluatorTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexReplaceTests.replaceStaticWithEvaluatorTest);
            QUnit.test("Regex.Replace - ReplaceStaticWithEvaluatorAndOptionsTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexReplaceTests.replaceStaticWithEvaluatorAndOptionsTest);
            QUnit.test("Regex.Replace - ReplaceStaticWithEvaluatorAndOptionsAndTimoutTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexReplaceTests.replaceStaticWithEvaluatorAndOptionsAndTimoutTest);
            QUnit.test("Regex.Split - SplitTest1", Bridge.Test.Runtime.BridgeClientTestRunner.RegexSplitTests.splitTest1);
            QUnit.test("Regex.Split - SplitTest2", Bridge.Test.Runtime.BridgeClientTestRunner.RegexSplitTests.splitTest2);
            QUnit.test("Regex.Split - SplitTest3", Bridge.Test.Runtime.BridgeClientTestRunner.RegexSplitTests.splitTest3);
            QUnit.test("Regex.Split - SplitTest4", Bridge.Test.Runtime.BridgeClientTestRunner.RegexSplitTests.splitTest4);
            QUnit.test("Regex.Split - SplitTest5", Bridge.Test.Runtime.BridgeClientTestRunner.RegexSplitTests.splitTest5);
            QUnit.test("Regex.Split - SplitWithCountTest1", Bridge.Test.Runtime.BridgeClientTestRunner.RegexSplitTests.splitWithCountTest1);
            QUnit.test("Regex.Split - SplitWithCountTest2", Bridge.Test.Runtime.BridgeClientTestRunner.RegexSplitTests.splitWithCountTest2);
            QUnit.test("Regex.Split - SplitWithCountTest3", Bridge.Test.Runtime.BridgeClientTestRunner.RegexSplitTests.splitWithCountTest3);
            QUnit.test("Regex.Split - SplitWithCountTest4", Bridge.Test.Runtime.BridgeClientTestRunner.RegexSplitTests.splitWithCountTest4);
            QUnit.test("Regex.Split - SplitWithCountAndStartAtTest1", Bridge.Test.Runtime.BridgeClientTestRunner.RegexSplitTests.splitWithCountAndStartAtTest1);
            QUnit.test("Regex.Split - SplitWithCountAndStartAtTest2", Bridge.Test.Runtime.BridgeClientTestRunner.RegexSplitTests.splitWithCountAndStartAtTest2);
            QUnit.test("Regex.Split - SplitWithCountAndStartAtTest3", Bridge.Test.Runtime.BridgeClientTestRunner.RegexSplitTests.splitWithCountAndStartAtTest3);
            QUnit.test("Regex.Split - SplitWithCountAndStartAtTest4", Bridge.Test.Runtime.BridgeClientTestRunner.RegexSplitTests.splitWithCountAndStartAtTest4);
            QUnit.test("Regex.Split - SplitStaticTest1", Bridge.Test.Runtime.BridgeClientTestRunner.RegexSplitTests.splitStaticTest1);
            QUnit.test("Regex.Split - SplitStaticTest2", Bridge.Test.Runtime.BridgeClientTestRunner.RegexSplitTests.splitStaticTest2);
            QUnit.test("Regex.Split - SplitStaticTest3", Bridge.Test.Runtime.BridgeClientTestRunner.RegexSplitTests.splitStaticTest3);
            QUnit.test("Regex.Split - SplitStaticTest4", Bridge.Test.Runtime.BridgeClientTestRunner.RegexSplitTests.splitStaticTest4);
            QUnit.test("Regex.Split - SplitStaticTest5", Bridge.Test.Runtime.BridgeClientTestRunner.RegexSplitTests.splitStaticTest5);
            QUnit.test("Regex.Split - SplitStaticWithOptionsTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexSplitTests.splitStaticWithOptionsTest);
            QUnit.test("Regex.Split - SplitStaticWithOptionsAndTimeout", Bridge.Test.Runtime.BridgeClientTestRunner.RegexSplitTests.splitStaticWithOptionsAndTimeout);
            QUnit.test("RegexCaptureCollection Entity - CaseDataTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexCaptureCollectionTests.caseDataTest);
            QUnit.test("RegexCaptureCollection Entity - CaptureCollectionFieldsTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexCaptureCollectionTests.captureCollectionFieldsTest);
            QUnit.test("RegexCaptureCollection Entity - CaptureCollectionForeachTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexCaptureCollectionTests.captureCollectionForeachTest);
            QUnit.test("RegexCaptureCollection Entity - CaptureCollectionEnumeratorTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexCaptureCollectionTests.captureCollectionEnumeratorTest);
            QUnit.test("RegexCaptureCollection Entity - CaptureCollectionCopyToTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexCaptureCollectionTests.captureCollectionCopyToTest);
            QUnit.test("Regex Entity - CaseDataTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexEntityTests.caseDataTest);
            QUnit.test("Regex Entity - GetGroupNamesTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexEntityTests.getGroupNamesTest);
            QUnit.test("Regex Entity - GetGroupNumbersTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexEntityTests.getGroupNumbersTest);
            QUnit.test("Regex Entity - GroupNameFromNumberTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexEntityTests.groupNameFromNumberTest);
            QUnit.test("Regex Entity - GroupNumberFromNameTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexEntityTests.groupNumberFromNameTest);
            QUnit.test("Regex Entity - SupportedOptionsTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexEntityTests.supportedOptionsTest);
            QUnit.test("Regex Entity - MatchNamedGroupTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexEntityTests.matchNamedGroupTest);
            QUnit.test("Regex Entity - MatchInnerNamedGroupTest1", Bridge.Test.Runtime.BridgeClientTestRunner.RegexEntityTests.matchInnerNamedGroupTest1);
            QUnit.test("Regex Entity - MatchInnerNamedGroupTest2", Bridge.Test.Runtime.BridgeClientTestRunner.RegexEntityTests.matchInnerNamedGroupTest2);
            QUnit.test("Regex Entity - GroupOrderingTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexEntityTests.groupOrderingTest);
            QUnit.test("Regex Entity - RepeatingGroupTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexEntityTests.repeatingGroupTest);
            QUnit.test("Regex Entity - ZeroResultTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexEntityTests.zeroResultTest);
            QUnit.test("Regex Entity - NonCapturingGroupsTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexEntityTests.nonCapturingGroupsTest);
            QUnit.test("RegexGroupCollection Entity - CaseDataTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexGroupCollectionTests.caseDataTest);
            QUnit.test("RegexGroupCollection Entity - GroupCollectionFieldsTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexGroupCollectionTests.groupCollectionFieldsTest);
            QUnit.test("RegexGroupCollection Entity - GroupCollectionForeachTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexGroupCollectionTests.groupCollectionForeachTest);
            QUnit.test("RegexGroupCollection Entity - GroupCollectionEnumeratorTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexGroupCollectionTests.groupCollectionEnumeratorTest);
            QUnit.test("RegexGroupCollection Entity - GroupCollectionCopyToTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexGroupCollectionTests.groupCollectionCopyToTest);
            QUnit.test("RegexMatchCollection Entity - CaseDataTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchCollectionTests.caseDataTest);
            QUnit.test("RegexMatchCollection Entity - MatchCollectionFieldsTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchCollectionTests.matchCollectionFieldsTest);
            QUnit.test("RegexMatchCollection Entity - MatchCollectionItemsTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchCollectionTests.matchCollectionItemsTest);
            QUnit.test("RegexMatchCollection Entity - MatchCollectionForeachTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchCollectionTests.matchCollectionForeachTest);
            QUnit.test("RegexMatchCollection Entity - MatchCollectionEnumeratorTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchCollectionTests.matchCollectionEnumeratorTest);
            QUnit.test("RegexMatchCollection Entity - MatchCollectionCopyToTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchCollectionTests.matchCollectionCopyToTest);
            QUnit.test("RegexMatchCollection Entity - MatchCollectionWithEmptyPatternTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchCollectionTests.matchCollectionWithEmptyPatternTest);
            QUnit.test("Match Entity - CaseDataTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchEntityTests.caseDataTest);
            QUnit.test("Match Entity - MatchEmptyPatternTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchEntityTests.matchEmptyPatternTest);
            QUnit.test("Match Entity - MatchEmptyFieldsTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchEntityTests.matchEmptyFieldsTest);
            QUnit.test("Match Entity - MatchNextMatchTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchEntityTests.matchNextMatchTest);
            QUnit.test("Match Entity - MatchNextMatchWithEmptyPatternTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchEntityTests.matchNextMatchWithEmptyPatternTest);
            QUnit.test("Match Entity - MatchResultTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchEntityTests.matchResultTest);
            QUnit.test("Match Entity - MatchSearchGroupByNameTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchEntityTests.matchSearchGroupByNameTest);
            QUnit.test("MatchSparse Entity - GroupOrderingTest1", Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchSparseTests.groupOrderingTest1);
            QUnit.test("MatchSparse Entity - GroupOrderingTest2", Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchSparseTests.groupOrderingTest2);
            QUnit.test("MatchSparse Entity - GroupOrderingTest3", Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchSparseTests.groupOrderingTest3);
            QUnit.test("MatchSparse Entity - SparseOrderingTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchSparseTests.sparseOrderingTest);
            QUnit.test("MatchSparse Entity - GroupCapturesMergeTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchSparseTests.groupCapturesMergeTest);
            QUnit.test("Regex.Escape - MsdnEscapeTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexEscapeTests.msdnEscapeTest);
            QUnit.test("Regex.Escape - MsdnUnescapeTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexEscapeTests.msdnUnescapeTest);
            QUnit.test("Regex.Escape - EscapeCharSetTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexEscapeTests.escapeCharSetTest);
            QUnit.test("Regex.Escape - NonEscapeCharSetTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexEscapeTests.nonEscapeCharSetTest);
            QUnit.test("Regex.Matches - MatchesTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchesTests.matchesTest);
            QUnit.test("Regex.Matches - MatchesAtPositionTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchesTests.matchesAtPositionTest);
            QUnit.test("Regex.Matches - MatchesStaticTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchesTests.matchesStaticTest);
            QUnit.test("Regex.Matches - MatchesStaticWithOptionsTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchesTests.matchesStaticWithOptionsTest);
            QUnit.test("Regex.Matches - MatchesStaticWithOptionsAndTimeoutTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchesTests.matchesStaticWithOptionsAndTimeoutTest);
            QUnit.test("Regex.Match - MatchTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchTests.matchTest);
            QUnit.test("Regex.Match - MatchAtPositionTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchTests.matchAtPositionTest);
            QUnit.test("Regex.Match - MatchAtPositionAndLengthTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchTests.matchAtPositionAndLengthTest);
            QUnit.test("Regex.Match - MatchStaticTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchTests.matchStaticTest);
            QUnit.test("Regex.Match - MatchStaticWithOptionsTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchTests.matchStaticWithOptionsTest);
            QUnit.test("Regex.Match - MatchStaticWithOptionsAndTimeoutTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchTests.matchStaticWithOptionsAndTimeoutTest);
            QUnit.test("Regex: Alternations - MsdnSimpleAlternationTest1", Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests.msdnSimpleAlternationTest1);
            QUnit.test("Regex: Alternations - MsdnSimpleAlternationTest2", Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests.msdnSimpleAlternationTest2);
            QUnit.test("Regex: Alternations - MsdnSimpleAlternationTest3", Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests.msdnSimpleAlternationTest3);
            QUnit.test("Regex: Alternations - MsdnAlternationExprTest1", Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests.msdnAlternationExprTest1);
            QUnit.test("Regex: Alternations - MsdnAlternationExprTest2", Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests.msdnAlternationExprTest2);
            QUnit.test("Regex: Alternations - MsdnAlternationGroupNameExprTest1", Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests.msdnAlternationGroupNameExprTest1);
            QUnit.test("Regex: Alternations - MsdnAlternationGroupNameExprTest2", Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests.msdnAlternationGroupNameExprTest2);
            QUnit.test("Regex: Alternations - MsdnAlternationGroupNumberExprTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests.msdnAlternationGroupNumberExprTest);
            QUnit.test("Regex: Alternations - SimpleAlternationTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests.simpleAlternationTest);
            QUnit.test("Regex: Alternations - SimpleAlternationTest2", Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests.simpleAlternationTest2);
            QUnit.test("Regex: Alternations - SimpleAlternationTest3", Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests.simpleAlternationTest3);
            QUnit.test("Regex: Alternations - AlternationWithGroupTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests.alternationWithGroupTest);
            QUnit.test("Regex: Alternations - AlternationGroupTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests.alternationGroupTest);
            QUnit.test("Regex: Alternations - AlternationGroupNonCapturingTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests.alternationGroupNonCapturingTest);
            QUnit.test("Regex: Alternations - AlternationGroupPositiveLookaheadTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests.alternationGroupPositiveLookaheadTest);
            QUnit.test("Regex: Alternations - AlternationGroupNegativeLookaheadTest1", Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests.alternationGroupNegativeLookaheadTest1);
            QUnit.test("Regex: Alternations - AlternationGroupNegativeLookaheadTest2", Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests.alternationGroupNegativeLookaheadTest2);
            QUnit.test("Regex: Alternations - AlternationGroupPositiveLookbehindTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests.alternationGroupPositiveLookbehindTest);
            QUnit.test("Regex: Alternations - AlternationGroupNegativeLookbehindTest1", Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests.alternationGroupNegativeLookbehindTest1);
            QUnit.test("Regex: Alternations - AlternationGroupNegativeLookbehindTest2", Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests.alternationGroupNegativeLookbehindTest2);
            QUnit.test("Regex: Alternations - AlternationGroupNonBacktrackingTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests.alternationGroupNonBacktrackingTest);
            QUnit.test("Regex: Alternations - AlternationGroupCommentTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests.alternationGroupCommentTest);
            QUnit.test("Regex: Alternations - AlternationGroupWithNameInConditionTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests.alternationGroupWithNameInConditionTest);
            QUnit.test("Regex: Alternations - AlternationGroupWithIncorrectRefTest1", Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests.alternationGroupWithIncorrectRefTest1);
            QUnit.test("Regex: Alternations - AlternationGroupWithIncorrectRefTest2", Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests.alternationGroupWithIncorrectRefTest2);
            QUnit.test("Regex: Alternations - AlternationGroupWithImnsxTest1", Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests.alternationGroupWithImnsxTest1);
            QUnit.test("Regex: Alternations - AlternationGroupWithImnsxTest2", Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests.alternationGroupWithImnsxTest2);
            QUnit.test("Regex: Alternations - AlternationGroupWithImnsxTest3", Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests.alternationGroupWithImnsxTest3);
            QUnit.test("Regex: Alternations - AlternationConditionWithGroupTest1", Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests.alternationConditionWithGroupTest1);
            QUnit.test("Regex: Alternations - AlternationConditionWithGroupTest2", Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests.alternationConditionWithGroupTest2);
            QUnit.test("Regex: Alternations - AlternationConditionWithGroupTest3", Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests.alternationConditionWithGroupTest3);
            QUnit.test("Regex: Alternations - AlternationConditionWithGroupTest4", Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests.alternationConditionWithGroupTest4);
            QUnit.test("Regex: Alternations - AlternationConditionWithGroupTest5", Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests.alternationConditionWithGroupTest5);
            QUnit.test("Regex: Alternations - AlternationGroupNonCapturingWithGroupTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests.alternationGroupNonCapturingWithGroupTest);
            QUnit.test("Regex: Alternations - AlternationGroupPositiveLookaheadWithGroupTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests.alternationGroupPositiveLookaheadWithGroupTest);
            QUnit.test("Regex: Alternations - AlternationGroupNegativeLookaheadWithGroupTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests.alternationGroupNegativeLookaheadWithGroupTest);
            QUnit.test("Regex: Alternations - AlternationGroupPositiveLookbehindWithGroupTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests.alternationGroupPositiveLookbehindWithGroupTest);
            QUnit.test("Regex: Alternations - AlternationGroupNegativeLookbehindWithGroupTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests.alternationGroupNegativeLookbehindWithGroupTest);
            QUnit.test("Regex: Alternations - AlternationGroupNonBacktrackingWithGroupTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests.alternationGroupNonBacktrackingWithGroupTest);
            QUnit.test("Regex: Alternations - AlternationGroupWithImnsxAndGroupTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests.alternationGroupWithImnsxAndGroupTest);
            QUnit.test("Regex: Alternations - AlternationGroupWithoutAlternativeBranchTest1", Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests.alternationGroupWithoutAlternativeBranchTest1);
            QUnit.test("Regex: Alternations - AlternationGroupWithoutAlternativeBranchTest2", Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests.alternationGroupWithoutAlternativeBranchTest2);
            QUnit.test("Regex: Alternations - AlternationGroupWithoutAlternativeBranchExceptionTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests.alternationGroupWithoutAlternativeBranchExceptionTest);
            QUnit.test("Regex: Anchors - MsdnStartOfStringOrLineTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexAnchorsTests.msdnStartOfStringOrLineTest);
            QUnit.test("Regex: Anchors - MsdnStartOfStringOrLineMultilineModeTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexAnchorsTests.msdnStartOfStringOrLineMultilineModeTest);
            QUnit.test("Regex: Anchors - MsdnEndOfStringOrLineTest1", Bridge.Test.Runtime.BridgeClientTestRunner.RegexAnchorsTests.msdnEndOfStringOrLineTest1);
            QUnit.test("Regex: Anchors - MsdnEndOfStringOrLineTest2", Bridge.Test.Runtime.BridgeClientTestRunner.RegexAnchorsTests.msdnEndOfStringOrLineTest2);
            QUnit.test("Regex: Anchors - MsdnEndOfStringOrLineTest3", Bridge.Test.Runtime.BridgeClientTestRunner.RegexAnchorsTests.msdnEndOfStringOrLineTest3);
            QUnit.test("Regex: Anchors - MsdnEndOfStringOrLineTest4", Bridge.Test.Runtime.BridgeClientTestRunner.RegexAnchorsTests.msdnEndOfStringOrLineTest4);
            QUnit.test("Regex: Anchors - MsdnStartOfStringOnlyTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexAnchorsTests.msdnStartOfStringOnlyTest);
            QUnit.test("Regex: Anchors - MsdnEndOfStringOrNewlineTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexAnchorsTests.msdnEndOfStringOrNewlineTest);
            QUnit.test("Regex: Anchors - MsdnEndOfStringOnlyTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexAnchorsTests.msdnEndOfStringOnlyTest);
            QUnit.test("Regex: Anchors - MsdnContiguousMatchesTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexAnchorsTests.msdnContiguousMatchesTest);
            QUnit.test("Regex: Anchors - MsdnWordBoundaryTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexAnchorsTests.msdnWordBoundaryTest);
            QUnit.test("Regex: Anchors - MsdnNonWordBoundaryTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexAnchorsTests.msdnNonWordBoundaryTest);
            QUnit.test("Regex: Anchors - StartAndEndOfStringCustomTest1", Bridge.Test.Runtime.BridgeClientTestRunner.RegexAnchorsTests.startAndEndOfStringCustomTest1);
            QUnit.test("Regex: Anchors - StartAndEndOfStringCustomTest2", Bridge.Test.Runtime.BridgeClientTestRunner.RegexAnchorsTests.startAndEndOfStringCustomTest2);
            QUnit.test("Regex: Anchors - EndOfStringOrNewlineCustomTest1", Bridge.Test.Runtime.BridgeClientTestRunner.RegexAnchorsTests.endOfStringOrNewlineCustomTest1);
            QUnit.test("Regex: Anchors - EndOfStringOrNewlineCustomTest2", Bridge.Test.Runtime.BridgeClientTestRunner.RegexAnchorsTests.endOfStringOrNewlineCustomTest2);
            QUnit.test("Regex: Anchors - EndOfStringOnlyCustomTest1", Bridge.Test.Runtime.BridgeClientTestRunner.RegexAnchorsTests.endOfStringOnlyCustomTest1);
            QUnit.test("Regex: Anchors - EndOfStringOnlyCustomTest2", Bridge.Test.Runtime.BridgeClientTestRunner.RegexAnchorsTests.endOfStringOnlyCustomTest2);
            QUnit.test("Regex: Anchors - EndOfStringOnlyCustomTest3", Bridge.Test.Runtime.BridgeClientTestRunner.RegexAnchorsTests.endOfStringOnlyCustomTest3);
            QUnit.test("Regex: Anchors - ContiguousMatchesCustomTest1", Bridge.Test.Runtime.BridgeClientTestRunner.RegexAnchorsTests.contiguousMatchesCustomTest1);
            QUnit.test("Regex: Anchors - ContiguousMatchesCustomTest2", Bridge.Test.Runtime.BridgeClientTestRunner.RegexAnchorsTests.contiguousMatchesCustomTest2);
            QUnit.test("Regex: Backreferences - MsdnNumberedBackrefTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexBackreferenceTests.msdnNumberedBackrefTest);
            QUnit.test("Regex: Backreferences - MsdnNamedBackrefTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexBackreferenceTests.msdnNamedBackrefTest);
            QUnit.test("Regex: Backreferences - MsdnNamedBackrefWithNumberAsNameTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexBackreferenceTests.msdnNamedBackrefWithNumberAsNameTest);
            QUnit.test("Regex: Backreferences - MsdnNamedBackrefWithRedefinedGroupTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexBackreferenceTests.msdnNamedBackrefWithRedefinedGroupTest);
            QUnit.test("Regex: Backreferences - MsdnNamedBackrefWithEmptyCaptureTest1", Bridge.Test.Runtime.BridgeClientTestRunner.RegexBackreferenceTests.msdnNamedBackrefWithEmptyCaptureTest1);
            QUnit.test("Regex: Backreferences - MsdnNamedBackrefWithEmptyCaptureTest2", Bridge.Test.Runtime.BridgeClientTestRunner.RegexBackreferenceTests.msdnNamedBackrefWithEmptyCaptureTest2);
            QUnit.test("Regex: Backreferences - NamedBackrefToUnreachableGroupTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexBackreferenceTests.namedBackrefToUnreachableGroupTest);
            QUnit.test("Regex: Backreferences - NamedBackrefToSelfGroupTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexBackreferenceTests.namedBackrefToSelfGroupTest);
            QUnit.test("Regex: Backreferences - NamedBackrefToParentGroupTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexBackreferenceTests.namedBackrefToParentGroupTest);
            QUnit.test("Regex: Backreferences - NumberedBackrefTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexBackreferenceTests.numberedBackrefTest);
            QUnit.test("Regex: Backreferences - NumberedBackrefInGroupTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexBackreferenceTests.numberedBackrefInGroupTest);
            QUnit.test("Regex: Backreferences - NamedBackrefInGroupTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexBackreferenceTests.namedBackrefInGroupTest);
            QUnit.test("Regex: Backreferences - NumberedBackrefRecursiveGroupTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexBackreferenceTests.numberedBackrefRecursiveGroupTest);
            QUnit.test("Regex: Backreferences - NamedBackrefRecursiveGroupTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexBackreferenceTests.namedBackrefRecursiveGroupTest);
            QUnit.test("Regex: Backreferences - ComplexBackrefTest1", Bridge.Test.Runtime.BridgeClientTestRunner.RegexBackreferenceTests.complexBackrefTest1);
            QUnit.test("Regex: BalancingGroups - MsdnBalancingGroupTest1", Bridge.Test.Runtime.BridgeClientTestRunner.RegexBalancingGroupsTests.msdnBalancingGroupTest1);
            QUnit.test("Regex: BalancingGroups - MsdnBalancingGroupTest2", Bridge.Test.Runtime.BridgeClientTestRunner.RegexBalancingGroupsTests.msdnBalancingGroupTest2);
            QUnit.test("Regex: BalancingGroups - BalancingGroupTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexBalancingGroupsTests.balancingGroupTest);
            QUnit.test("Regex: BalancingGroups - BalancingGroupWithoutName1Test", Bridge.Test.Runtime.BridgeClientTestRunner.RegexBalancingGroupsTests.balancingGroupWithoutName1Test);
            QUnit.test("Regex: BalancingGroups - BalancingGroupWithQuantifierTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexBalancingGroupsTests.balancingGroupWithQuantifierTest);
            QUnit.test("Regex: BalancingGroups - BalancingGroupWithEmptyIntervalTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexBalancingGroupsTests.balancingGroupWithEmptyIntervalTest);
            QUnit.test("Regex: BalancingGroups - BalancingGroupStackApproachTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexBalancingGroupsTests.balancingGroupStackApproachTest);
            QUnit.test("Regex: BalancingGroups - BalancingGroupWithNumberReferenceTest1", Bridge.Test.Runtime.BridgeClientTestRunner.RegexBalancingGroupsTests.balancingGroupWithNumberReferenceTest1);
            QUnit.test("Regex: BalancingGroups - BalancingGroupWithNumberReferenceTest2", Bridge.Test.Runtime.BridgeClientTestRunner.RegexBalancingGroupsTests.balancingGroupWithNumberReferenceTest2);
            QUnit.test("Regex: BalancingGroups - BalancingGroupIncorrectReferenceTest1", Bridge.Test.Runtime.BridgeClientTestRunner.RegexBalancingGroupsTests.balancingGroupIncorrectReferenceTest1);
            QUnit.test("Regex: BalancingGroups - BalancingGroupIncorrectReferenceTest2", Bridge.Test.Runtime.BridgeClientTestRunner.RegexBalancingGroupsTests.balancingGroupIncorrectReferenceTest2);
            QUnit.test("Regex: Char Classes - MsdnCharGroupTest1", Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests.msdnCharGroupTest1);
            QUnit.test("Regex: Char Classes - MsdnCharGroupTest3", Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests.msdnCharGroupTest3);
            QUnit.test("Regex: Char Classes - MsdnNegativeCharGroupTest1", Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests.msdnNegativeCharGroupTest1);
            QUnit.test("Regex: Char Classes - MsdnNegativeCharGroupTest2", Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests.msdnNegativeCharGroupTest2);
            QUnit.test("Regex: Char Classes - MsdnDotCharTest1", Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests.msdnDotCharTest1);
            QUnit.test("Regex: Char Classes - MsdnDotCharTest2", Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests.msdnDotCharTest2);
            QUnit.test("Regex: Char Classes - MsdnDotCharTest3", Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests.msdnDotCharTest3);
            QUnit.test("Regex: Char Classes - MsdnCharRangeInGroupTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests.msdnCharRangeInGroupTest);
            QUnit.test("Regex: Char Classes - MsdnWordCharTest1", Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests.msdnWordCharTest1);
            QUnit.test("Regex: Char Classes - MsdnWordCharTest2", Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests.msdnWordCharTest2);
            QUnit.test("Regex: Char Classes - MsdnNonWordCharTest1", Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests.msdnNonWordCharTest1);
            QUnit.test("Regex: Char Classes - MsdnNonWordCharTest2", Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests.msdnNonWordCharTest2);
            QUnit.test("Regex: Char Classes - MsdnSpaceCharTest1", Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests.msdnSpaceCharTest1);
            QUnit.test("Regex: Char Classes - MsdnSpaceCharTest2", Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests.msdnSpaceCharTest2);
            QUnit.test("Regex: Char Classes - MsdnNonSpaceCharTest1", Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests.msdnNonSpaceCharTest1);
            QUnit.test("Regex: Char Classes - MsdnNonSpaceCharTest2", Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests.msdnNonSpaceCharTest2);
            QUnit.test("Regex: Char Classes - MsdnDigitCharTest1", Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests.msdnDigitCharTest1);
            QUnit.test("Regex: Char Classes - MsdnDigitCharTest2", Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests.msdnDigitCharTest2);
            QUnit.test("Regex: Char Classes - MsdnDigitCharTest3", Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests.msdnDigitCharTest3);
            QUnit.test("Regex: Char Classes - MsdnNonDigitCharTest1", Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests.msdnNonDigitCharTest1);
            QUnit.test("Regex: Char Classes - MsdnNonDigitCharTest2", Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests.msdnNonDigitCharTest2);
            QUnit.test("Regex: Char Classes - MsdnNonDigitCharTest3", Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests.msdnNonDigitCharTest3);
            QUnit.test("Regex: Char Classes - MsdnSubstactGroupTest1", Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests.msdnSubstactGroupTest1);
            QUnit.test("Regex: Char Classes - MsdnSubstactGroupTest2", Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests.msdnSubstactGroupTest2);
            QUnit.test("Regex: Char Classes - MsdnSubstactGroupTest3", Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests.msdnSubstactGroupTest3);
            QUnit.test("Regex: Char Classes - MsdnSubstactGroupTest4", Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests.msdnSubstactGroupTest4);
            QUnit.test("Regex: Char Classes - CharClassesInCharGroupTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests.charClassesInCharGroupTest);
            QUnit.test("Regex: Char Classes - CaretSymbolInCharGroupTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests.caretSymbolInCharGroupTest);
            QUnit.test("Regex: Char Classes - NegativeCharGroupTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests.negativeCharGroupTest);
            QUnit.test("Regex: Char Classes - CombiningCharRangesTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests.combiningCharRangesTest);
            QUnit.test("Regex: Char Classes - SubstractGroupTest1", Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests.substractGroupTest1);
            QUnit.test("Regex: Char Classes - SubstractGroupTest2", Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests.substractGroupTest2);
            QUnit.test("Regex: Char Classes - SubstractGroupTest3", Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests.substractGroupTest3);
            QUnit.test("Regex: Char Classes - SubstractNegativeGroupTest1", Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests.substractNegativeGroupTest1);
            QUnit.test("Regex: Char Classes - SubstractNegativeGroupTest2", Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests.substractNegativeGroupTest2);
            QUnit.test("Regex: Char Classes - SubstractNegativeGroupTest3", Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests.substractNegativeGroupTest3);
            QUnit.test("Regex: Char Classes - SubstractNestedGroupsTest1", Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests.substractNestedGroupsTest1);
            QUnit.test("Regex: Char Classes - SubstractNestedGroupsTest2", Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests.substractNestedGroupsTest2);
            QUnit.test("Regex: Char Classes - SubstractGroupIsNotLastTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests.substractGroupIsNotLastTest);
            QUnit.test("Regex: Char Classes - CharClassWithEscapedBracketInGroupTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests.charClassWithEscapedBracketInGroupTest);
            QUnit.test("Regex: Char Classes - CharClassWithEscapedSquareBracketInGroupTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests.charClassWithEscapedSquareBracketInGroupTest);
            QUnit.test("Regex: Char Classes - CharClassWithUnescapedBracketInGroupTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests.charClassWithUnescapedBracketInGroupTest);
            QUnit.test("Regex: Char Classes - CharClassWithUnescapedSquareBracketInGroupTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests.charClassWithUnescapedSquareBracketInGroupTest);
            QUnit.test("Regex: Char Classes - EmptyRangeTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests.emptyRangeTest);
            QUnit.test("Regex: Char Classes - ClosingSquareBracketTest1", Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests.closingSquareBracketTest1);
            QUnit.test("Regex: Char Classes - ClosingSquareBracketTest2", Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests.closingSquareBracketTest2);
            QUnit.test("Regex: Char Classes - OpeningSquareBracketTest1", Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests.openingSquareBracketTest1);
            QUnit.test("Regex: Char Classes - OpeningSquareBracketTest2", Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests.openingSquareBracketTest2);
            QUnit.test("Regex: Escapes - MsdnBellCharTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexEscapesTests.msdnBellCharTest);
            QUnit.test("Regex: Escapes - MsdnBackspaceCharTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexEscapesTests.msdnBackspaceCharTest);
            QUnit.test("Regex: Escapes - MsdnTabCharTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexEscapesTests.msdnTabCharTest);
            QUnit.test("Regex: Escapes - MsdnCarriageRetCharTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexEscapesTests.msdnCarriageRetCharTest);
            QUnit.test("Regex: Escapes - MsdnVerticalTabCharTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexEscapesTests.msdnVerticalTabCharTest);
            QUnit.test("Regex: Escapes - MsdnFormFeedCharTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexEscapesTests.msdnFormFeedCharTest);
            QUnit.test("Regex: Escapes - MsdnNewLineCharTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexEscapesTests.msdnNewLineCharTest);
            QUnit.test("Regex: Escapes - MsdnEscapeCharTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexEscapesTests.msdnEscapeCharTest);
            QUnit.test("Regex: Escapes - MsdnOctalEscapeTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexEscapesTests.msdnOctalEscapeTest);
            QUnit.test("Regex: Escapes - MsdnHexEscapeTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexEscapesTests.msdnHexEscapeTest);
            QUnit.test("Regex: Escapes - MsdnAsciiEscapeTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexEscapesTests.msdnAsciiEscapeTest);
            QUnit.test("Regex: Escapes - MsdnUnicodeEscapeTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexEscapesTests.msdnUnicodeEscapeTest);
            QUnit.test("Regex: Escapes - MsdnSpecialEscapesTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexEscapesTests.msdnSpecialEscapesTest);
            QUnit.test("Regex: Escapes - MsdnCharEscapesExampleTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexEscapesTests.msdnCharEscapesExampleTest);
            QUnit.test("Regex: Escapes - CharEscapesTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexEscapesTests.charEscapesTest);
            QUnit.test("Regex: Escapes - RangeWithCharEscapesTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexEscapesTests.rangeWithCharEscapesTest);
            QUnit.test("Regex: Escapes - ControlCharsTestUpperTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexEscapesTests.controlCharsTestUpperTest);
            QUnit.test("Regex: Escapes - ControlCharsTestLowerTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexEscapesTests.controlCharsTestLowerTest);
            QUnit.test("Regex: Escapes - BasicLatinEscapeTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexEscapesTests.basicLatinEscapeTest);
            QUnit.test("Regex: Escapes - OctalEscapeTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexEscapesTests.octalEscapeTest);
            QUnit.test("Regex: Examples - EmailParseTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexExamplesTests.emailParseTest);
            QUnit.test("Regex: Examples - PhoneParseTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexExamplesTests.phoneParseTest);
            QUnit.test("Regex: Examples - PasswordValidationTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexExamplesTests.passwordValidationTest);
            QUnit.test("Regex: Examples - WordSlplittingTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexExamplesTests.wordSlplittingTest);
            QUnit.test("Regex: Examples - IpAddressValidationTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexExamplesTests.ipAddressValidationTest);
            QUnit.test("Regex: Examples - EscapeQuotedWordsTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexExamplesTests.escapeQuotedWordsTest);
            QUnit.test("Regex: Examples - CreditCardExpirationParsingTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexExamplesTests.creditCardExpirationParsingTest);
            QUnit.test("Regex: Examples - UrlParsingTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexExamplesTests.urlParsingTest);
            QUnit.test("Regex IMNSX - MsdnInlineOptionsTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests.msdnInlineOptionsTest);
            QUnit.test("Regex IMNSX - MsdnIgnoreCaseTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests.msdnIgnoreCaseTest);
            QUnit.test("Regex IMNSX - MsdnMultilineInlineOptionTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests.msdnMultilineInlineOptionTest);
            QUnit.test("Regex IMNSX - MsdnSinglelineInlineOptionTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests.msdnSinglelineInlineOptionTest);
            QUnit.test("Regex IMNSX - MsdnIngoreWhitespaceInlineOptionTest1", Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests.msdnIngoreWhitespaceInlineOptionTest1);
            QUnit.test("Regex IMNSX - MsdnIngoreWhitespaceInlineOptionTest2", Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests.msdnIngoreWhitespaceInlineOptionTest2);
            QUnit.test("Regex IMNSX - MsdnIngoreWhitespaceInlineOptionTest3", Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests.msdnIngoreWhitespaceInlineOptionTest3);
            QUnit.test("Regex IMNSX - MsdnExplicitCaptureInlineOptionTest1", Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests.msdnExplicitCaptureInlineOptionTest1);
            QUnit.test("Regex IMNSX - MsdnExplicitCaptureInlineOptionTest2", Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests.msdnExplicitCaptureInlineOptionTest2);
            QUnit.test("Regex IMNSX - IgnoreCaseInlineOptionTest1", Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests.ignoreCaseInlineOptionTest1);
            QUnit.test("Regex IMNSX - IgnoreCaseInlineOptionTest2", Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests.ignoreCaseInlineOptionTest2);
            QUnit.test("Regex IMNSX - IgnoreCaseInlineOptionTest3", Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests.ignoreCaseInlineOptionTest3);
            QUnit.test("Regex IMNSX - IgnoreCaseInlineOptionTest4", Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests.ignoreCaseInlineOptionTest4);
            QUnit.test("Regex IMNSX - IgnoreCaseInlineOptionTest5", Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests.ignoreCaseInlineOptionTest5);
            QUnit.test("Regex IMNSX - MultilineInlineOptionTest1", Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests.multilineInlineOptionTest1);
            QUnit.test("Regex IMNSX - MultilineInlineOptionTest2", Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests.multilineInlineOptionTest2);
            QUnit.test("Regex IMNSX - MultilineInlineOptionTest3", Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests.multilineInlineOptionTest3);
            QUnit.test("Regex IMNSX - MultilineInlineOptionTest4", Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests.multilineInlineOptionTest4);
            QUnit.test("Regex IMNSX - MultilineInlineOptionTest5", Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests.multilineInlineOptionTest5);
            QUnit.test("Regex IMNSX - MultilineInlineOptionTest6", Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests.multilineInlineOptionTest6);
            QUnit.test("Regex IMNSX - MultilineInlineOptionTest7", Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests.multilineInlineOptionTest7);
            QUnit.test("Regex IMNSX - SinglelineInlineOptionTest1", Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests.singlelineInlineOptionTest1);
            QUnit.test("Regex IMNSX - SinglelineInlineOptionTest2", Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests.singlelineInlineOptionTest2);
            QUnit.test("Regex IMNSX - SinglelineInlineOptionTest3", Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests.singlelineInlineOptionTest3);
            QUnit.test("Regex IMNSX - IngoreWhitespaceInlineOptionTest1", Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests.ingoreWhitespaceInlineOptionTest1);
            QUnit.test("Regex IMNSX - IngoreWhitespaceInlineOptionTest2", Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests.ingoreWhitespaceInlineOptionTest2);
            QUnit.test("Regex IMNSX - IngoreWhitespaceInlineOptionTest3", Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests.ingoreWhitespaceInlineOptionTest3);
            QUnit.test("Regex IMNSX - IngoreWhitespaceInlineOptionTest4", Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests.ingoreWhitespaceInlineOptionTest4);
            QUnit.test("Regex IMNSX - IngoreWhitespaceInlineOptionTest5", Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests.ingoreWhitespaceInlineOptionTest5);
            QUnit.test("Regex IMNSX - IngoreWhitespaceInlineOptionTest6", Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests.ingoreWhitespaceInlineOptionTest6);
            QUnit.test("Regex IMNSX - IngoreWhitespaceInlineOptionTest7", Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests.ingoreWhitespaceInlineOptionTest7);
            QUnit.test("Regex IMNSX - IngoreWhitespaceInlineOptionTest8", Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests.ingoreWhitespaceInlineOptionTest8);
            QUnit.test("Regex IMNSX - IngoreWhitespaceInlineOptionTest9", Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests.ingoreWhitespaceInlineOptionTest9);
            QUnit.test("Regex IMNSX - InlineCommentTest1", Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests.inlineCommentTest1);
            QUnit.test("Regex IMNSX - ExplicitCaptureInlineOptionTest1", Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests.explicitCaptureInlineOptionTest1);
            QUnit.test("Regex IMNSX - ExplicitCaptureInlineOptionTest2", Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests.explicitCaptureInlineOptionTest2);
            QUnit.test("Regex IMNSX - ExplicitCaptureInlineOptionTest3", Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests.explicitCaptureInlineOptionTest3);
            QUnit.test("Regex IMNSX - ExplicitCaptureInlineOptionTest4", Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests.explicitCaptureInlineOptionTest4);
            QUnit.test("Regex: Lookahead - MsdnPositiveLookaheadTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexLookaheadTests.msdnPositiveLookaheadTest);
            QUnit.test("Regex: Lookahead - MsdnNegativeLookaheadTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexLookaheadTests.msdnNegativeLookaheadTest);
            QUnit.test("Regex: Lookahead - PositiveLookaheadTest1", Bridge.Test.Runtime.BridgeClientTestRunner.RegexLookaheadTests.positiveLookaheadTest1);
            QUnit.test("Regex: Lookahead - PositiveLookaheadTest2", Bridge.Test.Runtime.BridgeClientTestRunner.RegexLookaheadTests.positiveLookaheadTest2);
            QUnit.test("Regex: Lookahead - NegativeLookaheadTest1", Bridge.Test.Runtime.BridgeClientTestRunner.RegexLookaheadTests.negativeLookaheadTest1);
            QUnit.test("Regex: Lookahead - NegativeLookaheadTest2", Bridge.Test.Runtime.BridgeClientTestRunner.RegexLookaheadTests.negativeLookaheadTest2);
            QUnit.test("Regex: Lookahead - PositiveLookaheadWithGroupTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexLookaheadTests.positiveLookaheadWithGroupTest);
            QUnit.test("Regex: Lookahead - NegativeLookaheadWithGroupTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexLookaheadTests.negativeLookaheadWithGroupTest);
            QUnit.test("Regex: Lookahead - PositiveLookaheadWithOffsetTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexLookaheadTests.positiveLookaheadWithOffsetTest);
            QUnit.test("Regex: Lookahead - NegativeLookaheadWithOffsetTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexLookaheadTests.negativeLookaheadWithOffsetTest);
            QUnit.test("Regex: Lookahead - PositiveLookaheadGroupCombineTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexLookaheadTests.positiveLookaheadGroupCombineTest);
            QUnit.test("Regex: Lookbehind - MsdnPositiveLookbehindTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexLookbehindTests.msdnPositiveLookbehindTest);
            QUnit.test("Regex: Lookbehind - MsdnNegativeLookbehindTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexLookbehindTests.msdnNegativeLookbehindTest);
            QUnit.test("Regex: Lookbehind - PositiveLookbehindTest1", Bridge.Test.Runtime.BridgeClientTestRunner.RegexLookbehindTests.positiveLookbehindTest1);
            QUnit.test("Regex: Lookbehind - PositiveLookbehindTest2", Bridge.Test.Runtime.BridgeClientTestRunner.RegexLookbehindTests.positiveLookbehindTest2);
            QUnit.test("Regex: Lookbehind - PositiveLookbehindTest3", Bridge.Test.Runtime.BridgeClientTestRunner.RegexLookbehindTests.positiveLookbehindTest3);
            QUnit.test("Regex: Lookbehind - PositiveLookbehindWithMatchOffsetTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexLookbehindTests.positiveLookbehindWithMatchOffsetTest);
            QUnit.test("Regex: Lookbehind - NegativeLookbehindTest1", Bridge.Test.Runtime.BridgeClientTestRunner.RegexLookbehindTests.negativeLookbehindTest1);
            QUnit.test("Regex: Lookbehind - NegativeLookbehindTest2", Bridge.Test.Runtime.BridgeClientTestRunner.RegexLookbehindTests.negativeLookbehindTest2);
            QUnit.test("Regex: Lookbehind - PositiveLookbehindWithGroupTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexLookbehindTests.positiveLookbehindWithGroupTest);
            QUnit.test("Regex: Lookbehind - NegativeLookbehindWithGroupTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexLookbehindTests.negativeLookbehindWithGroupTest);
            QUnit.test("Regex: Lookbehind - PositiveLookbehindWithOffsetTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexLookbehindTests.positiveLookbehindWithOffsetTest);
            QUnit.test("Regex: Lookbehind - NegativeLookbehindWithOffsetTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexLookbehindTests.negativeLookbehindWithOffsetTest);
            QUnit.test("Regex: Nonbacktracking - MsdnNonBacktrackingTest1", Bridge.Test.Runtime.BridgeClientTestRunner.RegexNonbacktrackingTests.msdnNonBacktrackingTest1);
            QUnit.test("Regex: Nonbacktracking - MsdnNonBacktrackingTest2", Bridge.Test.Runtime.BridgeClientTestRunner.RegexNonbacktrackingTests.msdnNonBacktrackingTest2);
            QUnit.test("Regex: Nonbacktracking - NonBacktrackingTest1", Bridge.Test.Runtime.BridgeClientTestRunner.RegexNonbacktrackingTests.nonBacktrackingTest1);
            QUnit.test("Regex: Nonbacktracking - NonBacktrackingTest2", Bridge.Test.Runtime.BridgeClientTestRunner.RegexNonbacktrackingTests.nonBacktrackingTest2);
            QUnit.test("Regex: Nonbacktracking - NonBacktrackingTest3", Bridge.Test.Runtime.BridgeClientTestRunner.RegexNonbacktrackingTests.nonBacktrackingTest3);
            QUnit.test("Regex: Nonbacktracking - NonBacktrackingTest4", Bridge.Test.Runtime.BridgeClientTestRunner.RegexNonbacktrackingTests.nonBacktrackingTest4);
            QUnit.test("Regex: Nonbacktracking - NonBacktrackingTest5", Bridge.Test.Runtime.BridgeClientTestRunner.RegexNonbacktrackingTests.nonBacktrackingTest5);
            QUnit.test("Regex: Nonbacktracking - NonBacktrackingWithOffsetTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexNonbacktrackingTests.nonBacktrackingWithOffsetTest);
            QUnit.test("RegexOptions - MsdnIgnoreCaseOptionTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexOptionsTests.msdnIgnoreCaseOptionTest);
            QUnit.test("RegexOptions - MsdnMultilineOptionTest1", Bridge.Test.Runtime.BridgeClientTestRunner.RegexOptionsTests.msdnMultilineOptionTest1);
            QUnit.test("RegexOptions - MsdnMultilineOptionTest2", Bridge.Test.Runtime.BridgeClientTestRunner.RegexOptionsTests.msdnMultilineOptionTest2);
            QUnit.test("RegexOptions - MsdnSinglelineOptionTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexOptionsTests.msdnSinglelineOptionTest);
            QUnit.test("RegexOptions - MsdnIgnoreWhitespaceOptionTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexOptionsTests.msdnIgnoreWhitespaceOptionTest);
            QUnit.test("RegexOptions - MsdnExplicitCaptureOptionTest1", Bridge.Test.Runtime.BridgeClientTestRunner.RegexOptionsTests.msdnExplicitCaptureOptionTest1);
            QUnit.test("RegexOptions - MsdnExplicitCaptureOptionTest2", Bridge.Test.Runtime.BridgeClientTestRunner.RegexOptionsTests.msdnExplicitCaptureOptionTest2);
            QUnit.test("RegexOptions - IgnoreCaseOptionTest1", Bridge.Test.Runtime.BridgeClientTestRunner.RegexOptionsTests.ignoreCaseOptionTest1);
            QUnit.test("RegexOptions - IgnoreCaseOptionTest2", Bridge.Test.Runtime.BridgeClientTestRunner.RegexOptionsTests.ignoreCaseOptionTest2);
            QUnit.test("RegexOptions - IgnoreCaseOptionTest3", Bridge.Test.Runtime.BridgeClientTestRunner.RegexOptionsTests.ignoreCaseOptionTest3);
            QUnit.test("RegexOptions - DefaultLineOptionsTest1", Bridge.Test.Runtime.BridgeClientTestRunner.RegexOptionsTests.defaultLineOptionsTest1);
            QUnit.test("RegexOptions - DefaultLineOptionsTest2", Bridge.Test.Runtime.BridgeClientTestRunner.RegexOptionsTests.defaultLineOptionsTest2);
            QUnit.test("RegexOptions - MultilineOptionTest1", Bridge.Test.Runtime.BridgeClientTestRunner.RegexOptionsTests.multilineOptionTest1);
            QUnit.test("RegexOptions - MultilineOptionTest2", Bridge.Test.Runtime.BridgeClientTestRunner.RegexOptionsTests.multilineOptionTest2);
            QUnit.test("RegexOptions - SinglelineOptionTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexOptionsTests.singlelineOptionTest);
            QUnit.test("RegexOptions - SinglelineDotCharTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexOptionsTests.singlelineDotCharTest);
            QUnit.test("RegexOptions - MultilineAndSinglelineOptionsTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexOptionsTests.multilineAndSinglelineOptionsTest);
            QUnit.test("Regex: Quantifiers - MsdnZeroOrMoreTimesTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexQuantifiersTests.msdnZeroOrMoreTimesTest);
            QUnit.test("Regex: Quantifiers - MsdnOneOrMoreTimesTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexQuantifiersTests.msdnOneOrMoreTimesTest);
            QUnit.test("Regex: Quantifiers - MsdnZeroOrOneTimeTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexQuantifiersTests.msdnZeroOrOneTimeTest);
            QUnit.test("Regex: Quantifiers - MsdnNTimesTest1", Bridge.Test.Runtime.BridgeClientTestRunner.RegexQuantifiersTests.msdnNTimesTest1);
            QUnit.test("Regex: Quantifiers - MsdnNTimesTest2", Bridge.Test.Runtime.BridgeClientTestRunner.RegexQuantifiersTests.msdnNTimesTest2);
            QUnit.test("Regex: Quantifiers - MsdnNOrMoreTimesTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexQuantifiersTests.msdnNOrMoreTimesTest);
            QUnit.test("Regex: Quantifiers - MsdnNToMTimesTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexQuantifiersTests.msdnNToMTimesTest);
            QUnit.test("Regex: Quantifiers - MsdnLazyZeroOrMoreTimesTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexQuantifiersTests.msdnLazyZeroOrMoreTimesTest);
            QUnit.test("Regex: Quantifiers - MsdnLazyOneOrMoreTimesTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexQuantifiersTests.msdnLazyOneOrMoreTimesTest);
            QUnit.test("Regex: Quantifiers - MsdnLazyZeroOrOneTimeTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexQuantifiersTests.msdnLazyZeroOrOneTimeTest);
            QUnit.test("Regex: Quantifiers - MsdnLazyNTimesTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexQuantifiersTests.msdnLazyNTimesTest);
            QUnit.test("Regex: Quantifiers - MsdnLazyNOrMoreTimesTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexQuantifiersTests.msdnLazyNOrMoreTimesTest);
            QUnit.test("Regex: Quantifiers - MsdnLazyNToMTimesTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexQuantifiersTests.msdnLazyNToMTimesTest);
            QUnit.test("Regex: Quantifiers - ZeroOrMoreTimesTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexQuantifiersTests.zeroOrMoreTimesTest);
            QUnit.test("Regex: Quantifiers - OneOrMoreTimesTest1", Bridge.Test.Runtime.BridgeClientTestRunner.RegexQuantifiersTests.oneOrMoreTimesTest1);
            QUnit.test("Regex: Quantifiers - OneOrMoreTimesTest2", Bridge.Test.Runtime.BridgeClientTestRunner.RegexQuantifiersTests.oneOrMoreTimesTest2);
            QUnit.test("Regex: Quantifiers - OneOrMoreTimesTest3", Bridge.Test.Runtime.BridgeClientTestRunner.RegexQuantifiersTests.oneOrMoreTimesTest3);
            QUnit.test("Regex: Quantifiers - ZeroOrOneTimeTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexQuantifiersTests.zeroOrOneTimeTest);
            QUnit.test("Regex: Quantifiers - LazyZeroOrMoreTimesTest1", Bridge.Test.Runtime.BridgeClientTestRunner.RegexQuantifiersTests.lazyZeroOrMoreTimesTest1);
            QUnit.test("Regex: Quantifiers - LazyZeroOrMoreTimesTest2", Bridge.Test.Runtime.BridgeClientTestRunner.RegexQuantifiersTests.lazyZeroOrMoreTimesTest2);
            QUnit.test("Regex: Quantifiers - LazyOneOrMoreTimesTest1", Bridge.Test.Runtime.BridgeClientTestRunner.RegexQuantifiersTests.lazyOneOrMoreTimesTest1);
            QUnit.test("Regex: Quantifiers - LazyOneOrMoreTimesTest2", Bridge.Test.Runtime.BridgeClientTestRunner.RegexQuantifiersTests.lazyOneOrMoreTimesTest2);
            QUnit.test("Regex: Quantifiers - LazyZeroOrOneTimeTest1", Bridge.Test.Runtime.BridgeClientTestRunner.RegexQuantifiersTests.lazyZeroOrOneTimeTest1);
            QUnit.test("Regex: Quantifiers - LazyZeroOrOneTimeTest2", Bridge.Test.Runtime.BridgeClientTestRunner.RegexQuantifiersTests.lazyZeroOrOneTimeTest2);
            QUnit.test("Regex Timeouts - RegexTimeoutValidationWorks", Bridge.Test.Runtime.BridgeClientTestRunner.RegexTimeoutTests.regexTimeoutValidationWorks);
            QUnit.test("Regex Timeouts - RegexIsMatchWorksWithShortTimeout", Bridge.Test.Runtime.BridgeClientTestRunner.RegexTimeoutTests.regexIsMatchWorksWithShortTimeout);
            QUnit.test("Regex Timeouts - RegexIsMatchWorksWithLongTimeout", Bridge.Test.Runtime.BridgeClientTestRunner.RegexTimeoutTests.regexIsMatchWorksWithLongTimeout);
            QUnit.test("Regex Timeouts - RegexMatchWorksWithShortTimeout", Bridge.Test.Runtime.BridgeClientTestRunner.RegexTimeoutTests.regexMatchWorksWithShortTimeout);
            QUnit.test("Regex Timeouts - RegexMatchWorksWithLongTimeout", Bridge.Test.Runtime.BridgeClientTestRunner.RegexTimeoutTests.regexMatchWorksWithLongTimeout);
            QUnit.test("Regex Timeouts - RegexNextMatchWorksWithShortTimeout", Bridge.Test.Runtime.BridgeClientTestRunner.RegexTimeoutTests.regexNextMatchWorksWithShortTimeout);
            QUnit.test("Regex Timeouts - RegexNextMatchWorksWithLongTimeout", Bridge.Test.Runtime.BridgeClientTestRunner.RegexTimeoutTests.regexNextMatchWorksWithLongTimeout);
            QUnit.test("Regex Timeouts - RegexReplaceWorksWithShortTimeout", Bridge.Test.Runtime.BridgeClientTestRunner.RegexTimeoutTests.regexReplaceWorksWithShortTimeout);
            QUnit.test("Regex Timeouts - RegexReplaceWorksWithLongTimeout", Bridge.Test.Runtime.BridgeClientTestRunner.RegexTimeoutTests.regexReplaceWorksWithLongTimeout);
            QUnit.test("Regex Timeouts - RegexReplaceEvaluatorWorksWithShortTimeout", Bridge.Test.Runtime.BridgeClientTestRunner.RegexTimeoutTests.regexReplaceEvaluatorWorksWithShortTimeout);
            QUnit.test("Regex Timeouts - RegexReplaceEvaluatorWorksWithLongTimeout", Bridge.Test.Runtime.BridgeClientTestRunner.RegexTimeoutTests.regexReplaceEvaluatorWorksWithLongTimeout);
            QUnit.test("Regex Timeouts - RegexSplitWorksWithShortTimeout", Bridge.Test.Runtime.BridgeClientTestRunner.RegexTimeoutTests.regexSplitWorksWithShortTimeout);
            QUnit.test("Regex Timeouts - RegexSplitWorksWithLongTimeout", Bridge.Test.Runtime.BridgeClientTestRunner.RegexTimeoutTests.regexSplitWorksWithLongTimeout);
            QUnit.module("RegexJS");
            QUnit.test("TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestRunner.BridgeRegexTests.typePropertiesAreCorrect);
            QUnit.test("StringOnlyConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.BridgeRegexTests.stringOnlyConstructorWorks);
            QUnit.test("ConstructorWithFlagsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.BridgeRegexTests.constructorWithFlagsWorks);
            QUnit.test("GlobalFlagWorks", Bridge.Test.Runtime.BridgeClientTestRunner.BridgeRegexTests.globalFlagWorks);
            QUnit.test("IgnoreCaseFlagWorks", Bridge.Test.Runtime.BridgeClientTestRunner.BridgeRegexTests.ignoreCaseFlagWorks);
            QUnit.test("MultilineFlagWorks", Bridge.Test.Runtime.BridgeClientTestRunner.BridgeRegexTests.multilineFlagWorks);
            QUnit.test("PatternPropertyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.BridgeRegexTests.patternPropertyWorks);
            QUnit.test("SourcePropertyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.BridgeRegexTests.sourcePropertyWorks);
            QUnit.test("ExecWorks", Bridge.Test.Runtime.BridgeClientTestRunner.BridgeRegexTests.execWorks);
            QUnit.test("LastIndexWorks", Bridge.Test.Runtime.BridgeClientTestRunner.BridgeRegexTests.lastIndexWorks);
            QUnit.test("TestWorks", Bridge.Test.Runtime.BridgeClientTestRunner.BridgeRegexTests.testWorks);
            QUnit.module("Serialization");
            QUnit.test("ByteArrayWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DeserializationTests.byteArrayWorks);
            QUnit.test("GuidWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DeserializationTests.guidWorks);
            QUnit.test("TypeWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DeserializationTests.typeWorks);
            QUnit.test("CharWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DeserializationTests.charWorks);
            QUnit.test("Int64Works", Bridge.Test.Runtime.BridgeClientTestRunner.DeserializationTests.int64Works);
            QUnit.test("UInt64Works", Bridge.Test.Runtime.BridgeClientTestRunner.DeserializationTests.uInt64Works);
            QUnit.test("DecimalWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DeserializationTests.decimalWorks);
            QUnit.test("DateTimeWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DeserializationTests.dateTimeWorks);
            QUnit.test("ArrayWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DeserializationTests.arrayWorks);
            QUnit.test("ComplexArrayWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DeserializationTests.complexArrayWorks);
            QUnit.test("EnumWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DeserializationTests.enumWorks);
            QUnit.test("IListWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DeserializationTests.iListWorks);
            QUnit.test("IDictionaryWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DeserializationTests.iDictionaryWorks);
            QUnit.test("TypeWithFieldWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DeserializationTests.typeWithFieldWorks);
            QUnit.test("ComplexPropertiesWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DeserializationTests.complexPropertiesWorks);
            QUnit.test("CamelCaseSettingWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DeserializationTests.camelCaseSettingWorks);
            QUnit.test("IgnoreNullValueWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DeserializationTests.ignoreNullValueWorks);
            QUnit.test("AnonymousTypesWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DeserializationTests.anonymousTypesWorks);
            QUnit.test("TypeNameHandlingWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DeserializationTests.typeNameHandlingWorks);
            QUnit.test("NonGenericParseWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsonTests.nonGenericParseWorks);
            QUnit.test("GenericParseWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsonTests.genericParseWorks);
            QUnit.test("NonGenericParseWithCallbackWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsonTests.nonGenericParseWithCallbackWorks);
            QUnit.test("GenericParseWithCallbackWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsonTests.genericParseWithCallbackWorks);
            QUnit.test("NonGenericParseWorks3", Bridge.Test.Runtime.BridgeClientTestRunner.JsonTests.nonGenericParseWorks3);
            QUnit.test("GenericParseWorks3", Bridge.Test.Runtime.BridgeClientTestRunner.JsonTests.genericParseWorks3);
            QUnit.test("NonGenericParseWithCallbackWorks3", Bridge.Test.Runtime.BridgeClientTestRunner.JsonTests.nonGenericParseWithCallbackWorks3);
            QUnit.test("GenericParseWithCallbackWorks3", Bridge.Test.Runtime.BridgeClientTestRunner.JsonTests.genericParseWithCallbackWorks3);
            QUnit.test("NonGenericParseWorks4", Bridge.Test.Runtime.BridgeClientTestRunner.JsonTests.nonGenericParseWorks4);
            QUnit.test("GenericParseWorks4", Bridge.Test.Runtime.BridgeClientTestRunner.JsonTests.genericParseWorks4);
            QUnit.test("NonGenericParseWithCallbackWorks4", Bridge.Test.Runtime.BridgeClientTestRunner.JsonTests.nonGenericParseWithCallbackWorks4);
            QUnit.test("GenericParseWithCallbackWorks4", Bridge.Test.Runtime.BridgeClientTestRunner.JsonTests.genericParseWithCallbackWorks4);
            QUnit.test("StringifyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsonTests.stringifyWorks);
            QUnit.test("StringifyWithSerializableMembersArrayWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsonTests.stringifyWithSerializableMembersArrayWorks);
            QUnit.test("StringifyWithSerializableMembersArrayAndIntentCountWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsonTests.stringifyWithSerializableMembersArrayAndIntentCountWorks);
            QUnit.test("StringifyWithSerializableMembersArrayAndIntentTextWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsonTests.stringifyWithSerializableMembersArrayAndIntentTextWorks);
            QUnit.test("StringifyWithCallbackWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsonTests.stringifyWithCallbackWorks);
            QUnit.test("StringifyWithCallbackAndIndentCountWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsonTests.stringifyWithCallbackAndIndentCountWorks);
            QUnit.test("StringifyWithCallbackAndIndentTextWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsonTests.stringifyWithCallbackAndIndentTextWorks);
            QUnit.test("StringifyWithSerializableMembersArrayWorks3", Bridge.Test.Runtime.BridgeClientTestRunner.JsonTests.stringifyWithSerializableMembersArrayWorks3);
            QUnit.test("StringifyWithSerializableMembersArrayAndIntentCountWorks3", Bridge.Test.Runtime.BridgeClientTestRunner.JsonTests.stringifyWithSerializableMembersArrayAndIntentCountWorks3);
            QUnit.test("StringifyWithSerializableMembersArrayAndIntentTextWorks3", Bridge.Test.Runtime.BridgeClientTestRunner.JsonTests.stringifyWithSerializableMembersArrayAndIntentTextWorks3);
            QUnit.test("StringifyWithCallbackWorks3", Bridge.Test.Runtime.BridgeClientTestRunner.JsonTests.stringifyWithCallbackWorks3);
            QUnit.test("StringifyWithCallbackAndIndentCountWorks3", Bridge.Test.Runtime.BridgeClientTestRunner.JsonTests.stringifyWithCallbackAndIndentCountWorks3);
            QUnit.test("StringifyWithCallbackAndIndentTextWorks3", Bridge.Test.Runtime.BridgeClientTestRunner.JsonTests.stringifyWithCallbackAndIndentTextWorks3);
            QUnit.test("StringifyWithSerializableMembersArrayWorks4", Bridge.Test.Runtime.BridgeClientTestRunner.JsonTests.stringifyWithSerializableMembersArrayWorks4);
            QUnit.test("StringifyWithSerializableMembersArrayAndIntentCountWorks4", Bridge.Test.Runtime.BridgeClientTestRunner.JsonTests.stringifyWithSerializableMembersArrayAndIntentCountWorks4);
            QUnit.test("StringifyWithSerializableMembersArrayAndIntentTextWorks4", Bridge.Test.Runtime.BridgeClientTestRunner.JsonTests.stringifyWithSerializableMembersArrayAndIntentTextWorks4);
            QUnit.test("StringifyWithCallbackWorks4", Bridge.Test.Runtime.BridgeClientTestRunner.JsonTests.stringifyWithCallbackWorks4);
            QUnit.test("StringifyWithCallbackAndIndentCountWorks4", Bridge.Test.Runtime.BridgeClientTestRunner.JsonTests.stringifyWithCallbackAndIndentCountWorks4);
            QUnit.test("StringifyWithCallbackAndIndentTextWorks4", Bridge.Test.Runtime.BridgeClientTestRunner.JsonTests.stringifyWithCallbackAndIndentTextWorks4);
            QUnit.test("ByteArrayWorks", Bridge.Test.Runtime.BridgeClientTestRunner.SerializationTests.byteArrayWorks);
            QUnit.test("GuidWorks", Bridge.Test.Runtime.BridgeClientTestRunner.SerializationTests.guidWorks);
            QUnit.test("TypeWorks", Bridge.Test.Runtime.BridgeClientTestRunner.SerializationTests.typeWorks);
            QUnit.test("CharWorks", Bridge.Test.Runtime.BridgeClientTestRunner.SerializationTests.charWorks);
            QUnit.test("Int64Works", Bridge.Test.Runtime.BridgeClientTestRunner.SerializationTests.int64Works);
            QUnit.test("UInt64Works", Bridge.Test.Runtime.BridgeClientTestRunner.SerializationTests.uInt64Works);
            QUnit.test("DecimalWorks", Bridge.Test.Runtime.BridgeClientTestRunner.SerializationTests.decimalWorks);
            QUnit.test("DateTimeWorks", Bridge.Test.Runtime.BridgeClientTestRunner.SerializationTests.dateTimeWorks);
            QUnit.test("ArrayWorks", Bridge.Test.Runtime.BridgeClientTestRunner.SerializationTests.arrayWorks);
            QUnit.test("EnumWorks", Bridge.Test.Runtime.BridgeClientTestRunner.SerializationTests.enumWorks);
            QUnit.test("IListWorks", Bridge.Test.Runtime.BridgeClientTestRunner.SerializationTests.iListWorks);
            QUnit.test("IDictionaryWorks", Bridge.Test.Runtime.BridgeClientTestRunner.SerializationTests.iDictionaryWorks);
            QUnit.test("TypeWithFieldWorks", Bridge.Test.Runtime.BridgeClientTestRunner.SerializationTests.typeWithFieldWorks);
            QUnit.test("ComplexPropertiesWorks", Bridge.Test.Runtime.BridgeClientTestRunner.SerializationTests.complexPropertiesWorks);
            QUnit.test("CamelCaseSettingWorks", Bridge.Test.Runtime.BridgeClientTestRunner.SerializationTests.camelCaseSettingWorks);
            QUnit.test("IgnoreNullValueWorks", Bridge.Test.Runtime.BridgeClientTestRunner.SerializationTests.ignoreNullValueWorks);
            QUnit.test("TypeNameHandlingWorks", Bridge.Test.Runtime.BridgeClientTestRunner.SerializationTests.typeNameHandlingWorks);
            QUnit.test("AnonymousTypesWorks", Bridge.Test.Runtime.BridgeClientTestRunner.SerializationTests.anonymousTypesWorks);
            QUnit.module("Simple types");
            QUnit.test("Boolean - TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestRunner.BooleanTests.typePropertiesAreCorrect);
            QUnit.test("Boolean - DefaultValueIsFalse", Bridge.Test.Runtime.BridgeClientTestRunner.BooleanTests.defaultValueIsFalse);
            QUnit.test("Boolean - CreatingInstanceReturnsFalse", Bridge.Test.Runtime.BridgeClientTestRunner.BooleanTests.creatingInstanceReturnsFalse);
            QUnit.test("Boolean - DefaultConstructorReturnsFalse", Bridge.Test.Runtime.BridgeClientTestRunner.BooleanTests.defaultConstructorReturnsFalse);
            QUnit.test("Boolean - GetHashCodeWorks", Bridge.Test.Runtime.BridgeClientTestRunner.BooleanTests.getHashCodeWorks);
            QUnit.test("Boolean - ObjectEqualsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.BooleanTests.objectEqualsWorks);
            QUnit.test("Boolean - BoolEqualsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.BooleanTests.boolEqualsWorks);
            QUnit.test("Boolean - LogicalExclusiveOrWorks", Bridge.Test.Runtime.BridgeClientTestRunner.BooleanTests.logicalExclusiveOrWorks);
            QUnit.test("Boolean - LogicalAndWorks", Bridge.Test.Runtime.BridgeClientTestRunner.BooleanTests.logicalAndWorks);
            QUnit.test("Boolean - LogicalNegationWorks", Bridge.Test.Runtime.BridgeClientTestRunner.BooleanTests.logicalNegationWorks);
            QUnit.test("Boolean - ConditionalOperatorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.BooleanTests.conditionalOperatorWorks);
            QUnit.test("Boolean - ConditionalAndWorks", Bridge.Test.Runtime.BridgeClientTestRunner.BooleanTests.conditionalAndWorks);
            QUnit.test("Boolean - ConditionalOrWorks", Bridge.Test.Runtime.BridgeClientTestRunner.BooleanTests.conditionalOrWorks);
            QUnit.test("Boolean - EqualityWorks", Bridge.Test.Runtime.BridgeClientTestRunner.BooleanTests.equalityWorks);
            QUnit.test("Boolean - InequalityWorks", Bridge.Test.Runtime.BridgeClientTestRunner.BooleanTests.inequalityWorks);
            QUnit.test("Boolean - CompareToWorks", Bridge.Test.Runtime.BridgeClientTestRunner.BooleanTests.compareToWorks);
            QUnit.test("Boolean - IComparableCompareToWorks", Bridge.Test.Runtime.BridgeClientTestRunner.BooleanTests.iComparableCompareToWorks);
            QUnit.test("Boolean - ParseWorks", Bridge.Test.Runtime.BridgeClientTestRunner.BooleanTests.parseWorks);
            QUnit.test("Boolean - TryParseWorks", Bridge.Test.Runtime.BridgeClientTestRunner.BooleanTests.tryParseWorks);
            QUnit.test("Boolean - BoolStringWorks", Bridge.Test.Runtime.BridgeClientTestRunner.BooleanTests.boolStringWorks);
            QUnit.test("Byte - TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestRunner.ByteTests.typePropertiesAreCorrect);
            QUnit.test("Byte - CastsWork", Bridge.Test.Runtime.BridgeClientTestRunner.ByteTests.castsWork);
            QUnit.test("Byte - DefaultValueIs0", Bridge.Test.Runtime.BridgeClientTestRunner.ByteTests.defaultValueIs0);
            QUnit.test("Byte - DefaultConstructorReturnsZero", Bridge.Test.Runtime.BridgeClientTestRunner.ByteTests.defaultConstructorReturnsZero);
            QUnit.test("Byte - CreatingInstanceReturnsZero", Bridge.Test.Runtime.BridgeClientTestRunner.ByteTests.creatingInstanceReturnsZero);
            QUnit.test("Byte - ConstantsWork", Bridge.Test.Runtime.BridgeClientTestRunner.ByteTests.constantsWork);
            QUnit.test("Byte - FormatWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ByteTests.formatWorks);
            QUnit.test("Byte - IFormattableToStringWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ByteTests.iFormattableToStringWorks);
            QUnit.test("Byte - TryParseWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ByteTests.tryParseWorks);
            QUnit.test("Byte - ParseWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ByteTests.parseWorks);
            QUnit.test("Byte - ToStringWithoutRadixWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ByteTests.toStringWithoutRadixWorks);
            QUnit.test("Byte - ToStringWithRadixWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ByteTests.toStringWithRadixWorks);
            QUnit.test("Byte - GetHashCodeWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ByteTests.getHashCodeWorks);
            QUnit.test("Byte - EqualsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ByteTests.equalsWorks);
            QUnit.test("Byte - IEquatableEqualsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ByteTests.iEquatableEqualsWorks);
            QUnit.test("Byte - CompareToWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ByteTests.compareToWorks);
            QUnit.test("Byte - IComparableCompareToWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ByteTests.iComparableCompareToWorks);
            QUnit.test("Char - TypePropertiesAreInt32", Bridge.Test.Runtime.BridgeClientTestRunner.CharTests.typePropertiesAreInt32);
            QUnit.test("Char - CastsWork", Bridge.Test.Runtime.BridgeClientTestRunner.CharTests.castsWork);
            QUnit.test("Char - DefaultValueWorks", Bridge.Test.Runtime.BridgeClientTestRunner.CharTests.defaultValueWorks);
            QUnit.test("Char - DefaultConstructorReturnsZero", Bridge.Test.Runtime.BridgeClientTestRunner.CharTests.defaultConstructorReturnsZero);
            QUnit.test("Char - CreatingInstanceReturnsZero", Bridge.Test.Runtime.BridgeClientTestRunner.CharTests.creatingInstanceReturnsZero);
            QUnit.test("Char - ConstantsWork", Bridge.Test.Runtime.BridgeClientTestRunner.CharTests.constantsWork);
            QUnit.test("Char - CharComparisonWorks", Bridge.Test.Runtime.BridgeClientTestRunner.CharTests.charComparisonWorks);
            QUnit.test("Char - ParseWorks", Bridge.Test.Runtime.BridgeClientTestRunner.CharTests.parseWorks);
            QUnit.test("Char - FormatWorks", Bridge.Test.Runtime.BridgeClientTestRunner.CharTests.formatWorks);
            QUnit.test("Char - IFormattableToStringWorks", Bridge.Test.Runtime.BridgeClientTestRunner.CharTests.iFormattableToStringWorks);
            QUnit.test("Char - ToStringWorks", Bridge.Test.Runtime.BridgeClientTestRunner.CharTests.toStringWorks);
            QUnit.test("Char - GetHashCodeWorks", Bridge.Test.Runtime.BridgeClientTestRunner.CharTests.getHashCodeWorks);
            QUnit.test("Char - EqualsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.CharTests.equalsWorks);
            QUnit.test("Char - IEquatableEqualsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.CharTests.iEquatableEqualsWorks);
            QUnit.test("Char - CompareToWorks", Bridge.Test.Runtime.BridgeClientTestRunner.CharTests.compareToWorks);
            QUnit.test("Char - IsLowerWorks", Bridge.Test.Runtime.BridgeClientTestRunner.CharTests.isLowerWorks);
            QUnit.test("Char - IsUpperWorks", Bridge.Test.Runtime.BridgeClientTestRunner.CharTests.isUpperWorks);
            QUnit.test("Char - ToLowerWorks", Bridge.Test.Runtime.BridgeClientTestRunner.CharTests.toLowerWorks);
            QUnit.test("Char - ToUpperWorks", Bridge.Test.Runtime.BridgeClientTestRunner.CharTests.toUpperWorks);
            QUnit.test("Char - IsDigitWorks", Bridge.Test.Runtime.BridgeClientTestRunner.CharTests.isDigitWorks);
            QUnit.test("Char - IsWhiteSpaceWorks", Bridge.Test.Runtime.BridgeClientTestRunner.CharTests.isWhiteSpaceWorks);
            QUnit.test("Char - IsDigitWithStringAndIndexWorks", Bridge.Test.Runtime.BridgeClientTestRunner.CharTests.isDigitWithStringAndIndexWorks);
            QUnit.test("Char - IsWhiteSpaceWithStringAndIndexWorks", Bridge.Test.Runtime.BridgeClientTestRunner.CharTests.isWhiteSpaceWithStringAndIndexWorks);
            QUnit.test("Decimal - TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests.typePropertiesAreCorrect);
            QUnit.test("Decimal - DefaultValueIs0", Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests.defaultValueIs0);
            QUnit.test("Decimal - CreatingInstanceReturnsZero", Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests.creatingInstanceReturnsZero);
            QUnit.test("Decimal - ConstantsWork", Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests.constantsWork);
            QUnit.test("Decimal - DefaultConstructorReturnsZero", Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests.defaultConstructorReturnsZero);
            QUnit.test("Decimal - ConvertingConstructorsWork", Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests.convertingConstructorsWork);
            QUnit.test("Decimal - FormatWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests.formatWorks);
            QUnit.test("Decimal - IFormattableToStringWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests.iFormattableToStringWorks);
            QUnit.test("Decimal - ToStringWithoutRadixWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests.toStringWithoutRadixWorks);
            QUnit.test("Decimal - AddWithStringWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests.addWithStringWorks);
            QUnit.test("Decimal - ConversionsToDecimalWork", Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests.conversionsToDecimalWork);
            QUnit.test("Decimal - ConversionsFromDecimalWork", Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests.conversionsFromDecimalWork);
            QUnit.test("Decimal - OperatorsWork", Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests.operatorsWork);
            QUnit.test("Decimal - AddWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests.addWorks);
            QUnit.test("Decimal - CeilingWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests.ceilingWorks);
            QUnit.test("Decimal - DivideWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests.divideWorks);
            QUnit.test("Decimal - FloorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests.floorWorks);
            QUnit.test("Decimal - RemainderWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests.remainderWorks);
            QUnit.test("Decimal - MultiplyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests.multiplyWorks);
            QUnit.test("Decimal - NegateWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests.negateWorks);
            QUnit.test("Decimal - RoundWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests.roundWorks);
            QUnit.test("Decimal - RoundWithModeWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests.roundWithModeWorks);
            QUnit.test("Decimal - SubtractWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests.subtractWorks);
            QUnit.test("Decimal - GetHashCodeWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests.getHashCodeWorks);
            QUnit.test("Decimal - ObjectEqualsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests.objectEqualsWorks);
            QUnit.test("Decimal - DecimalEqualsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests.decimalEqualsWorks);
            QUnit.test("Decimal - CompareToWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests.compareToWorks);
            QUnit.test("Decimal - IComparableCompareToWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests.iComparableCompareToWorks);
            QUnit.test("Decimal - FullCoalesceWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests.fullCoalesceWorks);
            QUnit.test("Decimal - ShortCoalesceWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests.shortCoalesceWorks);
            QUnit.test("Double - TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestRunner.DoubleTests.typePropertiesAreCorrect);
            QUnit.test("Double - DefaultValueIs0", Bridge.Test.Runtime.BridgeClientTestRunner.DoubleTests.defaultValueIs0);
            QUnit.test("Double - CreatingInstanceReturnsZero", Bridge.Test.Runtime.BridgeClientTestRunner.DoubleTests.creatingInstanceReturnsZero);
            QUnit.test("Double - ConstantsWork", Bridge.Test.Runtime.BridgeClientTestRunner.DoubleTests.constantsWork);
            QUnit.test("Double - DefaultConstructorReturnsZero", Bridge.Test.Runtime.BridgeClientTestRunner.DoubleTests.defaultConstructorReturnsZero);
            QUnit.test("Double - FormatWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DoubleTests.formatWorks);
            QUnit.test("Double - IFormattableToStringWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DoubleTests.iFormattableToStringWorks);
            QUnit.test("Double - ToStringWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DoubleTests.toStringWorks);
            QUnit.test("Double - ToExponentialWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DoubleTests.toExponentialWorks);
            QUnit.test("Double - ToExponentialWithFractionalDigitsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DoubleTests.toExponentialWithFractionalDigitsWorks);
            QUnit.test("Double - ToFixed", Bridge.Test.Runtime.BridgeClientTestRunner.DoubleTests.toFixed);
            QUnit.test("Double - ToFixedWithFractionalDigitsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DoubleTests.toFixedWithFractionalDigitsWorks);
            QUnit.test("Double - ToPrecisionWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DoubleTests.toPrecisionWorks);
            QUnit.test("Double - ToPrecisionWithPrecisionWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DoubleTests.toPrecisionWithPrecisionWorks);
            QUnit.test("Double - IsPositiveInfinityWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DoubleTests.isPositiveInfinityWorks);
            QUnit.test("Double - IsNegativeInfinityWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DoubleTests.isNegativeInfinityWorks);
            QUnit.test("Double - IsInfinityWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DoubleTests.isInfinityWorks);
            QUnit.test("Double - IsFiniteWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DoubleTests.isFiniteWorks);
            QUnit.test("Double - IsNaNWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DoubleTests.isNaNWorks);
            QUnit.test("Double - GetHashCodeWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DoubleTests.getHashCodeWorks);
            QUnit.test("Double - ObjectEqualsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DoubleTests.objectEqualsWorks);
            QUnit.test("Double - DoubleEqualsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DoubleTests.doubleEqualsWorks);
            QUnit.test("Double - CompareToWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DoubleTests.compareToWorks);
            QUnit.test("Double - IComparableCompareToWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DoubleTests.iComparableCompareToWorks);
            QUnit.test("Double - ParseCurrentCultureWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DoubleTests.parseCurrentCultureWorks);
            QUnit.test("Double - ParseCurrentCultureThrows", Bridge.Test.Runtime.BridgeClientTestRunner.DoubleTests.parseCurrentCultureThrows);
            QUnit.test("Double - ParseRuCultureWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DoubleTests.parseRuCultureWorks);
            QUnit.test("Double - ParseRuCultureThrows", Bridge.Test.Runtime.BridgeClientTestRunner.DoubleTests.parseRuCultureThrows);
            QUnit.test("Double - TryParseCurrentCultureWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DoubleTests.tryParseCurrentCultureWorks);
            QUnit.test("Double - TryParseRuCultureWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DoubleTests.tryParseRuCultureWorks);
            QUnit.test("Int16 - TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestRunner.Int16Tests.typePropertiesAreCorrect);
            QUnit.test("Int16 - CastsWork", Bridge.Test.Runtime.BridgeClientTestRunner.Int16Tests.castsWork);
            QUnit.test("Int16 - DefaultValueIs0", Bridge.Test.Runtime.BridgeClientTestRunner.Int16Tests.defaultValueIs0);
            QUnit.test("Int16 - DefaultConstructorReturnsZero", Bridge.Test.Runtime.BridgeClientTestRunner.Int16Tests.defaultConstructorReturnsZero);
            QUnit.test("Int16 - CreatingInstanceReturnsZero", Bridge.Test.Runtime.BridgeClientTestRunner.Int16Tests.creatingInstanceReturnsZero);
            QUnit.test("Int16 - ConstantsWork", Bridge.Test.Runtime.BridgeClientTestRunner.Int16Tests.constantsWork);
            QUnit.test("Int16 - FormatWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int16Tests.formatWorks);
            QUnit.test("Int16 - IFormattableToStringWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int16Tests.iFormattableToStringWorks);
            QUnit.test("Int16 - TryParseWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int16Tests.tryParseWorks);
            QUnit.test("Int16 - ParseWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int16Tests.parseWorks);
            QUnit.test("Int16 - ToStringWithoutRadixWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int16Tests.toStringWithoutRadixWorks);
            QUnit.test("Int16 - ToStringWithRadixWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int16Tests.toStringWithRadixWorks);
            QUnit.test("Int16 - GetHashCodeWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int16Tests.getHashCodeWorks);
            QUnit.test("Int16 - EqualsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int16Tests.equalsWorks);
            QUnit.test("Int16 - IEquatableEqualsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int16Tests.iEquatableEqualsWorks);
            QUnit.test("Int16 - CompareToWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int16Tests.compareToWorks);
            QUnit.test("Int16 - IComparableCompareToWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int16Tests.iComparableCompareToWorks);
            QUnit.test("Int32 - TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestRunner.Int32Tests.typePropertiesAreCorrect);
            QUnit.test("Int32 - CastsWork", Bridge.Test.Runtime.BridgeClientTestRunner.Int32Tests.castsWork);
            QUnit.test("Int32 - TypeIsWorksForInt32", Bridge.Test.Runtime.BridgeClientTestRunner.Int32Tests.typeIsWorksForInt32);
            QUnit.test("Int32 - TypeAsWorksForInt32", Bridge.Test.Runtime.BridgeClientTestRunner.Int32Tests.typeAsWorksForInt32);
            QUnit.test("Int32 - UnboxingWorksForInt32", Bridge.Test.Runtime.BridgeClientTestRunner.Int32Tests.unboxingWorksForInt32);
            QUnit.test("Int32 - DefaultValueIs0", Bridge.Test.Runtime.BridgeClientTestRunner.Int32Tests.defaultValueIs0);
            QUnit.test("Int32 - DefaultConstructorReturnsZero", Bridge.Test.Runtime.BridgeClientTestRunner.Int32Tests.defaultConstructorReturnsZero);
            QUnit.test("Int32 - CreatingInstanceReturnsZero", Bridge.Test.Runtime.BridgeClientTestRunner.Int32Tests.creatingInstanceReturnsZero);
            QUnit.test("Int32 - ConstantsWork", Bridge.Test.Runtime.BridgeClientTestRunner.Int32Tests.constantsWork);
            QUnit.test("Int32 - FormatWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int32Tests.formatWorks);
            QUnit.test("Int32 - IFormattableToStringWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int32Tests.iFormattableToStringWorks);
            QUnit.test("Int32 - TryParseWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int32Tests.tryParseWorks);
            QUnit.test("Int32 - ParseWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int32Tests.parseWorks);
            QUnit.test("Int32 - ToStringWithoutRadixWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int32Tests.toStringWithoutRadixWorks);
            QUnit.test("Int32 - ToStringWithRadixWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int32Tests.toStringWithRadixWorks);
            QUnit.test("Int32 - GetHashCodeWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int32Tests.getHashCodeWorks);
            QUnit.test("Int32 - EqualsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int32Tests.equalsWorks);
            QUnit.test("Int32 - IEquatableEqualsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int32Tests.iEquatableEqualsWorks);
            QUnit.test("Int32 - CompareToWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int32Tests.compareToWorks);
            QUnit.test("Int32 - IComparableCompareToWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int32Tests.iComparableCompareToWorks);
            QUnit.test("Int32 - IntegerDivisionWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int32Tests.integerDivisionWorks);
            QUnit.test("Int32 - IntegerModuloWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int32Tests.integerModuloWorks);
            QUnit.test("Int32 - IntegerDivisionByZeroThrowsDivideByZeroException", Bridge.Test.Runtime.BridgeClientTestRunner.Int32Tests.integerDivisionByZeroThrowsDivideByZeroException);
            QUnit.test("Int32 - DoublesAreTruncatedWhenConvertedToIntegers", Bridge.Test.Runtime.BridgeClientTestRunner.Int32Tests.doublesAreTruncatedWhenConvertedToIntegers);
            QUnit.test("Int64 - TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestRunner.Int64Tests.typePropertiesAreCorrect);
            QUnit.test("Int64 - MinMaxValuesAreCorrect", Bridge.Test.Runtime.BridgeClientTestRunner.Int64Tests.minMaxValuesAreCorrect);
            QUnit.test("Int64 - CastsWork", Bridge.Test.Runtime.BridgeClientTestRunner.Int64Tests.castsWork);
            QUnit.test("Int64 - OverflowWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int64Tests.overflowWorks);
            QUnit.test("Int64 - CombinedTypesOperationsWork", Bridge.Test.Runtime.BridgeClientTestRunner.Int64Tests.combinedTypesOperationsWork);
            QUnit.test("Int64 - DefaultValueIs0", Bridge.Test.Runtime.BridgeClientTestRunner.Int64Tests.defaultValueIs0);
            QUnit.test("Int64 - DefaultConstructorReturnsZero", Bridge.Test.Runtime.BridgeClientTestRunner.Int64Tests.defaultConstructorReturnsZero);
            QUnit.test("Int64 - CreatingInstanceReturnsZero", Bridge.Test.Runtime.BridgeClientTestRunner.Int64Tests.creatingInstanceReturnsZero);
            QUnit.test("Int64 - FormatWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int64Tests.formatWorks);
            QUnit.test("Int64 - IFormattableToStringWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int64Tests.iFormattableToStringWorks);
            QUnit.test("Int64 - TryParseWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int64Tests.tryParseWorks);
            QUnit.test("Int64 - ParseWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int64Tests.parseWorks);
            QUnit.test("Int64 - CastingOfLargeDoublesToInt64Works", Bridge.Test.Runtime.BridgeClientTestRunner.Int64Tests.castingOfLargeDoublesToInt64Works);
            QUnit.test("Int64 - DivisionOfLargeInt64Works", Bridge.Test.Runtime.BridgeClientTestRunner.Int64Tests.divisionOfLargeInt64Works);
            QUnit.test("Int64 - ToStringWithoutRadixWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int64Tests.toStringWithoutRadixWorks);
            QUnit.test("Int64 - ToStringWithRadixWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int64Tests.toStringWithRadixWorks);
            QUnit.test("Int64 - GetHashCodeWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int64Tests.getHashCodeWorks);
            QUnit.test("Int64 - EqualsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int64Tests.equalsWorks);
            QUnit.test("Int64 - IEquatableEqualsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int64Tests.iEquatableEqualsWorks);
            QUnit.test("Int64 - CompareToWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int64Tests.compareToWorks);
            QUnit.test("Int64 - IComparableCompareToWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int64Tests.iComparableCompareToWorks);
            QUnit.test("Int64 - ShiftWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int64Tests.shiftWorks);
            QUnit.test("Object - TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestRunner.ObjectTests.typePropertiesAreCorrect);
            QUnit.test("Object - CanGetHashCodeForObject", Bridge.Test.Runtime.BridgeClientTestRunner.ObjectTests.canGetHashCodeForObject);
            QUnit.test("Object - RepeatedCallsToGetHashCodeReturnsSameValue", Bridge.Test.Runtime.BridgeClientTestRunner.ObjectTests.repeatedCallsToGetHashCodeReturnsSameValue);
            QUnit.test("Object - ObjectIsEqualToItself", Bridge.Test.Runtime.BridgeClientTestRunner.ObjectTests.objectIsEqualToItself);
            QUnit.test("Object - ObjectIsNotEqualToOtherObject", Bridge.Test.Runtime.BridgeClientTestRunner.ObjectTests.objectIsNotEqualToOtherObject);
            QUnit.test("Object - StaticEqualsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ObjectTests.staticEqualsWorks);
            QUnit.test("Object - ReferenceEqualsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ObjectTests.referenceEqualsWorks);
            QUnit.test("Object - ToStringOverride", Bridge.Test.Runtime.BridgeClientTestRunner.ObjectTests.toStringOverride);
            QUnit.test("SByte - TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestRunner.SByteTests.typePropertiesAreCorrect);
            QUnit.test("SByte - CastsWork", Bridge.Test.Runtime.BridgeClientTestRunner.SByteTests.castsWork);
            QUnit.test("SByte - DefaultValueIs0", Bridge.Test.Runtime.BridgeClientTestRunner.SByteTests.defaultValueIs0);
            QUnit.test("SByte - DefaultConstructorReturnsZero", Bridge.Test.Runtime.BridgeClientTestRunner.SByteTests.defaultConstructorReturnsZero);
            QUnit.test("SByte - CreatingInstanceReturnsZero", Bridge.Test.Runtime.BridgeClientTestRunner.SByteTests.creatingInstanceReturnsZero);
            QUnit.test("SByte - ConstantsWork", Bridge.Test.Runtime.BridgeClientTestRunner.SByteTests.constantsWork);
            QUnit.test("SByte - FormatWorks", Bridge.Test.Runtime.BridgeClientTestRunner.SByteTests.formatWorks);
            QUnit.test("SByte - IFormattableToStringWorks", Bridge.Test.Runtime.BridgeClientTestRunner.SByteTests.iFormattableToStringWorks);
            QUnit.test("SByte - TryParseWorks", Bridge.Test.Runtime.BridgeClientTestRunner.SByteTests.tryParseWorks);
            QUnit.test("SByte - ParseWorks", Bridge.Test.Runtime.BridgeClientTestRunner.SByteTests.parseWorks);
            QUnit.test("SByte - ToStringWithoutRadixWorks", Bridge.Test.Runtime.BridgeClientTestRunner.SByteTests.toStringWithoutRadixWorks);
            QUnit.test("SByte - ToStringWithRadixWorks", Bridge.Test.Runtime.BridgeClientTestRunner.SByteTests.toStringWithRadixWorks);
            QUnit.test("SByte - GetHashCodeWorks", Bridge.Test.Runtime.BridgeClientTestRunner.SByteTests.getHashCodeWorks);
            QUnit.test("SByte - EqualsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.SByteTests.equalsWorks);
            QUnit.test("SByte - IEquatableEqualsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.SByteTests.iEquatableEqualsWorks);
            QUnit.test("SByte - CompareToWorks", Bridge.Test.Runtime.BridgeClientTestRunner.SByteTests.compareToWorks);
            QUnit.test("SByte - IComparableCompareToWorks", Bridge.Test.Runtime.BridgeClientTestRunner.SByteTests.iComparableCompareToWorks);
            QUnit.test("Float - TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestRunner.SingleTests.typePropertiesAreCorrect);
            QUnit.test("Float - DefaultValueIs0", Bridge.Test.Runtime.BridgeClientTestRunner.SingleTests.defaultValueIs0);
            QUnit.test("Float - CreatingInstanceReturnsZero", Bridge.Test.Runtime.BridgeClientTestRunner.SingleTests.creatingInstanceReturnsZero);
            QUnit.test("Float - ConstantsWork", Bridge.Test.Runtime.BridgeClientTestRunner.SingleTests.constantsWork);
            QUnit.test("Float - DefaultConstructorReturnsZero", Bridge.Test.Runtime.BridgeClientTestRunner.SingleTests.defaultConstructorReturnsZero);
            QUnit.test("Float - FormatWorks", Bridge.Test.Runtime.BridgeClientTestRunner.SingleTests.formatWorks);
            QUnit.test("Float - IFormattableToStringWorks", Bridge.Test.Runtime.BridgeClientTestRunner.SingleTests.iFormattableToStringWorks);
            QUnit.test("Float - ToStringWorks", Bridge.Test.Runtime.BridgeClientTestRunner.SingleTests.toStringWorks);
            QUnit.test("Float - ToExponentialWorks", Bridge.Test.Runtime.BridgeClientTestRunner.SingleTests.toExponentialWorks);
            QUnit.test("Float - ToExponentialWithFractionalDigitsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.SingleTests.toExponentialWithFractionalDigitsWorks);
            QUnit.test("Float - ToFixed", Bridge.Test.Runtime.BridgeClientTestRunner.SingleTests.toFixed);
            QUnit.test("Float - ToFixedWithFractionalDigitsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.SingleTests.toFixedWithFractionalDigitsWorks);
            QUnit.test("Float - ToPrecisionWorks", Bridge.Test.Runtime.BridgeClientTestRunner.SingleTests.toPrecisionWorks);
            QUnit.test("Float - ToPrecisionWithPrecisionWorks", Bridge.Test.Runtime.BridgeClientTestRunner.SingleTests.toPrecisionWithPrecisionWorks);
            QUnit.test("Float - IsPositiveInfinityWorks", Bridge.Test.Runtime.BridgeClientTestRunner.SingleTests.isPositiveInfinityWorks);
            QUnit.test("Float - IsNegativeInfinityWorks", Bridge.Test.Runtime.BridgeClientTestRunner.SingleTests.isNegativeInfinityWorks);
            QUnit.test("Float - IsInfinityWorks", Bridge.Test.Runtime.BridgeClientTestRunner.SingleTests.isInfinityWorks);
            QUnit.test("Float - IsFiniteWorks", Bridge.Test.Runtime.BridgeClientTestRunner.SingleTests.isFiniteWorks);
            QUnit.test("Float - IsNaNWorks", Bridge.Test.Runtime.BridgeClientTestRunner.SingleTests.isNaNWorks);
            QUnit.test("Float - GetHashCodeWorks", Bridge.Test.Runtime.BridgeClientTestRunner.SingleTests.getHashCodeWorks);
            QUnit.test("Float - EqualsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.SingleTests.equalsWorks);
            QUnit.test("Float - IEquatableEqualsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.SingleTests.iEquatableEqualsWorks);
            QUnit.test("Float - CompareToWorks", Bridge.Test.Runtime.BridgeClientTestRunner.SingleTests.compareToWorks);
            QUnit.test("Float - IComparableCompareToWorks", Bridge.Test.Runtime.BridgeClientTestRunner.SingleTests.iComparableCompareToWorks);
            QUnit.test("Version - TestConstructors", Bridge.Test.Runtime.BridgeClientTestRunner.TestVersion.testConstructors);
            QUnit.test("Version - TestCloneCompare", Bridge.Test.Runtime.BridgeClientTestRunner.TestVersion.testCloneCompare);
            QUnit.test("Version - TestEqualsGetHashCode", Bridge.Test.Runtime.BridgeClientTestRunner.TestVersion.testEqualsGetHashCode);
            QUnit.test("Version - TestToString", Bridge.Test.Runtime.BridgeClientTestRunner.TestVersion.testToString);
            QUnit.test("Version - TestParse", Bridge.Test.Runtime.BridgeClientTestRunner.TestVersion.testParse);
            QUnit.test("Version - TestOperators", Bridge.Test.Runtime.BridgeClientTestRunner.TestVersion.testOperators);
            QUnit.test("Tuple - Tuple1Works", Bridge.Test.Runtime.BridgeClientTestRunner.TupleTests.tuple1Works);
            QUnit.test("Tuple - Tuple2Works", Bridge.Test.Runtime.BridgeClientTestRunner.TupleTests.tuple2Works);
            QUnit.test("Tuple - Tuple3Works", Bridge.Test.Runtime.BridgeClientTestRunner.TupleTests.tuple3Works);
            QUnit.test("Tuple - Tuple4Works", Bridge.Test.Runtime.BridgeClientTestRunner.TupleTests.tuple4Works);
            QUnit.test("Tuple - Tuple5Works", Bridge.Test.Runtime.BridgeClientTestRunner.TupleTests.tuple5Works);
            QUnit.test("Tuple - Tuple6Works", Bridge.Test.Runtime.BridgeClientTestRunner.TupleTests.tuple6Works);
            QUnit.test("Tuple - Tuple7Works", Bridge.Test.Runtime.BridgeClientTestRunner.TupleTests.tuple7Works);
            QUnit.test("Tuple - Tuple8Works", Bridge.Test.Runtime.BridgeClientTestRunner.TupleTests.tuple8Works);
            QUnit.test("UInt16 - TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestRunner.UInt16Tests.typePropertiesAreCorrect);
            QUnit.test("UInt16 - CastsWork", Bridge.Test.Runtime.BridgeClientTestRunner.UInt16Tests.castsWork);
            QUnit.test("UInt16 - DefaultValueIs0", Bridge.Test.Runtime.BridgeClientTestRunner.UInt16Tests.defaultValueIs0);
            QUnit.test("UInt16 - DefaultConstructorReturnsZero", Bridge.Test.Runtime.BridgeClientTestRunner.UInt16Tests.defaultConstructorReturnsZero);
            QUnit.test("UInt16 - CreatingInstanceReturnsZero", Bridge.Test.Runtime.BridgeClientTestRunner.UInt16Tests.creatingInstanceReturnsZero);
            QUnit.test("UInt16 - ConstantsWork", Bridge.Test.Runtime.BridgeClientTestRunner.UInt16Tests.constantsWork);
            QUnit.test("UInt16 - FormatWorks", Bridge.Test.Runtime.BridgeClientTestRunner.UInt16Tests.formatWorks);
            QUnit.test("UInt16 - IFormattableToStringWorks", Bridge.Test.Runtime.BridgeClientTestRunner.UInt16Tests.iFormattableToStringWorks);
            QUnit.test("UInt16 - TryParseWorks", Bridge.Test.Runtime.BridgeClientTestRunner.UInt16Tests.tryParseWorks);
            QUnit.test("UInt16 - ParseWorks", Bridge.Test.Runtime.BridgeClientTestRunner.UInt16Tests.parseWorks);
            QUnit.test("UInt16 - ToStringWithoutRadixWorks", Bridge.Test.Runtime.BridgeClientTestRunner.UInt16Tests.toStringWithoutRadixWorks);
            QUnit.test("UInt16 - ToStringWithRadixWorks", Bridge.Test.Runtime.BridgeClientTestRunner.UInt16Tests.toStringWithRadixWorks);
            QUnit.test("UInt16 - GetHashCodeWorks", Bridge.Test.Runtime.BridgeClientTestRunner.UInt16Tests.getHashCodeWorks);
            QUnit.test("UInt16 - EqualsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.UInt16Tests.equalsWorks);
            QUnit.test("UInt16 - IEquatableEqualsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.UInt16Tests.iEquatableEqualsWorks);
            QUnit.test("UInt16 - CompareToWorks", Bridge.Test.Runtime.BridgeClientTestRunner.UInt16Tests.compareToWorks);
            QUnit.test("UInt16 - IComparableCompareToWorks", Bridge.Test.Runtime.BridgeClientTestRunner.UInt16Tests.iComparableCompareToWorks);
            QUnit.test("UInt32 - TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestRunner.UInt32Tests.typePropertiesAreCorrect);
            QUnit.test("UInt32 - CastsWork", Bridge.Test.Runtime.BridgeClientTestRunner.UInt32Tests.castsWork);
            QUnit.test("UInt32 - DefaultValueIs0", Bridge.Test.Runtime.BridgeClientTestRunner.UInt32Tests.defaultValueIs0);
            QUnit.test("UInt32 - DefaultConstructorReturnsZero", Bridge.Test.Runtime.BridgeClientTestRunner.UInt32Tests.defaultConstructorReturnsZero);
            QUnit.test("UInt32 - CreatingInstanceReturnsZero", Bridge.Test.Runtime.BridgeClientTestRunner.UInt32Tests.creatingInstanceReturnsZero);
            QUnit.test("UInt32 - ConstantsWork", Bridge.Test.Runtime.BridgeClientTestRunner.UInt32Tests.constantsWork);
            QUnit.test("UInt32 - FormatWorks", Bridge.Test.Runtime.BridgeClientTestRunner.UInt32Tests.formatWorks);
            QUnit.test("UInt32 - IFormattableToStringWorks", Bridge.Test.Runtime.BridgeClientTestRunner.UInt32Tests.iFormattableToStringWorks);
            QUnit.test("UInt32 - TryParseWorks", Bridge.Test.Runtime.BridgeClientTestRunner.UInt32Tests.tryParseWorks);
            QUnit.test("UInt32 - ParseWorks", Bridge.Test.Runtime.BridgeClientTestRunner.UInt32Tests.parseWorks);
            QUnit.test("UInt32 - ToStringWithoutRadixWorks", Bridge.Test.Runtime.BridgeClientTestRunner.UInt32Tests.toStringWithoutRadixWorks);
            QUnit.test("UInt32 - ToStringWithRadixWorks", Bridge.Test.Runtime.BridgeClientTestRunner.UInt32Tests.toStringWithRadixWorks);
            QUnit.test("UInt32 - GetHashCodeWorks", Bridge.Test.Runtime.BridgeClientTestRunner.UInt32Tests.getHashCodeWorks);
            QUnit.test("UInt32 - EqualsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.UInt32Tests.equalsWorks);
            QUnit.test("UInt32 - IEquatableEqualsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.UInt32Tests.iEquatableEqualsWorks);
            QUnit.test("UInt32 - CompareToWorks", Bridge.Test.Runtime.BridgeClientTestRunner.UInt32Tests.compareToWorks);
            QUnit.test("UInt32 - IComparableCompareToWorks", Bridge.Test.Runtime.BridgeClientTestRunner.UInt32Tests.iComparableCompareToWorks);
            QUnit.test("UInt64 - TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestRunner.UInt64Tests.typePropertiesAreCorrect);
            QUnit.test("UInt64 - MinMaxValuesAreCorrect", Bridge.Test.Runtime.BridgeClientTestRunner.UInt64Tests.minMaxValuesAreCorrect);
            QUnit.test("UInt64 - CastsWork", Bridge.Test.Runtime.BridgeClientTestRunner.UInt64Tests.castsWork);
            QUnit.test("UInt64 - OverflowWorks", Bridge.Test.Runtime.BridgeClientTestRunner.UInt64Tests.overflowWorks);
            QUnit.test("UInt64 - CombinedTypesOperationsWork", Bridge.Test.Runtime.BridgeClientTestRunner.UInt64Tests.combinedTypesOperationsWork);
            QUnit.test("UInt64 - DefaultValueIs0", Bridge.Test.Runtime.BridgeClientTestRunner.UInt64Tests.defaultValueIs0);
            QUnit.test("UInt64 - DefaultConstructorReturnsZero", Bridge.Test.Runtime.BridgeClientTestRunner.UInt64Tests.defaultConstructorReturnsZero);
            QUnit.test("UInt64 - CreatingInstanceReturnsZero", Bridge.Test.Runtime.BridgeClientTestRunner.UInt64Tests.creatingInstanceReturnsZero);
            QUnit.test("UInt64 - ConstantsWork", Bridge.Test.Runtime.BridgeClientTestRunner.UInt64Tests.constantsWork);
            QUnit.test("UInt64 - FormatWorks", Bridge.Test.Runtime.BridgeClientTestRunner.UInt64Tests.formatWorks);
            QUnit.test("UInt64 - IFormattableToStringWorks", Bridge.Test.Runtime.BridgeClientTestRunner.UInt64Tests.iFormattableToStringWorks);
            QUnit.test("UInt64 - CastingOfLargeValuesToUInt64Works", Bridge.Test.Runtime.BridgeClientTestRunner.UInt64Tests.castingOfLargeValuesToUInt64Works);
            QUnit.test("UInt64 - DivisionOfLargeUInt64Works", Bridge.Test.Runtime.BridgeClientTestRunner.UInt64Tests.divisionOfLargeUInt64Works);
            QUnit.test("UInt64 - TryParseWorks", Bridge.Test.Runtime.BridgeClientTestRunner.UInt64Tests.tryParseWorks);
            QUnit.test("UInt64 - ParseWorks", Bridge.Test.Runtime.BridgeClientTestRunner.UInt64Tests.parseWorks);
            QUnit.test("UInt64 - ToStringWithoutRadixWorks", Bridge.Test.Runtime.BridgeClientTestRunner.UInt64Tests.toStringWithoutRadixWorks);
            QUnit.test("UInt64 - ToStringWithRadixWorks", Bridge.Test.Runtime.BridgeClientTestRunner.UInt64Tests.toStringWithRadixWorks);
            QUnit.test("UInt64 - GetHashCodeWorks", Bridge.Test.Runtime.BridgeClientTestRunner.UInt64Tests.getHashCodeWorks);
            QUnit.test("UInt64 - EqualsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.UInt64Tests.equalsWorks);
            QUnit.test("UInt64 - IEquatableEqualsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.UInt64Tests.iEquatableEqualsWorks);
            QUnit.test("UInt64 - CompareToWorks", Bridge.Test.Runtime.BridgeClientTestRunner.UInt64Tests.compareToWorks);
            QUnit.test("UInt64 - IComparableCompareToWorks", Bridge.Test.Runtime.BridgeClientTestRunner.UInt64Tests.iComparableCompareToWorks);
            QUnit.module("String");
            QUnit.test("StringFormatTests - Simple", Bridge.Test.Runtime.BridgeClientTestRunner.StringFormatTests.simple);
            QUnit.test("StringFormatTests - ValueFormating", Bridge.Test.Runtime.BridgeClientTestRunner.StringFormatTests.valueFormating);
            QUnit.test("StringFormatTests - SpaceControlling", Bridge.Test.Runtime.BridgeClientTestRunner.StringFormatTests.spaceControlling);
            QUnit.test("StringFormatTests - Aligment", Bridge.Test.Runtime.BridgeClientTestRunner.StringFormatTests.aligment);
            QUnit.test("StringFormatTests - PadIntegerWithLeadingZeros", Bridge.Test.Runtime.BridgeClientTestRunner.StringFormatTests.padIntegerWithLeadingZeros);
            QUnit.test("StringFormatTests - PadIntegerWithSpecificNumberLeadingZeros", Bridge.Test.Runtime.BridgeClientTestRunner.StringFormatTests.padIntegerWithSpecificNumberLeadingZeros);
            QUnit.test("StringFormatTests - PadNumericWithLeadingZerosToLength", Bridge.Test.Runtime.BridgeClientTestRunner.StringFormatTests.padNumericWithLeadingZerosToLength);
            QUnit.test("StringFormatTests - PadNumericWithSpecificNumberOfLeadingZeros", Bridge.Test.Runtime.BridgeClientTestRunner.StringFormatTests.padNumericWithSpecificNumberOfLeadingZeros);
            QUnit.test("FormattableString - TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestRunner.FormattableStringTests.typePropertiesAreCorrect);
            QUnit.test("FormattableString - ArgumentCountWorks", Bridge.Test.Runtime.BridgeClientTestRunner.FormattableStringTests.argumentCountWorks);
            QUnit.test("FormattableString - FormatWorks", Bridge.Test.Runtime.BridgeClientTestRunner.FormattableStringTests.formatWorks);
            QUnit.test("FormattableString - GetArgumentWorks", Bridge.Test.Runtime.BridgeClientTestRunner.FormattableStringTests.getArgumentWorks);
            QUnit.test("FormattableString - GetArgumentsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.FormattableStringTests.getArgumentsWorks);
            QUnit.test("FormattableString - ArrayReturnedByGetArgumentsCanBeModified", Bridge.Test.Runtime.BridgeClientTestRunner.FormattableStringTests.arrayReturnedByGetArgumentsCanBeModified);
            QUnit.test("FormattableString - ToStringWorks", Bridge.Test.Runtime.BridgeClientTestRunner.FormattableStringTests.toStringWorks);
            QUnit.test("FormattableString - InvariantWorks", Bridge.Test.Runtime.BridgeClientTestRunner.FormattableStringTests.invariantWorks);
            QUnit.test("JsString - CharAtWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsStringTests.charAtWorks);
            QUnit.test("JsString - CharCodeAtWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsStringTests.charCodeAtWorks);
            QUnit.test("JsString - FromCharCodeWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsStringTests.fromCharCodeWorks);
            QUnit.test("JsString - LocaleCompareWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsStringTests.localeCompareWorks);
            QUnit.test("JsString - SliceWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsStringTests.sliceWorks);
            QUnit.test("JsString - SplitWithCharWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsStringTests.splitWithCharWorks);
            QUnit.test("JsString - SplitWithLimitWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsStringTests.splitWithLimitWorks);
            QUnit.test("JsString - SplitWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsStringTests.splitWorks);
            QUnit.test("JsString - SplitWithCharAndLimitWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsStringTests.splitWithCharAndLimitWorks);
            QUnit.test("JsString - SplitWithStringWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsStringTests.splitWithStringWorks);
            QUnit.test("JsString - JsSplitWithStringAndLimitWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsStringTests.jsSplitWithStringAndLimitWorks);
            QUnit.test("JsString - SubstrWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsStringTests.substrWorks);
            QUnit.test("JsString - JavaScriptSubstringWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsStringTests.javaScriptSubstringWorks);
            QUnit.test("JsString - Strings", Bridge.Test.Runtime.BridgeClientTestRunner.JsStringTests.strings);
            QUnit.test("String - TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.typePropertiesAreCorrect);
            QUnit.test("String - StringInterfaces", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.stringInterfaces);
            QUnit.test("String - DefaultConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.defaultConstructorWorks);
            QUnit.test("String - CharAndCountConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.charAndCountConstructorWorks);
            QUnit.test("String - CharArrayConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.charArrayConstructorWorks);
            QUnit.test("String - EmptyFieldWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.emptyFieldWorks);
            QUnit.test("String - LengthPropertyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.lengthPropertyWorks);
            QUnit.test("String - CompareToWorks_353", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.compareToWorks_353);
            QUnit.test("String - CompareWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.compareWorks);
            QUnit.test("String - CompareWithIgnoreCaseArgWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.compareWithIgnoreCaseArgWorks);
            QUnit.test("String - ConcatWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.concatWorks);
            QUnit.test("String - ConcatWithObjectsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.concatWithObjectsWorks);
            QUnit.test("String - EndsWithCharWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.endsWithCharWorks);
            QUnit.test("String - EndsWithStringWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.endsWithStringWorks);
            QUnit.test("String - StaticEqualsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.staticEqualsWorks);
            QUnit.test("String - FormatWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.formatWorks);
            QUnit.test("String - FormatWorksExtended", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.formatWorksExtended);
            QUnit.test("String - FormatWorksWithIFormattable", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.formatWorksWithIFormattable);
            QUnit.test("String - FormatCanUseEscapedBraces", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.formatCanUseEscapedBraces);
            QUnit.test("String - IndexOfCharWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.indexOfCharWorks);
            QUnit.test("String - IndexOfStringWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.indexOfStringWorks);
            QUnit.test("String - IndexOfCharWithStartIndexWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.indexOfCharWithStartIndexWorks);
            QUnit.test("String - IndexOfCharWithStartIndexAndCountWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.indexOfCharWithStartIndexAndCountWorks);
            QUnit.test("String - IndexOfStringWithStartIndexWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.indexOfStringWithStartIndexWorks);
            QUnit.test("String - IndexOfStringWithStartIndexAndCountWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.indexOfStringWithStartIndexAndCountWorks);
            QUnit.test("String - IndexOfAnyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.indexOfAnyWorks);
            QUnit.test("String - IndexOfAnyWithStartIndexWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.indexOfAnyWithStartIndexWorks);
            QUnit.test("String - IndexOfAnyWithStartIndexAndCountWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.indexOfAnyWithStartIndexAndCountWorks);
            QUnit.test("String - InsertWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.insertWorks);
            QUnit.test("String - IsNullOrEmptyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.isNullOrEmptyWorks);
            QUnit.test("String - LastIndexOfCharWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.lastIndexOfCharWorks);
            QUnit.test("String - LastIndexOfStringWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.lastIndexOfStringWorks);
            QUnit.test("String - LastIndexOfCharWithStartIndexWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.lastIndexOfCharWithStartIndexWorks);
            QUnit.test("String - LastIndexOfStringWithStartIndexWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.lastIndexOfStringWithStartIndexWorks);
            QUnit.test("String - LastIndexOfCharWithStartIndexAndCountWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.lastIndexOfCharWithStartIndexAndCountWorks);
            QUnit.test("String - LastIndexOfStringWithStartIndexAndCountWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.lastIndexOfStringWithStartIndexAndCountWorks);
            QUnit.test("String - LastIndexOfAnyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.lastIndexOfAnyWorks);
            QUnit.test("String - LastIndexOfAnyWithStartIndexWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.lastIndexOfAnyWithStartIndexWorks);
            QUnit.test("String - LastIndexOfAnyWithStartIndexAndCountWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.lastIndexOfAnyWithStartIndexAndCountWorks);
            QUnit.test("String - PadLeftWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.padLeftWorks);
            QUnit.test("String - PadLeftWithCharWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.padLeftWithCharWorks);
            QUnit.test("String - PadRightWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.padRightWorks);
            QUnit.test("String - PadRightWithCharWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.padRightWithCharWorks);
            QUnit.test("String - RemoveWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.removeWorks);
            QUnit.test("String - RemoveWithCountWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.removeWithCountWorks);
            QUnit.test("String - ReplaceWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.replaceWorks);
            QUnit.test("String - ReplaceCharWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.replaceCharWorks);
            QUnit.test("String - SplitWithCharWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.splitWithCharWorks);
            QUnit.test("String - SplitWithCharsAndLimitWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.splitWithCharsAndLimitWorks);
            QUnit.test("String - SplitWithCharsAndStringSplitOptionsAndLimitWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.splitWithCharsAndStringSplitOptionsAndLimitWorks);
            QUnit.test("String - SomeNetSplitTests", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.someNetSplitTests);
            QUnit.test("String - SplitWithCharsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.splitWithCharsWorks);
            QUnit.test("String - SplitWithStringsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.splitWithStringsWorks);
            QUnit.test("String - SplitWithStringsAndLimitWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.splitWithStringsAndLimitWorks);
            QUnit.test("String - StartsWithCharWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.startsWithCharWorks);
            QUnit.test("String - StartsWithStringWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.startsWithStringWorks);
            QUnit.test("String - SubstringWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.substringWorks);
            QUnit.test("String - ToLowerCaseWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.toLowerCaseWorks);
            QUnit.test("String - ToUpperCaseWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.toUpperCaseWorks);
            QUnit.test("String - ToLowerWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.toLowerWorks);
            QUnit.test("String - ToUpperWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.toUpperWorks);
            QUnit.test("String - TrimWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.trimWorks);
            QUnit.test("String - TrimCharsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.trimCharsWorks);
            QUnit.test("String - TrimStartCharsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.trimStartCharsWorks);
            QUnit.test("String - TrimEndCharsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.trimEndCharsWorks);
            QUnit.test("String - TrimStartWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.trimStartWorks);
            QUnit.test("String - TrimEndWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.trimEndWorks);
            QUnit.test("String - StringEqualityWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.stringEqualityWorks);
            QUnit.test("String - StringInequalityWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.stringInequalityWorks);
            QUnit.test("String - StringIndexingWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.stringIndexingWorks);
            QUnit.test("String - GetHashCodeWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.getHashCodeWorks);
            QUnit.test("String - InstanceEqualsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.instanceEqualsWorks);
            QUnit.test("String - IEquatableEqualsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.iEquatableEqualsWorks);
            QUnit.test("String - StringEqualsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.stringEqualsWorks);
            QUnit.test("String - CompareToWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.compareToWorks);
            QUnit.test("String - IComparableCompareToWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.iComparableCompareToWorks);
            QUnit.test("String - JoinWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.joinWorks);
            QUnit.test("String - ContainsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.containsWorks);
            QUnit.test("String - ToCharArrayWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.toCharArrayWorks);
            QUnit.test("String - Strings", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.strings);
            QUnit.test("String - Enumerable", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.enumerable);
            QUnit.test("StringBuilder - TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestRunner.StringBuilderTests.typePropertiesAreCorrect);
            QUnit.test("StringBuilder - DefaultConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringBuilderTests.defaultConstructorWorks);
            QUnit.test("StringBuilder - ConstructorWithCapacityWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringBuilderTests.constructorWithCapacityWorks);
            QUnit.test("StringBuilder - InitialTextConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringBuilderTests.initialTextConstructorWorks);
            QUnit.test("StringBuilder - InitialTextConstructorWithCapacityWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringBuilderTests.initialTextConstructorWithCapacityWorks);
            QUnit.test("StringBuilder - SubstringConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringBuilderTests.substringConstructorWorks);
            QUnit.test("StringBuilder - AppendBoolWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringBuilderTests.appendBoolWorks);
            QUnit.test("StringBuilder - AppendCharWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringBuilderTests.appendCharWorks);
            QUnit.test("StringBuilder - AppendIntWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringBuilderTests.appendIntWorks);
            QUnit.test("StringBuilder - AppendDoubleWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringBuilderTests.appendDoubleWorks);
            QUnit.test("StringBuilder - AppendObjectWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringBuilderTests.appendObjectWorks);
            QUnit.test("StringBuilder - AppendStringWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringBuilderTests.appendStringWorks);
            QUnit.test("StringBuilder - AppendLineWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringBuilderTests.appendLineWorks);
            QUnit.test("StringBuilder - AppendLineStringWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringBuilderTests.appendLineStringWorks);
            QUnit.test("StringBuilder - ClearWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringBuilderTests.clearWorks);
            QUnit.test("StringBuilder - ToStringWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringBuilderTests.toStringWorks);
            QUnit.test("StringBuilder - LengthPropertyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringBuilderTests.lengthPropertyWorks);
            QUnit.test("StringBuilder - StringBuilders", Bridge.Test.Runtime.BridgeClientTestRunner.StringBuilderTests.stringBuilders);
            QUnit.module("System interface");
            QUnit.test("IComparable - CallingMethodThroughIComparableInterfaceInvokesImplementingMethod", Bridge.Test.Runtime.BridgeClientTestRunner.IComparableTests.callingMethodThroughIComparableInterfaceInvokesImplementingMethod);
            QUnit.test("IEquatable - CallingMethodThroughIComparableInterfaceInvokesImplementingMethod", Bridge.Test.Runtime.BridgeClientTestRunner.IEquatableTests.callingMethodThroughIComparableInterfaceInvokesImplementingMethod);
            QUnit.module("Threading");
            QUnit.test("Async - AsyncVoid", Bridge.Test.Runtime.BridgeClientTestRunner.AsyncTests.asyncVoid);
            QUnit.test("Async - AsyncTask", Bridge.Test.Runtime.BridgeClientTestRunner.AsyncTests.asyncTask);
            QUnit.test("Async - AsyncTaskBodyThrowsException", Bridge.Test.Runtime.BridgeClientTestRunner.AsyncTests.asyncTaskBodyThrowsException);
            QUnit.test("Async - AwaitTaskThatFaults", Bridge.Test.Runtime.BridgeClientTestRunner.AsyncTests.awaitTaskThatFaults);
            QUnit.test("Async - AggregateExceptionsAreUnwrappedWhenAwaitingTask", Bridge.Test.Runtime.BridgeClientTestRunner.AsyncTests.aggregateExceptionsAreUnwrappedWhenAwaitingTask);
            QUnit.test("Async - AsyncTaskThatReturnsValue", Bridge.Test.Runtime.BridgeClientTestRunner.AsyncTests.asyncTaskThatReturnsValue);
            QUnit.test("CancellationToken - TypePropertiesForCancellationTokenSourceAreCorrect", Bridge.Test.Runtime.BridgeClientTestRunner.CancellationTokenTests.typePropertiesForCancellationTokenSourceAreCorrect);
            QUnit.test("CancellationToken - TypePropertiesForCancellationTokenAreCorrect", Bridge.Test.Runtime.BridgeClientTestRunner.CancellationTokenTests.typePropertiesForCancellationTokenAreCorrect);
            QUnit.test("CancellationToken - TypePropertiesForCancellationTokenRegistrationAreCorrect", Bridge.Test.Runtime.BridgeClientTestRunner.CancellationTokenTests.typePropertiesForCancellationTokenRegistrationAreCorrect);
            QUnit.test("CancellationToken - CancellationTokenCreatedWithDefaultConstructorIsNotCanceledAndCannotBe", Bridge.Test.Runtime.BridgeClientTestRunner.CancellationTokenTests.cancellationTokenCreatedWithDefaultConstructorIsNotCanceledAndCannotBe);
            QUnit.test("CancellationToken - CancellationTokenCreatedWithFalseArgumentToConstructorIsNotCanceledAndCannotBe", Bridge.Test.Runtime.BridgeClientTestRunner.CancellationTokenTests.cancellationTokenCreatedWithFalseArgumentToConstructorIsNotCanceledAndCannotBe);
            QUnit.test("CancellationToken - CancellationTokenCreatedWithTrueArgumentToConstructorIsCanceled", Bridge.Test.Runtime.BridgeClientTestRunner.CancellationTokenTests.cancellationTokenCreatedWithTrueArgumentToConstructorIsCanceled);
            QUnit.test("CancellationToken - CancellationTokenNoneIsNotCancelledAndCannotBe", Bridge.Test.Runtime.BridgeClientTestRunner.CancellationTokenTests.cancellationTokenNoneIsNotCancelledAndCannotBe);
            QUnit.test("CancellationToken - CreatingADefaultCancellationTokenReturnsACancellationTokenThatIsNotCancelled", Bridge.Test.Runtime.BridgeClientTestRunner.CancellationTokenTests.creatingADefaultCancellationTokenReturnsACancellationTokenThatIsNotCancelled);
            QUnit.test("CancellationToken - ActivatorCreateForCancellationTokenReturnsACancellationTokenThatIsNotCancelled", Bridge.Test.Runtime.BridgeClientTestRunner.CancellationTokenTests.activatorCreateForCancellationTokenReturnsACancellationTokenThatIsNotCancelled);
            QUnit.test("CancellationToken - CanBeCanceledIsTrueForTokenCreatedForCancellationTokenSource", Bridge.Test.Runtime.BridgeClientTestRunner.CancellationTokenTests.canBeCanceledIsTrueForTokenCreatedForCancellationTokenSource);
            QUnit.test("CancellationToken - IsCancellationRequestedForTokenCreatedForCancellationTokenSourceIsSetByTheCancelMethod", Bridge.Test.Runtime.BridgeClientTestRunner.CancellationTokenTests.isCancellationRequestedForTokenCreatedForCancellationTokenSourceIsSetByTheCancelMethod);
            QUnit.test("CancellationToken - ThrowIfCancellationRequestedForTokenCreatedForCancellationTokenSourceThrowsAfterTheCancelMethodIsCalled", Bridge.Test.Runtime.BridgeClientTestRunner.CancellationTokenTests.throwIfCancellationRequestedForTokenCreatedForCancellationTokenSourceThrowsAfterTheCancelMethodIsCalled);
            QUnit.test("CancellationToken - CancelWithoutArgumentsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.CancellationTokenTests.cancelWithoutArgumentsWorks);
            QUnit.test("CancellationToken - CancelWorksWhenThrowOnFirstExceptionIsFalse", Bridge.Test.Runtime.BridgeClientTestRunner.CancellationTokenTests.cancelWorksWhenThrowOnFirstExceptionIsFalse);
            QUnit.test("CancellationToken - CancelWorksWhenThrowOnFirstExceptionIsTrue", Bridge.Test.Runtime.BridgeClientTestRunner.CancellationTokenTests.cancelWorksWhenThrowOnFirstExceptionIsTrue);
            QUnit.test("CancellationToken - RegisterOnACancelledSourceWithoutContextInvokesTheCallback", Bridge.Test.Runtime.BridgeClientTestRunner.CancellationTokenTests.registerOnACancelledSourceWithoutContextInvokesTheCallback);
            QUnit.test("CancellationToken - RegisterWithArgumentOnACancelledSourceInvokesTheCallback", Bridge.Test.Runtime.BridgeClientTestRunner.CancellationTokenTests.registerWithArgumentOnACancelledSourceInvokesTheCallback);
            QUnit.test("CancellationToken - RegisterOnACancelledSourceWithoutContextRethrowsAThrownException", Bridge.Test.Runtime.BridgeClientTestRunner.CancellationTokenTests.registerOnACancelledSourceWithoutContextRethrowsAThrownException);
            QUnit.test("CancellationToken - RegisterOnACancelledSourceWithContextRethrowsAThrownException", Bridge.Test.Runtime.BridgeClientTestRunner.CancellationTokenTests.registerOnACancelledSourceWithContextRethrowsAThrownException);
            QUnit.test("CancellationToken - RegisterOverloadsWithUseSynchronizationContextWork", Bridge.Test.Runtime.BridgeClientTestRunner.CancellationTokenTests.registerOverloadsWithUseSynchronizationContextWork);
            QUnit.test("CancellationToken - RegisterOnCancellationTokenCreatedNonCancelledDoesNothing", Bridge.Test.Runtime.BridgeClientTestRunner.CancellationTokenTests.registerOnCancellationTokenCreatedNonCancelledDoesNothing);
            QUnit.test("CancellationToken - RegisterOnCancellationTokenCreatedCancelledInvokesTheActionImmediately", Bridge.Test.Runtime.BridgeClientTestRunner.CancellationTokenTests.registerOnCancellationTokenCreatedCancelledInvokesTheActionImmediately);
            QUnit.test("CancellationToken - DuplicateCancelDoesNotCauseCallbacksToBeCalledTwice", Bridge.Test.Runtime.BridgeClientTestRunner.CancellationTokenTests.duplicateCancelDoesNotCauseCallbacksToBeCalledTwice);
            QUnit.test("CancellationToken - RegistrationsCanBeCompared", Bridge.Test.Runtime.BridgeClientTestRunner.CancellationTokenTests.registrationsCanBeCompared);
            QUnit.test("CancellationToken - RegistrationsCanBeUnregistered", Bridge.Test.Runtime.BridgeClientTestRunner.CancellationTokenTests.registrationsCanBeUnregistered);
            QUnit.test("CancellationToken - CreatingADefaultCancellationTokenRegistrationReturnsARegistrationThatCanBeDisposedWithoutHarm", Bridge.Test.Runtime.BridgeClientTestRunner.CancellationTokenTests.creatingADefaultCancellationTokenRegistrationReturnsARegistrationThatCanBeDisposedWithoutHarm);
            QUnit.test("CancellationToken - LinkedSourceWithTwoTokensWorks", Bridge.Test.Runtime.BridgeClientTestRunner.CancellationTokenTests.linkedSourceWithTwoTokensWorks);
            QUnit.test("CancellationToken - LinkedSourceWithThreeTokensWorks", Bridge.Test.Runtime.BridgeClientTestRunner.CancellationTokenTests.linkedSourceWithThreeTokensWorks);
            QUnit.test("Promise - TaskFromPromiseWithoutResultFactoryWorksWhenPromiseCompletes", Bridge.Test.Runtime.BridgeClientTestRunner.PromiseTests.taskFromPromiseWithoutResultFactoryWorksWhenPromiseCompletes);
            QUnit.test("Promise - TaskFromPromiseWithResultFactoryWorksWhenPromiseCompletes", Bridge.Test.Runtime.BridgeClientTestRunner.PromiseTests.taskFromPromiseWithResultFactoryWorksWhenPromiseCompletes);
            QUnit.test("Promise - TaskFromPromiseWorksWhenPromiseFails", Bridge.Test.Runtime.BridgeClientTestRunner.PromiseTests.taskFromPromiseWorksWhenPromiseFails);
            QUnit.test("Promise - CompletingPromiseCanBeAwaited", Bridge.Test.Runtime.BridgeClientTestRunner.PromiseTests.completingPromiseCanBeAwaited);
            QUnit.test("Promise - FailingPromiseCanBeAwaited", Bridge.Test.Runtime.BridgeClientTestRunner.PromiseTests.failingPromiseCanBeAwaited);
            QUnit.test("Promise - TaskFromPromiseWithProgressWithoutResultFactoryWorksWhenPromiseProgressesAndCompletes", Bridge.Test.Runtime.BridgeClientTestRunner.PromiseTests.taskFromPromiseWithProgressWithoutResultFactoryWorksWhenPromiseProgressesAndCompletes);
            QUnit.test("Tasks - TaskCompletionSourceTypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests.taskCompletionSourceTypePropertiesAreCorrect);
            QUnit.test("Tasks - TaskTypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests.taskTypePropertiesAreCorrect);
            QUnit.test("Tasks - TaskCompletionSourceWorksWhenSettingResult", Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests.taskCompletionSourceWorksWhenSettingResult);
            QUnit.test("Tasks - TaskCompletionSourceWorksWhenSettingASingleException", Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests.taskCompletionSourceWorksWhenSettingASingleException);
            QUnit.test("Tasks - TaskCompletionSourceWorksWhenSettingTwoExceptions", Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests.taskCompletionSourceWorksWhenSettingTwoExceptions);
            QUnit.test("Tasks - TaskCompletionSourceWorksWhenCancelling", Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests.taskCompletionSourceWorksWhenCancelling);
            QUnit.test("Tasks - CancelledTaskThrowsTaskCanceledExceptionWhenAwaited", Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests.cancelledTaskThrowsTaskCanceledExceptionWhenAwaited);
            QUnit.test("Tasks - CancelledTaskThrowsAggregateExceptionWithTaskCanceledExceptionWhenResultIsAccessed", Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests.cancelledTaskThrowsAggregateExceptionWithTaskCanceledExceptionWhenResultIsAccessed);
            QUnit.test("Tasks - SetResultFailsWhenTheTaskIsCompleted", Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests.setResultFailsWhenTheTaskIsCompleted);
            QUnit.test("Tasks - SetCanceledFailsWhenTheTaskIsCompleted", Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests.setCanceledFailsWhenTheTaskIsCompleted);
            QUnit.test("Tasks - SetExceptionFailsWhenTheTaskIsCompleted", Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests.setExceptionFailsWhenTheTaskIsCompleted);
            QUnit.test("Tasks - CompletedTaskHasCorrectIsXProperties", Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests.completedTaskHasCorrectIsXProperties);
            QUnit.test("Tasks - CancelledTaskHasCorrectIsXProperties", Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests.cancelledTaskHasCorrectIsXProperties);
            QUnit.test("Tasks - FaultedTaskHasCorrectIsXProperties", Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests.faultedTaskHasCorrectIsXProperties);
            QUnit.test("Tasks - TrySetResultReturnsFalseWhenTheTaskIsCompleted", Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests.trySetResultReturnsFalseWhenTheTaskIsCompleted);
            QUnit.test("Tasks - TrySetCanceledReturnsFalseWhenTheTaskIsCompleted", Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests.trySetCanceledReturnsFalseWhenTheTaskIsCompleted);
            QUnit.test("Tasks - TrySetExceptionReturnsFalseWhenTheTaskIsCompleted", Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests.trySetExceptionReturnsFalseWhenTheTaskIsCompleted);
            QUnit.test("Tasks - ContinueWithForNonGenericTaskWorkWithNoResultAndNoException", Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests.continueWithForNonGenericTaskWorkWithNoResultAndNoException);
            QUnit.test("Tasks - ContinueWithWhenCallbackThrowsAnException", Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests.continueWithWhenCallbackThrowsAnException);
            QUnit.test("Tasks - ExceptionInTaskBodyAppearsInTheExceptionMemberForNonGenericTask", Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests.exceptionInTaskBodyAppearsInTheExceptionMemberForNonGenericTask);
            QUnit.test("Tasks - ContinueWithForNonGenericTaskCanReturnAValue", Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests.continueWithForNonGenericTaskCanReturnAValue);
            QUnit.test("Tasks - ContinueWithWithNoReturnValueForGenericTaskWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests.continueWithWithNoReturnValueForGenericTaskWorks);
            QUnit.test("Tasks - ContinueWithForGenericTaskCanReturnAValue", Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests.continueWithForGenericTaskCanReturnAValue);
            QUnit.test("Tasks - DelayWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests.delayWorks);
            QUnit.test("Tasks - FromResultWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests.fromResultWorks);
            QUnit.test("Tasks - RunWithoutResultWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests.runWithoutResultWorks);
            QUnit.test("Tasks - RunWithResultWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests.runWithResultWorks);
            QUnit.test("Tasks - RunWorksWhenBodyThrows", Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests.runWorksWhenBodyThrows);
            QUnit.test("Tasks - WhenAllParamArrayWithResultWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests.whenAllParamArrayWithResultWorks);
            QUnit.test("Tasks - WhenAllEnumerableWithResultWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests.whenAllEnumerableWithResultWorks);
            QUnit.test("Tasks - WhenAllParamArrayWithoutResultWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests.whenAllParamArrayWithoutResultWorks);
            QUnit.test("Tasks - WhenAllEnumerableWithoutResultWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests.whenAllEnumerableWithoutResultWorks);
            QUnit.test("Tasks - WhenAllShouldHaveAnErrorIfAnyIncludedTaskFaulted", Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests.whenAllShouldHaveAnErrorIfAnyIncludedTaskFaulted);
            QUnit.test("Tasks - WhenAllShouldBeCancelledIfNoTaskWasFaultedButSomeWasCancelled", Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests.whenAllShouldBeCancelledIfNoTaskWasFaultedButSomeWasCancelled);
            QUnit.test("Tasks - WhenAnyParamArrayWithResultWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests.whenAnyParamArrayWithResultWorks);
            QUnit.test("Tasks - WhenAnyEnumerableWithResultWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests.whenAnyEnumerableWithResultWorks);
            QUnit.test("Tasks - WhenAnyParamArrayWithoutResultWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests.whenAnyParamArrayWithoutResultWorks);
            QUnit.test("Tasks - WhenAnyEnumerableWithoutResultWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests.whenAnyEnumerableWithoutResultWorks);
            QUnit.test("Tasks - WhenAnyFaultsIfTheFirstTaskFaulted", Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests.whenAnyFaultsIfTheFirstTaskFaulted);
            QUnit.test("Tasks - WhenAnyIsCancelledIfTheFirstTaskWasCancelled", Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests.whenAnyIsCancelledIfTheFirstTaskWasCancelled);
            QUnit.test("Tasks - ConstructorWithOnlyActionWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests.constructorWithOnlyActionWorks);
            QUnit.test("Tasks - ConstructorWithActionAndStateWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests.constructorWithActionAndStateWorks);
            QUnit.test("Tasks - ExceptionInManuallyCreatedTaskIsStoredOnTheTask", Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests.exceptionInManuallyCreatedTaskIsStoredOnTheTask);
            QUnit.test("Tasks - ConstructorWithOnlyFunctionWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests.constructorWithOnlyFunctionWorks);
            QUnit.test("Tasks - ConstructorWithFunctionAndStateWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests.constructorWithFunctionAndStateWorks);
            QUnit.test("TimerTests - TestTimerThrows", Bridge.Test.Runtime.BridgeClientTestRunner.TimerTests.testTimerThrows);
            QUnit.test("TimerTests - TestStaticCallbackWithDispose", Bridge.Test.Runtime.BridgeClientTestRunner.TimerTests.testStaticCallbackWithDispose);
            QUnit.test("TimerTests - TestStaticCallbackWithChange", Bridge.Test.Runtime.BridgeClientTestRunner.TimerTests.testStaticCallbackWithChange);
            QUnit.test("TimerTests - TestInstanceCallbackWithDispose", Bridge.Test.Runtime.BridgeClientTestRunner.TimerTests.testInstanceCallbackWithDispose);
            QUnit.test("TimerTests - TestInstanceCallbackWithChange", Bridge.Test.Runtime.BridgeClientTestRunner.TimerTests.testInstanceCallbackWithChange);
            QUnit.test("TimerTests - TestInfiniteTimer", Bridge.Test.Runtime.BridgeClientTestRunner.TimerTests.testInfiniteTimer);
            QUnit.module("Type system");
            QUnit.test("Type - GettingBaseTypeWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Bridge_ClientTest_TypeSystemTests.gettingBaseTypeWorks);
            QUnit.test("Type - IsAssignableFromWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Bridge_ClientTest_TypeSystemTests.isAssignableFromWorks);
            QUnit.module("Typed Arrays");
            QUnit.test("ArrayBufferTests - TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayBufferTests.typePropertiesAreCorrect);
            QUnit.test("ArrayBufferTests - ConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayBufferTests.constructorWorks);
            QUnit.test("ArrayBufferTests - ByteLengthPropertyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayBufferTests.byteLengthPropertyWorks);
            QUnit.test("DataViewTests - TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestRunner.DataViewTests.typePropertiesAreCorrect);
            QUnit.test("DataViewTests - ArrayBufferOnlyConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DataViewTests.arrayBufferOnlyConstructorWorks);
            QUnit.test("DataViewTests - ArrayBufferAndByteOffsetConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DataViewTests.arrayBufferAndByteOffsetConstructorWorks);
            QUnit.test("DataViewTests - ArrayBufferAndByteOffsetAndByteLengthConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DataViewTests.arrayBufferAndByteOffsetAndByteLengthConstructorWorks);
            QUnit.test("DataViewTests - GetInt8Works", Bridge.Test.Runtime.BridgeClientTestRunner.DataViewTests.getInt8Works);
            QUnit.test("DataViewTests - GetUint8Works", Bridge.Test.Runtime.BridgeClientTestRunner.DataViewTests.getUint8Works);
            QUnit.test("DataViewTests - GetInt16Works", Bridge.Test.Runtime.BridgeClientTestRunner.DataViewTests.getInt16Works);
            QUnit.test("DataViewTests - GetUint16Works", Bridge.Test.Runtime.BridgeClientTestRunner.DataViewTests.getUint16Works);
            QUnit.test("DataViewTests - GetInt32Works", Bridge.Test.Runtime.BridgeClientTestRunner.DataViewTests.getInt32Works);
            QUnit.test("DataViewTests - GetUint32Works", Bridge.Test.Runtime.BridgeClientTestRunner.DataViewTests.getUint32Works);
            QUnit.test("DataViewTests - GetFloat32Works", Bridge.Test.Runtime.BridgeClientTestRunner.DataViewTests.getFloat32Works);
            QUnit.test("DataViewTests - GetFloat64Works", Bridge.Test.Runtime.BridgeClientTestRunner.DataViewTests.getFloat64Works);
            QUnit.test("DataViewTests - SetInt8Works", Bridge.Test.Runtime.BridgeClientTestRunner.DataViewTests.setInt8Works);
            QUnit.test("DataViewTests - SetUint8Works", Bridge.Test.Runtime.BridgeClientTestRunner.DataViewTests.setUint8Works);
            QUnit.test("DataViewTests - SetInt16Works", Bridge.Test.Runtime.BridgeClientTestRunner.DataViewTests.setInt16Works);
            QUnit.test("DataViewTests - SetUint16Works", Bridge.Test.Runtime.BridgeClientTestRunner.DataViewTests.setUint16Works);
            QUnit.test("DataViewTests - SetInt32Works", Bridge.Test.Runtime.BridgeClientTestRunner.DataViewTests.setInt32Works);
            QUnit.test("DataViewTests - SetUint32Works", Bridge.Test.Runtime.BridgeClientTestRunner.DataViewTests.setUint32Works);
            QUnit.test("DataViewTests - SetFloat32Works", Bridge.Test.Runtime.BridgeClientTestRunner.DataViewTests.setFloat32Works);
            QUnit.test("DataViewTests - SetFloat64Works", Bridge.Test.Runtime.BridgeClientTestRunner.DataViewTests.setFloat64Works);
            QUnit.test("Float32ArrayTests - LengthConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Float32ArrayTests.lengthConstructorWorks);
            QUnit.test("Float32ArrayTests - ConstructorFromIntWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Float32ArrayTests.constructorFromIntWorks);
            QUnit.test("Float32ArrayTests - CopyConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Float32ArrayTests.copyConstructorWorks);
            QUnit.test("Float32ArrayTests - ArrayBufferConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Float32ArrayTests.arrayBufferConstructorWorks);
            QUnit.test("Float32ArrayTests - ArrayBufferWithOffsetConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Float32ArrayTests.arrayBufferWithOffsetConstructorWorks);
            QUnit.test("Float32ArrayTests - ArrayBufferWithOffsetAndLengthConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Float32ArrayTests.arrayBufferWithOffsetAndLengthConstructorWorks);
            QUnit.test("Float32ArrayTests - StaticBytesPerElementWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Float32ArrayTests.staticBytesPerElementWorks);
            QUnit.test("Float32ArrayTests - LengthWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Float32ArrayTests.lengthWorks);
            QUnit.test("Float32ArrayTests - IndexingWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Float32ArrayTests.indexingWorks);
            QUnit.test("Float32ArrayTests - SetFloat32ArrayWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Float32ArrayTests.setFloat32ArrayWorks);
            QUnit.test("Float32ArrayTests - SetFloat32ArrayWithOffsetWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Float32ArrayTests.setFloat32ArrayWithOffsetWorks);
            QUnit.test("Float32ArrayTests - SetNormalArrayWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Float32ArrayTests.setNormalArrayWorks);
            QUnit.test("Float32ArrayTests - SetNormalArrayWithOffsetWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Float32ArrayTests.setNormalArrayWithOffsetWorks);
            QUnit.test("Float32ArrayTests - SubarrayWithBeginWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Float32ArrayTests.subarrayWithBeginWorks);
            QUnit.test("Float32ArrayTests - SubarrayWithBeginAndEndWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Float32ArrayTests.subarrayWithBeginAndEndWorks);
            QUnit.test("Float32ArrayTests - BufferPropertyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Float32ArrayTests.bufferPropertyWorks);
            QUnit.test("Float32ArrayTests - ByteOffsetPropertyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Float32ArrayTests.byteOffsetPropertyWorks);
            QUnit.test("Float32ArrayTests - ByteLengthPropertyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Float32ArrayTests.byteLengthPropertyWorks);
            QUnit.test("Float32ArrayTests - IndexOfWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Float32ArrayTests.indexOfWorks);
            QUnit.test("Float32ArrayTests - ContainsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Float32ArrayTests.containsWorks);
            QUnit.test("Float32ArrayTests - ForeachWorks_SPI_1401", Bridge.Test.Runtime.BridgeClientTestRunner.Float32ArrayTests.foreachWorks_SPI_1401);
            QUnit.test("Float32ArrayTests - GetEnumeratorWorks_SPI_1401", Bridge.Test.Runtime.BridgeClientTestRunner.Float32ArrayTests.getEnumeratorWorks_SPI_1401);
            QUnit.test("Float32ArrayTests - IEnumerableGetEnumeratorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Float32ArrayTests.iEnumerableGetEnumeratorWorks);
            QUnit.test("Float32ArrayTests - ICollectionMethodsWork_SPI_1559", Bridge.Test.Runtime.BridgeClientTestRunner.Float32ArrayTests.iCollectionMethodsWork_SPI_1559);
            QUnit.test("Float32ArrayTests - IListMethodsWork_SPI_1559", Bridge.Test.Runtime.BridgeClientTestRunner.Float32ArrayTests.iListMethodsWork_SPI_1559);
            QUnit.test("Float32ArrayTests - IListIsReadOnlyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Float32ArrayTests.iListIsReadOnlyWorks);
            QUnit.test("Float32ArrayTests - ICollectionIsReadOnlyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Float32ArrayTests.iCollectionIsReadOnlyWorks);
            QUnit.test("Float32ArrayTests - ICollectionCopyTo", Bridge.Test.Runtime.BridgeClientTestRunner.Float32ArrayTests.iCollectionCopyTo);
            QUnit.test("Float64ArrayTests - LengthConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Float64ArrayTests.lengthConstructorWorks);
            QUnit.test("Float64ArrayTests - ConstructorFromIntWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Float64ArrayTests.constructorFromIntWorks);
            QUnit.test("Float64ArrayTests - CopyConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Float64ArrayTests.copyConstructorWorks);
            QUnit.test("Float64ArrayTests - ArrayBufferConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Float64ArrayTests.arrayBufferConstructorWorks);
            QUnit.test("Float64ArrayTests - ArrayBufferWithOffsetConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Float64ArrayTests.arrayBufferWithOffsetConstructorWorks);
            QUnit.test("Float64ArrayTests - ArrayBufferWithOffsetAndLengthConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Float64ArrayTests.arrayBufferWithOffsetAndLengthConstructorWorks);
            QUnit.test("Float64ArrayTests - StaticBytesPerElementWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Float64ArrayTests.staticBytesPerElementWorks);
            QUnit.test("Float64ArrayTests - LengthWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Float64ArrayTests.lengthWorks);
            QUnit.test("Float64ArrayTests - IndexingWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Float64ArrayTests.indexingWorks);
            QUnit.test("Float64ArrayTests - SetFloat64ArrayWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Float64ArrayTests.setFloat64ArrayWorks);
            QUnit.test("Float64ArrayTests - SetFloat64ArrayWithOffsetWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Float64ArrayTests.setFloat64ArrayWithOffsetWorks);
            QUnit.test("Float64ArrayTests - SetNormalArrayWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Float64ArrayTests.setNormalArrayWorks);
            QUnit.test("Float64ArrayTests - SetNormalArrayWithOffsetWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Float64ArrayTests.setNormalArrayWithOffsetWorks);
            QUnit.test("Float64ArrayTests - SubarrayWithBeginWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Float64ArrayTests.subarrayWithBeginWorks);
            QUnit.test("Float64ArrayTests - SubarrayWithBeginAndEndWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Float64ArrayTests.subarrayWithBeginAndEndWorks);
            QUnit.test("Float64ArrayTests - BufferPropertyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Float64ArrayTests.bufferPropertyWorks);
            QUnit.test("Float64ArrayTests - ByteOffsetPropertyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Float64ArrayTests.byteOffsetPropertyWorks);
            QUnit.test("Float64ArrayTests - ByteLengthPropertyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Float64ArrayTests.byteLengthPropertyWorks);
            QUnit.test("Float64ArrayTests - IndexOfWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Float64ArrayTests.indexOfWorks);
            QUnit.test("Float64ArrayTests - ContainsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Float64ArrayTests.containsWorks);
            QUnit.test("Float64ArrayTests - ForeachWorks_SPI_1401", Bridge.Test.Runtime.BridgeClientTestRunner.Float64ArrayTests.foreachWorks_SPI_1401);
            QUnit.test("Float64ArrayTests - GetEnumeratorWorks_SPI_1401", Bridge.Test.Runtime.BridgeClientTestRunner.Float64ArrayTests.getEnumeratorWorks_SPI_1401);
            QUnit.test("Float64ArrayTests - IEnumerableGetEnumeratorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Float64ArrayTests.iEnumerableGetEnumeratorWorks);
            QUnit.test("Float64ArrayTests - ICollectionMethodsWork_SPI_1559", Bridge.Test.Runtime.BridgeClientTestRunner.Float64ArrayTests.iCollectionMethodsWork_SPI_1559);
            QUnit.test("Float64ArrayTests - IListMethodsWork_SPI_1559", Bridge.Test.Runtime.BridgeClientTestRunner.Float64ArrayTests.iListMethodsWork_SPI_1559);
            QUnit.test("Float64ArrayTests - IListIsReadOnlyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Float64ArrayTests.iListIsReadOnlyWorks);
            QUnit.test("Float64ArrayTests - ICollectionIsReadOnlyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Float64ArrayTests.iCollectionIsReadOnlyWorks);
            QUnit.test("Float64ArrayTests - ICollectionCopyTo", Bridge.Test.Runtime.BridgeClientTestRunner.Float64ArrayTests.iCollectionCopyTo);
            QUnit.test("Int16ArrayTests - LengthConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int16ArrayTests.lengthConstructorWorks);
            QUnit.test("Int16ArrayTests - ConstructorFromIntWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int16ArrayTests.constructorFromIntWorks);
            QUnit.test("Int16ArrayTests - CopyConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int16ArrayTests.copyConstructorWorks);
            QUnit.test("Int16ArrayTests - ArrayBufferConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int16ArrayTests.arrayBufferConstructorWorks);
            QUnit.test("Int16ArrayTests - ArrayBufferWithOffsetConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int16ArrayTests.arrayBufferWithOffsetConstructorWorks);
            QUnit.test("Int16ArrayTests - ArrayBufferWithOffsetAndLengthConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int16ArrayTests.arrayBufferWithOffsetAndLengthConstructorWorks);
            QUnit.test("Int16ArrayTests - StaticBytesPerElementWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int16ArrayTests.staticBytesPerElementWorks);
            QUnit.test("Int16ArrayTests - LengthWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int16ArrayTests.lengthWorks);
            QUnit.test("Int16ArrayTests - IndexingWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int16ArrayTests.indexingWorks);
            QUnit.test("Int16ArrayTests - SetInt16ArrayWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int16ArrayTests.setInt16ArrayWorks);
            QUnit.test("Int16ArrayTests - SetInt16ArrayWithOffsetWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int16ArrayTests.setInt16ArrayWithOffsetWorks);
            QUnit.test("Int16ArrayTests - SetNormalArrayWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int16ArrayTests.setNormalArrayWorks);
            QUnit.test("Int16ArrayTests - SetNormalArrayWithOffsetWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int16ArrayTests.setNormalArrayWithOffsetWorks);
            QUnit.test("Int16ArrayTests - SubarrayWithBeginWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int16ArrayTests.subarrayWithBeginWorks);
            QUnit.test("Int16ArrayTests - SubarrayWithBeginAndEndWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int16ArrayTests.subarrayWithBeginAndEndWorks);
            QUnit.test("Int16ArrayTests - BufferPropertyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int16ArrayTests.bufferPropertyWorks);
            QUnit.test("Int16ArrayTests - ByteOffsetPropertyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int16ArrayTests.byteOffsetPropertyWorks);
            QUnit.test("Int16ArrayTests - ByteLengthPropertyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int16ArrayTests.byteLengthPropertyWorks);
            QUnit.test("Int16ArrayTests - IndexOfWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int16ArrayTests.indexOfWorks);
            QUnit.test("Int16ArrayTests - ContainsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int16ArrayTests.containsWorks);
            QUnit.test("Int16ArrayTests - ForeachWorks_SPI_1401", Bridge.Test.Runtime.BridgeClientTestRunner.Int16ArrayTests.foreachWorks_SPI_1401);
            QUnit.test("Int16ArrayTests - GetEnumeratorWorks_SPI_1401", Bridge.Test.Runtime.BridgeClientTestRunner.Int16ArrayTests.getEnumeratorWorks_SPI_1401);
            QUnit.test("Int16ArrayTests - IEnumerableGetEnumeratorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int16ArrayTests.iEnumerableGetEnumeratorWorks);
            QUnit.test("Int16ArrayTests - ICollectionMethodsWork_SPI_1559", Bridge.Test.Runtime.BridgeClientTestRunner.Int16ArrayTests.iCollectionMethodsWork_SPI_1559);
            QUnit.test("Int16ArrayTests - IListMethodsWork_SPI_1559", Bridge.Test.Runtime.BridgeClientTestRunner.Int16ArrayTests.iListMethodsWork_SPI_1559);
            QUnit.test("Int16ArrayTests - IListIsReadOnlyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int16ArrayTests.iListIsReadOnlyWorks);
            QUnit.test("Int16ArrayTests - ICollectionIsReadOnlyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int16ArrayTests.iCollectionIsReadOnlyWorks);
            QUnit.test("Int16ArrayTests - ICollectionCopyTo", Bridge.Test.Runtime.BridgeClientTestRunner.Int16ArrayTests.iCollectionCopyTo);
            QUnit.test("Int32ArrayTests - LengthConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int32ArrayTests.lengthConstructorWorks);
            QUnit.test("Int32ArrayTests - ConstructorFromIntWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int32ArrayTests.constructorFromIntWorks);
            QUnit.test("Int32ArrayTests - CopyConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int32ArrayTests.copyConstructorWorks);
            QUnit.test("Int32ArrayTests - ArrayBufferConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int32ArrayTests.arrayBufferConstructorWorks);
            QUnit.test("Int32ArrayTests - ArrayBufferWithOffsetConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int32ArrayTests.arrayBufferWithOffsetConstructorWorks);
            QUnit.test("Int32ArrayTests - ArrayBufferWithOffsetAndLengthConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int32ArrayTests.arrayBufferWithOffsetAndLengthConstructorWorks);
            QUnit.test("Int32ArrayTests - StaticBytesPerElementWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int32ArrayTests.staticBytesPerElementWorks);
            QUnit.test("Int32ArrayTests - LengthWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int32ArrayTests.lengthWorks);
            QUnit.test("Int32ArrayTests - IndexingWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int32ArrayTests.indexingWorks);
            QUnit.test("Int32ArrayTests - SetInt32ArrayWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int32ArrayTests.setInt32ArrayWorks);
            QUnit.test("Int32ArrayTests - SetInt32ArrayWithOffsetWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int32ArrayTests.setInt32ArrayWithOffsetWorks);
            QUnit.test("Int32ArrayTests - SetNormalArrayWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int32ArrayTests.setNormalArrayWorks);
            QUnit.test("Int32ArrayTests - SetNormalArrayWithOffsetWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int32ArrayTests.setNormalArrayWithOffsetWorks);
            QUnit.test("Int32ArrayTests - SubarrayWithBeginWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int32ArrayTests.subarrayWithBeginWorks);
            QUnit.test("Int32ArrayTests - SubarrayWithBeginAndEndWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int32ArrayTests.subarrayWithBeginAndEndWorks);
            QUnit.test("Int32ArrayTests - BufferPropertyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int32ArrayTests.bufferPropertyWorks);
            QUnit.test("Int32ArrayTests - ByteOffsetPropertyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int32ArrayTests.byteOffsetPropertyWorks);
            QUnit.test("Int32ArrayTests - ByteLengthPropertyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int32ArrayTests.byteLengthPropertyWorks);
            QUnit.test("Int32ArrayTests - IndexOfWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int32ArrayTests.indexOfWorks);
            QUnit.test("Int32ArrayTests - ContainsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int32ArrayTests.containsWorks);
            QUnit.test("Int32ArrayTests - ForeachWorks_SPI_1401", Bridge.Test.Runtime.BridgeClientTestRunner.Int32ArrayTests.foreachWorks_SPI_1401);
            QUnit.test("Int32ArrayTests - GetEnumeratorWorks_SPI_1401", Bridge.Test.Runtime.BridgeClientTestRunner.Int32ArrayTests.getEnumeratorWorks_SPI_1401);
            QUnit.test("Int32ArrayTests - IEnumerableGetEnumeratorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int32ArrayTests.iEnumerableGetEnumeratorWorks);
            QUnit.test("Int32ArrayTests - ICollectionMethodsWork_SPI_1559", Bridge.Test.Runtime.BridgeClientTestRunner.Int32ArrayTests.iCollectionMethodsWork_SPI_1559);
            QUnit.test("Int32ArrayTests - IListMethodsWork_SPI_1559", Bridge.Test.Runtime.BridgeClientTestRunner.Int32ArrayTests.iListMethodsWork_SPI_1559);
            QUnit.test("Int32ArrayTests - IListIsReadOnlyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int32ArrayTests.iListIsReadOnlyWorks);
            QUnit.test("Int32ArrayTests - ICollectionIsReadOnlyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int32ArrayTests.iCollectionIsReadOnlyWorks);
            QUnit.test("Int32ArrayTests - ICollectionCopyTo", Bridge.Test.Runtime.BridgeClientTestRunner.Int32ArrayTests.iCollectionCopyTo);
            QUnit.test("Int8ArrayTests - LengthConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int8ArrayTests.lengthConstructorWorks);
            QUnit.test("Int8ArrayTests - ConstructorFromIntWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int8ArrayTests.constructorFromIntWorks);
            QUnit.test("Int8ArrayTests - CopyConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int8ArrayTests.copyConstructorWorks);
            QUnit.test("Int8ArrayTests - ArrayBufferConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int8ArrayTests.arrayBufferConstructorWorks);
            QUnit.test("Int8ArrayTests - ArrayBufferWithOffsetConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int8ArrayTests.arrayBufferWithOffsetConstructorWorks);
            QUnit.test("Int8ArrayTests - ArrayBufferWithOffsetAndLengthConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int8ArrayTests.arrayBufferWithOffsetAndLengthConstructorWorks);
            QUnit.test("Int8ArrayTests - StaticBytesPerElementWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int8ArrayTests.staticBytesPerElementWorks);
            QUnit.test("Int8ArrayTests - LengthWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int8ArrayTests.lengthWorks);
            QUnit.test("Int8ArrayTests - IndexingWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int8ArrayTests.indexingWorks);
            QUnit.test("Int8ArrayTests - SetInt8ArrayWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int8ArrayTests.setInt8ArrayWorks);
            QUnit.test("Int8ArrayTests - SetInt8ArrayWithOffsetWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int8ArrayTests.setInt8ArrayWithOffsetWorks);
            QUnit.test("Int8ArrayTests - SetNormalArrayWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int8ArrayTests.setNormalArrayWorks);
            QUnit.test("Int8ArrayTests - SetNormalArrayWithOffsetWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int8ArrayTests.setNormalArrayWithOffsetWorks);
            QUnit.test("Int8ArrayTests - SubarrayWithBeginWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int8ArrayTests.subarrayWithBeginWorks);
            QUnit.test("Int8ArrayTests - SubarrayWithBeginAndEndWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int8ArrayTests.subarrayWithBeginAndEndWorks);
            QUnit.test("Int8ArrayTests - BufferPropertyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int8ArrayTests.bufferPropertyWorks);
            QUnit.test("Int8ArrayTests - ByteOffsetPropertyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int8ArrayTests.byteOffsetPropertyWorks);
            QUnit.test("Int8ArrayTests - ByteLengthPropertyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int8ArrayTests.byteLengthPropertyWorks);
            QUnit.test("Int8ArrayTests - IndexOfWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int8ArrayTests.indexOfWorks);
            QUnit.test("Int8ArrayTests - ContainsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int8ArrayTests.containsWorks);
            QUnit.test("Int8ArrayTests - ForeachWorks_SPI_1401", Bridge.Test.Runtime.BridgeClientTestRunner.Int8ArrayTests.foreachWorks_SPI_1401);
            QUnit.test("Int8ArrayTests - GetEnumeratorWorks_SPI_1401", Bridge.Test.Runtime.BridgeClientTestRunner.Int8ArrayTests.getEnumeratorWorks_SPI_1401);
            QUnit.test("Int8ArrayTests - IEnumerableGetEnumeratorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int8ArrayTests.iEnumerableGetEnumeratorWorks);
            QUnit.test("Int8ArrayTests - ICollectionMethodsWork_SPI_1559", Bridge.Test.Runtime.BridgeClientTestRunner.Int8ArrayTests.iCollectionMethodsWork_SPI_1559);
            QUnit.test("Int8ArrayTests - IListMethodsWork_SPI_1559", Bridge.Test.Runtime.BridgeClientTestRunner.Int8ArrayTests.iListMethodsWork_SPI_1559);
            QUnit.test("Int8ArrayTests - IListIsReadOnlyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int8ArrayTests.iListIsReadOnlyWorks);
            QUnit.test("Int8ArrayTests - ICollectionIsReadOnlyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int8ArrayTests.iCollectionIsReadOnlyWorks);
            QUnit.test("Int8ArrayTests - ICollectionCopyTo", Bridge.Test.Runtime.BridgeClientTestRunner.Int8ArrayTests.iCollectionCopyTo);
            QUnit.test("Uint16ArrayTests - LengthConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint16ArrayTests.lengthConstructorWorks);
            QUnit.test("Uint16ArrayTests - ConstructorFromIntWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint16ArrayTests.constructorFromIntWorks);
            QUnit.test("Uint16ArrayTests - CopyConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint16ArrayTests.copyConstructorWorks);
            QUnit.test("Uint16ArrayTests - ArrayBufferConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint16ArrayTests.arrayBufferConstructorWorks);
            QUnit.test("Uint16ArrayTests - ArrayBufferWithOffsetConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint16ArrayTests.arrayBufferWithOffsetConstructorWorks);
            QUnit.test("Uint16ArrayTests - ArrayBufferWithOffsetAndLengthConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint16ArrayTests.arrayBufferWithOffsetAndLengthConstructorWorks);
            QUnit.test("Uint16ArrayTests - StaticBytesPerElementWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint16ArrayTests.staticBytesPerElementWorks);
            QUnit.test("Uint16ArrayTests - LengthWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint16ArrayTests.lengthWorks);
            QUnit.test("Uint16ArrayTests - IndexingWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint16ArrayTests.indexingWorks);
            QUnit.test("Uint16ArrayTests - SetUint16ArrayWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint16ArrayTests.setUint16ArrayWorks);
            QUnit.test("Uint16ArrayTests - SetUint16ArrayWithOffsetWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint16ArrayTests.setUint16ArrayWithOffsetWorks);
            QUnit.test("Uint16ArrayTests - SetNormalArrayWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint16ArrayTests.setNormalArrayWorks);
            QUnit.test("Uint16ArrayTests - SetNormalArrayWithOffsetWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint16ArrayTests.setNormalArrayWithOffsetWorks);
            QUnit.test("Uint16ArrayTests - SubarrayWithBeginWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint16ArrayTests.subarrayWithBeginWorks);
            QUnit.test("Uint16ArrayTests - SubarrayWithBeginAndEndWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint16ArrayTests.subarrayWithBeginAndEndWorks);
            QUnit.test("Uint16ArrayTests - BufferPropertyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint16ArrayTests.bufferPropertyWorks);
            QUnit.test("Uint16ArrayTests - ByteOffsetPropertyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint16ArrayTests.byteOffsetPropertyWorks);
            QUnit.test("Uint16ArrayTests - ByteLengthPropertyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint16ArrayTests.byteLengthPropertyWorks);
            QUnit.test("Uint16ArrayTests - IndexOfWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint16ArrayTests.indexOfWorks);
            QUnit.test("Uint16ArrayTests - ContainsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint16ArrayTests.containsWorks);
            QUnit.test("Uint16ArrayTests - ForeachWorks_SPI_1401", Bridge.Test.Runtime.BridgeClientTestRunner.Uint16ArrayTests.foreachWorks_SPI_1401);
            QUnit.test("Uint16ArrayTests - GetEnumeratorWorks_SPI_1401", Bridge.Test.Runtime.BridgeClientTestRunner.Uint16ArrayTests.getEnumeratorWorks_SPI_1401);
            QUnit.test("Uint16ArrayTests - IEnumerableGetEnumeratorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint16ArrayTests.iEnumerableGetEnumeratorWorks);
            QUnit.test("Uint16ArrayTests - ICollectionMethodsWork_SPI_1559", Bridge.Test.Runtime.BridgeClientTestRunner.Uint16ArrayTests.iCollectionMethodsWork_SPI_1559);
            QUnit.test("Uint16ArrayTests - IListMethodsWork_SPI_1559", Bridge.Test.Runtime.BridgeClientTestRunner.Uint16ArrayTests.iListMethodsWork_SPI_1559);
            QUnit.test("Uint16ArrayTests - IListIsReadOnlyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint16ArrayTests.iListIsReadOnlyWorks);
            QUnit.test("Uint16ArrayTests - ICollectionIsReadOnlyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint16ArrayTests.iCollectionIsReadOnlyWorks);
            QUnit.test("Uint16ArrayTests - ICollectionCopyTo", Bridge.Test.Runtime.BridgeClientTestRunner.Uint16ArrayTests.iCollectionCopyTo);
            QUnit.test("Uint32ArrayTests - LengthConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint32ArrayTests.lengthConstructorWorks);
            QUnit.test("Uint32ArrayTests - ConstructorFromIntWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint32ArrayTests.constructorFromIntWorks);
            QUnit.test("Uint32ArrayTests - CopyConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint32ArrayTests.copyConstructorWorks);
            QUnit.test("Uint32ArrayTests - ArrayBufferConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint32ArrayTests.arrayBufferConstructorWorks);
            QUnit.test("Uint32ArrayTests - ArrayBufferWithOffsetConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint32ArrayTests.arrayBufferWithOffsetConstructorWorks);
            QUnit.test("Uint32ArrayTests - ArrayBufferWithOffsetAndLengthConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint32ArrayTests.arrayBufferWithOffsetAndLengthConstructorWorks);
            QUnit.test("Uint32ArrayTests - StaticBytesPerElementWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint32ArrayTests.staticBytesPerElementWorks);
            QUnit.test("Uint32ArrayTests - LengthWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint32ArrayTests.lengthWorks);
            QUnit.test("Uint32ArrayTests - IndexingWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint32ArrayTests.indexingWorks);
            QUnit.test("Uint32ArrayTests - SetUint32ArrayWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint32ArrayTests.setUint32ArrayWorks);
            QUnit.test("Uint32ArrayTests - SetUint32ArrayWithOffsetWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint32ArrayTests.setUint32ArrayWithOffsetWorks);
            QUnit.test("Uint32ArrayTests - SetNormalArrayWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint32ArrayTests.setNormalArrayWorks);
            QUnit.test("Uint32ArrayTests - SetNormalArrayWithOffsetWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint32ArrayTests.setNormalArrayWithOffsetWorks);
            QUnit.test("Uint32ArrayTests - SubarrayWithBeginWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint32ArrayTests.subarrayWithBeginWorks);
            QUnit.test("Uint32ArrayTests - SubarrayWithBeginAndEndWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint32ArrayTests.subarrayWithBeginAndEndWorks);
            QUnit.test("Uint32ArrayTests - BufferPropertyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint32ArrayTests.bufferPropertyWorks);
            QUnit.test("Uint32ArrayTests - ByteOffsetPropertyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint32ArrayTests.byteOffsetPropertyWorks);
            QUnit.test("Uint32ArrayTests - ByteLengthPropertyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint32ArrayTests.byteLengthPropertyWorks);
            QUnit.test("Uint32ArrayTests - IndexOfWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint32ArrayTests.indexOfWorks);
            QUnit.test("Uint32ArrayTests - ContainsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint32ArrayTests.containsWorks);
            QUnit.test("Uint32ArrayTests - ForeachWorks_SPI_1401", Bridge.Test.Runtime.BridgeClientTestRunner.Uint32ArrayTests.foreachWorks_SPI_1401);
            QUnit.test("Uint32ArrayTests - GetEnumeratorWorks_SPI_1401", Bridge.Test.Runtime.BridgeClientTestRunner.Uint32ArrayTests.getEnumeratorWorks_SPI_1401);
            QUnit.test("Uint32ArrayTests - IEnumerableGetEnumeratorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint32ArrayTests.iEnumerableGetEnumeratorWorks);
            QUnit.test("Uint32ArrayTests - ICollectionMethodsWork_SPI_1559", Bridge.Test.Runtime.BridgeClientTestRunner.Uint32ArrayTests.iCollectionMethodsWork_SPI_1559);
            QUnit.test("Uint32ArrayTests - IListMethodsWork_SPI_1559", Bridge.Test.Runtime.BridgeClientTestRunner.Uint32ArrayTests.iListMethodsWork_SPI_1559);
            QUnit.test("Uint32ArrayTests - IListIsReadOnlyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint32ArrayTests.iListIsReadOnlyWorks);
            QUnit.test("Uint32ArrayTests - ICollectionIsReadOnlyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint32ArrayTests.iCollectionIsReadOnlyWorks);
            QUnit.test("Uint32ArrayTests - ICollectionCopyTo", Bridge.Test.Runtime.BridgeClientTestRunner.Uint32ArrayTests.iCollectionCopyTo);
            QUnit.test("Uint8ArrayTests - LengthConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ArrayTests.lengthConstructorWorks);
            QUnit.test("Uint8ArrayTests - ConstructorFromIntWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ArrayTests.constructorFromIntWorks);
            QUnit.test("Uint8ArrayTests - CopyConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ArrayTests.copyConstructorWorks);
            QUnit.test("Uint8ArrayTests - ArrayBufferConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ArrayTests.arrayBufferConstructorWorks);
            QUnit.test("Uint8ArrayTests - ArrayBufferWithOffsetConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ArrayTests.arrayBufferWithOffsetConstructorWorks);
            QUnit.test("Uint8ArrayTests - ArrayBufferWithOffsetAndLengthConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ArrayTests.arrayBufferWithOffsetAndLengthConstructorWorks);
            QUnit.test("Uint8ArrayTests - StaticBytesPerElementWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ArrayTests.staticBytesPerElementWorks);
            QUnit.test("Uint8ArrayTests - LengthWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ArrayTests.lengthWorks);
            QUnit.test("Uint8ArrayTests - IndexingWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ArrayTests.indexingWorks);
            QUnit.test("Uint8ArrayTests - SetUint8ArrayWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ArrayTests.setUint8ArrayWorks);
            QUnit.test("Uint8ArrayTests - SetUint8ArrayWithOffsetWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ArrayTests.setUint8ArrayWithOffsetWorks);
            QUnit.test("Uint8ArrayTests - SetNormalArrayWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ArrayTests.setNormalArrayWorks);
            QUnit.test("Uint8ArrayTests - SetNormalArrayWithOffsetWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ArrayTests.setNormalArrayWithOffsetWorks);
            QUnit.test("Uint8ArrayTests - SubarrayWithBeginWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ArrayTests.subarrayWithBeginWorks);
            QUnit.test("Uint8ArrayTests - SubarrayWithBeginAndEndWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ArrayTests.subarrayWithBeginAndEndWorks);
            QUnit.test("Uint8ArrayTests - BufferPropertyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ArrayTests.bufferPropertyWorks);
            QUnit.test("Uint8ArrayTests - ByteOffsetPropertyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ArrayTests.byteOffsetPropertyWorks);
            QUnit.test("Uint8ArrayTests - ByteLengthPropertyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ArrayTests.byteLengthPropertyWorks);
            QUnit.test("Uint8ArrayTests - IndexOfWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ArrayTests.indexOfWorks);
            QUnit.test("Uint8ArrayTests - ContainsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ArrayTests.containsWorks);
            QUnit.test("Uint8ArrayTests - ForeachWorks_SPI_1401", Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ArrayTests.foreachWorks_SPI_1401);
            QUnit.test("Uint8ArrayTests - GetEnumeratorWorks_SPI_1401", Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ArrayTests.getEnumeratorWorks_SPI_1401);
            QUnit.test("Uint8ArrayTests - IEnumerableGetEnumeratorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ArrayTests.iEnumerableGetEnumeratorWorks);
            QUnit.test("Uint8ArrayTests - ICollectionMethodsWork_SPI_1559", Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ArrayTests.iCollectionMethodsWork_SPI_1559);
            QUnit.test("Uint8ArrayTests - IListMethodsWork_SPI_1559", Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ArrayTests.iListMethodsWork_SPI_1559);
            QUnit.test("Uint8ArrayTests - IListIsReadOnlyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ArrayTests.iListIsReadOnlyWorks);
            QUnit.test("Uint8ArrayTests - ICollectionIsReadOnlyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ArrayTests.iCollectionIsReadOnlyWorks);
            QUnit.test("Uint8ArrayTests - ICollectionCopyTo", Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ArrayTests.iCollectionCopyTo);
            QUnit.test("Uint8ClampedArrayTests - TypePropertiesAreCorrect_SPI_1560", Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ClampedArrayTests.typePropertiesAreCorrect_SPI_1560);
            QUnit.test("Uint8ClampedArrayTests - LengthConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ClampedArrayTests.lengthConstructorWorks);
            QUnit.test("Uint8ClampedArrayTests - ConstructorFromIntWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ClampedArrayTests.constructorFromIntWorks);
            QUnit.test("Uint8ClampedArrayTests - ConstructorFromUint8ArrayWorks_SPI_TODO", Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ClampedArrayTests.constructorFromUint8ArrayWorks_SPI_TODO);
            QUnit.test("Uint8ClampedArrayTests - CopyConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ClampedArrayTests.copyConstructorWorks);
            QUnit.test("Uint8ClampedArrayTests - ArrayBufferConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ClampedArrayTests.arrayBufferConstructorWorks);
            QUnit.test("Uint8ClampedArrayTests - ArrayBufferWithOffsetConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ClampedArrayTests.arrayBufferWithOffsetConstructorWorks);
            QUnit.test("Uint8ClampedArrayTests - ArrayBufferWithOffsetAndLengthConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ClampedArrayTests.arrayBufferWithOffsetAndLengthConstructorWorks);
            QUnit.test("Uint8ClampedArrayTests - StaticBytesPerElementWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ClampedArrayTests.staticBytesPerElementWorks);
            QUnit.test("Uint8ClampedArrayTests - LengthWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ClampedArrayTests.lengthWorks);
            QUnit.test("Uint8ClampedArrayTests - IndexingWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ClampedArrayTests.indexingWorks);
            QUnit.test("Uint8ClampedArrayTests - SetUint8ClampedArrayWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ClampedArrayTests.setUint8ClampedArrayWorks);
            QUnit.test("Uint8ClampedArrayTests - SetUint8ClampedArrayWithOffsetWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ClampedArrayTests.setUint8ClampedArrayWithOffsetWorks);
            QUnit.test("Uint8ClampedArrayTests - SetNormalArrayWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ClampedArrayTests.setNormalArrayWorks);
            QUnit.test("Uint8ClampedArrayTests - SetNormalArrayWithOffsetWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ClampedArrayTests.setNormalArrayWithOffsetWorks);
            QUnit.test("Uint8ClampedArrayTests - SubarrayWithBeginWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ClampedArrayTests.subarrayWithBeginWorks);
            QUnit.test("Uint8ClampedArrayTests - SubarrayWithBeginAndEndWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ClampedArrayTests.subarrayWithBeginAndEndWorks);
            QUnit.test("Uint8ClampedArrayTests - BufferPropertyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ClampedArrayTests.bufferPropertyWorks);
            QUnit.test("Uint8ClampedArrayTests - ByteOffsetPropertyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ClampedArrayTests.byteOffsetPropertyWorks);
            QUnit.test("Uint8ClampedArrayTests - ByteLengthPropertyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ClampedArrayTests.byteLengthPropertyWorks);
            QUnit.test("Uint8ClampedArrayTests - IndexOfWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ClampedArrayTests.indexOfWorks);
            QUnit.test("Uint8ClampedArrayTests - ContainsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ClampedArrayTests.containsWorks);
            QUnit.test("Uint8ClampedArrayTests - ForeachWorks_SPI_1401", Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ClampedArrayTests.foreachWorks_SPI_1401);
            QUnit.test("Uint8ClampedArrayTests - GetEnumeratorWorks_SPI_1401", Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ClampedArrayTests.getEnumeratorWorks_SPI_1401);
            QUnit.test("Uint8ClampedArrayTests - ICollectionMethodsWork_SPI_1559_1560", Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ClampedArrayTests.iCollectionMethodsWork_SPI_1559_1560);
            QUnit.test("Uint8ClampedArrayTests - IListMethodsWork_SPI_1559_1560", Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ClampedArrayTests.iListMethodsWork_SPI_1559_1560);
            QUnit.test("Uint8ClampedArrayTests - IListIsReadOnlyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ClampedArrayTests.iListIsReadOnlyWorks);
            QUnit.test("Uint8ClampedArrayTests - ICollectionIsReadOnlyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ClampedArrayTests.iCollectionIsReadOnlyWorks);
            QUnit.test("Uint8ClampedArrayTests - ICollectionCopyTo", Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ClampedArrayTests.iCollectionCopyTo);
            QUnit.module("Utilities");
            QUnit.test("Environment - NewLineIsAStringContainingOnlyTheNewLineChar", Bridge.Test.Runtime.BridgeClientTestRunner.EnvironmentTests.newLineIsAStringContainingOnlyTheNewLineChar);
            QUnit.module("СultureInfo");
            QUnit.test("TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestRunner.CultureInfoTests.typePropertiesAreCorrect);
            QUnit.test("GetFormatWorks", Bridge.Test.Runtime.BridgeClientTestRunner.CultureInfoTests.getFormatWorks);
            QUnit.test("InvariantWorks", Bridge.Test.Runtime.BridgeClientTestRunner.CultureInfoTests.invariantWorks);
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.AggregateExceptionTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.AggregateExceptionTests)],
        statics: {
            typePropertiesAreCorrect: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.AggregateExceptionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.AggregateExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TypePropertiesAreCorrect()",
                    line: "20"
                } ));
                t.Fixture.typePropertiesAreCorrect();
            },
            defaultConstructorWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.AggregateExceptionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.AggregateExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "DefaultConstructorWorks()",
                    line: "29"
                } ));
                t.Fixture.defaultConstructorWorks();
            },
            constructorWithIEnumerableInnerExceptionsWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.AggregateExceptionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.AggregateExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ConstructorWithIEnumerableInnerExceptionsWorks()",
                    line: "40"
                } ));
                t.Fixture.constructorWithIEnumerableInnerExceptionsWorks();
            },
            constructorWithInnerExceptionArrayWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.AggregateExceptionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.AggregateExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ConstructorWithInnerExceptionArrayWorks()",
                    line: "71"
                } ));
                t.Fixture.constructorWithInnerExceptionArrayWorks();
            },
            constructorWithMessageWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.AggregateExceptionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.AggregateExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ConstructorWithMessageWorks()",
                    line: "102"
                } ));
                t.Fixture.constructorWithMessageWorks();
            },
            constructorWithMessageAndIEnumerableInnerExceptionsWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.AggregateExceptionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.AggregateExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ConstructorWithMessageAndIEnumerableInnerExceptionsWorks()",
                    line: "113"
                } ));
                t.Fixture.constructorWithMessageAndIEnumerableInnerExceptionsWorks();
            },
            constructorWithMessageAndInnerExceptionArrayWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.AggregateExceptionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.AggregateExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ConstructorWithMessageAndInnerExceptionArrayWorks()",
                    line: "144"
                } ));
                t.Fixture.constructorWithMessageAndInnerExceptionArrayWorks();
            },
            flattenWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.AggregateExceptionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.AggregateExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FlattenWorks()",
                    line: "175"
                } ));
                t.Fixture.flattenWorks();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                    project: "Batch1",
                    className: "Bridge.ClientTest.Exceptions.AggregateExceptionTests",
                    file: "Batch1\\Exceptions\\AggregateExceptionTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.AmbiguousMatchExceptionTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.AmbiguousMatchExceptionTests)],
        statics: {
            typePropertiesAreCorrect: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.AmbiguousMatchExceptionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.AmbiguousMatchExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TypePropertiesAreCorrect()",
                    line: "12"
                } ));
                t.Fixture.typePropertiesAreCorrect();
            },
            defaultConstructorWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.AmbiguousMatchExceptionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.AmbiguousMatchExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "DefaultConstructorWorks()",
                    line: "26"
                } ));
                t.Fixture.defaultConstructorWorks();
            },
            constructorWithMessageWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.AmbiguousMatchExceptionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.AmbiguousMatchExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ConstructorWithMessageWorks()",
                    line: "35"
                } ));
                t.Fixture.constructorWithMessageWorks();
            },
            constructorWithMessageAndInnerExceptionWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.AmbiguousMatchExceptionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.AmbiguousMatchExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ConstructorWithMessageAndInnerExceptionWorks()",
                    line: "44"
                } ));
                t.Fixture.constructorWithMessageAndInnerExceptionWorks();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                    project: "Batch1",
                    className: "Bridge.ClientTest.Exceptions.AmbiguousMatchExceptionTests",
                    file: "Batch1\\Exceptions\\AmbiguousMatchExceptionTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.ArgumentExceptionTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.ArgumentExceptionTests)],
        statics: {
            typePropertiesAreCorrect: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.ArgumentExceptionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArgumentExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TypePropertiesAreCorrect()",
                    line: "12"
                } ));
                t.Fixture.typePropertiesAreCorrect();
            },
            defaultConstructorWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.ArgumentExceptionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArgumentExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "DefaultConstructorWorks()",
                    line: "21"
                } ));
                t.Fixture.defaultConstructorWorks();
            },
            constructorWithMessageWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.ArgumentExceptionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArgumentExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ConstructorWithMessageWorks()",
                    line: "31"
                } ));
                t.Fixture.constructorWithMessageWorks();
            },
            constructorWithMessageAndInnerExceptionWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.ArgumentExceptionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArgumentExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ConstructorWithMessageAndInnerExceptionWorks()",
                    line: "41"
                } ));
                t.Fixture.constructorWithMessageAndInnerExceptionWorks();
            },
            constructorWithMessageAndParamNameWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.ArgumentExceptionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArgumentExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ConstructorWithMessageAndParamNameWorks()",
                    line: "52"
                } ));
                t.Fixture.constructorWithMessageAndParamNameWorks();
            },
            constructorWithMessageAndParamNameAndInnerExceptionWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.ArgumentExceptionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArgumentExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ConstructorWithMessageAndParamNameAndInnerExceptionWorks()",
                    line: "62"
                } ));
                t.Fixture.constructorWithMessageAndParamNameAndInnerExceptionWorks();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                    project: "Batch1",
                    className: "Bridge.ClientTest.Exceptions.ArgumentExceptionTests",
                    file: "Batch1\\Exceptions\\ArgumentExceptionTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.ArgumentNullExceptionTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.ArgumentNullExceptionTests)],
        statics: {
            typePropertiesAreCorrect: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.ArgumentNullExceptionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArgumentNullExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TypePropertiesAreCorrect()",
                    line: "10"
                } ));
                t.Fixture.typePropertiesAreCorrect();
            },
            defaultConstructorWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.ArgumentNullExceptionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArgumentNullExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "DefaultConstructorWorks()",
                    line: "20"
                } ));
                t.Fixture.defaultConstructorWorks();
            },
            constructorWithParamNameWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.ArgumentNullExceptionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArgumentNullExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ConstructorWithParamNameWorks()",
                    line: "30"
                } ));
                t.Fixture.constructorWithParamNameWorks();
            },
            constructorWithParamNameAndMessageWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.ArgumentNullExceptionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArgumentNullExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ConstructorWithParamNameAndMessageWorks()",
                    line: "40"
                } ));
                t.Fixture.constructorWithParamNameAndMessageWorks();
            },
            constructorWithMessageAndInnerExceptionWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.ArgumentNullExceptionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArgumentNullExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ConstructorWithMessageAndInnerExceptionWorks()",
                    line: "50"
                } ));
                t.Fixture.constructorWithMessageAndInnerExceptionWorks();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                    project: "Batch1",
                    className: "Bridge.ClientTest.Exceptions.ArgumentNullExceptionTests",
                    file: "Batch1\\Exceptions\\ArgumentNullExceptionTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.ArgumentOutOfRangeExceptionTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.ArgumentOutOfRangeExceptionTests)],
        statics: {
            typePropertiesAreCorrect: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.ArgumentOutOfRangeExceptionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArgumentOutOfRangeExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TypePropertiesAreCorrect()",
                    line: "10"
                } ));
                t.Fixture.typePropertiesAreCorrect();
            },
            defaultConstructorWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.ArgumentOutOfRangeExceptionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArgumentOutOfRangeExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "DefaultConstructorWorks()",
                    line: "20"
                } ));
                t.Fixture.defaultConstructorWorks();
            },
            constructorWithParamNameWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.ArgumentOutOfRangeExceptionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArgumentOutOfRangeExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ConstructorWithParamNameWorks()",
                    line: "31"
                } ));
                t.Fixture.constructorWithParamNameWorks();
            },
            constructorWithParamNameAndMessageWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.ArgumentOutOfRangeExceptionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArgumentOutOfRangeExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ConstructorWithParamNameAndMessageWorks()",
                    line: "42"
                } ));
                t.Fixture.constructorWithParamNameAndMessageWorks();
            },
            constructorWithMessageAndInnerExceptionWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.ArgumentOutOfRangeExceptionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArgumentOutOfRangeExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ConstructorWithMessageAndInnerExceptionWorks()",
                    line: "53"
                } ));
                t.Fixture.constructorWithMessageAndInnerExceptionWorks();
            },
            constructorWithParamNameAndActualValueAndMessageWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.ArgumentOutOfRangeExceptionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArgumentOutOfRangeExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ConstructorWithParamNameAndActualValueAndMessageWorks()",
                    line: "65"
                } ));
                t.Fixture.constructorWithParamNameAndActualValueAndMessageWorks();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                    project: "Batch1",
                    className: "Bridge.ClientTest.Exceptions.ArgumentOutOfRangeExceptionTests",
                    file: "Batch1\\Exceptions\\ArgumentOutOfRangeExceptionTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.ArgumentsTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArgumentsTests)],
        statics: {
            lengthWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArgumentsTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArgumentsTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "LengthWorks()",
                    line: "45"
                } ));
                t.Fixture.lengthWorks();
            },
            getArgumentWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArgumentsTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArgumentsTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "GetArgumentWorks()",
                    line: "53"
                } ));
                t.Fixture.getArgumentWorks();
            },
            toArrayWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArgumentsTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArgumentsTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ToArrayWorks()",
                    line: "61"
                } ));
                t.Fixture.toArrayWorks();
            },
            toArrayOfTWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArgumentsTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArgumentsTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ToArrayOfTWorks()",
                    line: "69"
                } ));
                t.Fixture.toArrayOfTWorks();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                    project: "Batch1",
                    className: "Bridge.ClientTest.ArgumentsTests",
                    file: "Batch1\\ArgumentsTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.ArithmeticExceptionTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.ArithmeticExceptionTests)],
        statics: {
            typePropertiesAreCorrect: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.ArithmeticExceptionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArithmeticExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TypePropertiesAreCorrect()",
                    line: "10"
                } ));
                t.Fixture.typePropertiesAreCorrect();
            },
            defaultConstructorWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.ArithmeticExceptionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArithmeticExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "DefaultConstructorWorks()",
                    line: "19"
                } ));
                t.Fixture.defaultConstructorWorks();
            },
            constructorWithMessageWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.ArithmeticExceptionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArithmeticExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ConstructorWithMessageWorks()",
                    line: "28"
                } ));
                t.Fixture.constructorWithMessageWorks();
            },
            constructorWithMessageAndInnerExceptionWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.ArithmeticExceptionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArithmeticExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ConstructorWithMessageAndInnerExceptionWorks()",
                    line: "37"
                } ));
                t.Fixture.constructorWithMessageAndInnerExceptionWorks();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                    project: "Batch1",
                    className: "Bridge.ClientTest.Exceptions.ArithmeticExceptionTests",
                    file: "Batch1\\Exceptions\\ArithmeticExceptionTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.ArrayBufferTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.ArrayBufferTests)],
        statics: {
            typePropertiesAreCorrect: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.ArrayBufferTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayBufferTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TypePropertiesAreCorrect()",
                    line: "19"
                } ));
                t.Fixture.typePropertiesAreCorrect();
            },
            constructorWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.ArrayBufferTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayBufferTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ConstructorWorks()",
                    line: "35"
                } ));
                t.Fixture.constructorWorks();
            },
            byteLengthPropertyWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.ArrayBufferTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayBufferTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ByteLengthPropertyWorks()",
                    line: "43"
                } ));
                t.Fixture.byteLengthPropertyWorks();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                    project: "Batch1",
                    className: "Bridge.ClientTest.Collections.Native.ArrayBufferTests",
                    file: "Batch1\\Collections\\Native\\ArrayBufferTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet1)],
        statics: {
            typePropertiesAreCorrect: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet1).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TypePropertiesAreCorrect()",
                    line: "36"
                } ));
                t.Fixture.typePropertiesAreCorrect();
            },
            createWithNegativeLenghtShouldThrow: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet1).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "CreateWithNegativeLenghtShouldThrow()",
                    line: "50"
                } ));
                t.Fixture.createWithNegativeLenghtShouldThrow();
            },
            lengthWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet1).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "LengthWorks()",
                    line: "66"
                } ));
                t.Fixture.lengthWorks();
            },
            rankIsOne: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet1).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "RankIsOne()",
                    line: "74"
                } ));
                t.Fixture.rankIsOne();
            },
            getLengthWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet1).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "GetLengthWorks()",
                    line: "80"
                } ));
                t.Fixture.getLengthWorks();
            },
            getLowerBound: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet1).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "GetLowerBound()",
                    line: "88"
                } ));
                t.Fixture.getLowerBound();
            },
            getUpperBoundWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet1).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "GetUpperBoundWorks()",
                    line: "96"
                } ));
                t.Fixture.getUpperBoundWorks();
            },
            gettingValueByIndexWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet1).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "GettingValueByIndexWorks()",
                    line: "104"
                } ));
                t.Fixture.gettingValueByIndexWorks();
            },
            getValueWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet1).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "GetValueWorks()",
                    line: "111"
                } ));
                t.Fixture.getValueWorks();
            },
            settingValueByIndexWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet1).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "SettingValueByIndexWorks()",
                    line: "118"
                } ));
                t.Fixture.settingValueByIndexWorks();
            },
            setValueWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet1).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "SetValueWorks()",
                    line: "128"
                } ));
                t.Fixture.setValueWorks();
            },
            foreachWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet1).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ForeachWorks()",
                    line: "138"
                } ));
                t.Fixture.foreachWorks();
            },
            cloneWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet1).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "CloneWorks()",
                    line: "149"
                } ));
                t.Fixture.cloneWorks();
            },
            concatWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet1).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ConcatWorks()",
                    line: "158"
                } ));
                t.Fixture.concatWorks();
            },
            containsWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet1).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ContainsWorks()",
                    line: "167"
                } ));
                t.Fixture.containsWorks();
            },
            copyToSameBoundWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet1).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "CopyToSameBoundWorks()",
                    line: "175"
                } ));
                t.Fixture.copyToSameBoundWorks();
            },
            copyToOffsetBoundWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet1).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "CopyToOffsetBoundWorks()",
                    line: "188"
                } ));
                t.Fixture.copyToOffsetBoundWorks();
            },
            copyToIllegalBoundWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet1).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "CopyToIllegalBoundWorks()",
                    line: "203"
                } ));
                t.Fixture.copyToIllegalBoundWorks();
            },
            containsUsesEqualsMethod: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet1).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ContainsUsesEqualsMethod()",
                    line: "219"
                } ));
                t.Fixture.containsUsesEqualsMethod();
            },
            allWithArrayItemFilterCallbackWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet1).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "AllWithArrayItemFilterCallbackWorks()",
                    line: "227"
                } ));
                t.Fixture.allWithArrayItemFilterCallbackWorks();
            },
            sliceWithoutEndWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet1).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "SliceWithoutEndWorks()",
                    line: "234"
                } ));
                t.Fixture.sliceWithoutEndWorks();
            },
            foreachWithArrayItemCallbackWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet1).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ForeachWithArrayItemCallbackWorks()",
                    line: "241"
                } ));
                t.Fixture.foreachWithArrayItemCallbackWorks();
            },
            foreachWithArrayCallbackWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet1).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ForeachWithArrayCallbackWorks()",
                    line: "249"
                } ));
                t.Fixture.foreachWithArrayCallbackWorks();
            },
            indexOfWithoutStartIndexWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet1).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "IndexOfWithoutStartIndexWorks()",
                    line: "257"
                } ));
                t.Fixture.indexOfWithoutStartIndexWorks();
            },
            indexOfWithoutStartIndexUsesEqualsMethod: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet1).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "IndexOfWithoutStartIndexUsesEqualsMethod()",
                    line: "263"
                } ));
                t.Fixture.indexOfWithoutStartIndexUsesEqualsMethod();
            },
            indexOfWithStartIndexWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet1).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "IndexOfWithStartIndexWorks()",
                    line: "271"
                } ));
                t.Fixture.indexOfWithStartIndexWorks();
            },
            joinWithoutDelimiterWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet1).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "JoinWithoutDelimiterWorks()",
                    line: "277"
                } ));
                t.Fixture.joinWithoutDelimiterWorks();
            },
            reverseWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet1).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ReverseWorks()",
                    line: "285"
                } ));
                t.Fixture.reverseWorks();
            },
            anyWithArrayItemFilterCallbackWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet1).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "AnyWithArrayItemFilterCallbackWorks()",
                    line: "293"
                } ));
                t.Fixture.anyWithArrayItemFilterCallbackWorks();
            },
            binarySearch1Works: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet1).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "BinarySearch1Works()",
                    line: "300"
                } ));
                t.Fixture.binarySearch1Works();
            },
            binarySearch2Works: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet1).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "BinarySearch2Works()",
                    line: "309"
                } ));
                t.Fixture.binarySearch2Works();
            },
            binarySearch3Works: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet1).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "BinarySearch3Works()",
                    line: "326"
                } ));
                t.Fixture.binarySearch3Works();
            },
            binarySearch4Works: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet1).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "BinarySearch4Works()",
                    line: "335"
                } ));
                t.Fixture.binarySearch4Works();
            },
            binarySearchExceptionsWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet1).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "BinarySearchExceptionsWorks()",
                    line: "344"
                } ));
                t.Fixture.binarySearchExceptionsWorks();
            },
            sortWithDefaultCompareWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet1).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "SortWithDefaultCompareWorks()",
                    line: "355"
                } ));
                t.Fixture.sortWithDefaultCompareWorks();
            },
            sort1Works: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet1).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "Sort1Works()",
                    line: "363"
                } ));
                t.Fixture.sort1Works();
            },
            sort2Works: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet1).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "Sort2Works()",
                    line: "371"
                } ));
                t.Fixture.sort2Works();
            },
            sort3Works: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet1).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "Sort3Works()",
                    line: "379"
                } ));
                t.Fixture.sort3Works();
            },
            sort4Works: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet1).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "Sort4Works()",
                    line: "387"
                } ));
                t.Fixture.sort4Works();
            },
            sortExceptionsWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet1).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "SortExceptionsWorks()",
                    line: "395"
                } ));
                t.Fixture.sortExceptionsWorks();
            },
            foreachWhenCastToIListWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet1).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ForeachWhenCastToIListWorks()",
                    line: "403"
                } ));
                t.Fixture.foreachWhenCastToIListWorks();
            },
            iCollectionCountWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet1).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ICollectionCountWorks()",
                    line: "415"
                } ));
                t.Fixture.iCollectionCountWorks();
            },
            iCollectionIsReadOnlyWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet1).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ICollectionIsReadOnlyWorks()",
                    line: "422"
                } ));
                t.Fixture.iCollectionIsReadOnlyWorks();
            },
            iCollectionAddWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet1).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ICollectionAddWorks()",
                    line: "429"
                } ));
                t.Fixture.iCollectionAddWorks();
            },
            iCollectionClearWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet1).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ICollectionClearWorks()",
                    line: "437"
                } ));
                t.Fixture.iCollectionClearWorks();
            },
            iCollectionContainsWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet1).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ICollectionContainsWorks()",
                    line: "445"
                } ));
                t.Fixture.iCollectionContainsWorks();
            },
            iCollectionContainsUsesEqualsMethod: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet1).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ICollectionContainsUsesEqualsMethod()",
                    line: "453"
                } ));
                t.Fixture.iCollectionContainsUsesEqualsMethod();
            },
            iCollectionCopyToSameBoundWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet1).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ICollectionCopyToSameBoundWorks()",
                    line: "461"
                } ));
                t.Fixture.iCollectionCopyToSameBoundWorks();
            },
            iCollectionCopyToOffsetBoundWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet1).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ICollectionCopyToOffsetBoundWorks()",
                    line: "474"
                } ));
                t.Fixture.iCollectionCopyToOffsetBoundWorks();
            },
            iCollectionCopyToIllegalBoundWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet1).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ICollectionCopyToIllegalBoundWorks()",
                    line: "489"
                } ));
                t.Fixture.iCollectionCopyToIllegalBoundWorks();
            },
            iCollectionRemoveWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet1).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ICollectionRemoveWorks()",
                    line: "505"
                } ));
                t.Fixture.iCollectionRemoveWorks();
            },
            iListIsReadOnlyWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet1).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "IListIsReadOnlyWorks()",
                    line: "513"
                } ));
                t.Fixture.iListIsReadOnlyWorks();
            },
            iListIndexingWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet1).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "IListIndexingWorks()",
                    line: "520"
                } ));
                t.Fixture.iListIndexingWorks();
            },
            iListIndexOfWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet1).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "IListIndexOfWorks()",
                    line: "529"
                } ));
                t.Fixture.iListIndexOfWorks();
            },
            iListIndexOfUsesEqualsMethod: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet1).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "IListIndexOfUsesEqualsMethod()",
                    line: "537"
                } ));
                t.Fixture.iListIndexOfUsesEqualsMethod();
            },
            iListInsertWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet1).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "IListInsertWorks()",
                    line: "545"
                } ));
                t.Fixture.iListInsertWorks();
            },
            iListRemoveAtWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet1).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "IListRemoveAtWorks()",
                    line: "553"
                } ));
                t.Fixture.iListRemoveAtWorks();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                    project: "Batch1",
                    className: "Bridge.ClientTest.ArrayTests.ArrayTestsSet1",
                    file: "Batch1\\ArrayTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet2", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet2)],
        statics: {
            testArrayAsIListOfT: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet2).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet2, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TestArrayAsIListOfT()",
                    line: "566"
                } ));
                Bridge.ClientTest.ArrayTests.ArrayTestsSet2.testArrayAsIListOfT();
            },
            testTrivials: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet2).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet2, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TestTrivials()",
                    line: "627"
                } ));
                Bridge.ClientTest.ArrayTests.ArrayTestsSet2.testTrivials();
            },
            testGetAndSetValue: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet2).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet2, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TestGetAndSetValue()",
                    line: "798"
                } ));
                Bridge.ClientTest.ArrayTests.ArrayTestsSet2.testGetAndSetValue();
            },
            testClear: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet2).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet2, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TestClear()",
                    line: "833"
                } ));
                Bridge.ClientTest.ArrayTests.ArrayTestsSet2.testClear();
            },
            testCopy_GCRef: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet2).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet2, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TestCopy_GCRef()",
                    line: "1014"
                } ));
                Bridge.ClientTest.ArrayTests.ArrayTestsSet2.testCopy_GCRef();
            },
            testCopy_VTToObj: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet2).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet2, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TestCopy_VTToObj()",
                    line: "1037"
                } ));
                Bridge.ClientTest.ArrayTests.ArrayTestsSet2.testCopy_VTToObj();
            },
            testCopy_VTWithGCRef: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet2).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet2, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TestCopy_VTWithGCRef()",
                    line: "1077"
                } ));
                Bridge.ClientTest.ArrayTests.ArrayTestsSet2.testCopy_VTWithGCRef();
            },
            testCopy_VTNoGCRef: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet2).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet2, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TestCopy_VTNoGCRef()",
                    line: "1138"
                } ));
                Bridge.ClientTest.ArrayTests.ArrayTestsSet2.testCopy_VTNoGCRef();
            },
            testFind: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet2).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet2, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TestFind()",
                    line: "1173"
                } ));
                Bridge.ClientTest.ArrayTests.ArrayTestsSet2.testFind();
            },
            testForEach: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet2).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet2, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TestForEach()",
                    line: "1247"
                } ));
                Bridge.ClientTest.ArrayTests.ArrayTestsSet2.testForEach();
            },
            testGetEnumerator: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet2).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet2, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TestGetEnumerator()",
                    line: "1259"
                } ));
                Bridge.ClientTest.ArrayTests.ArrayTestsSet2.testGetEnumerator();
            },
            testIndexOf: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet2).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet2, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TestIndexOf()",
                    line: "1293"
                } ));
                Bridge.ClientTest.ArrayTests.ArrayTestsSet2.testIndexOf();
            },
            testLastIndexOf: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet2).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet2, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TestLastIndexOf()",
                    line: "1368"
                } ));
                Bridge.ClientTest.ArrayTests.ArrayTestsSet2.testLastIndexOf();
            },
            testResize: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet2).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet2, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TestResize()",
                    line: "1443"
                } ));
                Bridge.ClientTest.ArrayTests.ArrayTestsSet2.testResize();
            },
            testReverse: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet2).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet2, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TestReverse()",
                    line: "1474"
                } ));
                Bridge.ClientTest.ArrayTests.ArrayTestsSet2.testReverse();
            },
            testSort: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet2).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet2, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TestSort()",
                    line: "1514"
                } ));
                Bridge.ClientTest.ArrayTests.ArrayTestsSet2.testSort();
            },
            testTrueForAll: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet2).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet2, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TestTrueForAll()",
                    line: "1585"
                } ));
                Bridge.ClientTest.ArrayTests.ArrayTestsSet2.testTrueForAll();
            },
            testSetValueCasting: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet2).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet2, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TestSetValueCasting()",
                    line: "1643"
                } ));
                Bridge.ClientTest.ArrayTests.ArrayTestsSet2.testSetValueCasting();
            },
            testValueTypeToReferenceCopy: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet2).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet2, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TestValueTypeToReferenceCopy()",
                    line: "1699"
                } ));
                Bridge.ClientTest.ArrayTests.ArrayTestsSet2.testValueTypeToReferenceCopy();
            },
            testReferenceToValueTypeCopy: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet2).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet2, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TestReferenceToValueTypeCopy()",
                    line: "1759"
                } ));
                Bridge.ClientTest.ArrayTests.ArrayTestsSet2.testReferenceToValueTypeCopy();
            },
            testArrayConstructionMultidimArrays: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet2).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet2, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TestArrayConstructionMultidimArrays()",
                    line: "1890"
                } ));
                Bridge.ClientTest.ArrayTests.ArrayTestsSet2.testArrayConstructionMultidimArrays();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                    project: "Batch1",
                    className: "Bridge.ClientTest.ArrayTests.ArrayTestsSet2",
                    file: "Batch1\\ArrayTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.AssemblyTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch1.Reflection.AssemblyTests)],
        statics: {
            getExecutingAssemblyWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch1.Reflection.AssemblyTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.AssemblyTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "GetExecutingAssemblyWorks()",
                    line: "87"
                } ));
                t.Fixture.getExecutingAssemblyWorks();
            },
            getAssemblyForTypeWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch1.Reflection.AssemblyTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.AssemblyTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "GetAssemblyForTypeWorks()",
                    line: "93"
                } ));
                t.Fixture.getAssemblyForTypeWorks();
            },
            fullNameWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch1.Reflection.AssemblyTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.AssemblyTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FullNameWorks()",
                    line: "100"
                } ));
                t.Fixture.fullNameWorks();
            },
            toStringWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch1.Reflection.AssemblyTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.AssemblyTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ToStringWorks()",
                    line: "107"
                } ));
                t.Fixture.toStringWorks();
            },
            getTypesWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch1.Reflection.AssemblyTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.AssemblyTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "GetTypesWorks()",
                    line: "114"
                } ));
                t.Fixture.getTypesWorks();
            },
            getTypesWithImportedModuleWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch1.Reflection.AssemblyTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.AssemblyTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "GetTypesWithImportedModuleWorks()",
                    line: "124"
                } ));
                t.Fixture.getTypesWithImportedModuleWorks();
            },
            getTypeWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch1.Reflection.AssemblyTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.AssemblyTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "GetTypeWorks()",
                    line: "135"
                } ));
                t.Fixture.getTypeWorks();
            },
            getTypeWorksWithGenerics: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch1.Reflection.AssemblyTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.AssemblyTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "GetTypeWorksWithGenerics()",
                    line: "143"
                } ));
                t.Fixture.getTypeWorksWithGenerics();
            },
            getTypeWithImportedModuleWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch1.Reflection.AssemblyTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.AssemblyTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "GetTypeWithImportedModuleWorks()",
                    line: "150"
                } ));
                t.Fixture.getTypeWithImportedModuleWorks();
            },
            assemblyOfBuiltInTypes: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch1.Reflection.AssemblyTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.AssemblyTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "AssemblyOfBuiltInTypes()",
                    line: "160"
                } ));
                t.Fixture.assemblyOfBuiltInTypes();
            },
            createInstanceWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch1.Reflection.AssemblyTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.AssemblyTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "CreateInstanceWorks()",
                    line: "171"
                } ));
                t.Fixture.createInstanceWorks();
            },
            getCustomAttributesWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch1.Reflection.AssemblyTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.AssemblyTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "GetCustomAttributesWorks()",
                    line: "179"
                } ));
                t.Fixture.getCustomAttributesWorks();
            },
            loadCanReturnReferenceToLoadedAssembly: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch1.Reflection.AssemblyTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.AssemblyTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "LoadCanReturnReferenceToLoadedAssembly()",
                    line: "205"
                } ));
                t.Fixture.loadCanReturnReferenceToLoadedAssembly();
            },
            getManifestResourceNamesWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch1.Reflection.AssemblyTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.AssemblyTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "GetManifestResourceNamesWorks()",
                    line: "215"
                } ));
                t.Fixture.getManifestResourceNamesWorks();
            },
            getManifestResourceDataAsBase64WithoutTypeWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch1.Reflection.AssemblyTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.AssemblyTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "GetManifestResourceDataAsBase64WithoutTypeWorks()",
                    line: "223"
                } ));
                t.Fixture.getManifestResourceDataAsBase64WithoutTypeWorks();
            },
            getManifestResourceDataAsBase64WithTypeWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch1.Reflection.AssemblyTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.AssemblyTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "GetManifestResourceDataAsBase64WithTypeWorks()",
                    line: "231"
                } ));
                t.Fixture.getManifestResourceDataAsBase64WithTypeWorks();
            },
            getManifestResourceDataWithoutTypeWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch1.Reflection.AssemblyTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.AssemblyTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "GetManifestResourceDataWithoutTypeWorks()",
                    line: "239"
                } ));
                t.Fixture.getManifestResourceDataWithoutTypeWorks();
            },
            getManifestResourceDataWithTypeWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch1.Reflection.AssemblyTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.AssemblyTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "GetManifestResourceDataWithTypeWorks()",
                    line: "247"
                } ));
                t.Fixture.getManifestResourceDataWithTypeWorks();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                    project: "Batch1",
                    className: "Bridge.ClientTest.Batch1.Reflection.AssemblyTests",
                    file: "Batch1\\Reflection\\AssemblyTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.AsyncTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.AsyncTests)],
        statics: {
            asyncVoid: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.AsyncTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.AsyncTests, 3, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "AsyncVoid()",
                    line: "12"
                } ));
                t.Fixture.asyncVoid();
            },
            asyncTask: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.AsyncTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.AsyncTests, 7, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "AsyncTask()",
                    line: "43"
                } ));
                t.Fixture.asyncTask();
            },
            asyncTaskBodyThrowsException: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.AsyncTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.AsyncTests, 8, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "AsyncTaskBodyThrowsException()",
                    line: "79"
                } ));
                t.Fixture.asyncTaskBodyThrowsException();
            },
            awaitTaskThatFaults: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.AsyncTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.AsyncTests, 8, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "AwaitTaskThatFaults()",
                    line: "118"
                } ));
                t.Fixture.awaitTaskThatFaults();
            },
            aggregateExceptionsAreUnwrappedWhenAwaitingTask: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.AsyncTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.AsyncTests, 2, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "AggregateExceptionsAreUnwrappedWhenAwaitingTask()",
                    line: "156"
                } ));
                t.Fixture.aggregateExceptionsAreUnwrappedWhenAwaitingTask();
            },
            asyncTaskThatReturnsValue: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.AsyncTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.AsyncTests, 8, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "AsyncTaskThatReturnsValue()",
                    line: "192"
                } ));
                t.Fixture.asyncTaskThatReturnsValue();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                    project: "Batch1",
                    className: "Bridge.ClientTest.Threading.AsyncTests",
                    file: "Batch1\\Threading\\Tasks\\AsyncTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.AttributeTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch1.Reflection.AttributeTests)],
        statics: {
            getCustomAttributesForAssemblyWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch1.Reflection.AttributeTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.AttributeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "GetCustomAttributesForAssemblyWorks()",
                    line: "51"
                } ));
                t.Fixture.getCustomAttributesForAssemblyWorks();
            },
            getCustomAttributesForMemberInfoWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch1.Reflection.AttributeTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.AttributeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "GetCustomAttributesForMemberInfoWorks()",
                    line: "97"
                } ));
                t.Fixture.getCustomAttributesForMemberInfoWorks();
            },
            getCustomAttributesForMemberInfoInheritTrueWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch1.Reflection.AttributeTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.AttributeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "GetCustomAttributesForMemberInfoInheritTrueWorks()",
                    line: "118"
                } ));
                t.Fixture.getCustomAttributesForMemberInfoInheritTrueWorks();
            },
            getCustomAttributesForMemberInfoInheritFalseWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch1.Reflection.AttributeTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.AttributeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "GetCustomAttributesForMemberInfoInheritFalseWorks()",
                    line: "139"
                } ));
                t.Fixture.getCustomAttributesForMemberInfoInheritFalseWorks();
            },
            getCustomAttributesForMemberInfoTypeWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch1.Reflection.AttributeTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.AttributeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "GetCustomAttributesForMemberInfoTypeWorks()",
                    line: "160"
                } ));
                t.Fixture.getCustomAttributesForMemberInfoTypeWorks();
            },
            getCustomAttributesForMemberInfoTypeInheritFalseWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch1.Reflection.AttributeTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.AttributeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "GetCustomAttributesForMemberInfoTypeInheritFalseWorks()",
                    line: "186"
                } ));
                t.Fixture.getCustomAttributesForMemberInfoTypeInheritFalseWorks();
            },
            getCustomAttributesForMemberInfoTypeInheritTrueWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch1.Reflection.AttributeTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.AttributeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "GetCustomAttributesForMemberInfoTypeInheritTrueWorks()",
                    line: "217"
                } ));
                t.Fixture.getCustomAttributesForMemberInfoTypeInheritTrueWorks();
            },
            getCustomAttributesForParameterInfoWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch1.Reflection.AttributeTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.AttributeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "GetCustomAttributesForParameterInfoWorks()",
                    line: "248"
                } ));
                t.Fixture.getCustomAttributesForParameterInfoWorks();
            },
            getCustomAttributesForParameterInfoInheritTrueWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch1.Reflection.AttributeTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.AttributeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "GetCustomAttributesForParameterInfoInheritTrueWorks()",
                    line: "271"
                } ));
                t.Fixture.getCustomAttributesForParameterInfoInheritTrueWorks();
            },
            getCustomAttributesForParameterInfoInheritFalseWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch1.Reflection.AttributeTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.AttributeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "GetCustomAttributesForParameterInfoInheritFalseWorks()",
                    line: "292"
                } ));
                t.Fixture.getCustomAttributesForParameterInfoInheritFalseWorks();
            },
            getCustomAttributesForParameterInfoTypeWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch1.Reflection.AttributeTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.AttributeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "GetCustomAttributesForParameterInfoTypeWorks()",
                    line: "313"
                } ));
                t.Fixture.getCustomAttributesForParameterInfoTypeWorks();
            },
            getCustomAttributesForParameterInfoTypeInheritFalseWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch1.Reflection.AttributeTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.AttributeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "GetCustomAttributesForParameterInfoTypeInheritFalseWorks()",
                    line: "339"
                } ));
                t.Fixture.getCustomAttributesForParameterInfoTypeInheritFalseWorks();
            },
            getCustomAttributesForParameterInfoTypeInheritTrueWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch1.Reflection.AttributeTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.AttributeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "GetCustomAttributesForParameterInfoTypeInheritTrueWorks()",
                    line: "370"
                } ));
                t.Fixture.getCustomAttributesForParameterInfoTypeInheritTrueWorks();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                    project: "Batch1",
                    className: "Bridge.ClientTest.Batch1.Reflection.AttributeTests",
                    file: "Batch1\\Reflection\\AttributeTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.BitConverterTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BitConverterTests)],
        statics: {
            valueArgumentNull: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BitConverterTests).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BitConverterTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ValueArgumentNull()",
                    line: "22"
                } ));
                Bridge.ClientTest.BitConverterTests.valueArgumentNull();
            },
            startIndexBeyondLength: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BitConverterTests).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BitConverterTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "StartIndexBeyondLength()",
                    line: "40"
                } ));
                Bridge.ClientTest.BitConverterTests.startIndexBeyondLength();
            },
            startIndexPlusNeededLengthTooLong: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BitConverterTests).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BitConverterTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "StartIndexPlusNeededLengthTooLong()",
                    line: "94"
                } ));
                Bridge.ClientTest.BitConverterTests.startIndexPlusNeededLengthTooLong();
            },
            roundtripDoubleToInt64Bits: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BitConverterTests).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BitConverterTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "RoundtripDoubleToInt64Bits()",
                    line: "110"
                } ));
                Bridge.ClientTest.BitConverterTests.roundtripDoubleToInt64Bits();
            },
            int64BitsToDouble: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BitConverterTests).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BitConverterTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "Int64BitsToDouble()",
                    line: "122"
                } ));
                Bridge.ClientTest.BitConverterTests.int64BitsToDouble();
            },
            doubleToInt64Bits: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BitConverterTests).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BitConverterTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "DoubleToInt64Bits()",
                    line: "134"
                } ));
                Bridge.ClientTest.BitConverterTests.doubleToInt64Bits();
            },
            roundtripBoolean: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BitConverterTests).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BitConverterTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "RoundtripBoolean()",
                    line: "146"
                } ));
                Bridge.ClientTest.BitConverterTests.roundtripBoolean();
            },
            roundtripChar: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BitConverterTests).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BitConverterTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "RoundtripChar()",
                    line: "160"
                } ));
                Bridge.ClientTest.BitConverterTests.roundtripChar();
            },
            roundtripDouble: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BitConverterTests).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BitConverterTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "RoundtripDouble()",
                    line: "168"
                } ));
                Bridge.ClientTest.BitConverterTests.roundtripDouble();
            },
            roundtripSingle: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BitConverterTests).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BitConverterTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "RoundtripSingle()",
                    line: "186"
                } ));
                Bridge.ClientTest.BitConverterTests.roundtripSingle();
            },
            roundtripInt16: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BitConverterTests).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BitConverterTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "RoundtripInt16()",
                    line: "195"
                } ));
                Bridge.ClientTest.BitConverterTests.roundtripInt16();
            },
            roundtripInt32: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BitConverterTests).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BitConverterTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "RoundtripInt32()",
                    line: "211"
                } ));
                Bridge.ClientTest.BitConverterTests.roundtripInt32();
            },
            roundtripInt64: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BitConverterTests).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BitConverterTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "RoundtripInt64()",
                    line: "227"
                } ));
                Bridge.ClientTest.BitConverterTests.roundtripInt64();
            },
            roundtripUInt16: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BitConverterTests).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BitConverterTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "RoundtripUInt16()",
                    line: "243"
                } ));
                Bridge.ClientTest.BitConverterTests.roundtripUInt16();
            },
            roundtripUInt32: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BitConverterTests).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BitConverterTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "RoundtripUInt32()",
                    line: "259"
                } ));
                Bridge.ClientTest.BitConverterTests.roundtripUInt32();
            },
            roundtripUInt64: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BitConverterTests).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BitConverterTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "RoundtripUInt64()",
                    line: "275"
                } ));
                Bridge.ClientTest.BitConverterTests.roundtripUInt64();
            },
            roundtripString: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BitConverterTests).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BitConverterTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "RoundtripString()",
                    line: "291"
                } ));
                Bridge.ClientTest.BitConverterTests.roundtripString();
            },
            toString_ByteArray_Long: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BitConverterTests).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BitConverterTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ToString_ByteArray_Long()",
                    line: "304"
                } ));
                Bridge.ClientTest.BitConverterTests.toString_ByteArray_Long();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                    project: "Batch1",
                    className: "Bridge.ClientTest.BitConverterTests",
                    file: "Batch1\\BitConverterTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.BooleanTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.BooleanTests)],
        statics: {
            typePropertiesAreCorrect: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.BooleanTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BooleanTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TypePropertiesAreCorrect()",
                    line: "22"
                } ));
                t.Fixture.typePropertiesAreCorrect();
            },
            defaultValueIsFalse: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.BooleanTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BooleanTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "DefaultValueIsFalse()",
                    line: "34"
                } ));
                t.Fixture.defaultValueIsFalse();
            },
            creatingInstanceReturnsFalse: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.BooleanTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BooleanTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "CreatingInstanceReturnsFalse()",
                    line: "40"
                } ));
                t.Fixture.creatingInstanceReturnsFalse();
            },
            defaultConstructorReturnsFalse: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.BooleanTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BooleanTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "DefaultConstructorReturnsFalse()",
                    line: "46"
                } ));
                t.Fixture.defaultConstructorReturnsFalse();
            },
            getHashCodeWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.BooleanTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BooleanTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "GetHashCodeWorks()",
                    line: "52"
                } ));
                t.Fixture.getHashCodeWorks();
            },
            objectEqualsWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.BooleanTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BooleanTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ObjectEqualsWorks()",
                    line: "60"
                } ));
                t.Fixture.objectEqualsWorks();
            },
            boolEqualsWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.BooleanTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BooleanTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "BoolEqualsWorks()",
                    line: "69"
                } ));
                t.Fixture.boolEqualsWorks();
            },
            logicalExclusiveOrWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.BooleanTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BooleanTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "LogicalExclusiveOrWorks()",
                    line: "83"
                } ));
                t.Fixture.logicalExclusiveOrWorks();
            },
            logicalAndWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.BooleanTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BooleanTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "LogicalAndWorks()",
                    line: "96"
                } ));
                t.Fixture.logicalAndWorks();
            },
            logicalNegationWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.BooleanTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BooleanTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "LogicalNegationWorks()",
                    line: "109"
                } ));
                t.Fixture.logicalNegationWorks();
            },
            conditionalOperatorWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.BooleanTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BooleanTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ConditionalOperatorWorks()",
                    line: "120"
                } ));
                t.Fixture.conditionalOperatorWorks();
            },
            conditionalAndWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.BooleanTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BooleanTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ConditionalAndWorks()",
                    line: "129"
                } ));
                t.Fixture.conditionalAndWorks();
            },
            conditionalOrWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.BooleanTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BooleanTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ConditionalOrWorks()",
                    line: "158"
                } ));
                t.Fixture.conditionalOrWorks();
            },
            equalityWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.BooleanTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BooleanTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "EqualityWorks()",
                    line: "187"
                } ));
                t.Fixture.equalityWorks();
            },
            inequalityWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.BooleanTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BooleanTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "InequalityWorks()",
                    line: "205"
                } ));
                t.Fixture.inequalityWorks();
            },
            compareToWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.BooleanTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BooleanTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "CompareToWorks()",
                    line: "223"
                } ));
                t.Fixture.compareToWorks();
            },
            iComparableCompareToWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.BooleanTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BooleanTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "IComparableCompareToWorks()",
                    line: "232"
                } ));
                t.Fixture.iComparableCompareToWorks();
            },
            parseWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.BooleanTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BooleanTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ParseWorks()",
                    line: "241"
                } ));
                t.Fixture.parseWorks();
            },
            tryParseWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.BooleanTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BooleanTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TryParseWorks()",
                    line: "269"
                } ));
                t.Fixture.tryParseWorks();
            },
            boolStringWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.BooleanTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BooleanTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "BoolStringWorks()",
                    line: "305"
                } ));
                t.Fixture.boolStringWorks();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                    project: "Batch1",
                    className: "Bridge.ClientTest.SimpleTypes.BooleanTests",
                    file: "Batch1\\SimpleTypes\\BooleanTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.Bridge_ClientTest_TypeSystemTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.TypeSystemTests)],
        statics: {
            gettingBaseTypeWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.TypeSystemTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Bridge_ClientTest_TypeSystemTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "GettingBaseTypeWorks()",
                    line: "28"
                } ));
                t.Fixture.gettingBaseTypeWorks();
            },
            isAssignableFromWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.TypeSystemTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Bridge_ClientTest_TypeSystemTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "IsAssignableFromWorks()",
                    line: "90"
                } ));
                t.Fixture.isAssignableFromWorks();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                    project: "Batch1",
                    className: "Bridge.ClientTest.TypeSystemTests",
                    file: "Batch1\\TypeSystemTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.Bridge1529", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ObjectLiteralTests.Bridge1529)],
        statics: {
            testObjectLiteral: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ObjectLiteralTests.Bridge1529).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Bridge1529, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TestObjectLiteral()",
                    line: "130"
                } ));
                t.Fixture.testObjectLiteral();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                    project: "Batch1",
                    className: "Bridge.ClientTest.ObjectLiteralTests.Bridge1529",
                    file: "Batch1\\ObjectLiteralTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.BridgeConsoleTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BridgeConsoleTests)],
        statics: {
            testLogMessageObject: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BridgeConsoleTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BridgeConsoleTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TestLogMessageObject()",
                    line: "18"
                } ));
                try {
                    t.Fixture.testLogMessageObject();
                }
                finally {
                    t.tearDown();
                }
            },
            testLogMessageString: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BridgeConsoleTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BridgeConsoleTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TestLogMessageString()",
                    line: "56"
                } ));
                try {
                    t.Fixture.testLogMessageString();
                }
                finally {
                    t.tearDown();
                }
            },
            testDebugMessageString: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BridgeConsoleTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BridgeConsoleTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TestDebugMessageString()",
                    line: "63"
                } ));
                try {
                    t.Fixture.testDebugMessageString();
                }
                finally {
                    t.tearDown();
                }
            },
            testErrorMessageString: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BridgeConsoleTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BridgeConsoleTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TestErrorMessageString()",
                    line: "70"
                } ));
                try {
                    t.Fixture.testErrorMessageString();
                }
                finally {
                    t.tearDown();
                }
            },
            testToggling: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BridgeConsoleTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BridgeConsoleTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TestToggling()",
                    line: "77"
                } ));
                try {
                    t.Fixture.testToggling();
                }
                finally {
                    t.tearDown();
                }
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                    project: "Batch1",
                    className: "Bridge.ClientTest.BridgeConsoleTests",
                    file: "Batch1\\BridgeConsoleTests.cs"
                } );
            }
            return this.context;
        },
        tearDown: function () {
            Bridge.ClientTest.BridgeConsoleTests.hideConsole();
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.BridgeRegexTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.JavaScript.BridgeRegexTests)],
        statics: {
            typePropertiesAreCorrect: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.JavaScript.BridgeRegexTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BridgeRegexTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TypePropertiesAreCorrect()",
                    line: "10"
                } ));
                t.Fixture.typePropertiesAreCorrect();
            },
            stringOnlyConstructorWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.JavaScript.BridgeRegexTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BridgeRegexTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "StringOnlyConstructorWorks()",
                    line: "18"
                } ));
                t.Fixture.stringOnlyConstructorWorks();
            },
            constructorWithFlagsWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.JavaScript.BridgeRegexTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BridgeRegexTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ConstructorWithFlagsWorks()",
                    line: "26"
                } ));
                t.Fixture.constructorWithFlagsWorks();
            },
            globalFlagWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.JavaScript.BridgeRegexTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BridgeRegexTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "GlobalFlagWorks()",
                    line: "34"
                } ));
                t.Fixture.globalFlagWorks();
            },
            ignoreCaseFlagWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.JavaScript.BridgeRegexTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BridgeRegexTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "IgnoreCaseFlagWorks()",
                    line: "41"
                } ));
                t.Fixture.ignoreCaseFlagWorks();
            },
            multilineFlagWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.JavaScript.BridgeRegexTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BridgeRegexTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "MultilineFlagWorks()",
                    line: "48"
                } ));
                t.Fixture.multilineFlagWorks();
            },
            patternPropertyWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.JavaScript.BridgeRegexTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BridgeRegexTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "PatternPropertyWorks()",
                    line: "55"
                } ));
                t.Fixture.patternPropertyWorks();
            },
            sourcePropertyWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.JavaScript.BridgeRegexTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BridgeRegexTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "SourcePropertyWorks()",
                    line: "61"
                } ));
                t.Fixture.sourcePropertyWorks();
            },
            execWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.JavaScript.BridgeRegexTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BridgeRegexTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ExecWorks()",
                    line: "67"
                } ));
                t.Fixture.execWorks();
            },
            lastIndexWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.JavaScript.BridgeRegexTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BridgeRegexTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "LastIndexWorks()",
                    line: "77"
                } ));
                t.Fixture.lastIndexWorks();
            },
            testWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.JavaScript.BridgeRegexTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BridgeRegexTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TestWorks()",
                    line: "85"
                } ));
                t.Fixture.testWorks();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                    project: "Batch1",
                    className: "Bridge.ClientTest.Text.RegularExpressions.JavaScript.BridgeRegexTests",
                    file: "Batch1\\Text\\RegularExpressions\\JavaScript\\BridgeRegexTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.ByteTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.ByteTests)],
        statics: {
            typePropertiesAreCorrect: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.ByteTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ByteTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TypePropertiesAreCorrect()",
                    line: "10"
                } ));
                t.Fixture.typePropertiesAreCorrect();
            },
            castsWork: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.ByteTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ByteTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "CastsWork()",
                    line: "25"
                } ));
                t.Fixture.castsWork();
            },
            defaultValueIs0: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.ByteTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ByteTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "DefaultValueIs0()",
                    line: "69"
                } ));
                t.Fixture.defaultValueIs0();
            },
            defaultConstructorReturnsZero: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.ByteTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ByteTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "DefaultConstructorReturnsZero()",
                    line: "75"
                } ));
                t.Fixture.defaultConstructorReturnsZero();
            },
            creatingInstanceReturnsZero: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.ByteTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ByteTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "CreatingInstanceReturnsZero()",
                    line: "81"
                } ));
                t.Fixture.creatingInstanceReturnsZero();
            },
            constantsWork: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.ByteTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ByteTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ConstantsWork()",
                    line: "87"
                } ));
                t.Fixture.constantsWork();
            },
            formatWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.ByteTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ByteTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FormatWorks()",
                    line: "94"
                } ));
                t.Fixture.formatWorks();
            },
            iFormattableToStringWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.ByteTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ByteTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "IFormattableToStringWorks()",
                    line: "100"
                } ));
                t.Fixture.iFormattableToStringWorks();
            },
            tryParseWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.ByteTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ByteTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TryParseWorks()",
                    line: "106"
                } ));
                t.Fixture.tryParseWorks();
            },
            parseWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.ByteTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ByteTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ParseWorks()",
                    line: "139"
                } ));
                t.Fixture.parseWorks();
            },
            toStringWithoutRadixWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.ByteTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ByteTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ToStringWithoutRadixWorks()",
                    line: "151"
                } ));
                t.Fixture.toStringWithoutRadixWorks();
            },
            toStringWithRadixWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.ByteTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ByteTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ToStringWithRadixWorks()",
                    line: "157"
                } ));
                t.Fixture.toStringWithRadixWorks();
            },
            getHashCodeWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.ByteTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ByteTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "GetHashCodeWorks()",
                    line: "164"
                } ));
                t.Fixture.getHashCodeWorks();
            },
            equalsWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.ByteTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ByteTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "EqualsWorks()",
                    line: "172"
                } ));
                t.Fixture.equalsWorks();
            },
            iEquatableEqualsWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.ByteTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ByteTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "IEquatableEqualsWorks()",
                    line: "181"
                } ));
                t.Fixture.iEquatableEqualsWorks();
            },
            compareToWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.ByteTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ByteTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "CompareToWorks()",
                    line: "195"
                } ));
                t.Fixture.compareToWorks();
            },
            iComparableCompareToWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.ByteTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ByteTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "IComparableCompareToWorks()",
                    line: "203"
                } ));
                t.Fixture.iComparableCompareToWorks();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                    project: "Batch1",
                    className: "Bridge.ClientTest.SimpleTypes.ByteTests",
                    file: "Batch1\\SimpleTypes\\ByteTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.CancellationTokenTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.CancellationTokenTests)],
        statics: {
            typePropertiesForCancellationTokenSourceAreCorrect: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.CancellationTokenTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CancellationTokenTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TypePropertiesForCancellationTokenSourceAreCorrect()",
                    line: "15"
                } ));
                t.Fixture.typePropertiesForCancellationTokenSourceAreCorrect();
            },
            typePropertiesForCancellationTokenAreCorrect: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.CancellationTokenTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CancellationTokenTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TypePropertiesForCancellationTokenAreCorrect()",
                    line: "24"
                } ));
                t.Fixture.typePropertiesForCancellationTokenAreCorrect();
            },
            typePropertiesForCancellationTokenRegistrationAreCorrect: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.CancellationTokenTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CancellationTokenTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TypePropertiesForCancellationTokenRegistrationAreCorrect()",
                    line: "34"
                } ));
                t.Fixture.typePropertiesForCancellationTokenRegistrationAreCorrect();
            },
            cancellationTokenCreatedWithDefaultConstructorIsNotCanceledAndCannotBe: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.CancellationTokenTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CancellationTokenTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "CancellationTokenCreatedWithDefaultConstructorIsNotCanceledAndCannotBe()",
                    line: "45"
                } ));
                t.Fixture.cancellationTokenCreatedWithDefaultConstructorIsNotCanceledAndCannotBe();
            },
            cancellationTokenCreatedWithFalseArgumentToConstructorIsNotCanceledAndCannotBe: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.CancellationTokenTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CancellationTokenTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "CancellationTokenCreatedWithFalseArgumentToConstructorIsNotCanceledAndCannotBe()",
                    line: "54"
                } ));
                t.Fixture.cancellationTokenCreatedWithFalseArgumentToConstructorIsNotCanceledAndCannotBe();
            },
            cancellationTokenCreatedWithTrueArgumentToConstructorIsCanceled: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.CancellationTokenTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CancellationTokenTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "CancellationTokenCreatedWithTrueArgumentToConstructorIsCanceled()",
                    line: "63"
                } ));
                t.Fixture.cancellationTokenCreatedWithTrueArgumentToConstructorIsCanceled();
            },
            cancellationTokenNoneIsNotCancelledAndCannotBe: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.CancellationTokenTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CancellationTokenTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "CancellationTokenNoneIsNotCancelledAndCannotBe()",
                    line: "72"
                } ));
                t.Fixture.cancellationTokenNoneIsNotCancelledAndCannotBe();
            },
            creatingADefaultCancellationTokenReturnsACancellationTokenThatIsNotCancelled: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.CancellationTokenTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CancellationTokenTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "CreatingADefaultCancellationTokenReturnsACancellationTokenThatIsNotCancelled()",
                    line: "80"
                } ));
                t.Fixture.creatingADefaultCancellationTokenReturnsACancellationTokenThatIsNotCancelled();
            },
            activatorCreateForCancellationTokenReturnsACancellationTokenThatIsNotCancelled: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.CancellationTokenTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CancellationTokenTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ActivatorCreateForCancellationTokenReturnsACancellationTokenThatIsNotCancelled()",
                    line: "89"
                } ));
                t.Fixture.activatorCreateForCancellationTokenReturnsACancellationTokenThatIsNotCancelled();
            },
            canBeCanceledIsTrueForTokenCreatedForCancellationTokenSource: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.CancellationTokenTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CancellationTokenTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "CanBeCanceledIsTrueForTokenCreatedForCancellationTokenSource()",
                    line: "98"
                } ));
                t.Fixture.canBeCanceledIsTrueForTokenCreatedForCancellationTokenSource();
            },
            isCancellationRequestedForTokenCreatedForCancellationTokenSourceIsSetByTheCancelMethod: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.CancellationTokenTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CancellationTokenTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "IsCancellationRequestedForTokenCreatedForCancellationTokenSourceIsSetByTheCancelMethod()",
                    line: "105"
                } ));
                t.Fixture.isCancellationRequestedForTokenCreatedForCancellationTokenSourceIsSetByTheCancelMethod();
            },
            throwIfCancellationRequestedForTokenCreatedForCancellationTokenSourceThrowsAfterTheCancelMethodIsCalled: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.CancellationTokenTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CancellationTokenTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ThrowIfCancellationRequestedForTokenCreatedForCancellationTokenSourceThrowsAfterTheCancelMethodIsCalled()",
                    line: "116"
                } ));
                t.Fixture.throwIfCancellationRequestedForTokenCreatedForCancellationTokenSourceThrowsAfterTheCancelMethodIsCalled();
            },
            cancelWithoutArgumentsWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.CancellationTokenTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CancellationTokenTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "CancelWithoutArgumentsWorks()",
                    line: "125"
                } ));
                t.Fixture.cancelWithoutArgumentsWorks();
            },
            cancelWorksWhenThrowOnFirstExceptionIsFalse: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.CancellationTokenTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CancellationTokenTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "CancelWorksWhenThrowOnFirstExceptionIsFalse()",
                    line: "170"
                } ));
                t.Fixture.cancelWorksWhenThrowOnFirstExceptionIsFalse();
            },
            cancelWorksWhenThrowOnFirstExceptionIsTrue: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.CancellationTokenTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CancellationTokenTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "CancelWorksWhenThrowOnFirstExceptionIsTrue()",
                    line: "216"
                } ));
                t.Fixture.cancelWorksWhenThrowOnFirstExceptionIsTrue();
            },
            registerOnACancelledSourceWithoutContextInvokesTheCallback: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.CancellationTokenTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CancellationTokenTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "RegisterOnACancelledSourceWithoutContextInvokesTheCallback()",
                    line: "260"
                } ));
                t.Fixture.registerOnACancelledSourceWithoutContextInvokesTheCallback();
            },
            registerWithArgumentOnACancelledSourceInvokesTheCallback: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.CancellationTokenTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CancellationTokenTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "RegisterWithArgumentOnACancelledSourceInvokesTheCallback()",
                    line: "270"
                } ));
                t.Fixture.registerWithArgumentOnACancelledSourceInvokesTheCallback();
            },
            registerOnACancelledSourceWithoutContextRethrowsAThrownException: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.CancellationTokenTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CancellationTokenTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "RegisterOnACancelledSourceWithoutContextRethrowsAThrownException()",
                    line: "285"
                } ));
                t.Fixture.registerOnACancelledSourceWithoutContextRethrowsAThrownException();
            },
            registerOnACancelledSourceWithContextRethrowsAThrownException: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.CancellationTokenTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CancellationTokenTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "RegisterOnACancelledSourceWithContextRethrowsAThrownException()",
                    line: "305"
                } ));
                t.Fixture.registerOnACancelledSourceWithContextRethrowsAThrownException();
            },
            registerOverloadsWithUseSynchronizationContextWork: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.CancellationTokenTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CancellationTokenTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "RegisterOverloadsWithUseSynchronizationContextWork()",
                    line: "327"
                } ));
                t.Fixture.registerOverloadsWithUseSynchronizationContextWork();
            },
            registerOnCancellationTokenCreatedNonCancelledDoesNothing: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.CancellationTokenTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CancellationTokenTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "RegisterOnCancellationTokenCreatedNonCancelledDoesNothing()",
                    line: "357"
                } ));
                t.Fixture.registerOnCancellationTokenCreatedNonCancelledDoesNothing();
            },
            registerOnCancellationTokenCreatedCancelledInvokesTheActionImmediately: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.CancellationTokenTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CancellationTokenTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "RegisterOnCancellationTokenCreatedCancelledInvokesTheActionImmediately()",
                    line: "368"
                } ));
                t.Fixture.registerOnCancellationTokenCreatedCancelledInvokesTheActionImmediately();
            },
            duplicateCancelDoesNotCauseCallbacksToBeCalledTwice: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.CancellationTokenTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CancellationTokenTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "DuplicateCancelDoesNotCauseCallbacksToBeCalledTwice()",
                    line: "385"
                } ));
                t.Fixture.duplicateCancelDoesNotCauseCallbacksToBeCalledTwice();
            },
            registrationsCanBeCompared: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.CancellationTokenTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CancellationTokenTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "RegistrationsCanBeCompared()",
                    line: "397"
                } ));
                t.Fixture.registrationsCanBeCompared();
            },
            registrationsCanBeUnregistered: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.CancellationTokenTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CancellationTokenTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "RegistrationsCanBeUnregistered()",
                    line: "419"
                } ));
                t.Fixture.registrationsCanBeUnregistered();
            },
            creatingADefaultCancellationTokenRegistrationReturnsARegistrationThatCanBeDisposedWithoutHarm: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.CancellationTokenTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CancellationTokenTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "CreatingADefaultCancellationTokenRegistrationReturnsARegistrationThatCanBeDisposedWithoutHarm()",
                    line: "447"
                } ));
                t.Fixture.creatingADefaultCancellationTokenRegistrationReturnsARegistrationThatCanBeDisposedWithoutHarm();
            },
            linkedSourceWithTwoTokensWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.CancellationTokenTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CancellationTokenTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "LinkedSourceWithTwoTokensWorks()",
                    line: "456"
                } ));
                t.Fixture.linkedSourceWithTwoTokensWorks();
            },
            linkedSourceWithThreeTokensWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.CancellationTokenTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CancellationTokenTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "LinkedSourceWithThreeTokensWorks()",
                    line: "480"
                } ));
                t.Fixture.linkedSourceWithThreeTokensWorks();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                    project: "Batch1",
                    className: "Bridge.ClientTest.Threading.CancellationTokenTests",
                    file: "Batch1\\Threading\\CancellationTokenTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.CharTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.CharTests)],
        statics: {
            typePropertiesAreInt32: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.CharTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CharTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TypePropertiesAreInt32()",
                    line: "10"
                } ));
                t.Fixture.typePropertiesAreInt32();
            },
            castsWork: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.CharTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CharTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "CastsWork()",
                    line: "20"
                } ));
                t.Fixture.castsWork();
            },
            defaultValueWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.CharTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CharTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "DefaultValueWorks()",
                    line: "64"
                } ));
                t.Fixture.defaultValueWorks();
            },
            defaultConstructorReturnsZero: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.CharTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CharTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "DefaultConstructorReturnsZero()",
                    line: "70"
                } ));
                t.Fixture.defaultConstructorReturnsZero();
            },
            creatingInstanceReturnsZero: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.CharTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CharTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "CreatingInstanceReturnsZero()",
                    line: "76"
                } ));
                t.Fixture.creatingInstanceReturnsZero();
            },
            constantsWork: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.CharTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CharTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ConstantsWork()",
                    line: "82"
                } ));
                t.Fixture.constantsWork();
            },
            charComparisonWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.CharTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CharTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "CharComparisonWorks()",
                    line: "89"
                } ));
                t.Fixture.charComparisonWorks();
            },
            parseWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.CharTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CharTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ParseWorks()",
                    line: "101"
                } ));
                t.Fixture.parseWorks();
            },
            formatWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.CharTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CharTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FormatWorks()",
                    line: "110"
                } ));
                t.Fixture.formatWorks();
            },
            iFormattableToStringWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.CharTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CharTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "IFormattableToStringWorks()",
                    line: "116"
                } ));
                t.Fixture.iFormattableToStringWorks();
            },
            toStringWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.CharTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CharTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ToStringWorks()",
                    line: "122"
                } ));
                t.Fixture.toStringWorks();
            },
            getHashCodeWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.CharTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CharTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "GetHashCodeWorks()",
                    line: "128"
                } ));
                t.Fixture.getHashCodeWorks();
            },
            equalsWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.CharTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CharTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "EqualsWorks()",
                    line: "136"
                } ));
                t.Fixture.equalsWorks();
            },
            iEquatableEqualsWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.CharTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CharTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "IEquatableEqualsWorks()",
                    line: "152"
                } ));
                t.Fixture.iEquatableEqualsWorks();
            },
            compareToWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.CharTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CharTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "CompareToWorks()",
                    line: "161"
                } ));
                t.Fixture.compareToWorks();
            },
            isLowerWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.CharTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CharTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "IsLowerWorks()",
                    line: "170"
                } ));
                t.Fixture.isLowerWorks();
            },
            isUpperWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.CharTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CharTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "IsUpperWorks()",
                    line: "178"
                } ));
                t.Fixture.isUpperWorks();
            },
            toLowerWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.CharTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CharTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ToLowerWorks()",
                    line: "186"
                } ));
                t.Fixture.toLowerWorks();
            },
            toUpperWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.CharTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CharTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ToUpperWorks()",
                    line: "194"
                } ));
                t.Fixture.toUpperWorks();
            },
            isDigitWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.CharTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CharTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "IsDigitWorks()",
                    line: "202"
                } ));
                t.Fixture.isDigitWorks();
            },
            isWhiteSpaceWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.CharTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CharTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "IsWhiteSpaceWorks()",
                    line: "210"
                } ));
                t.Fixture.isWhiteSpaceWorks();
            },
            isDigitWithStringAndIndexWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.CharTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CharTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "IsDigitWithStringAndIndexWorks()",
                    line: "218"
                } ));
                t.Fixture.isDigitWithStringAndIndexWorks();
            },
            isWhiteSpaceWithStringAndIndexWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.CharTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CharTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "IsWhiteSpaceWithStringAndIndexWorks()",
                    line: "230"
                } ));
                t.Fixture.isWhiteSpaceWithStringAndIndexWorks();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                    project: "Batch1",
                    className: "Bridge.ClientTest.SimpleTypes.CharTests",
                    file: "Batch1\\SimpleTypes\\CharTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.CheckedInsideUncheckedTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.CheckedUncheckedTests.CheckedInsideUncheckedTests)],
        statics: {
            testInt32: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.CheckedUncheckedTests.CheckedInsideUncheckedTests).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CheckedInsideUncheckedTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TestInt32()",
                    line: "188"
                } ));
                Bridge.ClientTest.CheckedUncheckedTests.CheckedInsideUncheckedTests.testInt32();
            },
            testUInt32: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.CheckedUncheckedTests.CheckedInsideUncheckedTests).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CheckedInsideUncheckedTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TestUInt32()",
                    line: "232"
                } ));
                Bridge.ClientTest.CheckedUncheckedTests.CheckedInsideUncheckedTests.testUInt32();
            },
            testLong: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.CheckedUncheckedTests.CheckedInsideUncheckedTests).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CheckedInsideUncheckedTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TestLong()",
                    line: "274"
                } ));
                Bridge.ClientTest.CheckedUncheckedTests.CheckedInsideUncheckedTests.testLong();
            },
            testULong: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.CheckedUncheckedTests.CheckedInsideUncheckedTests).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CheckedInsideUncheckedTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TestULong()",
                    line: "318"
                } ));
                Bridge.ClientTest.CheckedUncheckedTests.CheckedInsideUncheckedTests.testULong();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                    project: "Batch1",
                    className: "Bridge.ClientTest.CheckedUncheckedTests.CheckedInsideUncheckedTests",
                    file: "Batch1\\CheckedUncheckedTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.CheckedTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.CheckedUncheckedTests.CheckedTests)],
        statics: {
            testInt32: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.CheckedUncheckedTests.CheckedTests).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CheckedTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TestInt32()",
                    line: "23"
                } ));
                Bridge.ClientTest.CheckedUncheckedTests.CheckedTests.testInt32();
            },
            testUInt32: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.CheckedUncheckedTests.CheckedTests).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CheckedTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TestUInt32()",
                    line: "64"
                } ));
                Bridge.ClientTest.CheckedUncheckedTests.CheckedTests.testUInt32();
            },
            testLong: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.CheckedUncheckedTests.CheckedTests).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CheckedTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TestLong()",
                    line: "103"
                } ));
                Bridge.ClientTest.CheckedUncheckedTests.CheckedTests.testLong();
            },
            testULong: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.CheckedUncheckedTests.CheckedTests).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CheckedTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TestULong()",
                    line: "144"
                } ));
                Bridge.ClientTest.CheckedUncheckedTests.CheckedTests.testULong();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                    project: "Batch1",
                    className: "Bridge.ClientTest.CheckedUncheckedTests.CheckedTests",
                    file: "Batch1\\CheckedUncheckedTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.CommonExceptionTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.CommonExceptionTests)],
        statics: {
            throwingAndCatchingExceptionsWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.CommonExceptionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CommonExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ThrowingAndCatchingExceptionsWorks()",
                    line: "27"
                } ));
                t.Fixture.throwingAndCatchingExceptionsWorks();
            },
            exceptionOfWrongTypeIsNotCaught: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.CommonExceptionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CommonExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ExceptionOfWrongTypeIsNotCaught()",
                    line: "43"
                } ));
                t.Fixture.exceptionOfWrongTypeIsNotCaught();
            },
            canCatchExceptionAsBaseType: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.CommonExceptionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CommonExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "CanCatchExceptionAsBaseType()",
                    line: "63"
                } ));
                t.Fixture.canCatchExceptionAsBaseType();
            },
            canCatchStringAsException: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.CommonExceptionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CommonExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "CanCatchStringAsException()",
                    line: "82"
                } ));
                t.Fixture.canCatchStringAsException();
            },
            canCatchStringAsCatchAll: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.CommonExceptionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CommonExceptionTests, 1, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "CanCatchStringAsCatchAll()",
                    line: "102"
                } ));
                t.Fixture.canCatchStringAsCatchAll();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                    project: "Batch1",
                    className: "Bridge.ClientTest.Exceptions.CommonExceptionTests",
                    file: "Batch1\\Exceptions\\CommonExceptionTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.ComparerTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ComparerTests)],
        statics: {
            typePropertiesAreCorrect: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ComparerTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ComparerTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TypePropertiesAreCorrect()",
                    line: "26"
                } ));
                t.Fixture.typePropertiesAreCorrect();
            },
            defaultComparerCanOrderNumbers: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ComparerTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ComparerTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "DefaultComparerCanOrderNumbers()",
                    line: "40"
                } ));
                t.Fixture.defaultComparerCanOrderNumbers();
            },
            defaultComparerCanOrderNullValues: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ComparerTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ComparerTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "DefaultComparerCanOrderNullValues()",
                    line: "48"
                } ));
                t.Fixture.defaultComparerCanOrderNullValues();
            },
            defaultComparerUsesCompareMethodIfClassImplementsIComparable: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ComparerTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ComparerTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "DefaultComparerUsesCompareMethodIfClassImplementsIComparable()",
                    line: "56"
                } ));
                t.Fixture.defaultComparerUsesCompareMethodIfClassImplementsIComparable();
            },
            createWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ComparerTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ComparerTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "CreateWorks()",
                    line: "64"
                } ));
                t.Fixture.createWorks();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                    project: "Batch1",
                    className: "Bridge.ClientTest.Collections.Generic.ComparerTests",
                    file: "Batch1\\Collections\\Generic\\ComparerTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.ContractTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Diagnostics.Contracts.ContractTests)],
        statics: {
            assume: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Diagnostics.Contracts.ContractTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ContractTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "Assume()",
                    line: "48"
                } ));
                t.Fixture.assume();
            },
            assumeWithUserMessage: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Diagnostics.Contracts.ContractTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ContractTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "AssumeWithUserMessage()",
                    line: "57"
                } ));
                t.Fixture.assumeWithUserMessage();
            },
            _Assert: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Diagnostics.Contracts.ContractTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ContractTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "_Assert()",
                    line: "66"
                } ));
                t.Fixture._Assert();
            },
            assertWithUserMessage: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Diagnostics.Contracts.ContractTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ContractTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "AssertWithUserMessage()",
                    line: "75"
                } ));
                t.Fixture.assertWithUserMessage();
            },
            requires: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Diagnostics.Contracts.ContractTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ContractTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "Requires()",
                    line: "84"
                } ));
                t.Fixture.requires();
            },
            requiresWithUserMessage: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Diagnostics.Contracts.ContractTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ContractTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "RequiresWithUserMessage()",
                    line: "93"
                } ));
                t.Fixture.requiresWithUserMessage();
            },
            requiresWithTypeException: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Diagnostics.Contracts.ContractTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ContractTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "RequiresWithTypeException()",
                    line: "102"
                } ));
                t.Fixture.requiresWithTypeException();
            },
            requiredWithTypeExceptionAndUserMessage: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Diagnostics.Contracts.ContractTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ContractTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "RequiredWithTypeExceptionAndUserMessage()",
                    line: "110"
                } ));
                t.Fixture.requiredWithTypeExceptionAndUserMessage();
            },
            forAll: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Diagnostics.Contracts.ContractTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ContractTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ForAll()",
                    line: "118"
                } ));
                t.Fixture.forAll();
            },
            forAllWithCollection: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Diagnostics.Contracts.ContractTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ContractTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ForAllWithCollection()",
                    line: "127"
                } ));
                t.Fixture.forAllWithCollection();
            },
            exists: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Diagnostics.Contracts.ContractTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ContractTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "Exists()",
                    line: "136"
                } ));
                t.Fixture.exists();
            },
            existsWithCollection: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Diagnostics.Contracts.ContractTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ContractTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ExistsWithCollection()",
                    line: "145"
                } ));
                t.Fixture.existsWithCollection();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                    project: "Batch1",
                    className: "Bridge.ClientTest.Diagnostics.Contracts.ContractTests",
                    file: "Batch1\\Diagnostics\\Contracts\\ContractTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.ConvertFromBase64Tests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertFromBase64Tests)],
        statics: {
            roundtrip1: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertFromBase64Tests).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertFromBase64Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "Roundtrip1()",
                    line: "14"
                } ));
                Bridge.ClientTest.ConvertTests.ConvertFromBase64Tests.roundtrip1();
            },
            roundtrip2: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertFromBase64Tests).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertFromBase64Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "Roundtrip2()",
                    line: "33"
                } ));
                Bridge.ClientTest.ConvertTests.ConvertFromBase64Tests.roundtrip2();
            },
            roundtrip3: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertFromBase64Tests).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertFromBase64Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "Roundtrip3()",
                    line: "39"
                } ));
                Bridge.ClientTest.ConvertTests.ConvertFromBase64Tests.roundtrip3();
            },
            emptyString: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertFromBase64Tests).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertFromBase64Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "EmptyString()",
                    line: "45"
                } ));
                Bridge.ClientTest.ConvertTests.ConvertFromBase64Tests.emptyString();
            },
            zeroLengthArray: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertFromBase64Tests).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertFromBase64Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ZeroLengthArray()",
                    line: "56"
                } ));
                Bridge.ClientTest.ConvertTests.ConvertFromBase64Tests.zeroLengthArray();
            },
            roundtripWithPadding1: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertFromBase64Tests).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertFromBase64Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "RoundtripWithPadding1()",
                    line: "67"
                } ));
                Bridge.ClientTest.ConvertTests.ConvertFromBase64Tests.roundtripWithPadding1();
            },
            roundtripWithPadding2: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertFromBase64Tests).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertFromBase64Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "RoundtripWithPadding2()",
                    line: "73"
                } ));
                Bridge.ClientTest.ConvertTests.ConvertFromBase64Tests.roundtripWithPadding2();
            },
            partialRoundtripWithPadding1: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertFromBase64Tests).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertFromBase64Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "PartialRoundtripWithPadding1()",
                    line: "79"
                } ));
                Bridge.ClientTest.ConvertTests.ConvertFromBase64Tests.partialRoundtripWithPadding1();
            },
            partialRoundtripWithPadding2: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertFromBase64Tests).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertFromBase64Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "PartialRoundtripWithPadding2()",
                    line: "93"
                } ));
                Bridge.ClientTest.ConvertTests.ConvertFromBase64Tests.partialRoundtripWithPadding2();
            },
            parseWithWhitespace: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertFromBase64Tests).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertFromBase64Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ParseWithWhitespace()",
                    line: "108"
                } ));
                Bridge.ClientTest.ConvertTests.ConvertFromBase64Tests.parseWithWhitespace();
            },
            roundtripWithWhitespace2: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertFromBase64Tests).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertFromBase64Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "RoundtripWithWhitespace2()",
                    line: "114"
                } ));
                Bridge.ClientTest.ConvertTests.ConvertFromBase64Tests.roundtripWithWhitespace2();
            },
            roundtripWithWhitespace3: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertFromBase64Tests).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertFromBase64Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "RoundtripWithWhitespace3()",
                    line: "121"
                } ));
                Bridge.ClientTest.ConvertTests.ConvertFromBase64Tests.roundtripWithWhitespace3();
            },
            roundtripWithWhitespace4: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertFromBase64Tests).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertFromBase64Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "RoundtripWithWhitespace4()",
                    line: "128"
                } ));
                Bridge.ClientTest.ConvertTests.ConvertFromBase64Tests.roundtripWithWhitespace4();
            },
            roundtripWithWhitespace5: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertFromBase64Tests).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertFromBase64Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "RoundtripWithWhitespace5()",
                    line: "136"
                } ));
                Bridge.ClientTest.ConvertTests.ConvertFromBase64Tests.roundtripWithWhitespace5();
            },
            roundtripWithWhitespace6: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertFromBase64Tests).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertFromBase64Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "RoundtripWithWhitespace6()",
                    line: "144"
                } ));
                Bridge.ClientTest.ConvertTests.ConvertFromBase64Tests.roundtripWithWhitespace6();
            },
            roundtripWithWhitespace7: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertFromBase64Tests).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertFromBase64Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "RoundtripWithWhitespace7()",
                    line: "152"
                } ));
                Bridge.ClientTest.ConvertTests.ConvertFromBase64Tests.roundtripWithWhitespace7();
            },
            roundtripLargeString: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertFromBase64Tests).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertFromBase64Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "RoundtripLargeString()",
                    line: "160"
                } ));
                Bridge.ClientTest.ConvertTests.ConvertFromBase64Tests.roundtripLargeString();
            },
            invalidOffset: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertFromBase64Tests).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertFromBase64Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "InvalidOffset()",
                    line: "167"
                } ));
                Bridge.ClientTest.ConvertTests.ConvertFromBase64Tests.invalidOffset();
            },
            invalidLength: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertFromBase64Tests).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertFromBase64Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "InvalidLength()",
                    line: "177"
                } ));
                Bridge.ClientTest.ConvertTests.ConvertFromBase64Tests.invalidLength();
            },
            invalidInput: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertFromBase64Tests).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertFromBase64Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "InvalidInput()",
                    line: "188"
                } ));
                Bridge.ClientTest.ConvertTests.ConvertFromBase64Tests.invalidInput();
            },
            invalidCharactersInInput: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertFromBase64Tests).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertFromBase64Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "InvalidCharactersInInput()",
                    line: "215"
                } ));
                Bridge.ClientTest.ConvertTests.ConvertFromBase64Tests.invalidCharactersInInput();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                    project: "Batch1",
                    className: "Bridge.ClientTest.ConvertTests.ConvertFromBase64Tests",
                    file: "Batch1\\Convert\\ConvertFromBase64Tests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToBase64CharArrayTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToBase64CharArrayTests)],
        statics: {
            validOffsetIn: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToBase64CharArrayTests).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToBase64CharArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ValidOffsetIn()",
                    line: "14"
                } ));
                Bridge.ClientTest.ConvertTests.ConvertToBase64CharArrayTests.validOffsetIn();
            },
            shortInputArray: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToBase64CharArrayTests).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToBase64CharArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ShortInputArray()",
                    line: "24"
                } ));
                Bridge.ClientTest.ConvertTests.ConvertToBase64CharArrayTests.shortInputArray();
            },
            validOffsetOut: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToBase64CharArrayTests).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToBase64CharArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ValidOffsetOut()",
                    line: "37"
                } ));
                Bridge.ClientTest.ConvertTests.ConvertToBase64CharArrayTests.validOffsetOut();
            },
            invalidInputBuffer: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToBase64CharArrayTests).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToBase64CharArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "InvalidInputBuffer()",
                    line: "56"
                } ));
                Bridge.ClientTest.ConvertTests.ConvertToBase64CharArrayTests.invalidInputBuffer();
            },
            invalidOutputBuffer: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToBase64CharArrayTests).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToBase64CharArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "InvalidOutputBuffer()",
                    line: "62"
                } ));
                Bridge.ClientTest.ConvertTests.ConvertToBase64CharArrayTests.invalidOutputBuffer();
            },
            invalidOffsetIn: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToBase64CharArrayTests).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToBase64CharArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "InvalidOffsetIn()",
                    line: "70"
                } ));
                Bridge.ClientTest.ConvertTests.ConvertToBase64CharArrayTests.invalidOffsetIn();
            },
            invalidOffsetOut: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToBase64CharArrayTests).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToBase64CharArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "InvalidOffsetOut()",
                    line: "81"
                } ));
                Bridge.ClientTest.ConvertTests.ConvertToBase64CharArrayTests.invalidOffsetOut();
            },
            invalidInputLength: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToBase64CharArrayTests).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToBase64CharArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "InvalidInputLength()",
                    line: "92"
                } ));
                Bridge.ClientTest.ConvertTests.ConvertToBase64CharArrayTests.invalidInputLength();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                    project: "Batch1",
                    className: "Bridge.ClientTest.ConvertTests.ConvertToBase64CharArrayTests",
                    file: "Batch1\\Convert\\ConvertToBase64CharArrayTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToBase64StringTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToBase64StringTests)],
        statics: {
            knownByteSequence: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToBase64StringTests).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToBase64StringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "KnownByteSequence()",
                    line: "14"
                } ));
                Bridge.ClientTest.ConvertTests.ConvertToBase64StringTests.knownByteSequence();
            },
            zeroLength: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToBase64StringTests).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToBase64StringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ZeroLength()",
                    line: "33"
                } ));
                Bridge.ClientTest.ConvertTests.ConvertToBase64StringTests.zeroLength();
            },
            invalidInputBuffer: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToBase64StringTests).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToBase64StringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "InvalidInputBuffer()",
                    line: "40"
                } ));
                Bridge.ClientTest.ConvertTests.ConvertToBase64StringTests.invalidInputBuffer();
            },
            invalidOffset: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToBase64StringTests).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToBase64StringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "InvalidOffset()",
                    line: "47"
                } ));
                Bridge.ClientTest.ConvertTests.ConvertToBase64StringTests.invalidOffset();
            },
            invalidLength: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToBase64StringTests).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToBase64StringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "InvalidLength()",
                    line: "56"
                } ));
                Bridge.ClientTest.ConvertTests.ConvertToBase64StringTests.invalidLength();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                    project: "Batch1",
                    className: "Bridge.ClientTest.ConvertTests.ConvertToBase64StringTests",
                    file: "Batch1\\Convert\\ConvertToBase64StringTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToBooleanTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToBooleanTests)],
        statics: {
            fromBoolean: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToBooleanTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToBooleanTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromBoolean()",
                    line: "14"
                } ));
                t.Fixture.fromBoolean();
            },
            fromByte: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToBooleanTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToBooleanTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromByte()",
                    line: "21"
                } ));
                t.Fixture.fromByte();
            },
            fromDecimal: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToBooleanTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToBooleanTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromDecimal()",
                    line: "29"
                } ));
                t.Fixture.fromDecimal();
            },
            fromDouble: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToBooleanTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToBooleanTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromDouble()",
                    line: "37"
                } ));
                t.Fixture.fromDouble();
            },
            fromInt16: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToBooleanTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToBooleanTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromInt16()",
                    line: "45"
                } ));
                t.Fixture.fromInt16();
            },
            fromInt32: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToBooleanTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToBooleanTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromInt32()",
                    line: "53"
                } ));
                t.Fixture.fromInt32();
            },
            fromInt64: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToBooleanTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToBooleanTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromInt64()",
                    line: "61"
                } ));
                t.Fixture.fromInt64();
            },
            fromString: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToBooleanTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToBooleanTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromString()",
                    line: "69"
                } ));
                t.Fixture.fromString();
            },
            fromObject: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToBooleanTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToBooleanTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromObject()",
                    line: "80"
                } ));
                t.Fixture.fromObject();
            },
            fromSByte: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToBooleanTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToBooleanTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromSByte()",
                    line: "91"
                } ));
                t.Fixture.fromSByte();
            },
            fromSingle: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToBooleanTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToBooleanTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromSingle()",
                    line: "99"
                } ));
                t.Fixture.fromSingle();
            },
            fromUInt16: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToBooleanTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToBooleanTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromUInt16()",
                    line: "107"
                } ));
                t.Fixture.fromUInt16();
            },
            fromUInt32: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToBooleanTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToBooleanTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromUInt32()",
                    line: "115"
                } ));
                t.Fixture.fromUInt32();
            },
            fromUInt64: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToBooleanTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToBooleanTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromUInt64()",
                    line: "123"
                } ));
                t.Fixture.fromUInt64();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                    project: "Batch1",
                    className: "Bridge.ClientTest.ConvertTests.ConvertToBooleanTests",
                    file: "Batch1\\Convert\\ConvertToBooleanTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToByteTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToByteTests)],
        statics: {
            fromBoolean: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToByteTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToByteTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromBoolean()",
                    line: "14"
                } ));
                t.Fixture.fromBoolean();
            },
            fromChar: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToByteTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToByteTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromChar()",
                    line: "22"
                } ));
                t.Fixture.fromChar();
            },
            fromDecimal: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToByteTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToByteTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromDecimal()",
                    line: "33"
                } ));
                t.Fixture.fromDecimal();
            },
            fromDouble: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToByteTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToByteTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromDouble()",
                    line: "44"
                } ));
                t.Fixture.fromDouble();
            },
            fromInt16: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToByteTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToByteTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromInt16()",
                    line: "55"
                } ));
                t.Fixture.fromInt16();
            },
            fromInt32: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToByteTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToByteTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromInt32()",
                    line: "66"
                } ));
                t.Fixture.fromInt32();
            },
            fromInt64: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToByteTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToByteTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromInt64()",
                    line: "77"
                } ));
                t.Fixture.fromInt64();
            },
            fromObject: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToByteTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToByteTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromObject()",
                    line: "88"
                } ));
                t.Fixture.fromObject();
            },
            fromSByte: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToByteTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToByteTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromSByte()",
                    line: "99"
                } ));
                t.Fixture.fromSByte();
            },
            fromSingle: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToByteTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToByteTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromSingle()",
                    line: "110"
                } ));
                t.Fixture.fromSingle();
            },
            fromString: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToByteTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToByteTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromString()",
                    line: "121"
                } ));
                t.Fixture.fromString();
            },
            fromStringWithBase: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToByteTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToByteTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromStringWithBase()",
                    line: "140"
                } ));
                t.Fixture.fromStringWithBase();
            },
            fromUInt16: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToByteTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToByteTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromUInt16()",
                    line: "161"
                } ));
                t.Fixture.fromUInt16();
            },
            fromUInt32: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToByteTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToByteTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromUInt32()",
                    line: "172"
                } ));
                t.Fixture.fromUInt32();
            },
            fromUInt64: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToByteTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToByteTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromUInt64()",
                    line: "183"
                } ));
                t.Fixture.fromUInt64();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                    project: "Batch1",
                    className: "Bridge.ClientTest.ConvertTests.ConvertToByteTests",
                    file: "Batch1\\Convert\\ConvertToByteTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToCharTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToCharTests)],
        statics: {
            fromByte: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToCharTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToCharTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromByte()",
                    line: "14"
                } ));
                t.Fixture.fromByte();
            },
            fromChar: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToCharTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToCharTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromChar()",
                    line: "22"
                } ));
                t.Fixture.fromChar();
            },
            fromDecimal: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToCharTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToCharTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromDecimal()",
                    line: "30"
                } ));
                t.Fixture.fromDecimal();
            },
            fromDecimalViaObject: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToCharTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToCharTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromDecimalViaObject()",
                    line: "37"
                } ));
                t.Fixture.fromDecimalViaObject();
            },
            fromDouble: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToCharTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToCharTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromDouble()",
                    line: "44"
                } ));
                t.Fixture.fromDouble();
            },
            fromDoubleViaObject: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToCharTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToCharTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromDoubleViaObject()",
                    line: "51"
                } ));
                t.Fixture.fromDoubleViaObject();
            },
            fromInt16: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToCharTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToCharTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromInt16()",
                    line: "58"
                } ));
                t.Fixture.fromInt16();
            },
            fromInt32: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToCharTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToCharTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromInt32()",
                    line: "69"
                } ));
                t.Fixture.fromInt32();
            },
            fromInt64: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToCharTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToCharTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromInt64()",
                    line: "80"
                } ));
                t.Fixture.fromInt64();
            },
            fromObject: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToCharTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToCharTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromObject()",
                    line: "91"
                } ));
                t.Fixture.fromObject();
            },
            fromSByte: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToCharTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToCharTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromSByte()",
                    line: "102"
                } ));
                t.Fixture.fromSByte();
            },
            fromSingle: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToCharTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToCharTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromSingle()",
                    line: "113"
                } ));
                t.Fixture.fromSingle();
            },
            fromSingleViaObject: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToCharTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToCharTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromSingleViaObject()",
                    line: "120"
                } ));
                t.Fixture.fromSingleViaObject();
            },
            fromString: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToCharTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToCharTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromString()",
                    line: "127"
                } ));
                t.Fixture.fromString();
            },
            fromUInt16: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToCharTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToCharTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromUInt16()",
                    line: "139"
                } ));
                t.Fixture.fromUInt16();
            },
            fromUInt32: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToCharTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToCharTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromUInt32()",
                    line: "147"
                } ));
                t.Fixture.fromUInt32();
            },
            fromUInt64: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToCharTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToCharTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromUInt64()",
                    line: "158"
                } ));
                t.Fixture.fromUInt64();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                    project: "Batch1",
                    className: "Bridge.ClientTest.ConvertTests.ConvertToCharTests",
                    file: "Batch1\\Convert\\ConvertToCharTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDateTimeTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToDateTimeTests)],
        statics: {
            fromString: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToDateTimeTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDateTimeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromString()",
                    line: "17"
                } ));
                t.Fixture.fromString();
            },
            fromStringWithCustomFormatProvider: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToDateTimeTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDateTimeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromStringWithCustomFormatProvider()",
                    line: "53"
                } ));
                t.Fixture.fromStringWithCustomFormatProvider();
            },
            fromDateTime: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToDateTimeTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDateTimeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromDateTime()",
                    line: "83"
                } ));
                t.Fixture.fromDateTime();
            },
            fromObject: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToDateTimeTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDateTimeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromObject()",
                    line: "94"
                } ));
                t.Fixture.fromObject();
            },
            fromBoolean: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToDateTimeTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDateTimeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromBoolean()",
                    line: "101"
                } ));
                t.Fixture.fromBoolean();
            },
            fromChar: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToDateTimeTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDateTimeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromChar()",
                    line: "107"
                } ));
                t.Fixture.fromChar();
            },
            fromInt16: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToDateTimeTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDateTimeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromInt16()",
                    line: "113"
                } ));
                t.Fixture.fromInt16();
            },
            fromInt32: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToDateTimeTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDateTimeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromInt32()",
                    line: "119"
                } ));
                t.Fixture.fromInt32();
            },
            fromInt64: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToDateTimeTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDateTimeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromInt64()",
                    line: "125"
                } ));
                t.Fixture.fromInt64();
            },
            fromUInt16: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToDateTimeTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDateTimeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromUInt16()",
                    line: "131"
                } ));
                t.Fixture.fromUInt16();
            },
            fromUInt32: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToDateTimeTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDateTimeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromUInt32()",
                    line: "137"
                } ));
                t.Fixture.fromUInt32();
            },
            fromUInt64: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToDateTimeTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDateTimeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromUInt64()",
                    line: "143"
                } ));
                t.Fixture.fromUInt64();
            },
            fromSingle: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToDateTimeTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDateTimeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromSingle()",
                    line: "149"
                } ));
                t.Fixture.fromSingle();
            },
            fromDouble: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToDateTimeTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDateTimeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromDouble()",
                    line: "155"
                } ));
                t.Fixture.fromDouble();
            },
            fromDecimal: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToDateTimeTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDateTimeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromDecimal()",
                    line: "161"
                } ));
                t.Fixture.fromDecimal();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                    project: "Batch1",
                    className: "Bridge.ClientTest.ConvertTests.ConvertToDateTimeTests",
                    file: "Batch1\\Convert\\ConvertToDateTimeTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDecimalTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToDecimalTests)],
        statics: {
            fromBoolean: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToDecimalTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDecimalTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromBoolean()",
                    line: "14"
                } ));
                t.Fixture.fromBoolean();
            },
            fromByte: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToDecimalTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDecimalTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromByte()",
                    line: "22"
                } ));
                t.Fixture.fromByte();
            },
            fromDecimal: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToDecimalTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDecimalTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromDecimal()",
                    line: "30"
                } ));
                t.Fixture.fromDecimal();
            },
            fromDouble: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToDecimalTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDecimalTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromDouble()",
                    line: "38"
                } ));
                t.Fixture.fromDouble();
            },
            fromInt16: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToDecimalTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDecimalTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromInt16()",
                    line: "49"
                } ));
                t.Fixture.fromInt16();
            },
            fromInt32: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToDecimalTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDecimalTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromInt32()",
                    line: "57"
                } ));
                t.Fixture.fromInt32();
            },
            fromInt64: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToDecimalTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDecimalTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromInt64()",
                    line: "65"
                } ));
                t.Fixture.fromInt64();
            },
            fromObject: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToDecimalTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDecimalTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromObject()",
                    line: "76"
                } ));
                t.Fixture.fromObject();
            },
            fromSByte: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToDecimalTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDecimalTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromSByte()",
                    line: "87"
                } ));
                t.Fixture.fromSByte();
            },
            fromSingle: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToDecimalTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDecimalTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromSingle()",
                    line: "95"
                } ));
                t.Fixture.fromSingle();
            },
            fromString: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToDecimalTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDecimalTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromString()",
                    line: "106"
                } ));
                t.Fixture.fromString();
            },
            fromUInt16: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToDecimalTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDecimalTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromUInt16()",
                    line: "126"
                } ));
                t.Fixture.fromUInt16();
            },
            fromUInt32: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToDecimalTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDecimalTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromUInt32()",
                    line: "134"
                } ));
                t.Fixture.fromUInt32();
            },
            fromUInt64: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToDecimalTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDecimalTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromUInt64()",
                    line: "142"
                } ));
                t.Fixture.fromUInt64();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                    project: "Batch1",
                    className: "Bridge.ClientTest.ConvertTests.ConvertToDecimalTests",
                    file: "Batch1\\Convert\\ConvertToDecimalTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDoubleTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToDoubleTests)],
        statics: {
            fromBoolean: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToDoubleTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDoubleTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromBoolean()",
                    line: "14"
                } ));
                t.Fixture.fromBoolean();
            },
            fromByte: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToDoubleTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDoubleTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromByte()",
                    line: "22"
                } ));
                t.Fixture.fromByte();
            },
            fromDecimal: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToDoubleTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDoubleTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromDecimal()",
                    line: "30"
                } ));
                t.Fixture.fromDecimal();
            },
            fromDouble: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToDoubleTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDoubleTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromDouble()",
                    line: "38"
                } ));
                t.Fixture.fromDouble();
            },
            fromInt16: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToDoubleTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDoubleTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromInt16()",
                    line: "46"
                } ));
                t.Fixture.fromInt16();
            },
            fromInt32: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToDoubleTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDoubleTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromInt32()",
                    line: "54"
                } ));
                t.Fixture.fromInt32();
            },
            fromInt64: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToDoubleTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDoubleTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromInt64()",
                    line: "62"
                } ));
                t.Fixture.fromInt64();
            },
            fromObject: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToDoubleTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDoubleTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromObject()",
                    line: "70"
                } ));
                t.Fixture.fromObject();
            },
            fromSByte: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToDoubleTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDoubleTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromSByte()",
                    line: "81"
                } ));
                t.Fixture.fromSByte();
            },
            fromSingle: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToDoubleTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDoubleTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromSingle()",
                    line: "89"
                } ));
                t.Fixture.fromSingle();
            },
            fromString: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToDoubleTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDoubleTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromString()",
                    line: "97"
                } ));
                t.Fixture.fromString();
            },
            fromUInt16: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToDoubleTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDoubleTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromUInt16()",
                    line: "114"
                } ));
                t.Fixture.fromUInt16();
            },
            fromUInt32: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToDoubleTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDoubleTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromUInt32()",
                    line: "122"
                } ));
                t.Fixture.fromUInt32();
            },
            fromUInt64: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToDoubleTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDoubleTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromUInt64()",
                    line: "130"
                } ));
                t.Fixture.fromUInt64();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                    project: "Batch1",
                    className: "Bridge.ClientTest.ConvertTests.ConvertToDoubleTests",
                    file: "Batch1\\Convert\\ConvertToDoubleTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt16Tests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToInt16Tests)],
        statics: {
            fromBoolean: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToInt16Tests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt16Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromBoolean()",
                    line: "14"
                } ));
                t.Fixture.fromBoolean();
            },
            fromByte: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToInt16Tests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt16Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromByte()",
                    line: "22"
                } ));
                t.Fixture.fromByte();
            },
            fromChar: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToInt16Tests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt16Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromChar()",
                    line: "30"
                } ));
                t.Fixture.fromChar();
            },
            fromDecimal: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToInt16Tests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt16Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromDecimal()",
                    line: "38"
                } ));
                t.Fixture.fromDecimal();
            },
            fromDouble: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToInt16Tests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt16Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromDouble()",
                    line: "49"
                } ));
                t.Fixture.fromDouble();
            },
            fromInt16: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToInt16Tests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt16Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromInt16()",
                    line: "60"
                } ));
                t.Fixture.fromInt16();
            },
            fromInt32: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToInt16Tests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt16Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromInt32()",
                    line: "68"
                } ));
                t.Fixture.fromInt32();
            },
            fromInt64: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToInt16Tests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt16Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromInt64()",
                    line: "79"
                } ));
                t.Fixture.fromInt64();
            },
            fromObject: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToInt16Tests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt16Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromObject()",
                    line: "90"
                } ));
                t.Fixture.fromObject();
            },
            fromSByte: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToInt16Tests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt16Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromSByte()",
                    line: "101"
                } ));
                t.Fixture.fromSByte();
            },
            fromSingle: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToInt16Tests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt16Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromSingle()",
                    line: "109"
                } ));
                t.Fixture.fromSingle();
            },
            fromString: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToInt16Tests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt16Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromString()",
                    line: "120"
                } ));
                t.Fixture.fromString();
            },
            fromStringWithBase: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToInt16Tests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt16Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromStringWithBase()",
                    line: "139"
                } ));
                t.Fixture.fromStringWithBase();
            },
            fromUInt16: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToInt16Tests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt16Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromUInt16()",
                    line: "172"
                } ));
                t.Fixture.fromUInt16();
            },
            fromUInt32: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToInt16Tests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt16Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromUInt32()",
                    line: "183"
                } ));
                t.Fixture.fromUInt32();
            },
            fromUInt64: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToInt16Tests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt16Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromUInt64()",
                    line: "194"
                } ));
                t.Fixture.fromUInt64();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                    project: "Batch1",
                    className: "Bridge.ClientTest.ConvertTests.ConvertToInt16Tests",
                    file: "Batch1\\Convert\\ConvertToInt16Tests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt32Tests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToInt32Tests)],
        statics: {
            fromBoolean: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToInt32Tests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt32Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromBoolean()",
                    line: "14"
                } ));
                t.Fixture.fromBoolean();
            },
            fromByte: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToInt32Tests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt32Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromByte()",
                    line: "22"
                } ));
                t.Fixture.fromByte();
            },
            fromChar: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToInt32Tests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt32Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromChar()",
                    line: "30"
                } ));
                t.Fixture.fromChar();
            },
            fromDecimal: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToInt32Tests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt32Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromDecimal()",
                    line: "38"
                } ));
                t.Fixture.fromDecimal();
            },
            fromDouble: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToInt32Tests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt32Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromDouble()",
                    line: "49"
                } ));
                t.Fixture.fromDouble();
            },
            fromInt16: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToInt32Tests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt32Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromInt16()",
                    line: "60"
                } ));
                t.Fixture.fromInt16();
            },
            fromInt32: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToInt32Tests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt32Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromInt32()",
                    line: "68"
                } ));
                t.Fixture.fromInt32();
            },
            fromInt64: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToInt32Tests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt32Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromInt64()",
                    line: "76"
                } ));
                t.Fixture.fromInt64();
            },
            fromObject: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToInt32Tests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt32Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromObject()",
                    line: "87"
                } ));
                t.Fixture.fromObject();
            },
            fromSByte: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToInt32Tests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt32Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromSByte()",
                    line: "98"
                } ));
                t.Fixture.fromSByte();
            },
            fromSingle: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToInt32Tests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt32Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromSingle()",
                    line: "106"
                } ));
                t.Fixture.fromSingle();
            },
            fromString: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToInt32Tests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt32Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromString()",
                    line: "117"
                } ));
                t.Fixture.fromString();
            },
            fromStringWithBase: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToInt32Tests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt32Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromStringWithBase()",
                    line: "136"
                } ));
                t.Fixture.fromStringWithBase();
            },
            fromUInt16: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToInt32Tests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt32Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromUInt16()",
                    line: "169"
                } ));
                t.Fixture.fromUInt16();
            },
            fromUInt32: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToInt32Tests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt32Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromUInt32()",
                    line: "177"
                } ));
                t.Fixture.fromUInt32();
            },
            fromUInt64: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToInt32Tests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt32Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromUInt64()",
                    line: "188"
                } ));
                t.Fixture.fromUInt64();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                    project: "Batch1",
                    className: "Bridge.ClientTest.ConvertTests.ConvertToInt32Tests",
                    file: "Batch1\\Convert\\ConvertToInt32Tests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt64Tests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToInt64Tests)],
        statics: {
            fromBoolean: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToInt64Tests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt64Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromBoolean()",
                    line: "14"
                } ));
                t.Fixture.fromBoolean();
            },
            fromByte: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToInt64Tests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt64Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromByte()",
                    line: "22"
                } ));
                t.Fixture.fromByte();
            },
            fromChar: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToInt64Tests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt64Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromChar()",
                    line: "30"
                } ));
                t.Fixture.fromChar();
            },
            fromDecimal: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToInt64Tests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt64Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromDecimal()",
                    line: "38"
                } ));
                t.Fixture.fromDecimal();
            },
            fromDouble: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToInt64Tests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt64Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromDouble()",
                    line: "49"
                } ));
                t.Fixture.fromDouble();
            },
            fromInt16: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToInt64Tests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt64Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromInt16()",
                    line: "60"
                } ));
                t.Fixture.fromInt16();
            },
            fromInt32: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToInt64Tests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt64Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromInt32()",
                    line: "68"
                } ));
                t.Fixture.fromInt32();
            },
            fromInt64: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToInt64Tests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt64Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromInt64()",
                    line: "76"
                } ));
                t.Fixture.fromInt64();
            },
            fromObject: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToInt64Tests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt64Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromObject()",
                    line: "84"
                } ));
                t.Fixture.fromObject();
            },
            fromSByte: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToInt64Tests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt64Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromSByte()",
                    line: "95"
                } ));
                t.Fixture.fromSByte();
            },
            fromSingle: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToInt64Tests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt64Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromSingle()",
                    line: "103"
                } ));
                t.Fixture.fromSingle();
            },
            fromString: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToInt64Tests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt64Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromString()",
                    line: "114"
                } ));
                t.Fixture.fromString();
            },
            fromStringWithBase: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToInt64Tests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt64Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromStringWithBase()",
                    line: "131"
                } ));
                t.Fixture.fromStringWithBase();
            },
            fromUInt16: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToInt64Tests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt64Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromUInt16()",
                    line: "166"
                } ));
                t.Fixture.fromUInt16();
            },
            fromUInt32: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToInt64Tests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt64Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromUInt32()",
                    line: "174"
                } ));
                t.Fixture.fromUInt32();
            },
            fromUInt64: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToInt64Tests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt64Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromUInt64()",
                    line: "182"
                } ));
                t.Fixture.fromUInt64();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                    project: "Batch1",
                    className: "Bridge.ClientTest.ConvertTests.ConvertToInt64Tests",
                    file: "Batch1\\Convert\\ConvertToInt64Tests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToSByteTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToSByteTests)],
        statics: {
            fromBoolean: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToSByteTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToSByteTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromBoolean()",
                    line: "14"
                } ));
                t.Fixture.fromBoolean();
            },
            fromByte: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToSByteTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToSByteTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromByte()",
                    line: "22"
                } ));
                t.Fixture.fromByte();
            },
            fromChar: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToSByteTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToSByteTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromChar()",
                    line: "33"
                } ));
                t.Fixture.fromChar();
            },
            fromDecimal: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToSByteTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToSByteTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromDecimal()",
                    line: "41"
                } ));
                t.Fixture.fromDecimal();
            },
            fromDouble: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToSByteTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToSByteTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromDouble()",
                    line: "52"
                } ));
                t.Fixture.fromDouble();
            },
            fromInt16: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToSByteTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToSByteTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromInt16()",
                    line: "63"
                } ));
                t.Fixture.fromInt16();
            },
            fromInt32: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToSByteTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToSByteTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromInt32()",
                    line: "74"
                } ));
                t.Fixture.fromInt32();
            },
            fromInt64: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToSByteTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToSByteTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromInt64()",
                    line: "85"
                } ));
                t.Fixture.fromInt64();
            },
            fromObject: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToSByteTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToSByteTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromObject()",
                    line: "96"
                } ));
                t.Fixture.fromObject();
            },
            fromSByte: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToSByteTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToSByteTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromSByte()",
                    line: "107"
                } ));
                t.Fixture.fromSByte();
            },
            fromSingle: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToSByteTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToSByteTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromSingle()",
                    line: "115"
                } ));
                t.Fixture.fromSingle();
            },
            fromString: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToSByteTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToSByteTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromString()",
                    line: "126"
                } ));
                t.Fixture.fromString();
            },
            fromStringWithBase: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToSByteTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToSByteTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromStringWithBase()",
                    line: "150"
                } ));
                t.Fixture.fromStringWithBase();
            },
            fromUInt16: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToSByteTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToSByteTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromUInt16()",
                    line: "171"
                } ));
                t.Fixture.fromUInt16();
            },
            fromUInt32: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToSByteTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToSByteTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromUInt32()",
                    line: "182"
                } ));
                t.Fixture.fromUInt32();
            },
            fromUInt64: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToSByteTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToSByteTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromUInt64()",
                    line: "193"
                } ));
                t.Fixture.fromUInt64();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                    project: "Batch1",
                    className: "Bridge.ClientTest.ConvertTests.ConvertToSByteTests",
                    file: "Batch1\\Convert\\ConvertToSByteTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToSingleTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToSingleTests)],
        statics: {
            fromBoolean: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToSingleTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToSingleTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromBoolean()",
                    line: "14"
                } ));
                t.Fixture.fromBoolean();
            },
            fromByte: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToSingleTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToSingleTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromByte()",
                    line: "22"
                } ));
                t.Fixture.fromByte();
            },
            fromDecimal: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToSingleTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToSingleTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromDecimal()",
                    line: "30"
                } ));
                t.Fixture.fromDecimal();
            },
            fromDouble: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToSingleTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToSingleTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromDouble()",
                    line: "40"
                } ));
                t.Fixture.fromDouble();
            },
            fromInt16: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToSingleTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToSingleTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromInt16()",
                    line: "48"
                } ));
                t.Fixture.fromInt16();
            },
            fromInt32: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToSingleTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToSingleTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromInt32()",
                    line: "56"
                } ));
                t.Fixture.fromInt32();
            },
            fromInt64: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToSingleTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToSingleTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromInt64()",
                    line: "64"
                } ));
                t.Fixture.fromInt64();
            },
            fromObject: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToSingleTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToSingleTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromObject()",
                    line: "72"
                } ));
                t.Fixture.fromObject();
            },
            fromSByte: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToSingleTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToSingleTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromSByte()",
                    line: "83"
                } ));
                t.Fixture.fromSByte();
            },
            fromSingle: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToSingleTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToSingleTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromSingle()",
                    line: "91"
                } ));
                t.Fixture.fromSingle();
            },
            fromString: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToSingleTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToSingleTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromString()",
                    line: "99"
                } ));
                t.Fixture.fromString();
            },
            fromUInt16: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToSingleTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToSingleTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromUInt16()",
                    line: "115"
                } ));
                t.Fixture.fromUInt16();
            },
            fromUInt32: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToSingleTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToSingleTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromUInt32()",
                    line: "123"
                } ));
                t.Fixture.fromUInt32();
            },
            fromUInt64: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToSingleTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToSingleTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromUInt64()",
                    line: "131"
                } ));
                t.Fixture.fromUInt64();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                    project: "Batch1",
                    className: "Bridge.ClientTest.ConvertTests.ConvertToSingleTests",
                    file: "Batch1\\Convert\\ConvertToSingleTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToStringTests)],
        statics: {
            fromBoxedObject: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToStringTests).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromBoxedObject()",
                    line: "15"
                } ));
                Bridge.ClientTest.ConvertTests.ConvertToStringTests.fromBoxedObject();
            },
            fromObject: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToStringTests).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromObject()",
                    line: "199"
                } ));
                Bridge.ClientTest.ConvertTests.ConvertToStringTests.fromObject();
            },
            fromDateTime: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToStringTests).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromDateTime()",
                    line: "205"
                } ));
                Bridge.ClientTest.ConvertTests.ConvertToStringTests.fromDateTime();
            },
            fromChar: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToStringTests).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromChar()",
                    line: "218"
                } ));
                Bridge.ClientTest.ConvertTests.ConvertToStringTests.fromChar();
            },
            fromByteBase2: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToStringTests).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromByteBase2()",
                    line: "231"
                } ));
                Bridge.ClientTest.ConvertTests.ConvertToStringTests.fromByteBase2();
            },
            fromByteBase8: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToStringTests).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromByteBase8()",
                    line: "243"
                } ));
                Bridge.ClientTest.ConvertTests.ConvertToStringTests.fromByteBase8();
            },
            fromByteBase10: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToStringTests).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromByteBase10()",
                    line: "255"
                } ));
                Bridge.ClientTest.ConvertTests.ConvertToStringTests.fromByteBase10();
            },
            fromByteBase16: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToStringTests).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromByteBase16()",
                    line: "267"
                } ));
                Bridge.ClientTest.ConvertTests.ConvertToStringTests.fromByteBase16();
            },
            fromByteInvalidBase: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToStringTests).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromByteInvalidBase()",
                    line: "279"
                } ));
                Bridge.ClientTest.ConvertTests.ConvertToStringTests.fromByteInvalidBase();
            },
            fromInt16Base2: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToStringTests).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromInt16Base2()",
                    line: "285"
                } ));
                Bridge.ClientTest.ConvertTests.ConvertToStringTests.fromInt16Base2();
            },
            fromInt16Base8: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToStringTests).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromInt16Base8()",
                    line: "297"
                } ));
                Bridge.ClientTest.ConvertTests.ConvertToStringTests.fromInt16Base8();
            },
            fromInt16Base10: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToStringTests).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromInt16Base10()",
                    line: "309"
                } ));
                Bridge.ClientTest.ConvertTests.ConvertToStringTests.fromInt16Base10();
            },
            fromInt16Base16: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToStringTests).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromInt16Base16()",
                    line: "321"
                } ));
                Bridge.ClientTest.ConvertTests.ConvertToStringTests.fromInt16Base16();
            },
            fromInt16InvalidBase: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToStringTests).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromInt16InvalidBase()",
                    line: "333"
                } ));
                Bridge.ClientTest.ConvertTests.ConvertToStringTests.fromInt16InvalidBase();
            },
            fromInt32Base2: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToStringTests).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromInt32Base2()",
                    line: "339"
                } ));
                Bridge.ClientTest.ConvertTests.ConvertToStringTests.fromInt32Base2();
            },
            fromInt32Base8: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToStringTests).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromInt32Base8()",
                    line: "351"
                } ));
                Bridge.ClientTest.ConvertTests.ConvertToStringTests.fromInt32Base8();
            },
            fromInt32Base10: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToStringTests).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromInt32Base10()",
                    line: "363"
                } ));
                Bridge.ClientTest.ConvertTests.ConvertToStringTests.fromInt32Base10();
            },
            fromInt32Base16: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToStringTests).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromInt32Base16()",
                    line: "375"
                } ));
                Bridge.ClientTest.ConvertTests.ConvertToStringTests.fromInt32Base16();
            },
            fromInt32InvalidBase: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToStringTests).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromInt32InvalidBase()",
                    line: "387"
                } ));
                Bridge.ClientTest.ConvertTests.ConvertToStringTests.fromInt32InvalidBase();
            },
            fromInt64Base2: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToStringTests).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromInt64Base2()",
                    line: "393"
                } ));
                Bridge.ClientTest.ConvertTests.ConvertToStringTests.fromInt64Base2();
            },
            fromInt64Base8: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToStringTests).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromInt64Base8()",
                    line: "405"
                } ));
                Bridge.ClientTest.ConvertTests.ConvertToStringTests.fromInt64Base8();
            },
            fromInt64Base10: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToStringTests).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromInt64Base10()",
                    line: "417"
                } ));
                Bridge.ClientTest.ConvertTests.ConvertToStringTests.fromInt64Base10();
            },
            fromInt64Base16: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToStringTests).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromInt64Base16()",
                    line: "429"
                } ));
                Bridge.ClientTest.ConvertTests.ConvertToStringTests.fromInt64Base16();
            },
            fromInt64InvalidBase: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToStringTests).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromInt64InvalidBase()",
                    line: "441"
                } ));
                Bridge.ClientTest.ConvertTests.ConvertToStringTests.fromInt64InvalidBase();
            },
            fromBoolean: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToStringTests).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromBoolean()",
                    line: "447"
                } ));
                Bridge.ClientTest.ConvertTests.ConvertToStringTests.fromBoolean();
            },
            fromSByte: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToStringTests).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromSByte()",
                    line: "463"
                } ));
                Bridge.ClientTest.ConvertTests.ConvertToStringTests.fromSByte();
            },
            fromByte: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToStringTests).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromByte()",
                    line: "477"
                } ));
                Bridge.ClientTest.ConvertTests.ConvertToStringTests.fromByte();
            },
            fromInt16Array: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToStringTests).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromInt16Array()",
                    line: "491"
                } ));
                Bridge.ClientTest.ConvertTests.ConvertToStringTests.fromInt16Array();
            },
            fromUInt16Array: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToStringTests).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromUInt16Array()",
                    line: "505"
                } ));
                Bridge.ClientTest.ConvertTests.ConvertToStringTests.fromUInt16Array();
            },
            fromInt32Array: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToStringTests).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromInt32Array()",
                    line: "519"
                } ));
                Bridge.ClientTest.ConvertTests.ConvertToStringTests.fromInt32Array();
            },
            fromUInt32Array: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToStringTests).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromUInt32Array()",
                    line: "533"
                } ));
                Bridge.ClientTest.ConvertTests.ConvertToStringTests.fromUInt32Array();
            },
            fromInt64Array: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToStringTests).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromInt64Array()",
                    line: "547"
                } ));
                Bridge.ClientTest.ConvertTests.ConvertToStringTests.fromInt64Array();
            },
            fromUInt64Array: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToStringTests).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromUInt64Array()",
                    line: "561"
                } ));
                Bridge.ClientTest.ConvertTests.ConvertToStringTests.fromUInt64Array();
            },
            fromSingleArray: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToStringTests).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromSingleArray()",
                    line: "575"
                } ));
                Bridge.ClientTest.ConvertTests.ConvertToStringTests.fromSingleArray();
            },
            fromDoubleArray: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToStringTests).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromDoubleArray()",
                    line: "592"
                } ));
                Bridge.ClientTest.ConvertTests.ConvertToStringTests.fromDoubleArray();
            },
            fromDecimalArray: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToStringTests).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromDecimalArray()",
                    line: "606"
                } ));
                Bridge.ClientTest.ConvertTests.ConvertToStringTests.fromDecimalArray();
            },
            fromDateTimeArray: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToStringTests).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromDateTimeArray()",
                    line: "619"
                } ));
                Bridge.ClientTest.ConvertTests.ConvertToStringTests.fromDateTimeArray();
            },
            fromString: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToStringTests).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromString()",
                    line: "638"
                } ));
                Bridge.ClientTest.ConvertTests.ConvertToStringTests.fromString();
            },
            fromIFormattable: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToStringTests).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromIFormattable()",
                    line: "652"
                } ));
                Bridge.ClientTest.ConvertTests.ConvertToStringTests.fromIFormattable();
            },
            fromNonIConvertible: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToStringTests).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromNonIConvertible()",
                    line: "666"
                } ));
                Bridge.ClientTest.ConvertTests.ConvertToStringTests.fromNonIConvertible();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                    project: "Batch1",
                    className: "Bridge.ClientTest.ConvertTests.ConvertToStringTests",
                    file: "Batch1\\Convert\\ConvertToStringTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt16Tests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToUInt16Tests)],
        statics: {
            fromBoolean: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToUInt16Tests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt16Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromBoolean()",
                    line: "14"
                } ));
                t.Fixture.fromBoolean();
            },
            fromByte: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToUInt16Tests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt16Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromByte()",
                    line: "22"
                } ));
                t.Fixture.fromByte();
            },
            fromChar: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToUInt16Tests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt16Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromChar()",
                    line: "30"
                } ));
                t.Fixture.fromChar();
            },
            fromDecimal: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToUInt16Tests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt16Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromDecimal()",
                    line: "38"
                } ));
                t.Fixture.fromDecimal();
            },
            fromDouble: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToUInt16Tests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt16Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromDouble()",
                    line: "49"
                } ));
                t.Fixture.fromDouble();
            },
            fromInt16: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToUInt16Tests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt16Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromInt16()",
                    line: "60"
                } ));
                t.Fixture.fromInt16();
            },
            fromInt32: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToUInt16Tests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt16Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromInt32()",
                    line: "71"
                } ));
                t.Fixture.fromInt32();
            },
            fromInt64: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToUInt16Tests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt16Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromInt64()",
                    line: "82"
                } ));
                t.Fixture.fromInt64();
            },
            fromObject: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToUInt16Tests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt16Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromObject()",
                    line: "93"
                } ));
                t.Fixture.fromObject();
            },
            fromSByte: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToUInt16Tests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt16Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromSByte()",
                    line: "104"
                } ));
                t.Fixture.fromSByte();
            },
            fromSingle: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToUInt16Tests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt16Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromSingle()",
                    line: "115"
                } ));
                t.Fixture.fromSingle();
            },
            fromString: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToUInt16Tests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt16Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromString()",
                    line: "126"
                } ));
                t.Fixture.fromString();
            },
            fromStringWithBase: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToUInt16Tests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt16Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromStringWithBase()",
                    line: "142"
                } ));
                t.Fixture.fromStringWithBase();
            },
            fromUInt16: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToUInt16Tests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt16Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromUInt16()",
                    line: "163"
                } ));
                t.Fixture.fromUInt16();
            },
            fromUInt32: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToUInt16Tests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt16Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromUInt32()",
                    line: "171"
                } ));
                t.Fixture.fromUInt32();
            },
            fromUInt64: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToUInt16Tests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt16Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromUInt64()",
                    line: "182"
                } ));
                t.Fixture.fromUInt64();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                    project: "Batch1",
                    className: "Bridge.ClientTest.ConvertTests.ConvertToUInt16Tests",
                    file: "Batch1\\Convert\\ConvertToUInt16Tests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt32Tests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToUInt32Tests)],
        statics: {
            fromBoolean: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToUInt32Tests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt32Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromBoolean()",
                    line: "14"
                } ));
                t.Fixture.fromBoolean();
            },
            fromByte: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToUInt32Tests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt32Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromByte()",
                    line: "22"
                } ));
                t.Fixture.fromByte();
            },
            fromChar: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToUInt32Tests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt32Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromChar()",
                    line: "30"
                } ));
                t.Fixture.fromChar();
            },
            fromDecimal: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToUInt32Tests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt32Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromDecimal()",
                    line: "38"
                } ));
                t.Fixture.fromDecimal();
            },
            fromDouble: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToUInt32Tests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt32Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromDouble()",
                    line: "49"
                } ));
                t.Fixture.fromDouble();
            },
            fromInt16: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToUInt32Tests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt32Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromInt16()",
                    line: "60"
                } ));
                t.Fixture.fromInt16();
            },
            fromInt32: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToUInt32Tests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt32Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromInt32()",
                    line: "71"
                } ));
                t.Fixture.fromInt32();
            },
            fromInt64: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToUInt32Tests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt32Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromInt64()",
                    line: "82"
                } ));
                t.Fixture.fromInt64();
            },
            fromObject: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToUInt32Tests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt32Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromObject()",
                    line: "93"
                } ));
                t.Fixture.fromObject();
            },
            fromSByte: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToUInt32Tests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt32Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromSByte()",
                    line: "104"
                } ));
                t.Fixture.fromSByte();
            },
            fromSingle: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToUInt32Tests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt32Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromSingle()",
                    line: "115"
                } ));
                t.Fixture.fromSingle();
            },
            fromString: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToUInt32Tests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt32Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromString()",
                    line: "126"
                } ));
                t.Fixture.fromString();
            },
            fromStringWithBase: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToUInt32Tests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt32Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromStringWithBase()",
                    line: "144"
                } ));
                t.Fixture.fromStringWithBase();
            },
            fromUInt16: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToUInt32Tests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt32Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromUInt16()",
                    line: "165"
                } ));
                t.Fixture.fromUInt16();
            },
            fromUInt32: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToUInt32Tests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt32Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromUInt32()",
                    line: "173"
                } ));
                t.Fixture.fromUInt32();
            },
            fromUInt64: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToUInt32Tests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt32Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromUInt64()",
                    line: "181"
                } ));
                t.Fixture.fromUInt64();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                    project: "Batch1",
                    className: "Bridge.ClientTest.ConvertTests.ConvertToUInt32Tests",
                    file: "Batch1\\Convert\\ConvertToUInt32Tests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt64Tests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToUInt64Tests)],
        statics: {
            fromBoolean: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToUInt64Tests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt64Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromBoolean()",
                    line: "14"
                } ));
                t.Fixture.fromBoolean();
            },
            fromByte: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToUInt64Tests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt64Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromByte()",
                    line: "22"
                } ));
                t.Fixture.fromByte();
            },
            fromChar: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToUInt64Tests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt64Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromChar()",
                    line: "30"
                } ));
                t.Fixture.fromChar();
            },
            fromDecimal: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToUInt64Tests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt64Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromDecimal()",
                    line: "38"
                } ));
                t.Fixture.fromDecimal();
            },
            fromDouble: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToUInt64Tests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt64Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromDouble()",
                    line: "49"
                } ));
                t.Fixture.fromDouble();
            },
            fromInt16: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToUInt64Tests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt64Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromInt16()",
                    line: "60"
                } ));
                t.Fixture.fromInt16();
            },
            fromInt32: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToUInt64Tests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt64Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromInt32()",
                    line: "71"
                } ));
                t.Fixture.fromInt32();
            },
            fromInt64: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToUInt64Tests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt64Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromInt64()",
                    line: "82"
                } ));
                t.Fixture.fromInt64();
            },
            fromObject: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToUInt64Tests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt64Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromObject()",
                    line: "93"
                } ));
                t.Fixture.fromObject();
            },
            fromSByte: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToUInt64Tests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt64Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromSByte()",
                    line: "104"
                } ));
                t.Fixture.fromSByte();
            },
            fromSingle: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToUInt64Tests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt64Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromSingle()",
                    line: "115"
                } ));
                t.Fixture.fromSingle();
            },
            fromString: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToUInt64Tests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt64Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromString()",
                    line: "126"
                } ));
                t.Fixture.fromString();
            },
            fromStringWithBase: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToUInt64Tests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt64Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromStringWithBase()",
                    line: "148"
                } ));
                t.Fixture.fromStringWithBase();
            },
            fromUInt16: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToUInt64Tests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt64Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromUInt16()",
                    line: "175"
                } ));
                t.Fixture.fromUInt16();
            },
            fromUInt32: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToUInt64Tests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt64Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromUInt32()",
                    line: "183"
                } ));
                t.Fixture.fromUInt32();
            },
            fromUInt64: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToUInt64Tests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt64Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromUInt64()",
                    line: "191"
                } ));
                t.Fixture.fromUInt64();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                    project: "Batch1",
                    className: "Bridge.ClientTest.ConvertTests.ConvertToUInt64Tests",
                    file: "Batch1\\Convert\\ConvertToUInt64Tests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.CreateAndInitializationModesTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ObjectLiteralTests.CreateAndInitializationModesTests)],
        statics: {
            test: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ObjectLiteralTests.CreateAndInitializationModesTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CreateAndInitializationModesTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "Test()",
                    line: "391"
                } ));
                t.Fixture.test();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                    project: "Batch1",
                    className: "Bridge.ClientTest.ObjectLiteralTests.CreateAndInitializationModesTests",
                    file: "Batch1\\ObjectLiteralTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.CreateModeTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ObjectLiteralTests.CreateModeTests)],
        statics: {
            test: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ObjectLiteralTests.CreateModeTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CreateModeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "Test()",
                    line: "233"
                } ));
                t.Fixture.test();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                    project: "Batch1",
                    className: "Bridge.ClientTest.ObjectLiteralTests.CreateModeTests",
                    file: "Batch1\\ObjectLiteralTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.CultureInfoTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.CultureInfoTests)],
        statics: {
            typePropertiesAreCorrect: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.CultureInfoTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CultureInfoTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TypePropertiesAreCorrect()",
                    line: "10"
                } ));
                t.Fixture.typePropertiesAreCorrect();
            },
            getFormatWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.CultureInfoTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CultureInfoTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "GetFormatWorks()",
                    line: "18"
                } ));
                t.Fixture.getFormatWorks();
            },
            invariantWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.CultureInfoTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CultureInfoTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "InvariantWorks()",
                    line: "27"
                } ));
                t.Fixture.invariantWorks();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                    project: "Batch1",
                    className: "Bridge.ClientTest.CultureInfoTests",
                    file: "Batch1\\CultureInfoTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.CultureNotFoundExceptionTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.CultureNotFoundExceptionTests)],
        statics: {
            typePropertiesAreCorrect: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.CultureNotFoundExceptionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CultureNotFoundExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TypePropertiesAreCorrect()",
                    line: "14"
                } ));
                t.Fixture.typePropertiesAreCorrect();
            },
            defaultConstructorWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.CultureNotFoundExceptionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CultureNotFoundExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "DefaultConstructorWorks()",
                    line: "23"
                } ));
                t.Fixture.defaultConstructorWorks();
            },
            constructorWithMessageWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.CultureNotFoundExceptionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CultureNotFoundExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ConstructorWithMessageWorks()",
                    line: "33"
                } ));
                t.Fixture.constructorWithMessageWorks();
            },
            constructorWithMessageAndInnerExceptionWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.CultureNotFoundExceptionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CultureNotFoundExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ConstructorWithMessageAndInnerExceptionWorks()",
                    line: "45"
                } ));
                t.Fixture.constructorWithMessageAndInnerExceptionWorks();
            },
            constructorWithMessageAndParamNameWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.CultureNotFoundExceptionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CultureNotFoundExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ConstructorWithMessageAndParamNameWorks()",
                    line: "58"
                } ));
                t.Fixture.constructorWithMessageAndParamNameWorks();
            },
            constructorWithMessageAndCultureNameAndInnerExceptionWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.CultureNotFoundExceptionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CultureNotFoundExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ConstructorWithMessageAndCultureNameAndInnerExceptionWorks()",
                    line: "70"
                } ));
                t.Fixture.constructorWithMessageAndCultureNameAndInnerExceptionWorks();
            },
            constructorWithParamNameAndCultureNameAndMessage: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.CultureNotFoundExceptionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CultureNotFoundExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ConstructorWithParamNameAndCultureNameAndMessage()",
                    line: "84"
                } ));
                t.Fixture.constructorWithParamNameAndCultureNameAndMessage();
            },
            constructorWithMessageAndCultureIdAndInnerExceptionWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.CultureNotFoundExceptionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CultureNotFoundExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ConstructorWithMessageAndCultureIdAndInnerExceptionWorks()",
                    line: "96"
                } ));
                t.Fixture.constructorWithMessageAndCultureIdAndInnerExceptionWorks();
            },
            constructorWithParamNameAndCultureIdAndMessage: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.CultureNotFoundExceptionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CultureNotFoundExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ConstructorWithParamNameAndCultureIdAndMessage()",
                    line: "110"
                } ));
                t.Fixture.constructorWithParamNameAndCultureIdAndMessage();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                    project: "Batch1",
                    className: "Bridge.ClientTest.Exceptions.CultureNotFoundExceptionTests",
                    file: "Batch1\\Exceptions\\CultureNotFoundExceptionTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.DataViewTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.DataViewTests)],
        statics: {
            typePropertiesAreCorrect: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.DataViewTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DataViewTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TypePropertiesAreCorrect()",
                    line: "20"
                } ));
                t.Fixture.typePropertiesAreCorrect();
            },
            arrayBufferOnlyConstructorWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.DataViewTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DataViewTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ArrayBufferOnlyConstructorWorks()",
                    line: "36"
                } ));
                t.Fixture.arrayBufferOnlyConstructorWorks();
            },
            arrayBufferAndByteOffsetConstructorWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.DataViewTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DataViewTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ArrayBufferAndByteOffsetConstructorWorks()",
                    line: "45"
                } ));
                t.Fixture.arrayBufferAndByteOffsetConstructorWorks();
            },
            arrayBufferAndByteOffsetAndByteLengthConstructorWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.DataViewTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DataViewTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ArrayBufferAndByteOffsetAndByteLengthConstructorWorks()",
                    line: "54"
                } ));
                t.Fixture.arrayBufferAndByteOffsetAndByteLengthConstructorWorks();
            },
            getInt8Works: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.DataViewTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DataViewTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "GetInt8Works()",
                    line: "64"
                } ));
                t.Fixture.getInt8Works();
            },
            getUint8Works: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.DataViewTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DataViewTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "GetUint8Works()",
                    line: "72"
                } ));
                t.Fixture.getUint8Works();
            },
            getInt16Works: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.DataViewTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DataViewTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "GetInt16Works()",
                    line: "80"
                } ));
                t.Fixture.getInt16Works();
            },
            getUint16Works: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.DataViewTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DataViewTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "GetUint16Works()",
                    line: "95"
                } ));
                t.Fixture.getUint16Works();
            },
            getInt32Works: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.DataViewTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DataViewTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "GetInt32Works()",
                    line: "110"
                } ));
                t.Fixture.getInt32Works();
            },
            getUint32Works: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.DataViewTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DataViewTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "GetUint32Works()",
                    line: "125"
                } ));
                t.Fixture.getUint32Works();
            },
            getFloat32Works: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.DataViewTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DataViewTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "GetFloat32Works()",
                    line: "140"
                } ));
                t.Fixture.getFloat32Works();
            },
            getFloat64Works: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.DataViewTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DataViewTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "GetFloat64Works()",
                    line: "149"
                } ));
                t.Fixture.getFloat64Works();
            },
            setInt8Works: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.DataViewTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DataViewTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "SetInt8Works()",
                    line: "173"
                } ));
                t.Fixture.setInt8Works();
            },
            setUint8Works: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.DataViewTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DataViewTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "SetUint8Works()",
                    line: "183"
                } ));
                t.Fixture.setUint8Works();
            },
            setInt16Works: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.DataViewTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DataViewTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "SetInt16Works()",
                    line: "193"
                } ));
                t.Fixture.setInt16Works();
            },
            setUint16Works: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.DataViewTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DataViewTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "SetUint16Works()",
                    line: "207"
                } ));
                t.Fixture.setUint16Works();
            },
            setInt32Works: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.DataViewTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DataViewTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "SetInt32Works()",
                    line: "221"
                } ));
                t.Fixture.setInt32Works();
            },
            setUint32Works: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.DataViewTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DataViewTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "SetUint32Works()",
                    line: "235"
                } ));
                t.Fixture.setUint32Works();
            },
            setFloat32Works: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.DataViewTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DataViewTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "SetFloat32Works()",
                    line: "249"
                } ));
                t.Fixture.setFloat32Works();
            },
            setFloat64Works: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.DataViewTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DataViewTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "SetFloat64Works()",
                    line: "260"
                } ));
                t.Fixture.setFloat64Works();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                    project: "Batch1",
                    className: "Bridge.ClientTest.Collections.Native.DataViewTests",
                    file: "Batch1\\Collections\\Native\\DataViewTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.DateTimeFormatInfoTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Format.DateTimeFormatInfoTests)],
        statics: {
            typePropertiesAreCorrect: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Format.DateTimeFormatInfoTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DateTimeFormatInfoTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TypePropertiesAreCorrect()",
                    line: "11"
                } ));
                t.Fixture.typePropertiesAreCorrect();
            },
            getFormatWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Format.DateTimeFormatInfoTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DateTimeFormatInfoTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "GetFormatWorks()",
                    line: "19"
                } ));
                t.Fixture.getFormatWorks();
            },
            invariantWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Format.DateTimeFormatInfoTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DateTimeFormatInfoTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "InvariantWorks()",
                    line: "27"
                } ));
                t.Fixture.invariantWorks();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                    project: "Batch1",
                    className: "Bridge.ClientTest.Format.DateTimeFormatInfoTests",
                    file: "Batch1\\Format\\DateTimeFormatInfoTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.DecimalMathTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.DecimalMathTests)],
        statics: {
            testSubtractOperator: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.DecimalMathTests).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DecimalMathTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TestSubtractOperator()",
                    line: "132"
                } ));
                Bridge.ClientTest.DecimalMathTests.testSubtractOperator();
            },
            testRemainderOperator: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.DecimalMathTests).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DecimalMathTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TestRemainderOperator()",
                    line: "138"
                } ));
                Bridge.ClientTest.DecimalMathTests.testRemainderOperator();
            },
            testMultiplyOperator: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.DecimalMathTests).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DecimalMathTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TestMultiplyOperator()",
                    line: "144"
                } ));
                Bridge.ClientTest.DecimalMathTests.testMultiplyOperator();
            },
            testDivideOperator: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.DecimalMathTests).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DecimalMathTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TestDivideOperator()",
                    line: "150"
                } ));
                Bridge.ClientTest.DecimalMathTests.testDivideOperator();
            },
            testAddOperator: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.DecimalMathTests).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DecimalMathTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TestAddOperator()",
                    line: "156"
                } ));
                Bridge.ClientTest.DecimalMathTests.testAddOperator();
            },
            testAddMethod: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.DecimalMathTests).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DecimalMathTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TestAddMethod()",
                    line: "162"
                } ));
                Bridge.ClientTest.DecimalMathTests.testAddMethod();
            },
            testDivideMethod: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.DecimalMathTests).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DecimalMathTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TestDivideMethod()",
                    line: "168"
                } ));
                Bridge.ClientTest.DecimalMathTests.testDivideMethod();
            },
            testMultiplyMethod: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.DecimalMathTests).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DecimalMathTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TestMultiplyMethod()",
                    line: "174"
                } ));
                Bridge.ClientTest.DecimalMathTests.testMultiplyMethod();
            },
            testRemainderMethod: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.DecimalMathTests).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DecimalMathTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TestRemainderMethod()",
                    line: "180"
                } ));
                Bridge.ClientTest.DecimalMathTests.testRemainderMethod();
            },
            testSubtractMethod: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.DecimalMathTests).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DecimalMathTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TestSubtractMethod()",
                    line: "186"
                } ));
                Bridge.ClientTest.DecimalMathTests.testSubtractMethod();
            },
            testCeilingMethod: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.DecimalMathTests).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DecimalMathTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TestCeilingMethod()",
                    line: "192"
                } ));
                Bridge.ClientTest.DecimalMathTests.testCeilingMethod();
            },
            testFloorMethod: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.DecimalMathTests).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DecimalMathTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TestFloorMethod()",
                    line: "217"
                } ));
                Bridge.ClientTest.DecimalMathTests.testFloorMethod();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                    project: "Batch1",
                    className: "Bridge.ClientTest.DecimalMathTests",
                    file: "Batch1\\DecimalMathTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DecimalTests)],
        statics: {
            typePropertiesAreCorrect: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DecimalTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TypePropertiesAreCorrect()",
                    line: "16"
                } ));
                t.Fixture.typePropertiesAreCorrect();
            },
            defaultValueIs0: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DecimalTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "DefaultValueIs0()",
                    line: "31"
                } ));
                t.Fixture.defaultValueIs0();
            },
            creatingInstanceReturnsZero: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DecimalTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "CreatingInstanceReturnsZero()",
                    line: "37"
                } ));
                t.Fixture.creatingInstanceReturnsZero();
            },
            constantsWork: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DecimalTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ConstantsWork()",
                    line: "43"
                } ));
                t.Fixture.constantsWork();
            },
            defaultConstructorReturnsZero: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DecimalTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "DefaultConstructorReturnsZero()",
                    line: "51"
                } ));
                t.Fixture.defaultConstructorReturnsZero();
            },
            convertingConstructorsWork: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DecimalTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ConvertingConstructorsWork()",
                    line: "57"
                } ));
                t.Fixture.convertingConstructorsWork();
            },
            formatWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DecimalTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FormatWorks()",
                    line: "68"
                } ));
                t.Fixture.formatWorks();
            },
            iFormattableToStringWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DecimalTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "IFormattableToStringWorks()",
                    line: "74"
                } ));
                t.Fixture.iFormattableToStringWorks();
            },
            toStringWithoutRadixWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DecimalTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ToStringWithoutRadixWorks()",
                    line: "80"
                } ));
                t.Fixture.toStringWithoutRadixWorks();
            },
            addWithStringWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DecimalTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "AddWithStringWorks()",
                    line: "129"
                } ));
                t.Fixture.addWithStringWorks();
            },
            conversionsToDecimalWork: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DecimalTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ConversionsToDecimalWork()",
                    line: "143"
                } ));
                t.Fixture.conversionsToDecimalWork();
            },
            conversionsFromDecimalWork: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DecimalTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ConversionsFromDecimalWork()",
                    line: "160"
                } ));
                t.Fixture.conversionsFromDecimalWork();
            },
            operatorsWork: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DecimalTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "OperatorsWork()",
                    line: "177"
                } ));
                t.Fixture.operatorsWork();
            },
            addWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DecimalTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "AddWorks()",
                    line: "206"
                } ));
                t.Fixture.addWorks();
            },
            ceilingWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DecimalTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "CeilingWorks()",
                    line: "212"
                } ));
                t.Fixture.ceilingWorks();
            },
            divideWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DecimalTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "DivideWorks()",
                    line: "218"
                } ));
                t.Fixture.divideWorks();
            },
            floorWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DecimalTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FloorWorks()",
                    line: "224"
                } ));
                t.Fixture.floorWorks();
            },
            remainderWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DecimalTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "RemainderWorks()",
                    line: "230"
                } ));
                t.Fixture.remainderWorks();
            },
            multiplyWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DecimalTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "MultiplyWorks()",
                    line: "236"
                } ));
                t.Fixture.multiplyWorks();
            },
            negateWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DecimalTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "NegateWorks()",
                    line: "242"
                } ));
                t.Fixture.negateWorks();
            },
            roundWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DecimalTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "RoundWorks()",
                    line: "248"
                } ));
                t.Fixture.roundWorks();
            },
            roundWithModeWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DecimalTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "RoundWithModeWorks()",
                    line: "254"
                } ));
                t.Fixture.roundWithModeWorks();
            },
            subtractWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DecimalTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "SubtractWorks()",
                    line: "321"
                } ));
                t.Fixture.subtractWorks();
            },
            getHashCodeWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DecimalTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "GetHashCodeWorks()",
                    line: "327"
                } ));
                t.Fixture.getHashCodeWorks();
            },
            objectEqualsWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DecimalTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ObjectEqualsWorks()",
                    line: "336"
                } ));
                t.Fixture.objectEqualsWorks();
            },
            decimalEqualsWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DecimalTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "DecimalEqualsWorks()",
                    line: "346"
                } ));
                t.Fixture.decimalEqualsWorks();
            },
            compareToWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DecimalTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "CompareToWorks()",
                    line: "356"
                } ));
                t.Fixture.compareToWorks();
            },
            iComparableCompareToWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DecimalTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "IComparableCompareToWorks()",
                    line: "365"
                } ));
                t.Fixture.iComparableCompareToWorks();
            },
            fullCoalesceWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DecimalTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FullCoalesceWorks()",
                    line: "374"
                } ));
                t.Fixture.fullCoalesceWorks();
            },
            shortCoalesceWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DecimalTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ShortCoalesceWorks()",
                    line: "383"
                } ));
                t.Fixture.shortCoalesceWorks();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                    project: "Batch1",
                    className: "Bridge.ClientTest.SimpleTypes.DecimalTests",
                    file: "Batch1\\SimpleTypes\\DecimalTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.DeserializationTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.DeserializationTests)],
        statics: {
            byteArrayWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.DeserializationTests).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DeserializationTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ByteArrayWorks()",
                    line: "158"
                } ));
                Bridge.ClientTest.DeserializationTests.byteArrayWorks();
            },
            guidWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.DeserializationTests).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DeserializationTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "GuidWorks()",
                    line: "165"
                } ));
                Bridge.ClientTest.DeserializationTests.guidWorks();
            },
            typeWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.DeserializationTests).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DeserializationTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TypeWorks()",
                    line: "172"
                } ));
                Bridge.ClientTest.DeserializationTests.typeWorks();
            },
            charWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.DeserializationTests).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DeserializationTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "CharWorks()",
                    line: "178"
                } ));
                Bridge.ClientTest.DeserializationTests.charWorks();
            },
            int64Works: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.DeserializationTests).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DeserializationTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "Int64Works()",
                    line: "184"
                } ));
                Bridge.ClientTest.DeserializationTests.int64Works();
            },
            uInt64Works: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.DeserializationTests).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DeserializationTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "UInt64Works()",
                    line: "195"
                } ));
                Bridge.ClientTest.DeserializationTests.uInt64Works();
            },
            decimalWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.DeserializationTests).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DeserializationTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "DecimalWorks()",
                    line: "206"
                } ));
                Bridge.ClientTest.DeserializationTests.decimalWorks();
            },
            dateTimeWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.DeserializationTests).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DeserializationTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "DateTimeWorks()",
                    line: "214"
                } ));
                Bridge.ClientTest.DeserializationTests.dateTimeWorks();
            },
            arrayWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.DeserializationTests).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DeserializationTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ArrayWorks()",
                    line: "224"
                } ));
                Bridge.ClientTest.DeserializationTests.arrayWorks();
            },
            complexArrayWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.DeserializationTests).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DeserializationTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ComplexArrayWorks()",
                    line: "241"
                } ));
                Bridge.ClientTest.DeserializationTests.complexArrayWorks();
            },
            enumWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.DeserializationTests).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DeserializationTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "EnumWorks()",
                    line: "265"
                } ));
                Bridge.ClientTest.DeserializationTests.enumWorks();
            },
            iListWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.DeserializationTests).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DeserializationTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "IListWorks()",
                    line: "271"
                } ));
                Bridge.ClientTest.DeserializationTests.iListWorks();
            },
            iDictionaryWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.DeserializationTests).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DeserializationTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "IDictionaryWorks()",
                    line: "282"
                } ));
                Bridge.ClientTest.DeserializationTests.iDictionaryWorks();
            },
            typeWithFieldWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.DeserializationTests).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DeserializationTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TypeWithFieldWorks()",
                    line: "296"
                } ));
                Bridge.ClientTest.DeserializationTests.typeWithFieldWorks();
            },
            complexPropertiesWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.DeserializationTests).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DeserializationTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ComplexPropertiesWorks()",
                    line: "323"
                } ));
                Bridge.ClientTest.DeserializationTests.complexPropertiesWorks();
            },
            camelCaseSettingWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.DeserializationTests).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DeserializationTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "CamelCaseSettingWorks()",
                    line: "382"
                } ));
                Bridge.ClientTest.DeserializationTests.camelCaseSettingWorks();
            },
            ignoreNullValueWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.DeserializationTests).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DeserializationTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "IgnoreNullValueWorks()",
                    line: "394"
                } ));
                Bridge.ClientTest.DeserializationTests.ignoreNullValueWorks();
            },
            anonymousTypesWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.DeserializationTests).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DeserializationTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "AnonymousTypesWorks()",
                    line: "416"
                } ));
                Bridge.ClientTest.DeserializationTests.anonymousTypesWorks();
            },
            typeNameHandlingWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.DeserializationTests).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DeserializationTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TypeNameHandlingWorks()",
                    line: "431"
                } ));
                Bridge.ClientTest.DeserializationTests.typeNameHandlingWorks();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                    project: "Batch1",
                    className: "Bridge.ClientTest.DeserializationTests",
                    file: "Batch1\\Serialization\\DeserializationTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.DivideByZeroExceptionTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.DivideByZeroExceptionTests)],
        statics: {
            typePropertiesAreCorrect: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.DivideByZeroExceptionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DivideByZeroExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TypePropertiesAreCorrect()",
                    line: "10"
                } ));
                t.Fixture.typePropertiesAreCorrect();
            },
            defaultConstructorWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.DivideByZeroExceptionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DivideByZeroExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "DefaultConstructorWorks()",
                    line: "19"
                } ));
                t.Fixture.defaultConstructorWorks();
            },
            constructorWithMessageWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.DivideByZeroExceptionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DivideByZeroExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ConstructorWithMessageWorks()",
                    line: "28"
                } ));
                t.Fixture.constructorWithMessageWorks();
            },
            constructorWithMessageAndInnerExceptionWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.DivideByZeroExceptionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DivideByZeroExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ConstructorWithMessageAndInnerExceptionWorks()",
                    line: "37"
                } ));
                t.Fixture.constructorWithMessageAndInnerExceptionWorks();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                    project: "Batch1",
                    className: "Bridge.ClientTest.Exceptions.DivideByZeroExceptionTests",
                    file: "Batch1\\Exceptions\\DivideByZeroExceptionTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.DOMParserTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.DOMParserTests)],
        statics: {
            constructorWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.DOMParserTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DOMParserTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ConstructorWorks()",
                    line: "12"
                } ));
                t.Fixture.constructorWorks();
            },
            xmlParsingWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.DOMParserTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DOMParserTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "XmlParsingWorks()",
                    line: "20"
                } ));
                t.Fixture.xmlParsingWorks();
            },
            xmlParsingShouldThrow: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.DOMParserTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DOMParserTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "XmlParsingShouldThrow()",
                    line: "38"
                } ));
                t.Fixture.xmlParsingShouldThrow();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                    project: "Batch1",
                    className: "Bridge.ClientTest.DOMParserTests",
                    file: "Batch1\\DOMParserTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.DoubleTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DoubleTests)],
        statics: {
            typePropertiesAreCorrect: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DoubleTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DoubleTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TypePropertiesAreCorrect()",
                    line: "30"
                } ));
                try {
                    t.Fixture.typePropertiesAreCorrect();
                }
                finally {
                    t.tearDown();
                }
            },
            defaultValueIs0: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DoubleTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DoubleTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "DefaultValueIs0()",
                    line: "45"
                } ));
                try {
                    t.Fixture.defaultValueIs0();
                }
                finally {
                    t.tearDown();
                }
            },
            creatingInstanceReturnsZero: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DoubleTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DoubleTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "CreatingInstanceReturnsZero()",
                    line: "51"
                } ));
                try {
                    t.Fixture.creatingInstanceReturnsZero();
                }
                finally {
                    t.tearDown();
                }
            },
            constantsWork: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DoubleTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DoubleTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ConstantsWork()",
                    line: "57"
                } ));
                try {
                    t.Fixture.constantsWork();
                }
                finally {
                    t.tearDown();
                }
            },
            defaultConstructorReturnsZero: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DoubleTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DoubleTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "DefaultConstructorReturnsZero()",
                    line: "68"
                } ));
                try {
                    t.Fixture.defaultConstructorReturnsZero();
                }
                finally {
                    t.tearDown();
                }
            },
            formatWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DoubleTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DoubleTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FormatWorks()",
                    line: "74"
                } ));
                try {
                    t.Fixture.formatWorks();
                }
                finally {
                    t.tearDown();
                }
            },
            iFormattableToStringWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DoubleTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DoubleTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "IFormattableToStringWorks()",
                    line: "80"
                } ));
                try {
                    t.Fixture.iFormattableToStringWorks();
                }
                finally {
                    t.tearDown();
                }
            },
            toStringWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DoubleTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DoubleTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ToStringWorks()",
                    line: "86"
                } ));
                try {
                    t.Fixture.toStringWorks();
                }
                finally {
                    t.tearDown();
                }
            },
            toExponentialWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DoubleTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DoubleTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ToExponentialWorks()",
                    line: "92"
                } ));
                try {
                    t.Fixture.toExponentialWorks();
                }
                finally {
                    t.tearDown();
                }
            },
            toExponentialWithFractionalDigitsWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DoubleTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DoubleTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ToExponentialWithFractionalDigitsWorks()",
                    line: "98"
                } ));
                try {
                    t.Fixture.toExponentialWithFractionalDigitsWorks();
                }
                finally {
                    t.tearDown();
                }
            },
            toFixed: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DoubleTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DoubleTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ToFixed()",
                    line: "104"
                } ));
                try {
                    t.Fixture.toFixed();
                }
                finally {
                    t.tearDown();
                }
            },
            toFixedWithFractionalDigitsWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DoubleTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DoubleTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ToFixedWithFractionalDigitsWorks()",
                    line: "110"
                } ));
                try {
                    t.Fixture.toFixedWithFractionalDigitsWorks();
                }
                finally {
                    t.tearDown();
                }
            },
            toPrecisionWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DoubleTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DoubleTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ToPrecisionWorks()",
                    line: "116"
                } ));
                try {
                    t.Fixture.toPrecisionWorks();
                }
                finally {
                    t.tearDown();
                }
            },
            toPrecisionWithPrecisionWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DoubleTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DoubleTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ToPrecisionWithPrecisionWorks()",
                    line: "122"
                } ));
                try {
                    t.Fixture.toPrecisionWithPrecisionWorks();
                }
                finally {
                    t.tearDown();
                }
            },
            isPositiveInfinityWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DoubleTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DoubleTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "IsPositiveInfinityWorks()",
                    line: "128"
                } ));
                try {
                    t.Fixture.isPositiveInfinityWorks();
                }
                finally {
                    t.tearDown();
                }
            },
            isNegativeInfinityWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DoubleTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DoubleTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "IsNegativeInfinityWorks()",
                    line: "137"
                } ));
                try {
                    t.Fixture.isNegativeInfinityWorks();
                }
                finally {
                    t.tearDown();
                }
            },
            isInfinityWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DoubleTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DoubleTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "IsInfinityWorks()",
                    line: "147"
                } ));
                try {
                    t.Fixture.isInfinityWorks();
                }
                finally {
                    t.tearDown();
                }
            },
            isFiniteWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DoubleTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DoubleTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "IsFiniteWorks()",
                    line: "157"
                } ));
                try {
                    t.Fixture.isFiniteWorks();
                }
                finally {
                    t.tearDown();
                }
            },
            isNaNWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DoubleTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DoubleTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "IsNaNWorks()",
                    line: "166"
                } ));
                try {
                    t.Fixture.isNaNWorks();
                }
                finally {
                    t.tearDown();
                }
            },
            getHashCodeWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DoubleTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DoubleTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "GetHashCodeWorks()",
                    line: "175"
                } ));
                try {
                    t.Fixture.getHashCodeWorks();
                }
                finally {
                    t.tearDown();
                }
            },
            objectEqualsWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DoubleTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DoubleTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ObjectEqualsWorks()",
                    line: "184"
                } ));
                try {
                    t.Fixture.objectEqualsWorks();
                }
                finally {
                    t.tearDown();
                }
            },
            doubleEqualsWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DoubleTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DoubleTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "DoubleEqualsWorks()",
                    line: "193"
                } ));
                try {
                    t.Fixture.doubleEqualsWorks();
                }
                finally {
                    t.tearDown();
                }
            },
            compareToWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DoubleTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DoubleTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "CompareToWorks()",
                    line: "202"
                } ));
                try {
                    t.Fixture.compareToWorks();
                }
                finally {
                    t.tearDown();
                }
            },
            iComparableCompareToWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DoubleTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DoubleTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "IComparableCompareToWorks()",
                    line: "211"
                } ));
                try {
                    t.Fixture.iComparableCompareToWorks();
                }
                finally {
                    t.tearDown();
                }
            },
            parseCurrentCultureWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DoubleTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DoubleTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ParseCurrentCultureWorks()",
                    line: "220"
                } ));
                try {
                    t.Fixture.parseCurrentCultureWorks();
                }
                finally {
                    t.tearDown();
                }
            },
            parseCurrentCultureThrows: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DoubleTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DoubleTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ParseCurrentCultureThrows()",
                    line: "241"
                } ));
                try {
                    t.Fixture.parseCurrentCultureThrows();
                }
                finally {
                    t.tearDown();
                }
            },
            parseRuCultureWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DoubleTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DoubleTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ParseRuCultureWorks()",
                    line: "259"
                } ));
                try {
                    t.Fixture.parseRuCultureWorks();
                }
                finally {
                    t.tearDown();
                }
            },
            parseRuCultureThrows: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DoubleTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DoubleTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ParseRuCultureThrows()",
                    line: "279"
                } ));
                try {
                    t.Fixture.parseRuCultureThrows();
                }
                finally {
                    t.tearDown();
                }
            },
            tryParseCurrentCultureWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DoubleTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DoubleTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TryParseCurrentCultureWorks()",
                    line: "303"
                } ));
                try {
                    t.Fixture.tryParseCurrentCultureWorks();
                }
                finally {
                    t.tearDown();
                }
            },
            tryParseRuCultureWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DoubleTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DoubleTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TryParseRuCultureWorks()",
                    line: "338"
                } ));
                try {
                    t.Fixture.tryParseRuCultureWorks();
                }
                finally {
                    t.tearDown();
                }
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                    project: "Batch1",
                    className: "Bridge.ClientTest.SimpleTypes.DoubleTests",
                    file: "Batch1\\SimpleTypes\\DoubleTests.cs"
                } );
            }
            return this.context;
        },
        setUp: function () {
            this.Fixture.saveCurrentCulture();
        },
        tearDown: function () {
            this.Fixture.restoreCulture();
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.EnumTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.EnumTests)],
        statics: {
            typePropertiesAreCorrect: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.EnumTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.EnumTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TypePropertiesAreCorrect()",
                    line: "29"
                } ));
                t.Fixture.typePropertiesAreCorrect();
            },
            defaultValueOfEnumClassIsNull: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.EnumTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.EnumTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "DefaultValueOfEnumClassIsNull()",
                    line: "52"
                } ));
                t.Fixture.defaultValueOfEnumClassIsNull();
            },
            defaultValueOfEnumTypeIsFirstValue: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.EnumTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.EnumTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "DefaultValueOfEnumTypeIsFirstValue()",
                    line: "58"
                } ));
                t.Fixture.defaultValueOfEnumTypeIsFirstValue();
            },
            defaultConstructorOfEnumTypeReturnsZero: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.EnumTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.EnumTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "DefaultConstructorOfEnumTypeReturnsZero()",
                    line: "64"
                } ));
                t.Fixture.defaultConstructorOfEnumTypeReturnsZero();
            },
            firstValueOfEnumIsZero: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.EnumTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.EnumTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FirstValueOfEnumIsZero()",
                    line: "70"
                } ));
                t.Fixture.firstValueOfEnumIsZero();
            },
            creatingInstanceOfEnumTypeReturnsZero: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.EnumTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.EnumTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "CreatingInstanceOfEnumTypeReturnsZero()",
                    line: "76"
                } ));
                t.Fixture.creatingInstanceOfEnumTypeReturnsZero();
            },
            defaultExpressionWithEnumReturnsZero: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.EnumTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.EnumTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "DefaultExpressionWithEnumReturnsZero()",
                    line: "82"
                } ));
                t.Fixture.defaultExpressionWithEnumReturnsZero();
            },
            getHashCodeWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.EnumTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.EnumTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "GetHashCodeWorks()",
                    line: "88"
                } ));
                t.Fixture.getHashCodeWorks();
            },
            equalsWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.EnumTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.EnumTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "EqualsWorks()",
                    line: "95"
                } ));
                t.Fixture.equalsWorks();
            },
            parseWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.EnumTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.EnumTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ParseWorks()",
                    line: "103"
                } ));
                t.Fixture.parseWorks();
            },
            staticToStringWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.EnumTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.EnumTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "StaticToStringWorks()",
                    line: "111"
                } ));
                t.Fixture.staticToStringWorks();
            },
            conversionsToEnumAreTreatedAsConversionsToTheUnderlyingType: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.EnumTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.EnumTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ConversionsToEnumAreTreatedAsConversionsToTheUnderlyingType()",
                    line: "120"
                } ));
                t.Fixture.conversionsToEnumAreTreatedAsConversionsToTheUnderlyingType();
            },
            getValuesWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.EnumTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.EnumTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "GetValuesWorks()",
                    line: "128"
                } ));
                t.Fixture.getValuesWorks();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                    project: "Batch1",
                    className: "Bridge.ClientTest.SimpleTypes.EnumTests",
                    file: "Batch1\\SimpleTypes\\EnumTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.EnvironmentTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.EnvironmentTests)],
        statics: {
            newLineIsAStringContainingOnlyTheNewLineChar: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.EnvironmentTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.EnvironmentTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "NewLineIsAStringContainingOnlyTheNewLineChar()",
                    line: "10"
                } ));
                t.Fixture.newLineIsAStringContainingOnlyTheNewLineChar();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                    project: "Batch1",
                    className: "Bridge.ClientTest.EnvironmentTests",
                    file: "Batch1\\EnvironmentTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.EqualityComparerTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.EqualityComparerTests)],
        statics: {
            typePropertiesAreCorrect: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.EqualityComparerTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.EqualityComparerTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TypePropertiesAreCorrect()",
                    line: "28"
                } ));
                t.Fixture.typePropertiesAreCorrect();
            },
            defaultComparerCanGetHashCodeOfNumber: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.EqualityComparerTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.EqualityComparerTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "DefaultComparerCanGetHashCodeOfNumber()",
                    line: "37"
                } ));
                t.Fixture.defaultComparerCanGetHashCodeOfNumber();
            },
            defaultComparerReturnsZeroAsHashCodeForNullAndUndefined: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.EqualityComparerTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.EqualityComparerTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "DefaultComparerReturnsZeroAsHashCodeForNullAndUndefined()",
                    line: "43"
                } ));
                t.Fixture.defaultComparerReturnsZeroAsHashCodeForNullAndUndefined();
            },
            defaultComparerCanDetermineEquality: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.EqualityComparerTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.EqualityComparerTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "DefaultComparerCanDetermineEquality()",
                    line: "50"
                } ));
                t.Fixture.defaultComparerCanDetermineEquality();
            },
            defaultComparerInvokesOverriddenGetHashCode: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.EqualityComparerTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.EqualityComparerTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "DefaultComparerInvokesOverriddenGetHashCode()",
                    line: "64"
                } ));
                t.Fixture.defaultComparerInvokesOverriddenGetHashCode();
            },
            defaultComparerInvokesOverriddenEquals: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.EqualityComparerTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.EqualityComparerTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "DefaultComparerInvokesOverriddenEquals()",
                    line: "70"
                } ));
                t.Fixture.defaultComparerInvokesOverriddenEquals();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                    project: "Batch1",
                    className: "Bridge.ClientTest.Collections.Generic.EqualityComparerTests",
                    file: "Batch1\\Collections\\Generic\\EqualityComparerTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.ExceptionTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.ExceptionTests)],
        statics: {
            typePropertiesAreCorrect: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.ExceptionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TypePropertiesAreCorrect()",
                    line: "25"
                } ));
                t.Fixture.typePropertiesAreCorrect();
            },
            defaultConstructorWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.ExceptionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "DefaultConstructorWorks()",
                    line: "33"
                } ));
                t.Fixture.defaultConstructorWorks();
            },
            constructorWithMessageWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.ExceptionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ConstructorWithMessageWorks()",
                    line: "42"
                } ));
                t.Fixture.constructorWithMessageWorks();
            },
            constructorWithMessageAndInnerExceptionWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.ExceptionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ConstructorWithMessageAndInnerExceptionWorks()",
                    line: "51"
                } ));
                t.Fixture.constructorWithMessageAndInnerExceptionWorks();
            },
            messagePropertyCanBeOverridden: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.ExceptionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "MessagePropertyCanBeOverridden()",
                    line: "61"
                } ));
                t.Fixture.messagePropertyCanBeOverridden();
            },
            innerExceptionPropertyCanBeOverridden: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.ExceptionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "InnerExceptionPropertyCanBeOverridden()",
                    line: "68"
                } ));
                t.Fixture.innerExceptionPropertyCanBeOverridden();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                    project: "Batch1",
                    className: "Bridge.ClientTest.Exceptions.ExceptionTests",
                    file: "Batch1\\Exceptions\\ExceptionTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.Expressions.ExpressionTests)],
        statics: {
            expressionProtectedConstructorWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.Expressions.ExpressionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ExpressionProtectedConstructorWorks()",
                    line: "336"
                } ));
                t.Fixture.expressionProtectedConstructorWorks();
            },
            simpleExpressionTreeWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.Expressions.ExpressionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "SimpleExpressionTreeWorks()",
                    line: "344"
                } ));
                t.Fixture.simpleExpressionTreeWorks();
            },
            lambdaWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.Expressions.ExpressionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "LambdaWorks()",
                    line: "356"
                } ));
                t.Fixture.lambdaWorks();
            },
            parameterAndVariableWork: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.Expressions.ExpressionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ParameterAndVariableWork()",
                    line: "392"
                } ));
                t.Fixture.parameterAndVariableWork();
            },
            constantWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.Expressions.ExpressionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ConstantWorks()",
                    line: "419"
                } ));
                t.Fixture.constantWorks();
            },
            binaryExpressionsWork: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.Expressions.ExpressionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "BinaryExpressionsWork()",
                    line: "442"
                } ));
                t.Fixture.binaryExpressionsWork();
            },
            unaryExpressionsWork: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.Expressions.ExpressionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "UnaryExpressionsWork()",
                    line: "717"
                } ));
                t.Fixture.unaryExpressionsWork();
            },
            arrayLengthWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.Expressions.ExpressionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ArrayLengthWorks()",
                    line: "834"
                } ));
                t.Fixture.arrayLengthWorks();
            },
            conversionsWork: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.Expressions.ExpressionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ConversionsWork()",
                    line: "853"
                } ));
                t.Fixture.conversionsWork();
            },
            arrayIndexWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.Expressions.ExpressionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ArrayIndexWorks()",
                    line: "908"
                } ));
                t.Fixture.arrayIndexWorks();
            },
            multiDimensionalArrayIndexWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.Expressions.ExpressionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "MultiDimensionalArrayIndexWorks()",
                    line: "929"
                } ));
                t.Fixture.multiDimensionalArrayIndexWorks();
            },
            conditionWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.Expressions.ExpressionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ConditionWorks()",
                    line: "963"
                } ));
                t.Fixture.conditionWorks();
            },
            callWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.Expressions.ExpressionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "CallWorks()",
                    line: "986"
                } ));
                t.Fixture.callWorks();
            },
            methodGroupConversionWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.Expressions.ExpressionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "MethodGroupConversionWorks()",
                    line: "1037"
                } ));
                t.Fixture.methodGroupConversionWorks();
            },
            invokeWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.Expressions.ExpressionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "InvokeWorks()",
                    line: "1059"
                } ));
                t.Fixture.invokeWorks();
            },
            arrayCreationWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.Expressions.ExpressionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ArrayCreationWorks()",
                    line: "1085"
                } ));
                t.Fixture.arrayCreationWorks();
            },
            propertiesAndFieldsWork: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.Expressions.ExpressionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "PropertiesAndFieldsWork()",
                    line: "1147"
                } ));
                t.Fixture.propertiesAndFieldsWork();
            },
            indexersWork: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.Expressions.ExpressionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "IndexersWork()",
                    line: "1202"
                } ));
                t.Fixture.indexersWork();
            },
            indexExpressionsWork: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.Expressions.ExpressionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "IndexExpressionsWork()",
                    line: "1218"
                } ));
                t.Fixture.indexExpressionsWork();
            },
            objectConstructionWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.Expressions.ExpressionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ObjectConstructionWorks()",
                    line: "1254"
                } ));
                t.Fixture.objectConstructionWorks();
            },
            anonymousTypeConstructionWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.Expressions.ExpressionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "AnonymousTypeConstructionWorks()",
                    line: "1297"
                } ));
                t.Fixture.anonymousTypeConstructionWorks();
            },
            transparentIdentifiersWork: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.Expressions.ExpressionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TransparentIdentifiersWork()",
                    line: "1352"
                } ));
                t.Fixture.transparentIdentifiersWork();
            },
            newExpressionWithMembersWork: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.Expressions.ExpressionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "NewExpressionWithMembersWork()",
                    line: "1395"
                } ));
                t.Fixture.newExpressionWithMembersWork();
            },
            bindWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.Expressions.ExpressionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "BindWorks()",
                    line: "1425"
                } ));
                t.Fixture.bindWorks();
            },
            elementInitWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.Expressions.ExpressionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ElementInitWorks()",
                    line: "1470"
                } ));
                t.Fixture.elementInitWorks();
            },
            listBindWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.Expressions.ExpressionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ListBindWorks()",
                    line: "1502"
                } ));
                t.Fixture.listBindWorks();
            },
            memberBindWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.Expressions.ExpressionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "MemberBindWorks()",
                    line: "1567"
                } ));
                t.Fixture.memberBindWorks();
            },
            memberInitWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.Expressions.ExpressionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "MemberInitWorks()",
                    line: "1629"
                } ));
                t.Fixture.memberInitWorks();
            },
            listInitWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.Expressions.ExpressionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ListInitWorks()",
                    line: "1665"
                } ));
                t.Fixture.listInitWorks();
            },
            typeIsAndTypeEqualWork: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.Expressions.ExpressionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TypeIsAndTypeEqualWork()",
                    line: "1719"
                } ));
                t.Fixture.typeIsAndTypeEqualWork();
            },
            quoteWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.Expressions.ExpressionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "QuoteWorks()",
                    line: "1747"
                } ));
                t.Fixture.quoteWorks();
            },
            localVariableReferenceWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.Expressions.ExpressionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "LocalVariableReferenceWorks()",
                    line: "1772"
                } ));
                t.Fixture.localVariableReferenceWorks();
            },
            throwAndRethrowWork: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.Expressions.ExpressionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ThrowAndRethrowWork()",
                    line: "1824"
                } ));
                t.Fixture.throwAndRethrowWork();
            },
            defaultAndEmptyWork: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.Expressions.ExpressionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "DefaultAndEmptyWork()",
                    line: "1856"
                } ));
                t.Fixture.defaultAndEmptyWork();
            },
            blockWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.Expressions.ExpressionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "BlockWorks()",
                    line: "1873"
                } ));
                t.Fixture.blockWorks();
            },
            ifThenWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.Expressions.ExpressionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "IfThenWorks()",
                    line: "1932"
                } ));
                t.Fixture.ifThenWorks();
            },
            labelTargetWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.Expressions.ExpressionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "LabelTargetWorks()",
                    line: "1960"
                } ));
                t.Fixture.labelTargetWorks();
            },
            gotoWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.Expressions.ExpressionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "GotoWorks()",
                    line: "1978"
                } ));
                t.Fixture.gotoWorks();
            },
            labelExpressionWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.Expressions.ExpressionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "LabelExpressionWorks()",
                    line: "2030"
                } ));
                t.Fixture.labelExpressionWorks();
            },
            loopWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.Expressions.ExpressionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "LoopWorks()",
                    line: "2061"
                } ));
                t.Fixture.loopWorks();
            },
            switchCaseWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.Expressions.ExpressionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "SwitchCaseWorks()",
                    line: "2104"
                } ));
                t.Fixture.switchCaseWorks();
            },
            switchWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.Expressions.ExpressionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "SwitchWorks()",
                    line: "2125"
                } ));
                t.Fixture.switchWorks();
            },
            catchBlockWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.Expressions.ExpressionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "CatchBlockWorks()",
                    line: "2170"
                } ));
                t.Fixture.catchBlockWorks();
            },
            tryWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.Expressions.ExpressionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TryWorks()",
                    line: "2200"
                } ));
                t.Fixture.tryWorks();
            },
            dynamicWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.Expressions.ExpressionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "DynamicWorks()",
                    line: "2246"
                } ));
                t.Fixture.dynamicWorks();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                    project: "Batch1",
                    className: "Bridge.ClientTest.Linq.Expressions.ExpressionTests",
                    file: "Batch1\\Linq\\Expressions\\ExpressionTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.Float32ArrayTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Float32ArrayTests)],
        statics: {
            lengthConstructorWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Float32ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Float32ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "LengthConstructorWorks()",
                    line: "30"
                } ));
                t.Fixture.lengthConstructorWorks();
            },
            constructorFromIntWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Float32ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Float32ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ConstructorFromIntWorks()",
                    line: "38"
                } ));
                t.Fixture.constructorFromIntWorks();
            },
            copyConstructorWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Float32ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Float32ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "CopyConstructorWorks()",
                    line: "48"
                } ));
                t.Fixture.copyConstructorWorks();
            },
            arrayBufferConstructorWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Float32ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Float32ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ArrayBufferConstructorWorks()",
                    line: "58"
                } ));
                t.Fixture.arrayBufferConstructorWorks();
            },
            arrayBufferWithOffsetConstructorWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Float32ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Float32ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ArrayBufferWithOffsetConstructorWorks()",
                    line: "68"
                } ));
                t.Fixture.arrayBufferWithOffsetConstructorWorks();
            },
            arrayBufferWithOffsetAndLengthConstructorWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Float32ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Float32ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ArrayBufferWithOffsetAndLengthConstructorWorks()",
                    line: "78"
                } ));
                t.Fixture.arrayBufferWithOffsetAndLengthConstructorWorks();
            },
            staticBytesPerElementWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Float32ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Float32ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "StaticBytesPerElementWorks()",
                    line: "95"
                } ));
                t.Fixture.staticBytesPerElementWorks();
            },
            lengthWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Float32ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Float32ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "LengthWorks()",
                    line: "101"
                } ));
                t.Fixture.lengthWorks();
            },
            indexingWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Float32ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Float32ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "IndexingWorks()",
                    line: "108"
                } ));
                t.Fixture.indexingWorks();
            },
            setFloat32ArrayWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Float32ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Float32ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "SetFloat32ArrayWorks()",
                    line: "117"
                } ));
                t.Fixture.setFloat32ArrayWorks();
            },
            setFloat32ArrayWithOffsetWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Float32ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Float32ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "SetFloat32ArrayWithOffsetWorks()",
                    line: "125"
                } ));
                t.Fixture.setFloat32ArrayWithOffsetWorks();
            },
            setNormalArrayWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Float32ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Float32ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "SetNormalArrayWorks()",
                    line: "133"
                } ));
                t.Fixture.setNormalArrayWorks();
            },
            setNormalArrayWithOffsetWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Float32ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Float32ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "SetNormalArrayWithOffsetWorks()",
                    line: "141"
                } ));
                t.Fixture.setNormalArrayWithOffsetWorks();
            },
            subarrayWithBeginWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Float32ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Float32ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "SubarrayWithBeginWorks()",
                    line: "149"
                } ));
                t.Fixture.subarrayWithBeginWorks();
            },
            subarrayWithBeginAndEndWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Float32ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Float32ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "SubarrayWithBeginAndEndWorks()",
                    line: "159"
                } ));
                t.Fixture.subarrayWithBeginAndEndWorks();
            },
            bufferPropertyWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Float32ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Float32ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "BufferPropertyWorks()",
                    line: "170"
                } ));
                t.Fixture.bufferPropertyWorks();
            },
            byteOffsetPropertyWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Float32ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Float32ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ByteOffsetPropertyWorks()",
                    line: "178"
                } ));
                t.Fixture.byteOffsetPropertyWorks();
            },
            byteLengthPropertyWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Float32ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Float32ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ByteLengthPropertyWorks()",
                    line: "186"
                } ));
                t.Fixture.byteLengthPropertyWorks();
            },
            indexOfWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Float32ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Float32ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "IndexOfWorks()",
                    line: "193"
                } ));
                t.Fixture.indexOfWorks();
            },
            containsWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Float32ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Float32ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ContainsWorks()",
                    line: "202"
                } ));
                t.Fixture.containsWorks();
            },
            foreachWorks_SPI_1401: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Float32ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Float32ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ForeachWorks_SPI_1401()",
                    line: "211"
                } ));
                t.Fixture.foreachWorks_SPI_1401();
            },
            getEnumeratorWorks_SPI_1401: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Float32ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Float32ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "GetEnumeratorWorks_SPI_1401()",
                    line: "225"
                } ));
                t.Fixture.getEnumeratorWorks_SPI_1401();
            },
            iEnumerableGetEnumeratorWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Float32ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Float32ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "IEnumerableGetEnumeratorWorks()",
                    line: "239"
                } ));
                t.Fixture.iEnumerableGetEnumeratorWorks();
            },
            iCollectionMethodsWork_SPI_1559: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Float32ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Float32ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ICollectionMethodsWork_SPI_1559()",
                    line: "252"
                } ));
                t.Fixture.iCollectionMethodsWork_SPI_1559();
            },
            iListMethodsWork_SPI_1559: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Float32ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Float32ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "IListMethodsWork_SPI_1559()",
                    line: "265"
                } ));
                t.Fixture.iListMethodsWork_SPI_1559();
            },
            iListIsReadOnlyWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Float32ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Float32ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "IListIsReadOnlyWorks()",
                    line: "298"
                } ));
                t.Fixture.iListIsReadOnlyWorks();
            },
            iCollectionIsReadOnlyWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Float32ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Float32ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ICollectionIsReadOnlyWorks()",
                    line: "305"
                } ));
                t.Fixture.iCollectionIsReadOnlyWorks();
            },
            iCollectionCopyTo: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Float32ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Float32ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ICollectionCopyTo()",
                    line: "312"
                } ));
                t.Fixture.iCollectionCopyTo();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                    project: "Batch1",
                    className: "Bridge.ClientTest.Collections.Native.Float32ArrayTests",
                    file: "Batch1\\Collections\\Native\\Float32ArrayTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.Float64ArrayTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Float64ArrayTests)],
        statics: {
            lengthConstructorWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Float64ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Float64ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "LengthConstructorWorks()",
                    line: "30"
                } ));
                t.Fixture.lengthConstructorWorks();
            },
            constructorFromIntWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Float64ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Float64ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ConstructorFromIntWorks()",
                    line: "38"
                } ));
                t.Fixture.constructorFromIntWorks();
            },
            copyConstructorWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Float64ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Float64ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "CopyConstructorWorks()",
                    line: "48"
                } ));
                t.Fixture.copyConstructorWorks();
            },
            arrayBufferConstructorWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Float64ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Float64ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ArrayBufferConstructorWorks()",
                    line: "58"
                } ));
                t.Fixture.arrayBufferConstructorWorks();
            },
            arrayBufferWithOffsetConstructorWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Float64ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Float64ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ArrayBufferWithOffsetConstructorWorks()",
                    line: "68"
                } ));
                t.Fixture.arrayBufferWithOffsetConstructorWorks();
            },
            arrayBufferWithOffsetAndLengthConstructorWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Float64ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Float64ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ArrayBufferWithOffsetAndLengthConstructorWorks()",
                    line: "78"
                } ));
                t.Fixture.arrayBufferWithOffsetAndLengthConstructorWorks();
            },
            staticBytesPerElementWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Float64ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Float64ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "StaticBytesPerElementWorks()",
                    line: "95"
                } ));
                t.Fixture.staticBytesPerElementWorks();
            },
            lengthWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Float64ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Float64ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "LengthWorks()",
                    line: "101"
                } ));
                t.Fixture.lengthWorks();
            },
            indexingWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Float64ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Float64ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "IndexingWorks()",
                    line: "108"
                } ));
                t.Fixture.indexingWorks();
            },
            setFloat64ArrayWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Float64ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Float64ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "SetFloat64ArrayWorks()",
                    line: "117"
                } ));
                t.Fixture.setFloat64ArrayWorks();
            },
            setFloat64ArrayWithOffsetWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Float64ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Float64ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "SetFloat64ArrayWithOffsetWorks()",
                    line: "125"
                } ));
                t.Fixture.setFloat64ArrayWithOffsetWorks();
            },
            setNormalArrayWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Float64ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Float64ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "SetNormalArrayWorks()",
                    line: "133"
                } ));
                t.Fixture.setNormalArrayWorks();
            },
            setNormalArrayWithOffsetWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Float64ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Float64ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "SetNormalArrayWithOffsetWorks()",
                    line: "141"
                } ));
                t.Fixture.setNormalArrayWithOffsetWorks();
            },
            subarrayWithBeginWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Float64ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Float64ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "SubarrayWithBeginWorks()",
                    line: "149"
                } ));
                t.Fixture.subarrayWithBeginWorks();
            },
            subarrayWithBeginAndEndWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Float64ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Float64ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "SubarrayWithBeginAndEndWorks()",
                    line: "159"
                } ));
                t.Fixture.subarrayWithBeginAndEndWorks();
            },
            bufferPropertyWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Float64ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Float64ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "BufferPropertyWorks()",
                    line: "170"
                } ));
                t.Fixture.bufferPropertyWorks();
            },
            byteOffsetPropertyWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Float64ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Float64ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ByteOffsetPropertyWorks()",
                    line: "178"
                } ));
                t.Fixture.byteOffsetPropertyWorks();
            },
            byteLengthPropertyWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Float64ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Float64ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ByteLengthPropertyWorks()",
                    line: "186"
                } ));
                t.Fixture.byteLengthPropertyWorks();
            },
            indexOfWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Float64ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Float64ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "IndexOfWorks()",
                    line: "193"
                } ));
                t.Fixture.indexOfWorks();
            },
            containsWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Float64ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Float64ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ContainsWorks()",
                    line: "202"
                } ));
                t.Fixture.containsWorks();
            },
            foreachWorks_SPI_1401: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Float64ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Float64ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ForeachWorks_SPI_1401()",
                    line: "211"
                } ));
                t.Fixture.foreachWorks_SPI_1401();
            },
            getEnumeratorWorks_SPI_1401: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Float64ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Float64ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "GetEnumeratorWorks_SPI_1401()",
                    line: "225"
                } ));
                t.Fixture.getEnumeratorWorks_SPI_1401();
            },
            iEnumerableGetEnumeratorWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Float64ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Float64ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "IEnumerableGetEnumeratorWorks()",
                    line: "239"
                } ));
                t.Fixture.iEnumerableGetEnumeratorWorks();
            },
            iCollectionMethodsWork_SPI_1559: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Float64ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Float64ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ICollectionMethodsWork_SPI_1559()",
                    line: "252"
                } ));
                t.Fixture.iCollectionMethodsWork_SPI_1559();
            },
            iListMethodsWork_SPI_1559: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Float64ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Float64ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "IListMethodsWork_SPI_1559()",
                    line: "265"
                } ));
                t.Fixture.iListMethodsWork_SPI_1559();
            },
            iListIsReadOnlyWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Float64ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Float64ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "IListIsReadOnlyWorks()",
                    line: "298"
                } ));
                t.Fixture.iListIsReadOnlyWorks();
            },
            iCollectionIsReadOnlyWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Float64ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Float64ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ICollectionIsReadOnlyWorks()",
                    line: "305"
                } ));
                t.Fixture.iCollectionIsReadOnlyWorks();
            },
            iCollectionCopyTo: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Float64ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Float64ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ICollectionCopyTo()",
                    line: "312"
                } ));
                t.Fixture.iCollectionCopyTo();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                    project: "Batch1",
                    className: "Bridge.ClientTest.Collections.Native.Float64ArrayTests",
                    file: "Batch1\\Collections\\Native\\Float64ArrayTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.FormatExceptionTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.FormatExceptionTests)],
        statics: {
            typePropertiesAreCorrect: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.FormatExceptionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.FormatExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TypePropertiesAreCorrect()",
                    line: "10"
                } ));
                t.Fixture.typePropertiesAreCorrect();
            },
            defaultConstructorWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.FormatExceptionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.FormatExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "DefaultConstructorWorks()",
                    line: "19"
                } ));
                t.Fixture.defaultConstructorWorks();
            },
            constructorWithMessageWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.FormatExceptionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.FormatExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ConstructorWithMessageWorks()",
                    line: "28"
                } ));
                t.Fixture.constructorWithMessageWorks();
            },
            constructorWithMessageAndInnerExceptionWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.FormatExceptionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.FormatExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ConstructorWithMessageAndInnerExceptionWorks()",
                    line: "37"
                } ));
                t.Fixture.constructorWithMessageAndInnerExceptionWorks();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                    project: "Batch1",
                    className: "Bridge.ClientTest.Exceptions.FormatExceptionTests",
                    file: "Batch1\\Exceptions\\FormatExceptionTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.FormattableStringTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.FormattableStringTests)],
        statics: {
            typePropertiesAreCorrect: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.FormattableStringTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.FormattableStringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TypePropertiesAreCorrect()",
                    line: "29"
                } ));
                t.Fixture.typePropertiesAreCorrect();
            },
            argumentCountWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.FormattableStringTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.FormattableStringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ArgumentCountWorks()",
                    line: "43"
                } ));
                t.Fixture.argumentCountWorks();
            },
            formatWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.FormattableStringTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.FormattableStringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FormatWorks()",
                    line: "52"
                } ));
                t.Fixture.formatWorks();
            },
            getArgumentWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.FormattableStringTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.FormattableStringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "GetArgumentWorks()",
                    line: "59"
                } ));
                t.Fixture.getArgumentWorks();
            },
            getArgumentsWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.FormattableStringTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.FormattableStringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "GetArgumentsWorks()",
                    line: "67"
                } ));
                t.Fixture.getArgumentsWorks();
            },
            arrayReturnedByGetArgumentsCanBeModified: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.FormattableStringTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.FormattableStringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ArrayReturnedByGetArgumentsCanBeModified()",
                    line: "76"
                } ));
                t.Fixture.arrayReturnedByGetArgumentsCanBeModified();
            },
            toStringWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.FormattableStringTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.FormattableStringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ToStringWorks()",
                    line: "88"
                } ));
                t.Fixture.toStringWorks();
            },
            invariantWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.FormattableStringTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.FormattableStringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "InvariantWorks()",
                    line: "112"
                } ));
                t.Fixture.invariantWorks();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                    project: "Batch1",
                    className: "Bridge.ClientTest.FormattableStringTests",
                    file: "Batch1\\FormattableStringTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.FunctionTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.FunctionTests)],
        statics: {
            testConstructorArgumentsBodyInOneParameter: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.FunctionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.FunctionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TestConstructorArgumentsBodyInOneParameter()",
                    line: "20"
                } ));
                t.Fixture.testConstructorArgumentsBodyInOneParameter();
            },
            testConstructorArgumentsBodyInTwoParameters: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.FunctionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.FunctionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TestConstructorArgumentsBodyInTwoParameters()",
                    line: "28"
                } ));
                t.Fixture.testConstructorArgumentsBodyInTwoParameters();
            },
            testConstructorArgumentsInArray: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.FunctionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.FunctionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TestConstructorArgumentsInArray()",
                    line: "36"
                } ));
                t.Fixture.testConstructorArgumentsInArray();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                    project: "Batch1",
                    className: "Bridge.ClientTest.FunctionTests",
                    file: "Batch1\\FunctionTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.GenericDictionaryTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.GenericDictionaryTests)],
        statics: {
            typePropertiesAreCorrect: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.GenericDictionaryTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GenericDictionaryTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TypePropertiesAreCorrect()",
                    line: "24"
                } ));
                t.Fixture.typePropertiesAreCorrect();
            },
            defaultConstructorWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.GenericDictionaryTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GenericDictionaryTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "DefaultConstructorWorks()",
                    line: "34"
                } ));
                t.Fixture.defaultConstructorWorks();
            },
            capacityConstructorWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.GenericDictionaryTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GenericDictionaryTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "CapacityConstructorWorks()",
                    line: "43"
                } ));
                t.Fixture.capacityConstructorWorks();
            },
            capacityAndEqualityComparerWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.GenericDictionaryTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GenericDictionaryTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "CapacityAndEqualityComparerWorks()",
                    line: "52"
                } ));
                t.Fixture.capacityAndEqualityComparerWorks();
            },
            equalityComparerOnlyConstructorWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.GenericDictionaryTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GenericDictionaryTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "EqualityComparerOnlyConstructorWorks()",
                    line: "61"
                } ));
                t.Fixture.equalityComparerOnlyConstructorWorks();
            },
            countWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.GenericDictionaryTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GenericDictionaryTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "CountWorks()",
                    line: "70"
                } ));
                t.Fixture.countWorks();
            },
            keysWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.GenericDictionaryTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GenericDictionaryTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "KeysWorks()",
                    line: "81"
                } ));
                t.Fixture.keysWorks();
            },
            valuesWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.GenericDictionaryTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GenericDictionaryTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ValuesWorks()",
                    line: "105"
                } ));
                t.Fixture.valuesWorks();
            },
            indexerGetterWorksForExistingItems: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.GenericDictionaryTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GenericDictionaryTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "IndexerGetterWorksForExistingItems()",
                    line: "129"
                } ));
                t.Fixture.indexerGetterWorksForExistingItems();
            },
            indexerSetterWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.GenericDictionaryTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GenericDictionaryTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "IndexerSetterWorks()",
                    line: "136"
                } ));
                t.Fixture.indexerSetterWorks();
            },
            indexerGetterThrowsForNonExistingItems: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.GenericDictionaryTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GenericDictionaryTests, 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "IndexerGetterThrowsForNonExistingItems()",
                    line: "148"
                } ));
                t.Fixture.indexerGetterThrowsForNonExistingItems();
            },
            addWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.GenericDictionaryTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GenericDictionaryTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "AddWorks()",
                    line: "162"
                } ));
                t.Fixture.addWorks();
            },
            addThrowsIfItemAlreadyExists: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.GenericDictionaryTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GenericDictionaryTests, 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "AddThrowsIfItemAlreadyExists()",
                    line: "173"
                } ));
                t.Fixture.addThrowsIfItemAlreadyExists();
            },
            clearWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.GenericDictionaryTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GenericDictionaryTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ClearWorks()",
                    line: "187"
                } ));
                t.Fixture.clearWorks();
            },
            containsKeyWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.GenericDictionaryTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GenericDictionaryTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ContainsKeyWorks()",
                    line: "195"
                } ));
                t.Fixture.containsKeyWorks();
            },
            enumeratingWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.GenericDictionaryTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GenericDictionaryTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "EnumeratingWorks()",
                    line: "203"
                } ));
                t.Fixture.enumeratingWorks();
            },
            removeWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.GenericDictionaryTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GenericDictionaryTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "RemoveWorks()",
                    line: "227"
                } ));
                t.Fixture.removeWorks();
            },
            tryGetValueWithIntKeysWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.GenericDictionaryTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GenericDictionaryTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TryGetValueWithIntKeysWorks()",
                    line: "237"
                } ));
                t.Fixture.tryGetValueWithIntKeysWorks();
            },
            tryGetValueWithObjectKeysWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.GenericDictionaryTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GenericDictionaryTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TryGetValueWithObjectKeysWorks()",
                    line: "249"
                } ));
                t.Fixture.tryGetValueWithObjectKeysWorks();
            },
            canUseCustomComparer: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.GenericDictionaryTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GenericDictionaryTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "CanUseCustomComparer()",
                    line: "261"
                } ));
                t.Fixture.canUseCustomComparer();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                    project: "Batch1",
                    className: "Bridge.ClientTest.Collections.Generic.GenericDictionaryTests",
                    file: "Batch1\\Collections\\Generic\\GenericDictionaryTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.GetMembersTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.GetMembersTests)],
        statics: {
            getMembersWithoutBindingFlagsWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.GetMembersTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GetMembersTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "GetMembersWithoutBindingFlagsWorks()",
                    line: "627"
                } ));
                t.Fixture.getMembersWithoutBindingFlagsWorks();
            },
            getMembersWorksForInterface: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.GetMembersTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GetMembersTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "GetMembersWorksForInterface()",
                    line: "637"
                } ));
                t.Fixture.getMembersWorksForInterface();
            },
            getMembersWithBindingFlagsWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.GetMembersTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GetMembersTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "GetMembersWithBindingFlagsWorks()",
                    line: "645"
                } ));
                t.Fixture.getMembersWithBindingFlagsWorks();
            },
            getMemberWithNameWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.GetMembersTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GetMembersTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "GetMemberWithNameWorks()",
                    line: "683"
                } ));
                t.Fixture.getMemberWithNameWorks();
            },
            getMemberWithNameAndBindingFlagsWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.GetMembersTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GetMembersTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "GetMemberWithNameAndBindingFlagsWorks()",
                    line: "693"
                } ));
                t.Fixture.getMemberWithNameAndBindingFlagsWorks();
            },
            getConstructorsWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.GetMembersTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GetMembersTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "GetConstructorsWorks()",
                    line: "708"
                } ));
                t.Fixture.getConstructorsWorks();
            },
            getConstructorWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.GetMembersTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GetMembersTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "GetConstructorWorks()",
                    line: "714"
                } ));
                t.Fixture.getConstructorWorks();
            },
            getMethodsWithoutBindingFlagsWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.GetMembersTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GetMembersTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "GetMethodsWithoutBindingFlagsWorks()",
                    line: "722"
                } ));
                t.Fixture.getMethodsWithoutBindingFlagsWorks();
            },
            getMethodsWithBindingFlagsWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.GetMembersTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GetMembersTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "GetMethodsWithBindingFlagsWorks()",
                    line: "732"
                } ));
                t.Fixture.getMethodsWithBindingFlagsWorks();
            },
            getMethodWithNameWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.GetMembersTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GetMembersTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "GetMethodWithNameWorks()",
                    line: "770"
                } ));
                t.Fixture.getMethodWithNameWorks();
            },
            getMethodWithNameAndBindingFlagsWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.GetMembersTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GetMembersTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "GetMethodWithNameAndBindingFlagsWorks()",
                    line: "786"
                } ));
                t.Fixture.getMethodWithNameAndBindingFlagsWorks();
            },
            getMethodWithNameAndArgumentTypesWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.GetMembersTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GetMembersTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "GetMethodWithNameAndArgumentTypesWorks()",
                    line: "814"
                } ));
                t.Fixture.getMethodWithNameAndArgumentTypesWorks();
            },
            getMethodWithNameAndArgumentTypesAndBindingFlagsWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.GetMembersTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GetMembersTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "GetMethodWithNameAndArgumentTypesAndBindingFlagsWorks()",
                    line: "829"
                } ));
                t.Fixture.getMethodWithNameAndArgumentTypesAndBindingFlagsWorks();
            },
            getPropertiesWithoutBindingFlagsWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.GetMembersTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GetMembersTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "GetPropertiesWithoutBindingFlagsWorks()",
                    line: "849"
                } ));
                t.Fixture.getPropertiesWithoutBindingFlagsWorks();
            },
            getPropertiesWithBindingFlagsWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.GetMembersTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GetMembersTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "GetPropertiesWithBindingFlagsWorks()",
                    line: "859"
                } ));
                t.Fixture.getPropertiesWithBindingFlagsWorks();
            },
            getPropertyWithNameWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.GetMembersTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GetMembersTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "GetPropertyWithNameWorks()",
                    line: "897"
                } ));
                t.Fixture.getPropertyWithNameWorks();
            },
            getPropertyWithNameAndBindingFlagsWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.GetMembersTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GetMembersTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "GetPropertyWithNameAndBindingFlagsWorks()",
                    line: "909"
                } ));
                t.Fixture.getPropertyWithNameAndBindingFlagsWorks();
            },
            getPropertyWithNameAndArgumentTypesWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.GetMembersTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GetMembersTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "GetPropertyWithNameAndArgumentTypesWorks()",
                    line: "929"
                } ));
                t.Fixture.getPropertyWithNameAndArgumentTypesWorks();
            },
            getPropertyWithNameAndArgumentTypesAndBindingFlagsWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.GetMembersTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GetMembersTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "GetPropertyWithNameAndArgumentTypesAndBindingFlagsWorks()",
                    line: "940"
                } ));
                t.Fixture.getPropertyWithNameAndArgumentTypesAndBindingFlagsWorks();
            },
            getFieldsWithoutBindingFlagsWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.GetMembersTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GetMembersTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "GetFieldsWithoutBindingFlagsWorks()",
                    line: "956"
                } ));
                t.Fixture.getFieldsWithoutBindingFlagsWorks();
            },
            getFieldsWithBindingFlagsWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.GetMembersTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GetMembersTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "GetFieldsWithBindingFlagsWorks()",
                    line: "966"
                } ));
                t.Fixture.getFieldsWithBindingFlagsWorks();
            },
            getFieldWithNameWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.GetMembersTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GetMembersTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "GetFieldWithNameWorks()",
                    line: "1004"
                } ));
                t.Fixture.getFieldWithNameWorks();
            },
            getFieldWithNameAndBindingFlagsWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.GetMembersTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GetMembersTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "GetFieldWithNameAndBindingFlagsWorks()",
                    line: "1014"
                } ));
                t.Fixture.getFieldWithNameAndBindingFlagsWorks();
            },
            getEventsWithoutBindingFlagsWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.GetMembersTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GetMembersTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "GetEventsWithoutBindingFlagsWorks()",
                    line: "1031"
                } ));
                t.Fixture.getEventsWithoutBindingFlagsWorks();
            },
            getEventsWithBindingFlagsWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.GetMembersTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GetMembersTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "GetEventsWithBindingFlagsWorks()",
                    line: "1041"
                } ));
                t.Fixture.getEventsWithBindingFlagsWorks();
            },
            getEventWithNameWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.GetMembersTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GetMembersTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "GetEventWithNameWorks()",
                    line: "1079"
                } ));
                t.Fixture.getEventWithNameWorks();
            },
            getEventWithNameAndBindingFlagsWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.GetMembersTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GetMembersTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "GetEventWithNameAndBindingFlagsWorks()",
                    line: "1089"
                } ));
                t.Fixture.getEventWithNameAndBindingFlagsWorks();
            },
            isOperatorForMemberInfoWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.GetMembersTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GetMembersTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "IsOperatorForMemberInfoWorks()",
                    line: "1106"
                } ));
                t.Fixture.isOperatorForMemberInfoWorks();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                    project: "Batch1",
                    className: "Bridge.ClientTest.Reflection.GetMembersTests",
                    file: "Batch1\\Reflection\\GetMembersTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.GuidTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.GuidTests)],
        statics: {
            typePropertiesAreCorrect: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.GuidTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GuidTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TypePropertiesAreCorrect()",
                    line: "11"
                } ));
                t.Fixture.typePropertiesAreCorrect();
            },
            defaultValueWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.GuidTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GuidTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "DefaultValueWorks()",
                    line: "26"
                } ));
                t.Fixture.defaultValueWorks();
            },
            createInstanceWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.GuidTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GuidTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "CreateInstanceWorks()",
                    line: "34"
                } ));
                t.Fixture.createInstanceWorks();
            },
            defaultConstructorWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.GuidTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GuidTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "DefaultConstructorWorks()",
                    line: "42"
                } ));
                t.Fixture.defaultConstructorWorks();
            },
            emptyWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.GuidTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GuidTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "EmptyWorks()",
                    line: "50"
                } ));
                t.Fixture.emptyWorks();
            },
            toStringWithoutArgumentsWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.GuidTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GuidTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ToStringWithoutArgumentsWorks()",
                    line: "56"
                } ));
                t.Fixture.toStringWithoutArgumentsWorks();
            },
            byteArrayConstructorWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.GuidTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GuidTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ByteArrayConstructorWorks()",
                    line: "63"
                } ));
                t.Fixture.byteArrayConstructorWorks();
            },
            int32Int16Int16ByteArrayConstructorWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.GuidTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GuidTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "Int32Int16Int16ByteArrayConstructorWorks()",
                    line: "72"
                } ));
                t.Fixture.int32Int16Int16ByteArrayConstructorWorks();
            },
            int32Int16Int16BytesConstructorWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.GuidTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GuidTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "Int32Int16Int16BytesConstructorWorks()",
                    line: "80"
                } ));
                t.Fixture.int32Int16Int16BytesConstructorWorks();
            },
            uInt32UInt16UInt16BytesConstructorWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.GuidTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GuidTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "UInt32UInt16UInt16BytesConstructorWorks()",
                    line: "88"
                } ));
                t.Fixture.uInt32UInt16UInt16BytesConstructorWorks();
            },
            stringConstructorWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.GuidTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GuidTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "StringConstructorWorks()",
                    line: "96"
                } ));
                t.Fixture.stringConstructorWorks();
            },
            parseWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.GuidTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GuidTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ParseWorks()",
                    line: "114"
                } ));
                t.Fixture.parseWorks();
            },
            parseExactWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.GuidTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GuidTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ParseExactWorks()",
                    line: "132"
                } ));
                t.Fixture.parseExactWorks();
            },
            tryParseWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.GuidTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GuidTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TryParseWorks()",
                    line: "153"
                } ));
                t.Fixture.tryParseWorks();
            },
            tryParseExactWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.GuidTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GuidTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TryParseExactWorks()",
                    line: "174"
                } ));
                t.Fixture.tryParseExactWorks();
            },
            compareToWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.GuidTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GuidTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "CompareToWorks()",
                    line: "204"
                } ));
                t.Fixture.compareToWorks();
            },
            iComparableCompareToWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.GuidTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GuidTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "IComparableCompareToWorks()",
                    line: "212"
                } ));
                t.Fixture.iComparableCompareToWorks();
            },
            equalsObjectWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.GuidTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GuidTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "EqualsObjectWorks()",
                    line: "220"
                } ));
                t.Fixture.equalsObjectWorks();
            },
            equalsGuidWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.GuidTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GuidTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "EqualsGuidWorks()",
                    line: "229"
                } ));
                t.Fixture.equalsGuidWorks();
            },
            iEquatableEqualsWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.GuidTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GuidTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "IEquatableEqualsWorks()",
                    line: "237"
                } ));
                t.Fixture.iEquatableEqualsWorks();
            },
            getHashCodeWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.GuidTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GuidTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "GetHashCodeWorks()",
                    line: "245"
                } ));
                t.Fixture.getHashCodeWorks();
            },
            equalityOperatorWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.GuidTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GuidTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "EqualityOperatorWorks()",
                    line: "252"
                } ));
                t.Fixture.equalityOperatorWorks();
            },
            inequalityOperatorWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.GuidTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GuidTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "InequalityOperatorWorks()",
                    line: "259"
                } ));
                t.Fixture.inequalityOperatorWorks();
            },
            toStringWithFormatWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.GuidTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GuidTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ToStringWithFormatWorks()",
                    line: "266"
                } ));
                t.Fixture.toStringWithFormatWorks();
            },
            newGuidWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.GuidTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GuidTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "NewGuidWorks()",
                    line: "278"
                } ));
                t.Fixture.newGuidWorks();
            },
            toByteArrayWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.GuidTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GuidTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ToByteArrayWorks()",
                    line: "294"
                } ));
                t.Fixture.toByteArrayWorks();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                    project: "Batch1",
                    className: "Bridge.ClientTest.GuidTests",
                    file: "Batch1\\GuidTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.ICollectionTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ICollectionTests)],
        statics: {
            arrayImplementsICollection: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ICollectionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ICollectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ArrayImplementsICollection()",
                    line: "87"
                } ));
                t.Fixture.arrayImplementsICollection();
            },
            customClassThatShouldImplementICollectionDoesSo: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ICollectionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ICollectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "CustomClassThatShouldImplementICollectionDoesSo()",
                    line: "93"
                } ));
                t.Fixture.customClassThatShouldImplementICollectionDoesSo();
            },
            arrayCastToICollectionCountWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ICollectionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ICollectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ArrayCastToICollectionCountWorks()",
                    line: "99"
                } ));
                t.Fixture.arrayCastToICollectionCountWorks();
            },
            classImplementingICollectionCountWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ICollectionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ICollectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ClassImplementingICollectionCountWorks()",
                    line: "105"
                } ));
                t.Fixture.classImplementingICollectionCountWorks();
            },
            classImplementingICollectionCastToICollectionCountWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ICollectionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ICollectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ClassImplementingICollectionCastToICollectionCountWorks()",
                    line: "111"
                } ));
                t.Fixture.classImplementingICollectionCastToICollectionCountWorks();
            },
            arrayCastToICollectionIsReadOnlyWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ICollectionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ICollectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ArrayCastToICollectionIsReadOnlyWorks()",
                    line: "117"
                } ));
                t.Fixture.arrayCastToICollectionIsReadOnlyWorks();
            },
            classImplementingICollectionIsReadOnlyWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ICollectionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ICollectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ClassImplementingICollectionIsReadOnlyWorks()",
                    line: "123"
                } ));
                t.Fixture.classImplementingICollectionIsReadOnlyWorks();
            },
            classImplementingICollectionCastToICollectionIsReadOnlyWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ICollectionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ICollectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ClassImplementingICollectionCastToICollectionIsReadOnlyWorks()",
                    line: "129"
                } ));
                t.Fixture.classImplementingICollectionCastToICollectionIsReadOnlyWorks();
            },
            classImplementingICollectionAddWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ICollectionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ICollectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ClassImplementingICollectionAddWorks()",
                    line: "135"
                } ));
                t.Fixture.classImplementingICollectionAddWorks();
            },
            classImplementingICollectionCastToICollectionAddWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ICollectionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ICollectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ClassImplementingICollectionCastToICollectionAddWorks()",
                    line: "144"
                } ));
                t.Fixture.classImplementingICollectionCastToICollectionAddWorks();
            },
            classImplementingICollectionClearWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ICollectionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ICollectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ClassImplementingICollectionClearWorks()",
                    line: "153"
                } ));
                t.Fixture.classImplementingICollectionClearWorks();
            },
            classImplementingICollectionCastToICollectionClearWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ICollectionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ICollectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ClassImplementingICollectionCastToICollectionClearWorks()",
                    line: "161"
                } ));
                t.Fixture.classImplementingICollectionCastToICollectionClearWorks();
            },
            arrayCastToICollectionContainsWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ICollectionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ICollectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ArrayCastToICollectionContainsWorks()",
                    line: "169"
                } ));
                t.Fixture.arrayCastToICollectionContainsWorks();
            },
            classImplementingICollectionContainsWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ICollectionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ICollectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ClassImplementingICollectionContainsWorks()",
                    line: "177"
                } ));
                t.Fixture.classImplementingICollectionContainsWorks();
            },
            classImplementingICollectionCastToICollectionContainsWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ICollectionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ICollectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ClassImplementingICollectionCastToICollectionContainsWorks()",
                    line: "185"
                } ));
                t.Fixture.classImplementingICollectionCastToICollectionContainsWorks();
            },
            classImplementingICollectionRemoveWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ICollectionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ICollectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ClassImplementingICollectionRemoveWorks()",
                    line: "193"
                } ));
                t.Fixture.classImplementingICollectionRemoveWorks();
            },
            classImplementingICollectionCastToICollectionRemoveWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ICollectionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ICollectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ClassImplementingICollectionCastToICollectionRemoveWorks()",
                    line: "203"
                } ));
                t.Fixture.classImplementingICollectionCastToICollectionRemoveWorks();
            },
            classImplementingICollectionCopyToWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ICollectionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ICollectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ClassImplementingICollectionCopyToWorks()",
                    line: "213"
                } ));
                t.Fixture.classImplementingICollectionCopyToWorks();
            },
            classImplementingICollectionCastToICollectionCopyToWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ICollectionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ICollectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ClassImplementingICollectionCastToICollectionCopyToWorks()",
                    line: "243"
                } ));
                t.Fixture.classImplementingICollectionCastToICollectionCopyToWorks();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                    project: "Batch1",
                    className: "Bridge.ClientTest.Collections.Generic.ICollectionTests",
                    file: "Batch1\\Collections\\Generic\\ICollectionTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.IComparableTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IComparableTests)],
        statics: {
            callingMethodThroughIComparableInterfaceInvokesImplementingMethod: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IComparableTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.IComparableTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "CallingMethodThroughIComparableInterfaceInvokesImplementingMethod()",
                    line: "22"
                } ));
                t.Fixture.callingMethodThroughIComparableInterfaceInvokesImplementingMethod();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                    project: "Batch1",
                    className: "Bridge.ClientTest.IComparableTests",
                    file: "Batch1\\IComparableTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.IDictionaryTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.IDictionaryTests)],
        statics: {
            typePropertiesAreCorrect: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.IDictionaryTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.IDictionaryTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TypePropertiesAreCorrect()",
                    line: "105"
                } ));
                t.Fixture.typePropertiesAreCorrect();
            },
            classImplementsInterfaces: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.IDictionaryTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.IDictionaryTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ClassImplementsInterfaces()",
                    line: "111"
                } ));
                t.Fixture.classImplementsInterfaces();
            },
            countWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.IDictionaryTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.IDictionaryTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "CountWorks()",
                    line: "117"
                } ));
                t.Fixture.countWorks();
            },
            keysWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.IDictionaryTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.IDictionaryTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "KeysWorks()",
                    line: "130"
                } ));
                t.Fixture.keysWorks();
            },
            getItemWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.IDictionaryTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.IDictionaryTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "GetItemWorks()",
                    line: "148"
                } ));
                t.Fixture.getItemWorks();
            },
            valuesWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.IDictionaryTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.IDictionaryTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ValuesWorks()",
                    line: "177"
                } ));
                t.Fixture.valuesWorks();
            },
            containsKeyWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.IDictionaryTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.IDictionaryTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ContainsKeyWorks()",
                    line: "195"
                } ));
                t.Fixture.containsKeyWorks();
            },
            tryGetValueWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.IDictionaryTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.IDictionaryTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TryGetValueWorks()",
                    line: "208"
                } ));
                t.Fixture.tryGetValueWorks();
            },
            addWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.IDictionaryTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.IDictionaryTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "AddWorks()",
                    line: "231"
                } ));
                t.Fixture.addWorks();
            },
            clearWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.IDictionaryTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.IDictionaryTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ClearWorks()",
                    line: "259"
                } ));
                t.Fixture.clearWorks();
            },
            removeWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.IDictionaryTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.IDictionaryTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "RemoveWorks()",
                    line: "269"
                } ));
                t.Fixture.removeWorks();
            },
            setItemWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.IDictionaryTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.IDictionaryTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "SetItemWorks()",
                    line: "286"
                } ));
                t.Fixture.setItemWorks();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                    project: "Batch1",
                    className: "Bridge.ClientTest.Collections.Generic.IDictionaryTests",
                    file: "Batch1\\Collections\\Generic\\IDictionaryTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.IEnumerableTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.IEnumerableTests)],
        statics: {
            arrayImplementsIEnumerable: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.IEnumerableTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.IEnumerableTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ArrayImplementsIEnumerable()",
                    line: "26"
                } ));
                t.Fixture.arrayImplementsIEnumerable();
            },
            customClassThatShouldImplementIEnumerableDoesSo: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.IEnumerableTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.IEnumerableTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "CustomClassThatShouldImplementIEnumerableDoesSo()",
                    line: "32"
                } ));
                t.Fixture.customClassThatShouldImplementIEnumerableDoesSo();
            },
            arrayGetEnumeratorMethodWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.IEnumerableTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.IEnumerableTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ArrayGetEnumeratorMethodWorks()",
                    line: "38"
                } ));
                t.Fixture.arrayGetEnumeratorMethodWorks();
            },
            arrayCastToIEnumerableCanBeEnumerated: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.IEnumerableTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.IEnumerableTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ArrayCastToIEnumerableCanBeEnumerated()",
                    line: "51"
                } ));
                t.Fixture.arrayCastToIEnumerableCanBeEnumerated();
            },
            classImplementingIEnumerableCanBeEnumerated: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.IEnumerableTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.IEnumerableTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ClassImplementingIEnumerableCanBeEnumerated()",
                    line: "65"
                } ));
                t.Fixture.classImplementingIEnumerableCanBeEnumerated();
            },
            classImplementingIEnumerableCastToIEnumerableCanBeEnumerated: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.IEnumerableTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.IEnumerableTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ClassImplementingIEnumerableCastToIEnumerableCanBeEnumerated()",
                    line: "79"
                } ));
                t.Fixture.classImplementingIEnumerableCastToIEnumerableCanBeEnumerated();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                    project: "Batch1",
                    className: "Bridge.ClientTest.Collections.Generic.IEnumerableTests",
                    file: "Batch1\\Collections\\Generic\\IEnumerableTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.IEquatableTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IEquatableTests)],
        statics: {
            callingMethodThroughIComparableInterfaceInvokesImplementingMethod: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IEquatableTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.IEquatableTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "CallingMethodThroughIComparableInterfaceInvokesImplementingMethod()",
                    line: "22"
                } ));
                t.Fixture.callingMethodThroughIComparableInterfaceInvokesImplementingMethod();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                    project: "Batch1",
                    className: "Bridge.ClientTest.IEquatableTests",
                    file: "Batch1\\IEquatableTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.IListTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.IListTests)],
        statics: {
            typePropertiesAreCorrect: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.IListTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.IListTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TypePropertiesAreCorrect()",
                    line: "104"
                } ));
                t.Fixture.typePropertiesAreCorrect();
            },
            arrayImplementsIList: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.IListTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.IListTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ArrayImplementsIList()",
                    line: "115"
                } ));
                t.Fixture.arrayImplementsIList();
            },
            customClassThatShouldImplementIListDoesSo: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.IListTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.IListTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "CustomClassThatShouldImplementIListDoesSo()",
                    line: "121"
                } ));
                t.Fixture.customClassThatShouldImplementIListDoesSo();
            },
            arrayCastToIListGetItemWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.IListTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.IListTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ArrayCastToIListGetItemWorks()",
                    line: "127"
                } ));
                t.Fixture.arrayCastToIListGetItemWorks();
            },
            arrayCastToIListSetItemWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.IListTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.IListTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ArrayCastToIListSetItemWorks()",
                    line: "134"
                } ));
                t.Fixture.arrayCastToIListSetItemWorks();
            },
            classImplementingIListGetItemWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.IListTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.IListTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ClassImplementingIListGetItemWorks()",
                    line: "142"
                } ));
                t.Fixture.classImplementingIListGetItemWorks();
            },
            classImplementingIListCastToIListGetItemWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.IListTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.IListTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ClassImplementingIListCastToIListGetItemWorks()",
                    line: "149"
                } ));
                t.Fixture.classImplementingIListCastToIListGetItemWorks();
            },
            classImplementingIListSetItemWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.IListTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.IListTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ClassImplementingIListSetItemWorks()",
                    line: "156"
                } ));
                t.Fixture.classImplementingIListSetItemWorks();
            },
            classImplementingIListCastToIListSetItemWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.IListTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.IListTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ClassImplementingIListCastToIListSetItemWorks()",
                    line: "164"
                } ));
                t.Fixture.classImplementingIListCastToIListSetItemWorks();
            },
            arrayCastToIListIsReadOnlyWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.IListTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.IListTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ArrayCastToIListIsReadOnlyWorks()",
                    line: "172"
                } ));
                t.Fixture.arrayCastToIListIsReadOnlyWorks();
            },
            classImplementingIListIsReadOnlyWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.IListTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.IListTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ClassImplementingIListIsReadOnlyWorks()",
                    line: "179"
                } ));
                t.Fixture.classImplementingIListIsReadOnlyWorks();
            },
            classImplementingIListCastToIListIsReadOnlyWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.IListTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.IListTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ClassImplementingIListCastToIListIsReadOnlyWorks()",
                    line: "186"
                } ));
                t.Fixture.classImplementingIListCastToIListIsReadOnlyWorks();
            },
            arrayCastToIListIndexOfWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.IListTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.IListTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ArrayCastToIListIndexOfWorks()",
                    line: "193"
                } ));
                t.Fixture.arrayCastToIListIndexOfWorks();
            },
            classImplementingIListIndexOfWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.IListTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.IListTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ClassImplementingIListIndexOfWorks()",
                    line: "201"
                } ));
                t.Fixture.classImplementingIListIndexOfWorks();
            },
            classImplementingIListCastToIListIndexOfWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.IListTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.IListTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ClassImplementingIListCastToIListIndexOfWorks()",
                    line: "209"
                } ));
                t.Fixture.classImplementingIListCastToIListIndexOfWorks();
            },
            classImplementingIListInsertWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.IListTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.IListTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ClassImplementingIListInsertWorks()",
                    line: "217"
                } ));
                t.Fixture.classImplementingIListInsertWorks();
            },
            classImplementingIListCastToIListInsertWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.IListTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.IListTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ClassImplementingIListCastToIListInsertWorks()",
                    line: "225"
                } ));
                t.Fixture.classImplementingIListCastToIListInsertWorks();
            },
            classImplementingIListRemoveAtWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.IListTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.IListTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ClassImplementingIListRemoveAtWorks()",
                    line: "233"
                } ));
                t.Fixture.classImplementingIListRemoveAtWorks();
            },
            classImplementingIListCastToIListRemoveAtWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.IListTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.IListTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ClassImplementingIListCastToIListRemoveAtWorks()",
                    line: "241"
                } ));
                t.Fixture.classImplementingIListCastToIListRemoveAtWorks();
            },
            classImplementingIListCopyToWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.IListTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.IListTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ClassImplementingIListCopyToWorks()",
                    line: "249"
                } ));
                t.Fixture.classImplementingIListCopyToWorks();
            },
            classImplementingIListCastToIListCopyToWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.IListTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.IListTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ClassImplementingIListCastToIListCopyToWorks()",
                    line: "279"
                } ));
                t.Fixture.classImplementingIListCastToIListCopyToWorks();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                    project: "Batch1",
                    className: "Bridge.ClientTest.Collections.Generic.IListTests",
                    file: "Batch1\\Collections\\Generic\\IListTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.IndexOutOfRangeExceptionTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.IndexOutOfRangeExceptionTests)],
        statics: {
            typePropertiesAreCorrect: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.IndexOutOfRangeExceptionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.IndexOutOfRangeExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TypePropertiesAreCorrect()",
                    line: "13"
                } ));
                t.Fixture.typePropertiesAreCorrect();
            },
            defaultConstructorWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.IndexOutOfRangeExceptionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.IndexOutOfRangeExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "DefaultConstructorWorks()",
                    line: "23"
                } ));
                t.Fixture.defaultConstructorWorks();
            },
            constructorWithMessageWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.IndexOutOfRangeExceptionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.IndexOutOfRangeExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ConstructorWithMessageWorks()",
                    line: "32"
                } ));
                t.Fixture.constructorWithMessageWorks();
            },
            constructorWithMessageAndInnerExceptionWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.IndexOutOfRangeExceptionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.IndexOutOfRangeExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ConstructorWithMessageAndInnerExceptionWorks()",
                    line: "41"
                } ));
                t.Fixture.constructorWithMessageAndInnerExceptionWorks();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                    project: "Batch1",
                    className: "Bridge.ClientTest.Exceptions.IndexOutOfRangeExceptionTests",
                    file: "Batch1\\Exceptions\\IndexOutOfRangeExceptionTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.InitializationModeTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ObjectLiteralTests.InitializationModeTests)],
        statics: {
            test: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ObjectLiteralTests.InitializationModeTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.InitializationModeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "Test()",
                    line: "290"
                } ));
                t.Fixture.test();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                    project: "Batch1",
                    className: "Bridge.ClientTest.ObjectLiteralTests.InitializationModeTests",
                    file: "Batch1\\ObjectLiteralTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.Int16ArrayTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int16ArrayTests)],
        statics: {
            lengthConstructorWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int16ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int16ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "LengthConstructorWorks()",
                    line: "30"
                } ));
                t.Fixture.lengthConstructorWorks();
            },
            constructorFromIntWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int16ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int16ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ConstructorFromIntWorks()",
                    line: "38"
                } ));
                t.Fixture.constructorFromIntWorks();
            },
            copyConstructorWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int16ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int16ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "CopyConstructorWorks()",
                    line: "48"
                } ));
                t.Fixture.copyConstructorWorks();
            },
            arrayBufferConstructorWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int16ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int16ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ArrayBufferConstructorWorks()",
                    line: "58"
                } ));
                t.Fixture.arrayBufferConstructorWorks();
            },
            arrayBufferWithOffsetConstructorWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int16ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int16ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ArrayBufferWithOffsetConstructorWorks()",
                    line: "68"
                } ));
                t.Fixture.arrayBufferWithOffsetConstructorWorks();
            },
            arrayBufferWithOffsetAndLengthConstructorWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int16ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int16ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ArrayBufferWithOffsetAndLengthConstructorWorks()",
                    line: "78"
                } ));
                t.Fixture.arrayBufferWithOffsetAndLengthConstructorWorks();
            },
            staticBytesPerElementWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int16ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int16ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "StaticBytesPerElementWorks()",
                    line: "95"
                } ));
                t.Fixture.staticBytesPerElementWorks();
            },
            lengthWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int16ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int16ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "LengthWorks()",
                    line: "101"
                } ));
                t.Fixture.lengthWorks();
            },
            indexingWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int16ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int16ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "IndexingWorks()",
                    line: "108"
                } ));
                t.Fixture.indexingWorks();
            },
            setInt16ArrayWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int16ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int16ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "SetInt16ArrayWorks()",
                    line: "117"
                } ));
                t.Fixture.setInt16ArrayWorks();
            },
            setInt16ArrayWithOffsetWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int16ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int16ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "SetInt16ArrayWithOffsetWorks()",
                    line: "125"
                } ));
                t.Fixture.setInt16ArrayWithOffsetWorks();
            },
            setNormalArrayWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int16ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int16ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "SetNormalArrayWorks()",
                    line: "133"
                } ));
                t.Fixture.setNormalArrayWorks();
            },
            setNormalArrayWithOffsetWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int16ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int16ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "SetNormalArrayWithOffsetWorks()",
                    line: "141"
                } ));
                t.Fixture.setNormalArrayWithOffsetWorks();
            },
            subarrayWithBeginWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int16ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int16ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "SubarrayWithBeginWorks()",
                    line: "149"
                } ));
                t.Fixture.subarrayWithBeginWorks();
            },
            subarrayWithBeginAndEndWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int16ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int16ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "SubarrayWithBeginAndEndWorks()",
                    line: "159"
                } ));
                t.Fixture.subarrayWithBeginAndEndWorks();
            },
            bufferPropertyWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int16ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int16ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "BufferPropertyWorks()",
                    line: "170"
                } ));
                t.Fixture.bufferPropertyWorks();
            },
            byteOffsetPropertyWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int16ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int16ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ByteOffsetPropertyWorks()",
                    line: "178"
                } ));
                t.Fixture.byteOffsetPropertyWorks();
            },
            byteLengthPropertyWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int16ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int16ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ByteLengthPropertyWorks()",
                    line: "186"
                } ));
                t.Fixture.byteLengthPropertyWorks();
            },
            indexOfWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int16ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int16ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "IndexOfWorks()",
                    line: "193"
                } ));
                t.Fixture.indexOfWorks();
            },
            containsWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int16ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int16ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ContainsWorks()",
                    line: "202"
                } ));
                t.Fixture.containsWorks();
            },
            foreachWorks_SPI_1401: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int16ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int16ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ForeachWorks_SPI_1401()",
                    line: "211"
                } ));
                t.Fixture.foreachWorks_SPI_1401();
            },
            getEnumeratorWorks_SPI_1401: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int16ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int16ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "GetEnumeratorWorks_SPI_1401()",
                    line: "225"
                } ));
                t.Fixture.getEnumeratorWorks_SPI_1401();
            },
            iEnumerableGetEnumeratorWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int16ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int16ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "IEnumerableGetEnumeratorWorks()",
                    line: "239"
                } ));
                t.Fixture.iEnumerableGetEnumeratorWorks();
            },
            iCollectionMethodsWork_SPI_1559: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int16ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int16ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ICollectionMethodsWork_SPI_1559()",
                    line: "252"
                } ));
                t.Fixture.iCollectionMethodsWork_SPI_1559();
            },
            iListMethodsWork_SPI_1559: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int16ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int16ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "IListMethodsWork_SPI_1559()",
                    line: "265"
                } ));
                t.Fixture.iListMethodsWork_SPI_1559();
            },
            iListIsReadOnlyWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int16ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int16ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "IListIsReadOnlyWorks()",
                    line: "298"
                } ));
                t.Fixture.iListIsReadOnlyWorks();
            },
            iCollectionIsReadOnlyWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int16ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int16ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ICollectionIsReadOnlyWorks()",
                    line: "305"
                } ));
                t.Fixture.iCollectionIsReadOnlyWorks();
            },
            iCollectionCopyTo: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int16ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int16ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ICollectionCopyTo()",
                    line: "312"
                } ));
                t.Fixture.iCollectionCopyTo();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                    project: "Batch1",
                    className: "Bridge.ClientTest.Collections.Native.Int16ArrayTests",
                    file: "Batch1\\Collections\\Native\\Int16ArrayTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.Int16Tests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.Int16Tests)],
        statics: {
            typePropertiesAreCorrect: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.Int16Tests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int16Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TypePropertiesAreCorrect()",
                    line: "10"
                } ));
                t.Fixture.typePropertiesAreCorrect();
            },
            castsWork: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.Int16Tests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int16Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "CastsWork()",
                    line: "26"
                } ));
                t.Fixture.castsWork();
            },
            defaultValueIs0: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.Int16Tests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int16Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "DefaultValueIs0()",
                    line: "70"
                } ));
                t.Fixture.defaultValueIs0();
            },
            defaultConstructorReturnsZero: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.Int16Tests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int16Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "DefaultConstructorReturnsZero()",
                    line: "76"
                } ));
                t.Fixture.defaultConstructorReturnsZero();
            },
            creatingInstanceReturnsZero: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.Int16Tests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int16Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "CreatingInstanceReturnsZero()",
                    line: "82"
                } ));
                t.Fixture.creatingInstanceReturnsZero();
            },
            constantsWork: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.Int16Tests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int16Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ConstantsWork()",
                    line: "88"
                } ));
                t.Fixture.constantsWork();
            },
            formatWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.Int16Tests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int16Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FormatWorks()",
                    line: "95"
                } ));
                t.Fixture.formatWorks();
            },
            iFormattableToStringWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.Int16Tests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int16Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "IFormattableToStringWorks()",
                    line: "101"
                } ));
                t.Fixture.iFormattableToStringWorks();
            },
            tryParseWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.Int16Tests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int16Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TryParseWorks()",
                    line: "107"
                } ));
                t.Fixture.tryParseWorks();
            },
            parseWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.Int16Tests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int16Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ParseWorks()",
                    line: "140"
                } ));
                t.Fixture.parseWorks();
            },
            toStringWithoutRadixWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.Int16Tests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int16Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ToStringWithoutRadixWorks()",
                    line: "152"
                } ));
                t.Fixture.toStringWithoutRadixWorks();
            },
            toStringWithRadixWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.Int16Tests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int16Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ToStringWithRadixWorks()",
                    line: "158"
                } ));
                t.Fixture.toStringWithRadixWorks();
            },
            getHashCodeWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.Int16Tests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int16Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "GetHashCodeWorks()",
                    line: "165"
                } ));
                t.Fixture.getHashCodeWorks();
            },
            equalsWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.Int16Tests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int16Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "EqualsWorks()",
                    line: "173"
                } ));
                t.Fixture.equalsWorks();
            },
            iEquatableEqualsWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.Int16Tests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int16Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "IEquatableEqualsWorks()",
                    line: "182"
                } ));
                t.Fixture.iEquatableEqualsWorks();
            },
            compareToWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.Int16Tests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int16Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "CompareToWorks()",
                    line: "196"
                } ));
                t.Fixture.compareToWorks();
            },
            iComparableCompareToWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.Int16Tests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int16Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "IComparableCompareToWorks()",
                    line: "204"
                } ));
                t.Fixture.iComparableCompareToWorks();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                    project: "Batch1",
                    className: "Bridge.ClientTest.SimpleTypes.Int16Tests",
                    file: "Batch1\\SimpleTypes\\Int16Tests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.Int32ArrayTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int32ArrayTests)],
        statics: {
            lengthConstructorWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int32ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int32ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "LengthConstructorWorks()",
                    line: "30"
                } ));
                t.Fixture.lengthConstructorWorks();
            },
            constructorFromIntWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int32ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int32ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ConstructorFromIntWorks()",
                    line: "38"
                } ));
                t.Fixture.constructorFromIntWorks();
            },
            copyConstructorWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int32ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int32ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "CopyConstructorWorks()",
                    line: "48"
                } ));
                t.Fixture.copyConstructorWorks();
            },
            arrayBufferConstructorWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int32ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int32ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ArrayBufferConstructorWorks()",
                    line: "58"
                } ));
                t.Fixture.arrayBufferConstructorWorks();
            },
            arrayBufferWithOffsetConstructorWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int32ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int32ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ArrayBufferWithOffsetConstructorWorks()",
                    line: "68"
                } ));
                t.Fixture.arrayBufferWithOffsetConstructorWorks();
            },
            arrayBufferWithOffsetAndLengthConstructorWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int32ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int32ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ArrayBufferWithOffsetAndLengthConstructorWorks()",
                    line: "78"
                } ));
                t.Fixture.arrayBufferWithOffsetAndLengthConstructorWorks();
            },
            staticBytesPerElementWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int32ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int32ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "StaticBytesPerElementWorks()",
                    line: "95"
                } ));
                t.Fixture.staticBytesPerElementWorks();
            },
            lengthWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int32ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int32ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "LengthWorks()",
                    line: "101"
                } ));
                t.Fixture.lengthWorks();
            },
            indexingWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int32ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int32ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "IndexingWorks()",
                    line: "108"
                } ));
                t.Fixture.indexingWorks();
            },
            setInt32ArrayWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int32ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int32ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "SetInt32ArrayWorks()",
                    line: "117"
                } ));
                t.Fixture.setInt32ArrayWorks();
            },
            setInt32ArrayWithOffsetWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int32ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int32ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "SetInt32ArrayWithOffsetWorks()",
                    line: "125"
                } ));
                t.Fixture.setInt32ArrayWithOffsetWorks();
            },
            setNormalArrayWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int32ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int32ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "SetNormalArrayWorks()",
                    line: "133"
                } ));
                t.Fixture.setNormalArrayWorks();
            },
            setNormalArrayWithOffsetWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int32ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int32ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "SetNormalArrayWithOffsetWorks()",
                    line: "141"
                } ));
                t.Fixture.setNormalArrayWithOffsetWorks();
            },
            subarrayWithBeginWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int32ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int32ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "SubarrayWithBeginWorks()",
                    line: "149"
                } ));
                t.Fixture.subarrayWithBeginWorks();
            },
            subarrayWithBeginAndEndWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int32ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int32ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "SubarrayWithBeginAndEndWorks()",
                    line: "159"
                } ));
                t.Fixture.subarrayWithBeginAndEndWorks();
            },
            bufferPropertyWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int32ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int32ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "BufferPropertyWorks()",
                    line: "170"
                } ));
                t.Fixture.bufferPropertyWorks();
            },
            byteOffsetPropertyWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int32ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int32ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ByteOffsetPropertyWorks()",
                    line: "178"
                } ));
                t.Fixture.byteOffsetPropertyWorks();
            },
            byteLengthPropertyWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int32ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int32ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ByteLengthPropertyWorks()",
                    line: "186"
                } ));
                t.Fixture.byteLengthPropertyWorks();
            },
            indexOfWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int32ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int32ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "IndexOfWorks()",
                    line: "193"
                } ));
                t.Fixture.indexOfWorks();
            },
            containsWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int32ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int32ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ContainsWorks()",
                    line: "202"
                } ));
                t.Fixture.containsWorks();
            },
            foreachWorks_SPI_1401: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int32ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int32ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ForeachWorks_SPI_1401()",
                    line: "211"
                } ));
                t.Fixture.foreachWorks_SPI_1401();
            },
            getEnumeratorWorks_SPI_1401: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int32ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int32ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "GetEnumeratorWorks_SPI_1401()",
                    line: "225"
                } ));
                t.Fixture.getEnumeratorWorks_SPI_1401();
            },
            iEnumerableGetEnumeratorWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int32ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int32ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "IEnumerableGetEnumeratorWorks()",
                    line: "239"
                } ));
                t.Fixture.iEnumerableGetEnumeratorWorks();
            },
            iCollectionMethodsWork_SPI_1559: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int32ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int32ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ICollectionMethodsWork_SPI_1559()",
                    line: "252"
                } ));
                t.Fixture.iCollectionMethodsWork_SPI_1559();
            },
            iListMethodsWork_SPI_1559: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int32ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int32ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "IListMethodsWork_SPI_1559()",
                    line: "265"
                } ));
                t.Fixture.iListMethodsWork_SPI_1559();
            },
            iListIsReadOnlyWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int32ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int32ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "IListIsReadOnlyWorks()",
                    line: "298"
                } ));
                t.Fixture.iListIsReadOnlyWorks();
            },
            iCollectionIsReadOnlyWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int32ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int32ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ICollectionIsReadOnlyWorks()",
                    line: "305"
                } ));
                t.Fixture.iCollectionIsReadOnlyWorks();
            },
            iCollectionCopyTo: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int32ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int32ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ICollectionCopyTo()",
                    line: "312"
                } ));
                t.Fixture.iCollectionCopyTo();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                    project: "Batch1",
                    className: "Bridge.ClientTest.Collections.Native.Int32ArrayTests",
                    file: "Batch1\\Collections\\Native\\Int32ArrayTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.Int32Tests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.Int32Tests)],
        statics: {
            typePropertiesAreCorrect: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.Int32Tests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int32Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TypePropertiesAreCorrect()",
                    line: "12"
                } ));
                t.Fixture.typePropertiesAreCorrect();
            },
            castsWork: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.Int32Tests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int32Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "CastsWork()",
                    line: "28"
                } ));
                t.Fixture.castsWork();
            },
            typeIsWorksForInt32: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.Int32Tests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int32Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TypeIsWorksForInt32()",
                    line: "67"
                } ));
                t.Fixture.typeIsWorksForInt32();
            },
            typeAsWorksForInt32: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.Int32Tests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int32Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TypeAsWorksForInt32()",
                    line: "76"
                } ));
                t.Fixture.typeAsWorksForInt32();
            },
            unboxingWorksForInt32: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.Int32Tests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int32Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "UnboxingWorksForInt32()",
                    line: "85"
                } ));
                t.Fixture.unboxingWorksForInt32();
            },
            defaultValueIs0: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.Int32Tests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int32Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "DefaultValueIs0()",
                    line: "103"
                } ));
                t.Fixture.defaultValueIs0();
            },
            defaultConstructorReturnsZero: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.Int32Tests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int32Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "DefaultConstructorReturnsZero()",
                    line: "109"
                } ));
                t.Fixture.defaultConstructorReturnsZero();
            },
            creatingInstanceReturnsZero: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.Int32Tests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int32Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "CreatingInstanceReturnsZero()",
                    line: "115"
                } ));
                t.Fixture.creatingInstanceReturnsZero();
            },
            constantsWork: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.Int32Tests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int32Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ConstantsWork()",
                    line: "121"
                } ));
                t.Fixture.constantsWork();
            },
            formatWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.Int32Tests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int32Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FormatWorks()",
                    line: "128"
                } ));
                t.Fixture.formatWorks();
            },
            iFormattableToStringWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.Int32Tests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int32Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "IFormattableToStringWorks()",
                    line: "134"
                } ));
                t.Fixture.iFormattableToStringWorks();
            },
            tryParseWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.Int32Tests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int32Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TryParseWorks()",
                    line: "140"
                } ));
                t.Fixture.tryParseWorks();
            },
            parseWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.Int32Tests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int32Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ParseWorks()",
                    line: "169"
                } ));
                t.Fixture.parseWorks();
            },
            toStringWithoutRadixWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.Int32Tests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int32Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ToStringWithoutRadixWorks()",
                    line: "183"
                } ));
                t.Fixture.toStringWithoutRadixWorks();
            },
            toStringWithRadixWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.Int32Tests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int32Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ToStringWithRadixWorks()",
                    line: "189"
                } ));
                t.Fixture.toStringWithRadixWorks();
            },
            getHashCodeWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.Int32Tests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int32Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "GetHashCodeWorks()",
                    line: "196"
                } ));
                t.Fixture.getHashCodeWorks();
            },
            equalsWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.Int32Tests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int32Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "EqualsWorks()",
                    line: "204"
                } ));
                t.Fixture.equalsWorks();
            },
            iEquatableEqualsWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.Int32Tests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int32Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "IEquatableEqualsWorks()",
                    line: "213"
                } ));
                t.Fixture.iEquatableEqualsWorks();
            },
            compareToWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.Int32Tests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int32Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "CompareToWorks()",
                    line: "227"
                } ));
                t.Fixture.compareToWorks();
            },
            iComparableCompareToWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.Int32Tests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int32Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "IComparableCompareToWorks()",
                    line: "235"
                } ));
                t.Fixture.iComparableCompareToWorks();
            },
            integerDivisionWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.Int32Tests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int32Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "IntegerDivisionWorks()",
                    line: "243"
                } ));
                t.Fixture.integerDivisionWorks();
            },
            integerModuloWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.Int32Tests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int32Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "IntegerModuloWorks()",
                    line: "254"
                } ));
                t.Fixture.integerModuloWorks();
            },
            integerDivisionByZeroThrowsDivideByZeroException: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.Int32Tests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int32Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "IntegerDivisionByZeroThrowsDivideByZeroException()",
                    line: "265"
                } ));
                t.Fixture.integerDivisionByZeroThrowsDivideByZeroException();
            },
            doublesAreTruncatedWhenConvertedToIntegers: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.Int32Tests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int32Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "DoublesAreTruncatedWhenConvertedToIntegers()",
                    line: "272"
                } ));
                t.Fixture.doublesAreTruncatedWhenConvertedToIntegers();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                    project: "Batch1",
                    className: "Bridge.ClientTest.SimpleTypes.Int32Tests",
                    file: "Batch1\\SimpleTypes\\Int32Tests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.Int64Tests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.Int64Tests)],
        statics: {
            typePropertiesAreCorrect: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.Int64Tests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int64Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TypePropertiesAreCorrect()",
                    line: "24"
                } ));
                t.Fixture.typePropertiesAreCorrect();
            },
            minMaxValuesAreCorrect: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.Int64Tests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int64Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "MinMaxValuesAreCorrect()",
                    line: "39"
                } ));
                t.Fixture.minMaxValuesAreCorrect();
            },
            castsWork: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.Int64Tests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int64Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "CastsWork()",
                    line: "46"
                } ));
                t.Fixture.castsWork();
            },
            overflowWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.Int64Tests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int64Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "OverflowWorks()",
                    line: "75"
                } ));
                t.Fixture.overflowWorks();
            },
            combinedTypesOperationsWork: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.Int64Tests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int64Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "CombinedTypesOperationsWork()",
                    line: "99"
                } ));
                t.Fixture.combinedTypesOperationsWork();
            },
            defaultValueIs0: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.Int64Tests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int64Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "DefaultValueIs0()",
                    line: "142"
                } ));
                t.Fixture.defaultValueIs0();
            },
            defaultConstructorReturnsZero: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.Int64Tests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int64Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "DefaultConstructorReturnsZero()",
                    line: "148"
                } ));
                t.Fixture.defaultConstructorReturnsZero();
            },
            creatingInstanceReturnsZero: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.Int64Tests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int64Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "CreatingInstanceReturnsZero()",
                    line: "154"
                } ));
                t.Fixture.creatingInstanceReturnsZero();
            },
            formatWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.Int64Tests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int64Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FormatWorks()",
                    line: "160"
                } ));
                t.Fixture.formatWorks();
            },
            iFormattableToStringWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.Int64Tests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int64Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "IFormattableToStringWorks()",
                    line: "166"
                } ));
                t.Fixture.iFormattableToStringWorks();
            },
            tryParseWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.Int64Tests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int64Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TryParseWorks()",
                    line: "172"
                } ));
                t.Fixture.tryParseWorks();
            },
            parseWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.Int64Tests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int64Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ParseWorks()",
                    line: "209"
                } ));
                t.Fixture.parseWorks();
            },
            castingOfLargeDoublesToInt64Works: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.Int64Tests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int64Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "CastingOfLargeDoublesToInt64Works()",
                    line: "222"
                } ));
                t.Fixture.castingOfLargeDoublesToInt64Works();
            },
            divisionOfLargeInt64Works: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.Int64Tests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int64Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "DivisionOfLargeInt64Works()",
                    line: "230"
                } ));
                t.Fixture.divisionOfLargeInt64Works();
            },
            toStringWithoutRadixWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.Int64Tests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int64Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ToStringWithoutRadixWorks()",
                    line: "238"
                } ));
                t.Fixture.toStringWithoutRadixWorks();
            },
            toStringWithRadixWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.Int64Tests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int64Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ToStringWithRadixWorks()",
                    line: "244"
                } ));
                t.Fixture.toStringWithRadixWorks();
            },
            getHashCodeWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.Int64Tests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int64Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "GetHashCodeWorks()",
                    line: "251"
                } ));
                t.Fixture.getHashCodeWorks();
            },
            equalsWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.Int64Tests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int64Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "EqualsWorks()",
                    line: "260"
                } ));
                t.Fixture.equalsWorks();
            },
            iEquatableEqualsWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.Int64Tests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int64Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "IEquatableEqualsWorks()",
                    line: "269"
                } ));
                t.Fixture.iEquatableEqualsWorks();
            },
            compareToWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.Int64Tests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int64Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "CompareToWorks()",
                    line: "283"
                } ));
                t.Fixture.compareToWorks();
            },
            iComparableCompareToWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.Int64Tests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int64Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "IComparableCompareToWorks()",
                    line: "291"
                } ));
                t.Fixture.iComparableCompareToWorks();
            },
            shiftWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.Int64Tests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int64Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ShiftWorks()",
                    line: "299"
                } ));
                t.Fixture.shiftWorks();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                    project: "Batch1",
                    className: "Bridge.ClientTest.SimpleTypes.Int64Tests",
                    file: "Batch1\\SimpleTypes\\Int64Tests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.Int8ArrayTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int8ArrayTests)],
        statics: {
            lengthConstructorWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int8ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int8ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "LengthConstructorWorks()",
                    line: "30"
                } ));
                t.Fixture.lengthConstructorWorks();
            },
            constructorFromIntWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int8ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int8ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ConstructorFromIntWorks()",
                    line: "38"
                } ));
                t.Fixture.constructorFromIntWorks();
            },
            copyConstructorWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int8ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int8ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "CopyConstructorWorks()",
                    line: "48"
                } ));
                t.Fixture.copyConstructorWorks();
            },
            arrayBufferConstructorWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int8ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int8ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ArrayBufferConstructorWorks()",
                    line: "58"
                } ));
                t.Fixture.arrayBufferConstructorWorks();
            },
            arrayBufferWithOffsetConstructorWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int8ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int8ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ArrayBufferWithOffsetConstructorWorks()",
                    line: "68"
                } ));
                t.Fixture.arrayBufferWithOffsetConstructorWorks();
            },
            arrayBufferWithOffsetAndLengthConstructorWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int8ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int8ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ArrayBufferWithOffsetAndLengthConstructorWorks()",
                    line: "78"
                } ));
                t.Fixture.arrayBufferWithOffsetAndLengthConstructorWorks();
            },
            staticBytesPerElementWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int8ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int8ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "StaticBytesPerElementWorks()",
                    line: "95"
                } ));
                t.Fixture.staticBytesPerElementWorks();
            },
            lengthWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int8ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int8ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "LengthWorks()",
                    line: "101"
                } ));
                t.Fixture.lengthWorks();
            },
            indexingWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int8ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int8ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "IndexingWorks()",
                    line: "108"
                } ));
                t.Fixture.indexingWorks();
            },
            setInt8ArrayWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int8ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int8ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "SetInt8ArrayWorks()",
                    line: "117"
                } ));
                t.Fixture.setInt8ArrayWorks();
            },
            setInt8ArrayWithOffsetWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int8ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int8ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "SetInt8ArrayWithOffsetWorks()",
                    line: "125"
                } ));
                t.Fixture.setInt8ArrayWithOffsetWorks();
            },
            setNormalArrayWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int8ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int8ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "SetNormalArrayWorks()",
                    line: "133"
                } ));
                t.Fixture.setNormalArrayWorks();
            },
            setNormalArrayWithOffsetWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int8ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int8ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "SetNormalArrayWithOffsetWorks()",
                    line: "141"
                } ));
                t.Fixture.setNormalArrayWithOffsetWorks();
            },
            subarrayWithBeginWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int8ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int8ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "SubarrayWithBeginWorks()",
                    line: "149"
                } ));
                t.Fixture.subarrayWithBeginWorks();
            },
            subarrayWithBeginAndEndWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int8ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int8ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "SubarrayWithBeginAndEndWorks()",
                    line: "159"
                } ));
                t.Fixture.subarrayWithBeginAndEndWorks();
            },
            bufferPropertyWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int8ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int8ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "BufferPropertyWorks()",
                    line: "170"
                } ));
                t.Fixture.bufferPropertyWorks();
            },
            byteOffsetPropertyWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int8ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int8ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ByteOffsetPropertyWorks()",
                    line: "178"
                } ));
                t.Fixture.byteOffsetPropertyWorks();
            },
            byteLengthPropertyWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int8ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int8ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ByteLengthPropertyWorks()",
                    line: "186"
                } ));
                t.Fixture.byteLengthPropertyWorks();
            },
            indexOfWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int8ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int8ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "IndexOfWorks()",
                    line: "193"
                } ));
                t.Fixture.indexOfWorks();
            },
            containsWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int8ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int8ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ContainsWorks()",
                    line: "202"
                } ));
                t.Fixture.containsWorks();
            },
            foreachWorks_SPI_1401: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int8ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int8ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ForeachWorks_SPI_1401()",
                    line: "211"
                } ));
                t.Fixture.foreachWorks_SPI_1401();
            },
            getEnumeratorWorks_SPI_1401: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int8ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int8ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "GetEnumeratorWorks_SPI_1401()",
                    line: "225"
                } ));
                t.Fixture.getEnumeratorWorks_SPI_1401();
            },
            iEnumerableGetEnumeratorWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int8ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int8ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "IEnumerableGetEnumeratorWorks()",
                    line: "239"
                } ));
                t.Fixture.iEnumerableGetEnumeratorWorks();
            },
            iCollectionMethodsWork_SPI_1559: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int8ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int8ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ICollectionMethodsWork_SPI_1559()",
                    line: "252"
                } ));
                t.Fixture.iCollectionMethodsWork_SPI_1559();
            },
            iListMethodsWork_SPI_1559: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int8ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int8ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "IListMethodsWork_SPI_1559()",
                    line: "265"
                } ));
                t.Fixture.iListMethodsWork_SPI_1559();
            },
            iListIsReadOnlyWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int8ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int8ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "IListIsReadOnlyWorks()",
                    line: "298"
                } ));
                t.Fixture.iListIsReadOnlyWorks();
            },
            iCollectionIsReadOnlyWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int8ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int8ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ICollectionIsReadOnlyWorks()",
                    line: "305"
                } ));
                t.Fixture.iCollectionIsReadOnlyWorks();
            },
            iCollectionCopyTo: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int8ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int8ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ICollectionCopyTo()",
                    line: "312"
                } ));
                t.Fixture.iCollectionCopyTo();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                    project: "Batch1",
                    className: "Bridge.ClientTest.Collections.Native.Int8ArrayTests",
                    file: "Batch1\\Collections\\Native\\Int8ArrayTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.InvalidCastExceptionTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.InvalidCastExceptionTests)],
        statics: {
            typePropertiesAreCorrect: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.InvalidCastExceptionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.InvalidCastExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TypePropertiesAreCorrect()",
                    line: "10"
                } ));
                t.Fixture.typePropertiesAreCorrect();
            },
            defaultConstructorWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.InvalidCastExceptionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.InvalidCastExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "DefaultConstructorWorks()",
                    line: "19"
                } ));
                t.Fixture.defaultConstructorWorks();
            },
            constructorWithMessageWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.InvalidCastExceptionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.InvalidCastExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ConstructorWithMessageWorks()",
                    line: "28"
                } ));
                t.Fixture.constructorWithMessageWorks();
            },
            constructorWithMessageAndInnerExceptionWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.InvalidCastExceptionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.InvalidCastExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ConstructorWithMessageAndInnerExceptionWorks()",
                    line: "37"
                } ));
                t.Fixture.constructorWithMessageAndInnerExceptionWorks();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                    project: "Batch1",
                    className: "Bridge.ClientTest.Exceptions.InvalidCastExceptionTests",
                    file: "Batch1\\Exceptions\\InvalidCastExceptionTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.InvalidOperationExceptionTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.InvalidOperationExceptionTests)],
        statics: {
            typePropertiesAreCorrect: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.InvalidOperationExceptionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.InvalidOperationExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TypePropertiesAreCorrect()",
                    line: "10"
                } ));
                t.Fixture.typePropertiesAreCorrect();
            },
            defaultConstructorWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.InvalidOperationExceptionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.InvalidOperationExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "DefaultConstructorWorks()",
                    line: "19"
                } ));
                t.Fixture.defaultConstructorWorks();
            },
            constructorWithMessageWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.InvalidOperationExceptionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.InvalidOperationExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ConstructorWithMessageWorks()",
                    line: "28"
                } ));
                t.Fixture.constructorWithMessageWorks();
            },
            constructorWithMessageAndInnerExceptionWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.InvalidOperationExceptionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.InvalidOperationExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ConstructorWithMessageAndInnerExceptionWorks()",
                    line: "37"
                } ));
                t.Fixture.constructorWithMessageAndInnerExceptionWorks();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                    project: "Batch1",
                    className: "Bridge.ClientTest.Exceptions.InvalidOperationExceptionTests",
                    file: "Batch1\\Exceptions\\InvalidOperationExceptionTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.IteratorBlockTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.IteratorBlockTests)],
        statics: {
            typeReturnedByIteratorBlockReturningIEnumeratorImplementsThatInterfaceAndIDisposable: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.IteratorBlockTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.IteratorBlockTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TypeReturnedByIteratorBlockReturningIEnumeratorImplementsThatInterfaceAndIDisposable()",
                    line: "122"
                } ));
                t.Fixture.typeReturnedByIteratorBlockReturningIEnumeratorImplementsThatInterfaceAndIDisposable();
            },
            enumeratingIEnumeratorIteratorToEndWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.IteratorBlockTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.IteratorBlockTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "EnumeratingIEnumeratorIteratorToEndWorks()",
                    line: "129"
                } ));
                t.Fixture.enumeratingIEnumeratorIteratorToEndWorks();
            },
            prematureDisposalOfIEnumeratorIteratorExecutesFinallyBlocks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.IteratorBlockTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.IteratorBlockTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "PrematureDisposalOfIEnumeratorIteratorExecutesFinallyBlocks()",
                    line: "144"
                } ));
                t.Fixture.prematureDisposalOfIEnumeratorIteratorExecutesFinallyBlocks();
            },
            exceptionInIEnumeratorIteratorBodyExecutesFinallyBlocks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.IteratorBlockTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.IteratorBlockTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ExceptionInIEnumeratorIteratorBodyExecutesFinallyBlocks()",
                    line: "162"
                } ));
                t.Fixture.exceptionInIEnumeratorIteratorBodyExecutesFinallyBlocks();
            },
            typeReturnedByIteratorBlockReturningIEnumerableImplementsThatInterface: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.IteratorBlockTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.IteratorBlockTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TypeReturnedByIteratorBlockReturningIEnumerableImplementsThatInterface()",
                    line: "187"
                } ));
                t.Fixture.typeReturnedByIteratorBlockReturningIEnumerableImplementsThatInterface();
            },
            enumeratingIEnumerableIteratorToEndWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.IteratorBlockTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.IteratorBlockTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "EnumeratingIEnumerableIteratorToEndWorks()",
                    line: "194"
                } ));
                t.Fixture.enumeratingIEnumerableIteratorToEndWorks();
            },
            prematureDisposalOfIEnumerableIteratorExecutesFinallyBlocks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.IteratorBlockTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.IteratorBlockTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "PrematureDisposalOfIEnumerableIteratorExecutesFinallyBlocks()",
                    line: "218"
                } ));
                t.Fixture.prematureDisposalOfIEnumerableIteratorExecutesFinallyBlocks();
            },
            exceptionInIEnumerableIteratorBodyExecutesFinallyBlocks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.IteratorBlockTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.IteratorBlockTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ExceptionInIEnumerableIteratorBodyExecutesFinallyBlocks()",
                    line: "237"
                } ));
                t.Fixture.exceptionInIEnumerableIteratorBodyExecutesFinallyBlocks();
            },
            enumeratingAnIteratorBlockReturningIEnumerableMultipleTimesUsesTheInitialValuesForParameters: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.IteratorBlockTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.IteratorBlockTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "EnumeratingAnIteratorBlockReturningIEnumerableMultipleTimesUsesTheInitialValuesForParameters()",
                    line: "264"
                } ));
                t.Fixture.enumeratingAnIteratorBlockReturningIEnumerableMultipleTimesUsesTheInitialValuesForParameters();
            },
            differentGetEnumeratorCallsOnIteratorBlockReturningIEnumerableGetOwnCopiesOfLocals: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.IteratorBlockTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.IteratorBlockTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "DifferentGetEnumeratorCallsOnIteratorBlockReturningIEnumerableGetOwnCopiesOfLocals()",
                    line: "278"
                } ));
                t.Fixture.differentGetEnumeratorCallsOnIteratorBlockReturningIEnumerableGetOwnCopiesOfLocals();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                    project: "Batch1",
                    className: "Bridge.ClientTest.Collections.Generic.IteratorBlockTests",
                    file: "Batch1\\Collections\\Generic\\IteratorBlockTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests)],
        statics: {
            typePropertiesAreCorrect: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TypePropertiesAreCorrect()",
                    line: "11"
                } ));
                t.Fixture.typePropertiesAreCorrect();
            },
            defaultConstructorWorks_SPI_1606: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "DefaultConstructorWorks_SPI_1606()",
                    line: "58"
                } ));
                t.Fixture.defaultConstructorWorks_SPI_1606();
            },
            defaultValueWorks_SPI_1606: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "DefaultValueWorks_SPI_1606()",
                    line: "66"
                } ));
                t.Fixture.defaultValueWorks_SPI_1606();
            },
            creatingInstanceReturnsDateWithZeroValue_SPI_1606: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "CreatingInstanceReturnsDateWithZeroValue_SPI_1606()",
                    line: "74"
                } ));
                t.Fixture.creatingInstanceReturnsDateWithZeroValue_SPI_1606();
            },
            longConstructorWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "LongConstructorWorks()",
                    line: "82"
                } ));
                t.Fixture.longConstructorWorks();
            },
            stringConstructorWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "StringConstructorWorks()",
                    line: "95"
                } ));
                t.Fixture.stringConstructorWorks();
            },
            yMDConstructorWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "YMDConstructorWorks()",
                    line: "102"
                } ));
                t.Fixture.yMDConstructorWorks();
            },
            yMDHConstructorWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "YMDHConstructorWorks()",
                    line: "109"
                } ));
                t.Fixture.yMDHConstructorWorks();
            },
            yMDHNConstructorWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "YMDHNConstructorWorks()",
                    line: "116"
                } ));
                t.Fixture.yMDHNConstructorWorks();
            },
            yMDHNSConstructorWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "YMDHNSConstructorWorks()",
                    line: "123"
                } ));
                t.Fixture.yMDHNSConstructorWorks();
            },
            yMDHNSUConstructorWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "YMDHNSUConstructorWorks()",
                    line: "130"
                } ));
                t.Fixture.yMDHNSUConstructorWorks();
            },
            minWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "MinWorks()",
                    line: "137"
                } ));
                t.Fixture.minWorks();
            },
            maxWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "MaxWorks()",
                    line: "144"
                } ));
                t.Fixture.maxWorks();
            },
            nowWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "NowWorks()",
                    line: "151"
                } ));
                t.Fixture.nowWorks();
            },
            uTCNowWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "UTCNowWorks()",
                    line: "159"
                } ));
                t.Fixture.uTCNowWorks();
            },
            toUniversalWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ToUniversalWorks()",
                    line: "171"
                } ));
                t.Fixture.toUniversalWorks();
            },
            toLocalWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ToLocalWorks()",
                    line: "185"
                } ));
                t.Fixture.toLocalWorks();
            },
            todayWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TodayWorks()",
                    line: "199"
                } ));
                t.Fixture.todayWorks();
            },
            formatWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FormatWorks()",
                    line: "210"
                } ));
                t.Fixture.formatWorks();
            },
            iFormattableToStringWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "IFormattableToStringWorks()",
                    line: "217"
                } ));
                t.Fixture.iFormattableToStringWorks();
            },
            localeFormatWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "LocaleFormatWorks()",
                    line: "225"
                } ));
                t.Fixture.localeFormatWorks();
            },
            getFullYearWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "GetFullYearWorks()",
                    line: "232"
                } ));
                t.Fixture.getFullYearWorks();
            },
            getMonthWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "GetMonthWorks()",
                    line: "239"
                } ));
                t.Fixture.getMonthWorks();
            },
            getDateWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "GetDateWorks()",
                    line: "246"
                } ));
                t.Fixture.getDateWorks();
            },
            getHoursWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "GetHoursWorks()",
                    line: "253"
                } ));
                t.Fixture.getHoursWorks();
            },
            getMinutesWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "GetMinutesWorks()",
                    line: "260"
                } ));
                t.Fixture.getMinutesWorks();
            },
            getSecondsWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "GetSecondsWorks()",
                    line: "267"
                } ));
                t.Fixture.getSecondsWorks();
            },
            getMillisecondsWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "GetMillisecondsWorks()",
                    line: "274"
                } ));
                t.Fixture.getMillisecondsWorks();
            },
            getDayWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "GetDayWorks()",
                    line: "281"
                } ));
                t.Fixture.getDayWorks();
            },
            getTimeWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "GetTimeWorks()",
                    line: "288"
                } ));
                t.Fixture.getTimeWorks();
            },
            valueOfWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ValueOfWorks()",
                    line: "295"
                } ));
                t.Fixture.valueOfWorks();
            },
            ticksWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TicksWorks()",
                    line: "302"
                } ));
                t.Fixture.ticksWorks();
            },
            getUTCFullYearWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "GetUTCFullYearWorks()",
                    line: "323"
                } ));
                t.Fixture.getUTCFullYearWorks();
            },
            getUtcMonthWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "GetUtcMonthWorks()",
                    line: "330"
                } ));
                t.Fixture.getUtcMonthWorks();
            },
            getUTCDateWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "GetUTCDateWorks()",
                    line: "337"
                } ));
                t.Fixture.getUTCDateWorks();
            },
            getUTCHoursWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "GetUTCHoursWorks()",
                    line: "344"
                } ));
                t.Fixture.getUTCHoursWorks();
            },
            getUTCMinutesWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "GetUTCMinutesWorks()",
                    line: "351"
                } ));
                t.Fixture.getUTCMinutesWorks();
            },
            getUTCSecondsWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "GetUTCSecondsWorks()",
                    line: "358"
                } ));
                t.Fixture.getUTCSecondsWorks();
            },
            getUTCMillisecondsWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "GetUTCMillisecondsWorks()",
                    line: "365"
                } ));
                t.Fixture.getUTCMillisecondsWorks();
            },
            getUTCDayWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "GetUTCDayWorks()",
                    line: "372"
                } ));
                t.Fixture.getUTCDayWorks();
            },
            parseWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ParseWorks()",
                    line: "379"
                } ));
                t.Fixture.parseWorks();
            },
            parseExactWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ParseExactWorks()",
                    line: "386"
                } ));
                t.Fixture.parseExactWorks();
            },
            parseExactWithCultureWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ParseExactWithCultureWorks()",
                    line: "393"
                } ));
                t.Fixture.parseExactWithCultureWorks();
            },
            parseExactUTCWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ParseExactUTCWorks()",
                    line: "400"
                } ));
                t.Fixture.parseExactUTCWorks();
            },
            parseExactUTCWithCultureWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ParseExactUTCWithCultureWorks()",
                    line: "410"
                } ));
                t.Fixture.parseExactUTCWithCultureWorks();
            },
            toDateStringWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ToDateStringWorks()",
                    line: "420"
                } ));
                t.Fixture.toDateStringWorks();
            },
            toTimeStringWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ToTimeStringWorks()",
                    line: "428"
                } ));
                t.Fixture.toTimeStringWorks();
            },
            toUTCStringWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ToUTCStringWorks()",
                    line: "436"
                } ));
                t.Fixture.toUTCStringWorks();
            },
            toLocaleDateStringWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ToLocaleDateStringWorks()",
                    line: "444"
                } ));
                t.Fixture.toLocaleDateStringWorks();
            },
            toLocaleTimeStringWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ToLocaleTimeStringWorks()",
                    line: "452"
                } ));
                t.Fixture.toLocaleTimeStringWorks();
            },
            subtractingDatesWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "SubtractingDatesWorks()",
                    line: "471"
                } ));
                t.Fixture.subtractingDatesWorks();
            },
            subtractMethodReturningTimeSpanWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "SubtractMethodReturningTimeSpanWorks()",
                    line: "478"
                } ));
                t.Fixture.subtractMethodReturningTimeSpanWorks();
            },
            dateEqualityWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "DateEqualityWorks()",
                    line: "485"
                } ));
                t.Fixture.dateEqualityWorks();
            },
            dateInequalityWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "DateInequalityWorks()",
                    line: "500"
                } ));
                t.Fixture.dateInequalityWorks();
            },
            dateLessThanWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "DateLessThanWorks()",
                    line: "515"
                } ));
                t.Fixture.dateLessThanWorks();
            },
            dateLessEqualWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "DateLessEqualWorks()",
                    line: "523"
                } ));
                t.Fixture.dateLessEqualWorks();
            },
            dateGreaterThanWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "DateGreaterThanWorks()",
                    line: "531"
                } ));
                t.Fixture.dateGreaterThanWorks();
            },
            dateGreaterEqualWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "DateGreaterEqualWorks()",
                    line: "539"
                } ));
                t.Fixture.dateGreaterEqualWorks();
            },
            getHashCodeWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "GetHashCodeWorks()",
                    line: "688"
                } ));
                t.Fixture.getHashCodeWorks();
            },
            equalsWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "EqualsWorks()",
                    line: "697"
                } ));
                t.Fixture.equalsWorks();
            },
            dateTimeEqualsWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "DateTimeEqualsWorks()",
                    line: "706"
                } ));
                t.Fixture.dateTimeEqualsWorks();
            },
            compareToWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "CompareToWorks()",
                    line: "725"
                } ));
                t.Fixture.compareToWorks();
            },
            dateTimes: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, 1, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "DateTimes()",
                    line: "742"
                } ));
                Bridge.ClientTest.SimpleTypes.JsDateTimeTests.dateTimes();
            },
            createUnixTimestampAndConvertBackToDateTime: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, 11, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "CreateUnixTimestampAndConvertBackToDateTime()",
                    line: "763"
                } ));
                t.Fixture.createUnixTimestampAndConvertBackToDateTime();
            },
            toShortDateStringWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ToShortDateStringWorks()",
                    line: "789"
                } ));
                t.Fixture.toShortDateStringWorks();
            },
            toShortTimeStringWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ToShortTimeStringWorks()",
                    line: "814"
                } ));
                t.Fixture.toShortTimeStringWorks();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                    project: "Batch1",
                    className: "Bridge.ClientTest.SimpleTypes.JsDateTimeTests",
                    file: "Batch1\\SimpleTypes\\DateTimeTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.JsonTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.JsonTests)],
        statics: {
            nonGenericParseWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.JsonTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsonTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "NonGenericParseWorks()",
                    line: "66"
                } ));
                t.Fixture.nonGenericParseWorks();
            },
            genericParseWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.JsonTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsonTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "GenericParseWorks()",
                    line: "75"
                } ));
                t.Fixture.genericParseWorks();
            },
            nonGenericParseWithCallbackWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.JsonTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsonTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "NonGenericParseWithCallbackWorks()",
                    line: "84"
                } ));
                t.Fixture.nonGenericParseWithCallbackWorks();
            },
            genericParseWithCallbackWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.JsonTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsonTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "GenericParseWithCallbackWorks()",
                    line: "93"
                } ));
                t.Fixture.genericParseWithCallbackWorks();
            },
            nonGenericParseWorks3: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.JsonTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsonTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "NonGenericParseWorks3()",
                    line: "102"
                } ));
                t.Fixture.nonGenericParseWorks3();
            },
            genericParseWorks3: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.JsonTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsonTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "GenericParseWorks3()",
                    line: "113"
                } ));
                t.Fixture.genericParseWorks3();
            },
            nonGenericParseWithCallbackWorks3: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.JsonTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsonTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "NonGenericParseWithCallbackWorks3()",
                    line: "124"
                } ));
                t.Fixture.nonGenericParseWithCallbackWorks3();
            },
            genericParseWithCallbackWorks3: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.JsonTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsonTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "GenericParseWithCallbackWorks3()",
                    line: "135"
                } ));
                t.Fixture.genericParseWithCallbackWorks3();
            },
            nonGenericParseWorks4: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.JsonTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsonTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "NonGenericParseWorks4()",
                    line: "146"
                } ));
                t.Fixture.nonGenericParseWorks4();
            },
            genericParseWorks4: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.JsonTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsonTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "GenericParseWorks4()",
                    line: "157"
                } ));
                t.Fixture.genericParseWorks4();
            },
            nonGenericParseWithCallbackWorks4: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.JsonTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsonTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "NonGenericParseWithCallbackWorks4()",
                    line: "168"
                } ));
                t.Fixture.nonGenericParseWithCallbackWorks4();
            },
            genericParseWithCallbackWorks4: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.JsonTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsonTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "GenericParseWithCallbackWorks4()",
                    line: "179"
                } ));
                t.Fixture.genericParseWithCallbackWorks4();
            },
            stringifyWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.JsonTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsonTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "StringifyWorks()",
                    line: "190"
                } ));
                t.Fixture.stringifyWorks();
            },
            stringifyWithSerializableMembersArrayWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.JsonTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsonTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "StringifyWithSerializableMembersArrayWorks()",
                    line: "196"
                } ));
                t.Fixture.stringifyWithSerializableMembersArrayWorks();
            },
            stringifyWithSerializableMembersArrayAndIntentCountWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.JsonTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsonTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "StringifyWithSerializableMembersArrayAndIntentCountWorks()",
                    line: "202"
                } ));
                t.Fixture.stringifyWithSerializableMembersArrayAndIntentCountWorks();
            },
            stringifyWithSerializableMembersArrayAndIntentTextWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.JsonTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsonTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "StringifyWithSerializableMembersArrayAndIntentTextWorks()",
                    line: "208"
                } ));
                t.Fixture.stringifyWithSerializableMembersArrayAndIntentTextWorks();
            },
            stringifyWithCallbackWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.JsonTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsonTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "StringifyWithCallbackWorks()",
                    line: "214"
                } ));
                t.Fixture.stringifyWithCallbackWorks();
            },
            stringifyWithCallbackAndIndentCountWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.JsonTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsonTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "StringifyWithCallbackAndIndentCountWorks()",
                    line: "220"
                } ));
                t.Fixture.stringifyWithCallbackAndIndentCountWorks();
            },
            stringifyWithCallbackAndIndentTextWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.JsonTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsonTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "StringifyWithCallbackAndIndentTextWorks()",
                    line: "226"
                } ));
                t.Fixture.stringifyWithCallbackAndIndentTextWorks();
            },
            stringifyWithSerializableMembersArrayWorks3: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.JsonTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsonTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "StringifyWithSerializableMembersArrayWorks3()",
                    line: "232"
                } ));
                t.Fixture.stringifyWithSerializableMembersArrayWorks3();
            },
            stringifyWithSerializableMembersArrayAndIntentCountWorks3: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.JsonTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsonTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "StringifyWithSerializableMembersArrayAndIntentCountWorks3()",
                    line: "238"
                } ));
                t.Fixture.stringifyWithSerializableMembersArrayAndIntentCountWorks3();
            },
            stringifyWithSerializableMembersArrayAndIntentTextWorks3: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.JsonTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsonTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "StringifyWithSerializableMembersArrayAndIntentTextWorks3()",
                    line: "244"
                } ));
                t.Fixture.stringifyWithSerializableMembersArrayAndIntentTextWorks3();
            },
            stringifyWithCallbackWorks3: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.JsonTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsonTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "StringifyWithCallbackWorks3()",
                    line: "250"
                } ));
                t.Fixture.stringifyWithCallbackWorks3();
            },
            stringifyWithCallbackAndIndentCountWorks3: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.JsonTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsonTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "StringifyWithCallbackAndIndentCountWorks3()",
                    line: "256"
                } ));
                t.Fixture.stringifyWithCallbackAndIndentCountWorks3();
            },
            stringifyWithCallbackAndIndentTextWorks3: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.JsonTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsonTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "StringifyWithCallbackAndIndentTextWorks3()",
                    line: "262"
                } ));
                t.Fixture.stringifyWithCallbackAndIndentTextWorks3();
            },
            stringifyWithSerializableMembersArrayWorks4: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.JsonTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsonTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "StringifyWithSerializableMembersArrayWorks4()",
                    line: "268"
                } ));
                t.Fixture.stringifyWithSerializableMembersArrayWorks4();
            },
            stringifyWithSerializableMembersArrayAndIntentCountWorks4: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.JsonTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsonTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "StringifyWithSerializableMembersArrayAndIntentCountWorks4()",
                    line: "274"
                } ));
                t.Fixture.stringifyWithSerializableMembersArrayAndIntentCountWorks4();
            },
            stringifyWithSerializableMembersArrayAndIntentTextWorks4: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.JsonTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsonTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "StringifyWithSerializableMembersArrayAndIntentTextWorks4()",
                    line: "280"
                } ));
                t.Fixture.stringifyWithSerializableMembersArrayAndIntentTextWorks4();
            },
            stringifyWithCallbackWorks4: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.JsonTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsonTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "StringifyWithCallbackWorks4()",
                    line: "286"
                } ));
                t.Fixture.stringifyWithCallbackWorks4();
            },
            stringifyWithCallbackAndIndentCountWorks4: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.JsonTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsonTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "StringifyWithCallbackAndIndentCountWorks4()",
                    line: "292"
                } ));
                t.Fixture.stringifyWithCallbackAndIndentCountWorks4();
            },
            stringifyWithCallbackAndIndentTextWorks4: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.JsonTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsonTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "StringifyWithCallbackAndIndentTextWorks4()",
                    line: "298"
                } ));
                t.Fixture.stringifyWithCallbackAndIndentTextWorks4();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                    project: "Batch1",
                    className: "Bridge.ClientTest.JsonTests",
                    file: "Batch1\\Serialization\\JsonTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.JsStringTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsStringTests)],
        statics: {
            charAtWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsStringTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsStringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "CharAtWorks()",
                    line: "11"
                } ));
                t.Fixture.charAtWorks();
            },
            charCodeAtWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsStringTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsStringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "CharCodeAtWorks()",
                    line: "17"
                } ));
                t.Fixture.charCodeAtWorks();
            },
            fromCharCodeWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsStringTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsStringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromCharCodeWorks()",
                    line: "23"
                } ));
                t.Fixture.fromCharCodeWorks();
            },
            localeCompareWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsStringTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsStringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "LocaleCompareWorks()",
                    line: "33"
                } ));
                t.Fixture.localeCompareWorks();
            },
            sliceWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsStringTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsStringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "SliceWorks()",
                    line: "42"
                } ));
                t.Fixture.sliceWorks();
            },
            splitWithCharWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsStringTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsStringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "SplitWithCharWorks()",
                    line: "66"
                } ));
                t.Fixture.splitWithCharWorks();
            },
            splitWithLimitWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsStringTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsStringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "SplitWithLimitWorks()",
                    line: "72"
                } ));
                t.Fixture.splitWithLimitWorks();
            },
            splitWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsStringTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsStringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "SplitWorks()",
                    line: "78"
                } ));
                t.Fixture.splitWorks();
            },
            splitWithCharAndLimitWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsStringTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsStringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "SplitWithCharAndLimitWorks()",
                    line: "84"
                } ));
                t.Fixture.splitWithCharAndLimitWorks();
            },
            splitWithStringWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsStringTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsStringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "SplitWithStringWorks()",
                    line: "91"
                } ));
                t.Fixture.splitWithStringWorks();
            },
            jsSplitWithStringAndLimitWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsStringTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsStringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "JsSplitWithStringAndLimitWorks()",
                    line: "99"
                } ));
                t.Fixture.jsSplitWithStringAndLimitWorks();
            },
            substrWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsStringTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsStringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "SubstrWorks()",
                    line: "106"
                } ));
                t.Fixture.substrWorks();
            },
            javaScriptSubstringWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsStringTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsStringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "JavaScriptSubstringWorks()",
                    line: "133"
                } ));
                t.Fixture.javaScriptSubstringWorks();
            },
            strings: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsStringTests).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsStringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "Strings()",
                    line: "159"
                } ));
                Bridge.ClientTest.SimpleTypes.JsStringTests.strings();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                    project: "Batch1",
                    className: "Bridge.ClientTest.SimpleTypes.JsStringTests",
                    file: "Batch1\\SimpleTypes\\JsStringTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.KeyNotFoundExceptionTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.KeyNotFoundExceptionTests)],
        statics: {
            typePropertiesAreCorrect: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.KeyNotFoundExceptionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.KeyNotFoundExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TypePropertiesAreCorrect()",
                    line: "11"
                } ));
                t.Fixture.typePropertiesAreCorrect();
            },
            defaultConstructorWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.KeyNotFoundExceptionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.KeyNotFoundExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "DefaultConstructorWorks()",
                    line: "20"
                } ));
                t.Fixture.defaultConstructorWorks();
            },
            constructorWithMessageWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.KeyNotFoundExceptionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.KeyNotFoundExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ConstructorWithMessageWorks()",
                    line: "29"
                } ));
                t.Fixture.constructorWithMessageWorks();
            },
            constructorWithMessageAndInnerExceptionWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.KeyNotFoundExceptionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.KeyNotFoundExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ConstructorWithMessageAndInnerExceptionWorks()",
                    line: "38"
                } ));
                t.Fixture.constructorWithMessageAndInnerExceptionWorks();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                    project: "Batch1",
                    className: "Bridge.ClientTest.Exceptions.KeyNotFoundExceptionTests",
                    file: "Batch1\\Exceptions\\KeyNotFoundExceptionTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.ListTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ListTests)],
        statics: {
            typePropertiesAreCorrect: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ListTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ListTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TypePropertiesAreCorrect()",
                    line: "33"
                } ));
                t.Fixture.typePropertiesAreCorrect();
            },
            defaultConstructorWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ListTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ListTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "DefaultConstructorWorks()",
                    line: "46"
                } ));
                t.Fixture.defaultConstructorWorks();
            },
            constructorWithCapacityWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ListTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ListTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ConstructorWithCapacityWorks()",
                    line: "53"
                } ));
                t.Fixture.constructorWithCapacityWorks();
            },
            constructingFromArrayWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ListTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ListTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ConstructingFromArrayWorks()",
                    line: "60"
                } ));
                t.Fixture.constructingFromArrayWorks();
            },
            constructingFromListWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ListTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ListTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ConstructingFromListWorks()",
                    line: "69"
                } ));
                t.Fixture.constructingFromListWorks();
            },
            constructingFromIEnumerableWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ListTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ListTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ConstructingFromIEnumerableWorks()",
                    line: "78"
                } ));
                t.Fixture.constructingFromIEnumerableWorks();
            },
            countWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ListTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ListTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "CountWorks()",
                    line: "87"
                } ));
                t.Fixture.countWorks();
            },
            indexingWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ListTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ListTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "IndexingWorks()",
                    line: "95"
                } ));
                t.Fixture.indexingWorks();
            },
            foreachWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ListTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ListTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ForeachWorks()",
                    line: "102"
                } ));
                t.Fixture.foreachWorks();
            },
            getEnumeratorWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ListTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ListTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "GetEnumeratorWorks()",
                    line: "113"
                } ));
                t.Fixture.getEnumeratorWorks();
            },
            addWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ListTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ListTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "AddWorks()",
                    line: "124"
                } ));
                t.Fixture.addWorks();
            },
            addRangeWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ListTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ListTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "AddRangeWorks()",
                    line: "132"
                } ));
                t.Fixture.addRangeWorks();
            },
            binarySearch1Works: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ListTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ListTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "BinarySearch1Works()",
                    line: "140"
                } ));
                t.Fixture.binarySearch1Works();
            },
            binarySearch2Works: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ListTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ListTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "BinarySearch2Works()",
                    line: "149"
                } ));
                t.Fixture.binarySearch2Works();
            },
            binarySearch3Works: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ListTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ListTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "BinarySearch3Works()",
                    line: "166"
                } ));
                t.Fixture.binarySearch3Works();
            },
            binarySearch4Works: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ListTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ListTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "BinarySearch4Works()",
                    line: "175"
                } ));
                t.Fixture.binarySearch4Works();
            },
            clearWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ListTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ListTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ClearWorks()",
                    line: "184"
                } ));
                t.Fixture.clearWorks();
            },
            containsWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ListTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ListTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ContainsWorks()",
                    line: "192"
                } ));
                t.Fixture.containsWorks();
            },
            containsUsesEqualsMethod: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ListTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ListTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ContainsUsesEqualsMethod()",
                    line: "200"
                } ));
                t.Fixture.containsUsesEqualsMethod();
            },
            copyToMethodSameBound: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ListTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ListTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "CopyToMethodSameBound()",
                    line: "208"
                } ));
                t.Fixture.copyToMethodSameBound();
            },
            copyToMethodOffsetBound: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ListTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ListTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "CopyToMethodOffsetBound()",
                    line: "221"
                } ));
                t.Fixture.copyToMethodOffsetBound();
            },
            copyToMethodIllegalBound: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ListTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ListTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "CopyToMethodIllegalBound()",
                    line: "236"
                } ));
                t.Fixture.copyToMethodIllegalBound();
            },
            sliceWithoutEndWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ListTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ListTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "SliceWithoutEndWorks()",
                    line: "252"
                } ));
                t.Fixture.sliceWithoutEndWorks();
            },
            sliceWithEndWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ListTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ListTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "SliceWithEndWorks()",
                    line: "258"
                } ));
                t.Fixture.sliceWithEndWorks();
            },
            foreachWithListItemCallbackWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ListTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ListTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ForeachWithListItemCallbackWorks()",
                    line: "264"
                } ));
                t.Fixture.foreachWithListItemCallbackWorks();
            },
            foreachWithListCallbackWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ListTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ListTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ForeachWithListCallbackWorks()",
                    line: "272"
                } ));
                t.Fixture.foreachWithListCallbackWorks();
            },
            indexOfWithoutStartIndexWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ListTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ListTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "IndexOfWithoutStartIndexWorks()",
                    line: "280"
                } ));
                t.Fixture.indexOfWithoutStartIndexWorks();
            },
            indexOfWithoutStartIndexUsesEqualsMethod: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ListTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ListTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "IndexOfWithoutStartIndexUsesEqualsMethod()",
                    line: "286"
                } ));
                t.Fixture.indexOfWithoutStartIndexUsesEqualsMethod();
            },
            indexOfWithStartIndexWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ListTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ListTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "IndexOfWithStartIndexWorks()",
                    line: "294"
                } ));
                t.Fixture.indexOfWithStartIndexWorks();
            },
            indexOfWithStartIndexUsesEqualsMethod: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ListTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ListTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "IndexOfWithStartIndexUsesEqualsMethod()",
                    line: "300"
                } ));
                t.Fixture.indexOfWithStartIndexUsesEqualsMethod();
            },
            insertWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ListTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ListTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "InsertWorks()",
                    line: "306"
                } ));
                t.Fixture.insertWorks();
            },
            insertRangeWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ListTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ListTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "InsertRangeWorks()",
                    line: "314"
                } ));
                t.Fixture.insertRangeWorks();
            },
            joinWithoutDelimiterWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ListTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ListTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "JoinWithoutDelimiterWorks()",
                    line: "326"
                } ));
                t.Fixture.joinWithoutDelimiterWorks();
            },
            joinWithDelimiterWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ListTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ListTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "JoinWithDelimiterWorks()",
                    line: "332"
                } ));
                t.Fixture.joinWithDelimiterWorks();
            },
            removeWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ListTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ListTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "RemoveWorks()",
                    line: "338"
                } ));
                t.Fixture.removeWorks();
            },
            removeReturnsFalseIfTheElementWasNotFound: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ListTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ListTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "RemoveReturnsFalseIfTheElementWasNotFound()",
                    line: "346"
                } ));
                t.Fixture.removeReturnsFalseIfTheElementWasNotFound();
            },
            removeCanRemoveNullItem: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ListTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ListTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "RemoveCanRemoveNullItem()",
                    line: "354"
                } ));
                t.Fixture.removeCanRemoveNullItem();
            },
            removeUsesEqualsMethod: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ListTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ListTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "RemoveUsesEqualsMethod()",
                    line: "362"
                } ));
                t.Fixture.removeUsesEqualsMethod();
            },
            removeAtWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ListTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ListTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "RemoveAtWorks()",
                    line: "372"
                } ));
                t.Fixture.removeAtWorks();
            },
            removeRangeWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ListTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ListTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "RemoveRangeWorks()",
                    line: "380"
                } ));
                t.Fixture.removeRangeWorks();
            },
            reverseWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ListTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ListTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ReverseWorks()",
                    line: "388"
                } ));
                t.Fixture.reverseWorks();
            },
            sortWithDefaultCompareWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ListTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ListTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "SortWithDefaultCompareWorks()",
                    line: "396"
                } ));
                t.Fixture.sortWithDefaultCompareWorks();
            },
            sortWithCompareCallbackWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ListTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ListTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "SortWithCompareCallbackWorks()",
                    line: "404"
                } ));
                t.Fixture.sortWithCompareCallbackWorks();
            },
            sortWithIComparerWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ListTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ListTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "SortWithIComparerWorks()",
                    line: "412"
                } ));
                t.Fixture.sortWithIComparerWorks();
            },
            foreachWhenCastToIEnumerableWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ListTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ListTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ForeachWhenCastToIEnumerableWorks()",
                    line: "420"
                } ));
                t.Fixture.foreachWhenCastToIEnumerableWorks();
            },
            iEnumerableGetEnumeratorWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ListTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ListTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "IEnumerableGetEnumeratorWorks()",
                    line: "432"
                } ));
                t.Fixture.iEnumerableGetEnumeratorWorks();
            },
            iCollectionCountWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ListTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ListTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ICollectionCountWorks()",
                    line: "444"
                } ));
                t.Fixture.iCollectionCountWorks();
            },
            iCollectionAddWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ListTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ListTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ICollectionAddWorks()",
                    line: "451"
                } ));
                t.Fixture.iCollectionAddWorks();
            },
            iCollectionClearWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ListTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ListTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ICollectionClearWorks()",
                    line: "459"
                } ));
                t.Fixture.iCollectionClearWorks();
            },
            iCollectionContainsWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ListTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ListTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ICollectionContainsWorks()",
                    line: "467"
                } ));
                t.Fixture.iCollectionContainsWorks();
            },
            iCollectionContainsUsesEqualsMethod: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ListTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ListTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ICollectionContainsUsesEqualsMethod()",
                    line: "475"
                } ));
                t.Fixture.iCollectionContainsUsesEqualsMethod();
            },
            iCollectionRemoveWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ListTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ListTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ICollectionRemoveWorks()",
                    line: "483"
                } ));
                t.Fixture.iCollectionRemoveWorks();
            },
            iCollectionRemoveCanRemoveNullItem: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ListTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ListTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ICollectionRemoveCanRemoveNullItem()",
                    line: "494"
                } ));
                t.Fixture.iCollectionRemoveCanRemoveNullItem();
            },
            iCollectionRemoveUsesEqualsMethod: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ListTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ListTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ICollectionRemoveUsesEqualsMethod()",
                    line: "502"
                } ));
                t.Fixture.iCollectionRemoveUsesEqualsMethod();
            },
            iListIndexingWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ListTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ListTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "IListIndexingWorks()",
                    line: "512"
                } ));
                t.Fixture.iListIndexingWorks();
            },
            iListIndexOfWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ListTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ListTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "IListIndexOfWorks()",
                    line: "521"
                } ));
                t.Fixture.iListIndexOfWorks();
            },
            iListIndexOfUsesEqualsMethod: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ListTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ListTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "IListIndexOfUsesEqualsMethod()",
                    line: "529"
                } ));
                t.Fixture.iListIndexOfUsesEqualsMethod();
            },
            iListInsertWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ListTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ListTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "IListInsertWorks()",
                    line: "537"
                } ));
                t.Fixture.iListInsertWorks();
            },
            iListRemoveAtWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ListTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ListTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "IListRemoveAtWorks()",
                    line: "545"
                } ));
                t.Fixture.iListRemoveAtWorks();
            },
            toArrayWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ListTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ListTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ToArrayWorks()",
                    line: "553"
                } ));
                t.Fixture.toArrayWorks();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                    project: "Batch1",
                    className: "Bridge.ClientTest.Collections.Generic.ListTests",
                    file: "Batch1\\Collections\\Generic\\ListTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.MathTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MathTests)],
        statics: {
            constantsWork: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MathTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MathTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ConstantsWork()",
                    line: "30"
                } ));
                t.Fixture.constantsWork();
            },
            absOfDoubleWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MathTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MathTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "AbsOfDoubleWorks()",
                    line: "43"
                } ));
                t.Fixture.absOfDoubleWorks();
            },
            absOfIntWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MathTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MathTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "AbsOfIntWorks()",
                    line: "49"
                } ));
                t.Fixture.absOfIntWorks();
            },
            absOfLongWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MathTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MathTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "AbsOfLongWorks()",
                    line: "55"
                } ));
                t.Fixture.absOfLongWorks();
            },
            absOfSbyteWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MathTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MathTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "AbsOfSbyteWorks()",
                    line: "61"
                } ));
                t.Fixture.absOfSbyteWorks();
            },
            absOfShortWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MathTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MathTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "AbsOfShortWorks()",
                    line: "67"
                } ));
                t.Fixture.absOfShortWorks();
            },
            absOfFloatWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MathTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MathTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "AbsOfFloatWorks()",
                    line: "73"
                } ));
                t.Fixture.absOfFloatWorks();
            },
            absOfDecimalWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MathTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MathTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "AbsOfDecimalWorks()",
                    line: "79"
                } ));
                t.Fixture.absOfDecimalWorks();
            },
            acosWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MathTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MathTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "AcosWorks()",
                    line: "85"
                } ));
                t.Fixture.acosWorks();
            },
            asinWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MathTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MathTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "AsinWorks()",
                    line: "91"
                } ));
                t.Fixture.asinWorks();
            },
            atanWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MathTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MathTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "AtanWorks()",
                    line: "97"
                } ));
                t.Fixture.atanWorks();
            },
            atan2Works: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MathTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MathTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "Atan2Works()",
                    line: "103"
                } ));
                t.Fixture.atan2Works();
            },
            cosWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MathTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MathTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "CosWorks()",
                    line: "109"
                } ));
                t.Fixture.cosWorks();
            },
            divRemWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MathTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MathTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "DivRemWorks()",
                    line: "115"
                } ));
                t.Fixture.divRemWorks();
            },
            expWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MathTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MathTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ExpWorks()",
                    line: "138"
                } ));
                t.Fixture.expWorks();
            },
            floorOfDoubleWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MathTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MathTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FloorOfDoubleWorks()",
                    line: "144"
                } ));
                t.Fixture.floorOfDoubleWorks();
            },
            floorOfDecimalWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MathTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MathTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FloorOfDecimalWorks()",
                    line: "151"
                } ));
                t.Fixture.floorOfDecimalWorks();
            },
            logWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MathTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MathTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "LogWorks()",
                    line: "158"
                } ));
                t.Fixture.logWorks();
            },
            maxOfByteWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MathTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MathTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "MaxOfByteWorks()",
                    line: "164"
                } ));
                t.Fixture.maxOfByteWorks();
            },
            maxOfDecimalWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MathTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MathTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "MaxOfDecimalWorks()",
                    line: "171"
                } ));
                t.Fixture.maxOfDecimalWorks();
            },
            maxOfDoubleWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MathTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MathTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "MaxOfDoubleWorks()",
                    line: "178"
                } ));
                t.Fixture.maxOfDoubleWorks();
            },
            maxOfShortWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MathTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MathTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "MaxOfShortWorks()",
                    line: "185"
                } ));
                t.Fixture.maxOfShortWorks();
            },
            maxOfIntWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MathTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MathTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "MaxOfIntWorks()",
                    line: "192"
                } ));
                t.Fixture.maxOfIntWorks();
            },
            maxOfLongWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MathTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MathTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "MaxOfLongWorks()",
                    line: "199"
                } ));
                t.Fixture.maxOfLongWorks();
            },
            maxOfSByteWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MathTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MathTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "MaxOfSByteWorks()",
                    line: "206"
                } ));
                t.Fixture.maxOfSByteWorks();
            },
            maxOfFloatWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MathTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MathTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "MaxOfFloatWorks()",
                    line: "213"
                } ));
                t.Fixture.maxOfFloatWorks();
            },
            maxOfUShortWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MathTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MathTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "MaxOfUShortWorks()",
                    line: "220"
                } ));
                t.Fixture.maxOfUShortWorks();
            },
            maxOfUIntWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MathTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MathTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "MaxOfUIntWorks()",
                    line: "227"
                } ));
                t.Fixture.maxOfUIntWorks();
            },
            maxOfULongWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MathTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MathTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "MaxOfULongWorks()",
                    line: "234"
                } ));
                t.Fixture.maxOfULongWorks();
            },
            minOfByteWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MathTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MathTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "MinOfByteWorks()",
                    line: "241"
                } ));
                t.Fixture.minOfByteWorks();
            },
            minOfDecimalWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MathTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MathTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "MinOfDecimalWorks()",
                    line: "248"
                } ));
                t.Fixture.minOfDecimalWorks();
            },
            minOfDoubleWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MathTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MathTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "MinOfDoubleWorks()",
                    line: "255"
                } ));
                t.Fixture.minOfDoubleWorks();
            },
            minOfShortWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MathTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MathTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "MinOfShortWorks()",
                    line: "262"
                } ));
                t.Fixture.minOfShortWorks();
            },
            minOfIntWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MathTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MathTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "MinOfIntWorks()",
                    line: "269"
                } ));
                t.Fixture.minOfIntWorks();
            },
            minOfLongWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MathTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MathTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "MinOfLongWorks()",
                    line: "276"
                } ));
                t.Fixture.minOfLongWorks();
            },
            minOfSByteWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MathTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MathTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "MinOfSByteWorks()",
                    line: "283"
                } ));
                t.Fixture.minOfSByteWorks();
            },
            minOfFloatWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MathTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MathTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "MinOfFloatWorks()",
                    line: "290"
                } ));
                t.Fixture.minOfFloatWorks();
            },
            minOfUShortWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MathTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MathTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "MinOfUShortWorks()",
                    line: "297"
                } ));
                t.Fixture.minOfUShortWorks();
            },
            minOfUIntWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MathTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MathTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "MinOfUIntWorks()",
                    line: "304"
                } ));
                t.Fixture.minOfUIntWorks();
            },
            minOfULongWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MathTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MathTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "MinOfULongWorks()",
                    line: "311"
                } ));
                t.Fixture.minOfULongWorks();
            },
            powWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MathTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MathTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "PowWorks()",
                    line: "318"
                } ));
                t.Fixture.powWorks();
            },
            randomWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MathTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MathTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "RandomWorks()",
                    line: "327"
                } ));
                t.Fixture.randomWorks();
            },
            roundOfDoubleWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MathTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MathTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "RoundOfDoubleWorks()",
                    line: "338"
                } ));
                t.Fixture.roundOfDoubleWorks();
            },
            roundDecimalWithModeWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MathTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MathTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "RoundDecimalWithModeWorks()",
                    line: "349"
                } ));
                t.Fixture.roundDecimalWithModeWorks();
            },
            roundDecimalWithPrecisionAndModeWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MathTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MathTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "RoundDecimalWithPrecisionAndModeWorks()",
                    line: "423"
                } ));
                t.Fixture.roundDecimalWithPrecisionAndModeWorks();
            },
            roundDoubleWithModeWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MathTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MathTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "RoundDoubleWithModeWorks()",
                    line: "497"
                } ));
                t.Fixture.roundDoubleWithModeWorks();
            },
            roundDoubleWithPrecisionAndModeWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MathTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MathTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "RoundDoubleWithPrecisionAndModeWorks()",
                    line: "571"
                } ));
                t.Fixture.roundDoubleWithPrecisionAndModeWorks();
            },
            jsRoundWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MathTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MathTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "JsRoundWorks()",
                    line: "645"
                } ));
                t.Fixture.jsRoundWorks();
            },
            iEEERemainderWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MathTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MathTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "IEEERemainderWorks()",
                    line: "656"
                } ));
                t.Fixture.iEEERemainderWorks();
            },
            sinWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MathTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MathTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "SinWorks()",
                    line: "666"
                } ));
                t.Fixture.sinWorks();
            },
            sqrtWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MathTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MathTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "SqrtWorks()",
                    line: "672"
                } ));
                t.Fixture.sqrtWorks();
            },
            tanWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MathTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MathTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TanWorks()",
                    line: "678"
                } ));
                t.Fixture.tanWorks();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                    project: "Batch1",
                    className: "Bridge.ClientTest.MathTests",
                    file: "Batch1\\MathTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.MixinTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MixinTests)],
        statics: {
            testGlobalMethods: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MixinTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MixinTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TestGlobalMethods()",
                    line: "18"
                } ));
                t.Fixture.testGlobalMethods();
            },
            testMixin: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MixinTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MixinTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TestMixin()",
                    line: "32"
                } ));
                t.Fixture.testMixin();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                    project: "Batch1",
                    className: "Bridge.ClientTest.MixinTests",
                    file: "Batch1\\MixinTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.MultidimArrayTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MultidimArrayTests)],
        statics: {
            typePropertiesAreCorrect: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MultidimArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MultidimArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TypePropertiesAreCorrect()",
                    line: "12"
                } ));
                t.Fixture.typePropertiesAreCorrect();
            },
            lengthWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MultidimArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MultidimArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "LengthWorks()",
                    line: "21"
                } ));
                t.Fixture.lengthWorks();
            },
            getValueWorksForUninitializedElement: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MultidimArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MultidimArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "GetValueWorksForUninitializedElement()",
                    line: "28"
                } ));
                t.Fixture.getValueWorksForUninitializedElement();
            },
            getValueByIndexWorksForUninitializedElement: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MultidimArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MultidimArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "GetValueByIndexWorksForUninitializedElement()",
                    line: "35"
                } ));
                t.Fixture.getValueByIndexWorksForUninitializedElement();
            },
            settingValueByIndexWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MultidimArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MultidimArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "SettingValueByIndexWorks()",
                    line: "42"
                } ));
                t.Fixture.settingValueByIndexWorks();
            },
            setValueWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MultidimArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MultidimArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "SetValueWorks()",
                    line: "60"
                } ));
                t.Fixture.setValueWorks();
            },
            getValueWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MultidimArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MultidimArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "GetValueWorks()",
                    line: "92"
                } ));
                t.Fixture.getValueWorks();
            },
            gettingValueByIndexWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MultidimArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MultidimArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "GettingValueByIndexWorks()",
                    line: "104"
                } ));
                t.Fixture.gettingValueByIndexWorks();
            },
            getLengthWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MultidimArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MultidimArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "GetLengthWorks()",
                    line: "116"
                } ));
                t.Fixture.getLengthWorks();
            },
            getLowerBoundWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MultidimArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MultidimArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "GetLowerBoundWorks()",
                    line: "125"
                } ));
                t.Fixture.getLowerBoundWorks();
            },
            getUpperBoundWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MultidimArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MultidimArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "GetUpperBoundWorks()",
                    line: "134"
                } ));
                t.Fixture.getUpperBoundWorks();
            },
            foreachWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MultidimArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MultidimArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ForeachWorks()",
                    line: "143"
                } ));
                t.Fixture.foreachWorks();
            },
            rankWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MultidimArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MultidimArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "RankWorks()",
                    line: "155"
                } ));
                t.Fixture.rankWorks();
            },
            getValueWithIndexOutOfRangeThrowsAnException: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MultidimArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MultidimArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "GetValueWithIndexOutOfRangeThrowsAnException()",
                    line: "162"
                } ));
                t.Fixture.getValueWithIndexOutOfRangeThrowsAnException();
            },
            setValueWithIndexOutOfRangeThrowsAnException: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MultidimArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MultidimArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "SetValueWithIndexOutOfRangeThrowsAnException()",
                    line: "177"
                } ));
                t.Fixture.setValueWithIndexOutOfRangeThrowsAnException();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                    project: "Batch1",
                    className: "Bridge.ClientTest.MultidimArrayTests",
                    file: "Batch1\\MultidimArrayTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.MutationObserverTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MutationObserverTests)],
        statics: {
            testNewlyAttachedElements: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MutationObserverTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MutationObserverTests, 10, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TestNewlyAttachedElements()",
                    line: "22"
                } ));
                t.Fixture.testNewlyAttachedElements();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                    project: "Batch1",
                    className: "Bridge.ClientTest.MutationObserverTests",
                    file: "Batch1\\MutationObserverTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.NotImplementedExceptionTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.NotImplementedExceptionTests)],
        statics: {
            typePropertiesAreCorrect: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.NotImplementedExceptionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.NotImplementedExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TypePropertiesAreCorrect()",
                    line: "10"
                } ));
                t.Fixture.typePropertiesAreCorrect();
            },
            defaultConstructorWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.NotImplementedExceptionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.NotImplementedExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "DefaultConstructorWorks()",
                    line: "19"
                } ));
                t.Fixture.defaultConstructorWorks();
            },
            constructorWithMessageWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.NotImplementedExceptionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.NotImplementedExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ConstructorWithMessageWorks()",
                    line: "28"
                } ));
                t.Fixture.constructorWithMessageWorks();
            },
            constructorWithMessageAndInnerExceptionWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.NotImplementedExceptionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.NotImplementedExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ConstructorWithMessageAndInnerExceptionWorks()",
                    line: "37"
                } ));
                t.Fixture.constructorWithMessageAndInnerExceptionWorks();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                    project: "Batch1",
                    className: "Bridge.ClientTest.Exceptions.NotImplementedExceptionTests",
                    file: "Batch1\\Exceptions\\NotImplementedExceptionTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.NotSupportedExceptionTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.NotSupportedExceptionTests)],
        statics: {
            typePropertiesAreCorrect: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.NotSupportedExceptionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.NotSupportedExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TypePropertiesAreCorrect()",
                    line: "10"
                } ));
                t.Fixture.typePropertiesAreCorrect();
            },
            defaultConstructorWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.NotSupportedExceptionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.NotSupportedExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "DefaultConstructorWorks()",
                    line: "19"
                } ));
                t.Fixture.defaultConstructorWorks();
            },
            constructorWithMessageWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.NotSupportedExceptionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.NotSupportedExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ConstructorWithMessageWorks()",
                    line: "28"
                } ));
                t.Fixture.constructorWithMessageWorks();
            },
            constructorWithMessageAndInnerExceptionWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.NotSupportedExceptionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.NotSupportedExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ConstructorWithMessageAndInnerExceptionWorks()",
                    line: "37"
                } ));
                t.Fixture.constructorWithMessageAndInnerExceptionWorks();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                    project: "Batch1",
                    className: "Bridge.ClientTest.Exceptions.NotSupportedExceptionTests",
                    file: "Batch1\\Exceptions\\NotSupportedExceptionTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.NullableTests)],
        statics: {
            typePropertiesAreCorrect: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.NullableTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TypePropertiesAreCorrect()",
                    line: "17"
                } ));
                t.Fixture.typePropertiesAreCorrect();
            },
            convertingToNullableWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.NullableTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ConvertingToNullableWorks()",
                    line: "32"
                } ));
                t.Fixture.convertingToNullableWorks();
            },
            hasValueWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.NullableTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "HasValueWorks()",
                    line: "42"
                } ));
                t.Fixture.hasValueWorks();
            },
            boxingWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.NullableTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "BoxingWorks()",
                    line: "50"
                } ));
                t.Fixture.boxingWorks();
            },
            unboxingWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.NullableTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "UnboxingWorks()",
                    line: "58"
                } ));
                t.Fixture.unboxingWorks();
            },
            valueWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.NullableTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ValueWorks()",
                    line: "73"
                } ));
                t.Fixture.valueWorks();
            },
            unboxingValueOfWrongTypeThrowsAnException: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.NullableTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "UnboxingValueOfWrongTypeThrowsAnException()",
                    line: "88"
                } ));
                t.Fixture.unboxingValueOfWrongTypeThrowsAnException();
            },
            getValueOrDefaultWithArgWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.NullableTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "GetValueOrDefaultWithArgWorks()",
                    line: "98"
                } ));
                t.Fixture.getValueOrDefaultWithArgWorks();
            },
            liftedEqualityWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.NullableTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "LiftedEqualityWorks()",
                    line: "106"
                } ));
                t.Fixture.liftedEqualityWorks();
            },
            liftedInequalityWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.NullableTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "LiftedInequalityWorks()",
                    line: "116"
                } ));
                t.Fixture.liftedInequalityWorks();
            },
            liftedLessThanWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.NullableTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "LiftedLessThanWorks()",
                    line: "126"
                } ));
                t.Fixture.liftedLessThanWorks();
            },
            liftedGreaterThanWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.NullableTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "LiftedGreaterThanWorks()",
                    line: "136"
                } ));
                t.Fixture.liftedGreaterThanWorks();
            },
            liftedLessThanOrEqualWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.NullableTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "LiftedLessThanOrEqualWorks()",
                    line: "146"
                } ));
                t.Fixture.liftedLessThanOrEqualWorks();
            },
            liftedGreaterThanOrEqualWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.NullableTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "LiftedGreaterThanOrEqualWorks()",
                    line: "156"
                } ));
                t.Fixture.liftedGreaterThanOrEqualWorks();
            },
            liftedSubtractionWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.NullableTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "LiftedSubtractionWorks()",
                    line: "166"
                } ));
                t.Fixture.liftedSubtractionWorks();
            },
            liftedAdditionWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.NullableTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "LiftedAdditionWorks()",
                    line: "174"
                } ));
                t.Fixture.liftedAdditionWorks();
            },
            liftedModWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.NullableTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "LiftedModWorks()",
                    line: "182"
                } ));
                t.Fixture.liftedModWorks();
            },
            liftedFloatingPointDivisionWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.NullableTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "LiftedFloatingPointDivisionWorks()",
                    line: "190"
                } ));
                t.Fixture.liftedFloatingPointDivisionWorks();
            },
            liftedIntegerDivisionWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.NullableTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "LiftedIntegerDivisionWorks()",
                    line: "198"
                } ));
                t.Fixture.liftedIntegerDivisionWorks();
            },
            liftedMultiplicationWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.NullableTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "LiftedMultiplicationWorks()",
                    line: "206"
                } ));
                t.Fixture.liftedMultiplicationWorks();
            },
            liftedBitwiseAndWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.NullableTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "LiftedBitwiseAndWorks()",
                    line: "214"
                } ));
                t.Fixture.liftedBitwiseAndWorks();
            },
            liftedBitwiseOrWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.NullableTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "LiftedBitwiseOrWorks()",
                    line: "222"
                } ));
                t.Fixture.liftedBitwiseOrWorks();
            },
            liftedBitwiseXorWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.NullableTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "LiftedBitwiseXorWorks()",
                    line: "230"
                } ));
                t.Fixture.liftedBitwiseXorWorks();
            },
            liftedLeftShiftWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.NullableTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "LiftedLeftShiftWorks()",
                    line: "238"
                } ));
                t.Fixture.liftedLeftShiftWorks();
            },
            liftedSignedRightShiftWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.NullableTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "LiftedSignedRightShiftWorks()",
                    line: "246"
                } ));
                t.Fixture.liftedSignedRightShiftWorks();
            },
            liftedUnsignedRightShiftWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.NullableTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "LiftedUnsignedRightShiftWorks()",
                    line: "254"
                } ));
                t.Fixture.liftedUnsignedRightShiftWorks();
            },
            liftedBooleanAndWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.NullableTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "LiftedBooleanAndWorks()",
                    line: "262"
                } ));
                t.Fixture.liftedBooleanAndWorks();
            },
            liftedBooleanOrWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.NullableTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "LiftedBooleanOrWorks()",
                    line: "277"
                } ));
                t.Fixture.liftedBooleanOrWorks();
            },
            liftedBooleanNotWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.NullableTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "LiftedBooleanNotWorks()",
                    line: "292"
                } ));
                t.Fixture.liftedBooleanNotWorks();
            },
            liftedNegationWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.NullableTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "LiftedNegationWorks()",
                    line: "301"
                } ));
                t.Fixture.liftedNegationWorks();
            },
            liftedUnaryPlusWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.NullableTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "LiftedUnaryPlusWorks()",
                    line: "309"
                } ));
                t.Fixture.liftedUnaryPlusWorks();
            },
            liftedOnesComplementWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.NullableTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "LiftedOnesComplementWorks()",
                    line: "317"
                } ));
                t.Fixture.liftedOnesComplementWorks();
            },
            coalesceWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.NullableTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "CoalesceWorks()",
                    line: "325"
                } ));
                t.Fixture.coalesceWorks();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                    project: "Batch1",
                    className: "Bridge.ClientTest.NullableTests",
                    file: "Batch1\\NullableTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.NullReferenceExceptionTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.NullReferenceExceptionTests)],
        statics: {
            typePropertiesAreCorrect: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.NullReferenceExceptionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.NullReferenceExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TypePropertiesAreCorrect()",
                    line: "10"
                } ));
                t.Fixture.typePropertiesAreCorrect();
            },
            defaultConstructorWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.NullReferenceExceptionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.NullReferenceExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "DefaultConstructorWorks()",
                    line: "19"
                } ));
                t.Fixture.defaultConstructorWorks();
            },
            constructorWithMessageWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.NullReferenceExceptionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.NullReferenceExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ConstructorWithMessageWorks()",
                    line: "28"
                } ));
                t.Fixture.constructorWithMessageWorks();
            },
            constructorWithMessageAndInnerExceptionWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.NullReferenceExceptionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.NullReferenceExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ConstructorWithMessageAndInnerExceptionWorks()",
                    line: "37"
                } ));
                t.Fixture.constructorWithMessageAndInnerExceptionWorks();
            },
            accessingAFieldOnANullObjectCausesANullReferenceException: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.NullReferenceExceptionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.NullReferenceExceptionTests, 1, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "AccessingAFieldOnANullObjectCausesANullReferenceException()",
                    line: "47"
                } ));
                t.Fixture.accessingAFieldOnANullObjectCausesANullReferenceException();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                    project: "Batch1",
                    className: "Bridge.ClientTest.Exceptions.NullReferenceExceptionTests",
                    file: "Batch1\\Exceptions\\NullReferenceExceptionTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.NumberFormatInfoTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Format.NumberFormatInfoTests)],
        statics: {
            typePropertiesAreCorrect: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Format.NumberFormatInfoTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.NumberFormatInfoTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TypePropertiesAreCorrect()",
                    line: "11"
                } ));
                t.Fixture.typePropertiesAreCorrect();
            },
            getFormatWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Format.NumberFormatInfoTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.NumberFormatInfoTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "GetFormatWorks()",
                    line: "19"
                } ));
                t.Fixture.getFormatWorks();
            },
            invariantWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Format.NumberFormatInfoTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.NumberFormatInfoTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "InvariantWorks()",
                    line: "27"
                } ));
                t.Fixture.invariantWorks();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                    project: "Batch1",
                    className: "Bridge.ClientTest.Format.NumberFormatInfoTests",
                    file: "Batch1\\Format\\NumberFormatInfoTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.NumberFormatSpecifiersTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Format.NumberFormatSpecifiersTests)],
        statics: {
            currencyFormatSpecifierWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Format.NumberFormatSpecifiersTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.NumberFormatSpecifiersTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "CurrencyFormatSpecifierWorks()",
                    line: "12"
                } ));
                t.Fixture.currencyFormatSpecifierWorks();
            },
            decimalFormatSpecifierWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Format.NumberFormatSpecifiersTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.NumberFormatSpecifiersTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "DecimalFormatSpecifierWorks()",
                    line: "22"
                } ));
                t.Fixture.decimalFormatSpecifierWorks();
            },
            exponentialFormatSpecifierWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Format.NumberFormatSpecifiersTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.NumberFormatSpecifiersTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ExponentialFormatSpecifierWorks()",
                    line: "33"
                } ));
                t.Fixture.exponentialFormatSpecifierWorks();
            },
            fixedPointFormatSpecifierWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Format.NumberFormatSpecifiersTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.NumberFormatSpecifiersTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FixedPointFormatSpecifierWorks()",
                    line: "43"
                } ));
                t.Fixture.fixedPointFormatSpecifierWorks();
            },
            generalFormatSpecifierWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Format.NumberFormatSpecifiersTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.NumberFormatSpecifiersTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "GeneralFormatSpecifierWorks()",
                    line: "61"
                } ));
                t.Fixture.generalFormatSpecifierWorks();
            },
            numericFormatSpecifierWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Format.NumberFormatSpecifiersTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.NumberFormatSpecifiersTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "NumericFormatSpecifierWorks()",
                    line: "83"
                } ));
                t.Fixture.numericFormatSpecifierWorks();
            },
            percentFormatSpecifierWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Format.NumberFormatSpecifiersTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.NumberFormatSpecifiersTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "PercentFormatSpecifierWorks()",
                    line: "94"
                } ));
                t.Fixture.percentFormatSpecifierWorks();
            },
            roundTripFormatSpecifierWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Format.NumberFormatSpecifiersTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.NumberFormatSpecifiersTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "RoundTripFormatSpecifierWorks()",
                    line: "103"
                } ));
                t.Fixture.roundTripFormatSpecifierWorks();
            },
            hexadecimalFormatSpecifierWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Format.NumberFormatSpecifiersTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.NumberFormatSpecifiersTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "HexadecimalFormatSpecifierWorks()",
                    line: "114"
                } ));
                t.Fixture.hexadecimalFormatSpecifierWorks();
            },
            customZeroFormatSpecifierWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Format.NumberFormatSpecifiersTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.NumberFormatSpecifiersTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "CustomZeroFormatSpecifierWorks()",
                    line: "127"
                } ));
                t.Fixture.customZeroFormatSpecifierWorks();
            },
            customHashFormatSpecifierWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Format.NumberFormatSpecifiersTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.NumberFormatSpecifiersTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "CustomHashFormatSpecifierWorks()",
                    line: "152"
                } ));
                t.Fixture.customHashFormatSpecifierWorks();
            },
            customDotFormatSpecifierWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Format.NumberFormatSpecifiersTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.NumberFormatSpecifiersTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "CustomDotFormatSpecifierWorks()",
                    line: "172"
                } ));
                t.Fixture.customDotFormatSpecifierWorks();
            },
            customCommaFormatSpecifierWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Format.NumberFormatSpecifiersTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.NumberFormatSpecifiersTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "CustomCommaFormatSpecifierWorks()",
                    line: "184"
                } ));
                t.Fixture.customCommaFormatSpecifierWorks();
            },
            customPercentFormatSpecifierWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Format.NumberFormatSpecifiersTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.NumberFormatSpecifiersTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "CustomPercentFormatSpecifierWorks()",
                    line: "197"
                } ));
                t.Fixture.customPercentFormatSpecifierWorks();
            },
            customPerMileFormatSpecifierWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Format.NumberFormatSpecifiersTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.NumberFormatSpecifiersTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "CustomPerMileFormatSpecifierWorks()",
                    line: "204"
                } ));
                t.Fixture.customPerMileFormatSpecifierWorks();
            },
            customEscapeFormatSpecifierWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Format.NumberFormatSpecifiersTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.NumberFormatSpecifiersTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "CustomEscapeFormatSpecifierWorks()",
                    line: "211"
                } ));
                t.Fixture.customEscapeFormatSpecifierWorks();
            },
            customSemicolonFormatSpecifierWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Format.NumberFormatSpecifiersTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.NumberFormatSpecifiersTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "CustomSemicolonFormatSpecifierWorks()",
                    line: "221"
                } ));
                t.Fixture.customSemicolonFormatSpecifierWorks();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                    project: "Batch1",
                    className: "Bridge.ClientTest.Format.NumberFormatSpecifiersTests",
                    file: "Batch1\\Format\\NumberFormatSpecifiersTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.ObjectTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.ObjectTests)],
        statics: {
            typePropertiesAreCorrect: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.ObjectTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ObjectTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TypePropertiesAreCorrect()",
                    line: "19"
                } ));
                t.Fixture.typePropertiesAreCorrect();
            },
            canGetHashCodeForObject: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.ObjectTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ObjectTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "CanGetHashCodeForObject()",
                    line: "26"
                } ));
                t.Fixture.canGetHashCodeForObject();
            },
            repeatedCallsToGetHashCodeReturnsSameValue: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.ObjectTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ObjectTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "RepeatedCallsToGetHashCodeReturnsSameValue()",
                    line: "34"
                } ));
                t.Fixture.repeatedCallsToGetHashCodeReturnsSameValue();
            },
            objectIsEqualToItself: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.ObjectTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ObjectTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ObjectIsEqualToItself()",
                    line: "41"
                } ));
                t.Fixture.objectIsEqualToItself();
            },
            objectIsNotEqualToOtherObject: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.ObjectTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ObjectTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ObjectIsNotEqualToOtherObject()",
                    line: "48"
                } ));
                t.Fixture.objectIsNotEqualToOtherObject();
            },
            staticEqualsWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.ObjectTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ObjectTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "StaticEqualsWorks()",
                    line: "54"
                } ));
                t.Fixture.staticEqualsWorks();
            },
            referenceEqualsWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.ObjectTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ObjectTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ReferenceEqualsWorks()",
                    line: "65"
                } ));
                t.Fixture.referenceEqualsWorks();
            },
            toStringOverride: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.ObjectTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ObjectTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ToStringOverride()",
                    line: "77"
                } ));
                t.Fixture.toStringOverride();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                    project: "Batch1",
                    className: "Bridge.ClientTest.SimpleTypes.ObjectTests",
                    file: "Batch1\\SimpleTypes\\ObjectTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.OperationCanceledExceptionTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.OperationCanceledExceptionTests)],
        statics: {
            typePropertiesAreCorrect: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.OperationCanceledExceptionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.OperationCanceledExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TypePropertiesAreCorrect()",
                    line: "11"
                } ));
                t.Fixture.typePropertiesAreCorrect();
            },
            defaultConstructorWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.OperationCanceledExceptionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.OperationCanceledExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "DefaultConstructorWorks()",
                    line: "20"
                } ));
                t.Fixture.defaultConstructorWorks();
            },
            cancellationTokenOnlyConstructorWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.OperationCanceledExceptionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.OperationCanceledExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "CancellationTokenOnlyConstructorWorks()",
                    line: "30"
                } ));
                t.Fixture.cancellationTokenOnlyConstructorWorks();
            },
            messageOnlyConstructorWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.OperationCanceledExceptionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.OperationCanceledExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "MessageOnlyConstructorWorks()",
                    line: "41"
                } ));
                t.Fixture.messageOnlyConstructorWorks();
            },
            messageAndInnerExceptionConstructorWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.OperationCanceledExceptionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.OperationCanceledExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "MessageAndInnerExceptionConstructorWorks()",
                    line: "51"
                } ));
                t.Fixture.messageAndInnerExceptionConstructorWorks();
            },
            messageAndCancellationTokenConstructorWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.OperationCanceledExceptionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.OperationCanceledExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "MessageAndCancellationTokenConstructorWorks()",
                    line: "62"
                } ));
                t.Fixture.messageAndCancellationTokenConstructorWorks();
            },
            messageAndInnerExceptionAndCancellationTokenConstructorWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.OperationCanceledExceptionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.OperationCanceledExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "MessageAndInnerExceptionAndCancellationTokenConstructorWorks()",
                    line: "73"
                } ));
                t.Fixture.messageAndInnerExceptionAndCancellationTokenConstructorWorks();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                    project: "Batch1",
                    className: "Bridge.ClientTest.Exceptions.OperationCanceledExceptionTests",
                    file: "Batch1\\Exceptions\\OperationCanceledExceptionTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.OutOfMemoryExceptionTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.OutOfMemoryExceptionTests)],
        statics: {
            typePropertiesAreCorrect: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.OutOfMemoryExceptionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.OutOfMemoryExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TypePropertiesAreCorrect()",
                    line: "13"
                } ));
                t.Fixture.typePropertiesAreCorrect();
            },
            defaultConstructorWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.OutOfMemoryExceptionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.OutOfMemoryExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "DefaultConstructorWorks()",
                    line: "23"
                } ));
                t.Fixture.defaultConstructorWorks();
            },
            constructorWithMessageWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.OutOfMemoryExceptionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.OutOfMemoryExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ConstructorWithMessageWorks()",
                    line: "32"
                } ));
                t.Fixture.constructorWithMessageWorks();
            },
            constructorWithMessageAndInnerExceptionWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.OutOfMemoryExceptionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.OutOfMemoryExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ConstructorWithMessageAndInnerExceptionWorks()",
                    line: "41"
                } ));
                t.Fixture.constructorWithMessageAndInnerExceptionWorks();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                    project: "Batch1",
                    className: "Bridge.ClientTest.Exceptions.OutOfMemoryExceptionTests",
                    file: "Batch1\\Exceptions\\OutOfMemoryExceptionTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.OverflowExceptionTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.OverflowExceptionTests)],
        statics: {
            typePropertiesAreCorrect: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.OverflowExceptionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.OverflowExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TypePropertiesAreCorrect()",
                    line: "10"
                } ));
                t.Fixture.typePropertiesAreCorrect();
            },
            defaultConstructorWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.OverflowExceptionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.OverflowExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "DefaultConstructorWorks()",
                    line: "19"
                } ));
                t.Fixture.defaultConstructorWorks();
            },
            constructorWithMessageWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.OverflowExceptionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.OverflowExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ConstructorWithMessageWorks()",
                    line: "28"
                } ));
                t.Fixture.constructorWithMessageWorks();
            },
            constructorWithMessageAndInnerExceptionWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.OverflowExceptionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.OverflowExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ConstructorWithMessageAndInnerExceptionWorks()",
                    line: "37"
                } ));
                t.Fixture.constructorWithMessageAndInnerExceptionWorks();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                    project: "Batch1",
                    className: "Bridge.ClientTest.Exceptions.OverflowExceptionTests",
                    file: "Batch1\\Exceptions\\OverflowExceptionTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.PromiseExceptionTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.PromiseExceptionTests)],
        statics: {
            typePropertiesAreCorrect: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.PromiseExceptionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.PromiseExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TypePropertiesAreCorrect()",
                    line: "11"
                } ));
                t.Fixture.typePropertiesAreCorrect();
            },
            argumentsOnlyConstructorWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.PromiseExceptionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.PromiseExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ArgumentsOnlyConstructorWorks()",
                    line: "20"
                } ));
                t.Fixture.argumentsOnlyConstructorWorks();
            },
            argumentsAndMessageConstructorWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.PromiseExceptionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.PromiseExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ArgumentsAndMessageConstructorWorks()",
                    line: "32"
                } ));
                t.Fixture.argumentsAndMessageConstructorWorks();
            },
            argumentsAndMessageAndInnerExceptionConstructorWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.PromiseExceptionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.PromiseExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ArgumentsAndMessageAndInnerExceptionConstructorWorks()",
                    line: "43"
                } ));
                t.Fixture.argumentsAndMessageAndInnerExceptionConstructorWorks();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                    project: "Batch1",
                    className: "Bridge.ClientTest.Exceptions.PromiseExceptionTests",
                    file: "Batch1\\Exceptions\\PromiseExceptionTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.PromiseTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.PromiseTests)],
        statics: {
            taskFromPromiseWithoutResultFactoryWorksWhenPromiseCompletes: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.PromiseTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.PromiseTests, 7, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TaskFromPromiseWithoutResultFactoryWorksWhenPromiseCompletes()",
                    line: "132"
                } ));
                t.Fixture.taskFromPromiseWithoutResultFactoryWorksWhenPromiseCompletes();
            },
            taskFromPromiseWithResultFactoryWorksWhenPromiseCompletes: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.PromiseTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.PromiseTests, 7, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TaskFromPromiseWithResultFactoryWorksWhenPromiseCompletes()",
                    line: "164"
                } ));
                t.Fixture.taskFromPromiseWithResultFactoryWorksWhenPromiseCompletes();
            },
            taskFromPromiseWorksWhenPromiseFails: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.PromiseTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.PromiseTests, 10, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TaskFromPromiseWorksWhenPromiseFails()",
                    line: "203"
                } ));
                t.Fixture.taskFromPromiseWorksWhenPromiseFails();
            },
            completingPromiseCanBeAwaited: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.PromiseTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.PromiseTests, 3, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "CompletingPromiseCanBeAwaited()",
                    line: "238"
                } ));
                t.Fixture.completingPromiseCanBeAwaited();
            },
            failingPromiseCanBeAwaited: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.PromiseTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.PromiseTests, 4, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FailingPromiseCanBeAwaited()",
                    line: "260"
                } ));
                t.Fixture.failingPromiseCanBeAwaited();
            },
            taskFromPromiseWithProgressWithoutResultFactoryWorksWhenPromiseProgressesAndCompletes: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.PromiseTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.PromiseTests, 9, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TaskFromPromiseWithProgressWithoutResultFactoryWorksWhenPromiseProgressesAndCompletes()",
                    line: "305"
                } ));
                t.Fixture.taskFromPromiseWithProgressWithoutResultFactoryWorksWhenPromiseProgressesAndCompletes();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                    project: "Batch1",
                    className: "Bridge.ClientTest.Threading.PromiseTests",
                    file: "Batch1\\Threading\\Tasks\\PromiseTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.PropertyAccessorTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.PropertyAccessorTests)],
        statics: {
            accessorsCanBeInvokedInstance: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.PropertyAccessorTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.PropertyAccessorTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "AccessorsCanBeInvokedInstance()",
                    line: "69"
                } ));
                t.Fixture.accessorsCanBeInvokedInstance();
            },
            accessorsCanBeInvokedStatic: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.PropertyAccessorTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.PropertyAccessorTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "AccessorsCanBeInvokedStatic()",
                    line: "87"
                } ));
                t.Fixture.accessorsCanBeInvokedStatic();
            },
            accessorsCanBeInvokedGeneric: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.PropertyAccessorTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.PropertyAccessorTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "AccessorsCanBeInvokedGeneric()",
                    line: "103"
                } ));
                t.Fixture.accessorsCanBeInvokedGeneric();
            },
            accessorsCanBeInvokedGenericStatic: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.PropertyAccessorTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.PropertyAccessorTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "AccessorsCanBeInvokedGenericStatic()",
                    line: "121"
                } ));
                t.Fixture.accessorsCanBeInvokedGenericStatic();
            },
            baseAccessorsCanBeInvoked: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.PropertyAccessorTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.PropertyAccessorTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "BaseAccessorsCanBeInvoked()",
                    line: "137"
                } ));
                t.Fixture.baseAccessorsCanBeInvoked();
            },
            baseAccessorsCanBeInvokedGeneric: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.PropertyAccessorTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.PropertyAccessorTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "BaseAccessorsCanBeInvokedGeneric()",
                    line: "155"
                } ));
                t.Fixture.baseAccessorsCanBeInvokedGeneric();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                    project: "Batch1",
                    className: "Bridge.ClientTest.PropertyAccessorTests",
                    file: "Batch1\\PropertyAccessorTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.RandomTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.RandomTests)],
        statics: {
            unseeded: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.RandomTests).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RandomTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "Unseeded()",
                    line: "13"
                } ));
                Bridge.ClientTest.RandomTests.unseeded();
            },
            seeded: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.RandomTests).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RandomTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "Seeded()",
                    line: "37"
                } ));
                Bridge.ClientTest.RandomTests.seeded();
            },
            sample: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.RandomTests).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RandomTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "Sample()",
                    line: "65"
                } ));
                Bridge.ClientTest.RandomTests.sample();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                    project: "Batch1",
                    className: "Bridge.ClientTest.RandomTests",
                    file: "Batch1\\RandomTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.RankExceptionTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.RankExceptionTests)],
        statics: {
            typePropertiesAreCorrect: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.RankExceptionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RankExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TypePropertiesAreCorrect()",
                    line: "12"
                } ));
                t.Fixture.typePropertiesAreCorrect();
            },
            defaultConstructorWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.RankExceptionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RankExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "DefaultConstructorWorks()",
                    line: "21"
                } ));
                t.Fixture.defaultConstructorWorks();
            },
            constructorWithMessageWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.RankExceptionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RankExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ConstructorWithMessageWorks()",
                    line: "30"
                } ));
                t.Fixture.constructorWithMessageWorks();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                    project: "Batch1",
                    className: "Bridge.ClientTest.Exceptions.RankExceptionTests",
                    file: "Batch1\\Exceptions\\RankExceptionTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.ReadOnlyCollectionTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ReadOnlyCollectionTests)],
        statics: {
            typePropertiesAreCorrect: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ReadOnlyCollectionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReadOnlyCollectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TypePropertiesAreCorrect()",
                    line: "32"
                } ));
                t.Fixture.typePropertiesAreCorrect();
            },
            constructorWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ReadOnlyCollectionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReadOnlyCollectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ConstructorWorks()",
                    line: "44"
                } ));
                t.Fixture.constructorWorks();
            },
            countWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ReadOnlyCollectionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReadOnlyCollectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "CountWorks()",
                    line: "54"
                } ));
                t.Fixture.countWorks();
            },
            indexingWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ReadOnlyCollectionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReadOnlyCollectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "IndexingWorks()",
                    line: "62"
                } ));
                t.Fixture.indexingWorks();
            },
            foreachWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ReadOnlyCollectionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReadOnlyCollectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ForeachWorks()",
                    line: "70"
                } ));
                t.Fixture.foreachWorks();
            },
            getEnumeratorWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ReadOnlyCollectionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReadOnlyCollectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "GetEnumeratorWorks()",
                    line: "81"
                } ));
                t.Fixture.getEnumeratorWorks();
            },
            containsWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ReadOnlyCollectionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReadOnlyCollectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ContainsWorks()",
                    line: "92"
                } ));
                t.Fixture.containsWorks();
            },
            containsUsesEqualsMethod: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ReadOnlyCollectionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReadOnlyCollectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ContainsUsesEqualsMethod()",
                    line: "100"
                } ));
                t.Fixture.containsUsesEqualsMethod();
            },
            copyToMethodSameBound: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ReadOnlyCollectionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReadOnlyCollectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "CopyToMethodSameBound()",
                    line: "108"
                } ));
                t.Fixture.copyToMethodSameBound();
            },
            copyToMethodOffsetBound: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ReadOnlyCollectionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReadOnlyCollectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "CopyToMethodOffsetBound()",
                    line: "121"
                } ));
                t.Fixture.copyToMethodOffsetBound();
            },
            copyToMethodIllegalBound: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ReadOnlyCollectionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReadOnlyCollectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "CopyToMethodIllegalBound()",
                    line: "136"
                } ));
                t.Fixture.copyToMethodIllegalBound();
            },
            copyToMethodWhenCastToIListSameBound: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ReadOnlyCollectionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReadOnlyCollectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "CopyToMethodWhenCastToIListSameBound()",
                    line: "152"
                } ));
                t.Fixture.copyToMethodWhenCastToIListSameBound();
            },
            copyToMethodWhenCastToIListOffsetBound: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ReadOnlyCollectionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReadOnlyCollectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "CopyToMethodWhenCastToIListOffsetBound()",
                    line: "165"
                } ));
                t.Fixture.copyToMethodWhenCastToIListOffsetBound();
            },
            copyToMethodWhenCastToIListIllegalBound: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ReadOnlyCollectionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReadOnlyCollectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "CopyToMethodWhenCastToIListIllegalBound()",
                    line: "180"
                } ));
                t.Fixture.copyToMethodWhenCastToIListIllegalBound();
            },
            copyToMethodWhenCastToICollectionSameBound: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ReadOnlyCollectionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReadOnlyCollectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "CopyToMethodWhenCastToICollectionSameBound()",
                    line: "196"
                } ));
                t.Fixture.copyToMethodWhenCastToICollectionSameBound();
            },
            copyToMethodWhenCastToICollectionOffsetBound: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ReadOnlyCollectionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReadOnlyCollectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "CopyToMethodWhenCastToICollectionOffsetBound()",
                    line: "209"
                } ));
                t.Fixture.copyToMethodWhenCastToICollectionOffsetBound();
            },
            copyToMethodWhenCastToICollectionIllegalBound: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ReadOnlyCollectionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReadOnlyCollectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "CopyToMethodWhenCastToICollectionIllegalBound()",
                    line: "224"
                } ));
                t.Fixture.copyToMethodWhenCastToICollectionIllegalBound();
            },
            indexOfWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ReadOnlyCollectionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReadOnlyCollectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "IndexOfWorks()",
                    line: "240"
                } ));
                t.Fixture.indexOfWorks();
            },
            foreachWhenCastToIEnumerableWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ReadOnlyCollectionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReadOnlyCollectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ForeachWhenCastToIEnumerableWorks()",
                    line: "247"
                } ));
                t.Fixture.foreachWhenCastToIEnumerableWorks();
            },
            iEnumerableGetEnumeratorWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ReadOnlyCollectionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReadOnlyCollectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "IEnumerableGetEnumeratorWorks()",
                    line: "259"
                } ));
                t.Fixture.iEnumerableGetEnumeratorWorks();
            },
            iCollectionCountWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ReadOnlyCollectionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReadOnlyCollectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ICollectionCountWorks()",
                    line: "271"
                } ));
                t.Fixture.iCollectionCountWorks();
            },
            iCollectionIsReadOnlyWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ReadOnlyCollectionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReadOnlyCollectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ICollectionIsReadOnlyWorks()",
                    line: "278"
                } ));
                t.Fixture.iCollectionIsReadOnlyWorks();
            },
            iCollectionContainsWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ReadOnlyCollectionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReadOnlyCollectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ICollectionContainsWorks()",
                    line: "285"
                } ));
                t.Fixture.iCollectionContainsWorks();
            },
            iCollectionContainsUsesEqualsMethod: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ReadOnlyCollectionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReadOnlyCollectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ICollectionContainsUsesEqualsMethod()",
                    line: "293"
                } ));
                t.Fixture.iCollectionContainsUsesEqualsMethod();
            },
            iListIndexingWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ReadOnlyCollectionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReadOnlyCollectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "IListIndexingWorks()",
                    line: "301"
                } ));
                t.Fixture.iListIndexingWorks();
            },
            iListIndexOfWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ReadOnlyCollectionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReadOnlyCollectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "IListIndexOfWorks()",
                    line: "308"
                } ));
                t.Fixture.iListIndexOfWorks();
            },
            iListIndexOfUsesEqualsMethod: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ReadOnlyCollectionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReadOnlyCollectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "IListIndexOfUsesEqualsMethod()",
                    line: "316"
                } ));
                t.Fixture.iListIndexOfUsesEqualsMethod();
            },
            iListIsReadOnlyWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ReadOnlyCollectionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReadOnlyCollectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "IListIsReadOnlyWorks()",
                    line: "324"
                } ));
                t.Fixture.iListIsReadOnlyWorks();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                    project: "Batch1",
                    className: "Bridge.ClientTest.Collections.Generic.ReadOnlyCollectionTests",
                    file: "Batch1\\Collections\\ObjectModel\\ReadOnlyCollectionTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests)],
        statics: {
            getMembersReturnsMethodsWithAnyScriptableAttributeOrReflectableAttribute: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "GetMembersReturnsMethodsWithAnyScriptableAttributeOrReflectableAttribute()",
                    line: "694"
                } ));
                t.Fixture.getMembersReturnsMethodsWithAnyScriptableAttributeOrReflectableAttribute();
            },
            structMemberReflectionWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "StructMemberReflectionWorks()",
                    line: "703"
                } ));
                t.Fixture.structMemberReflectionWorks();
            },
            isStaticFlagWorksForMethod: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "IsStaticFlagWorksForMethod()",
                    line: "712"
                } ));
                t.Fixture.isStaticFlagWorksForMethod();
            },
            memberTypeIsMethodForMethod: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "MemberTypeIsMethodForMethod()",
                    line: "719"
                } ));
                t.Fixture.memberTypeIsMethodForMethod();
            },
            isConstructorIsFalseForMethod: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "IsConstructorIsFalseForMethod()",
                    line: "726"
                } ));
                t.Fixture.isConstructorIsFalseForMethod();
            },
            isConstructorIsTrueForAllKindsOfConstructors: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "IsConstructorIsTrueForAllKindsOfConstructors()",
                    line: "733"
                } ));
                t.Fixture.isConstructorIsTrueForAllKindsOfConstructors();
            },
            isStaticIsFalseForAllKindsOfConstructors: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "IsStaticIsFalseForAllKindsOfConstructors()",
                    line: "747"
                } ));
                t.Fixture.isStaticIsFalseForAllKindsOfConstructors();
            },
            memberTypeIsConstructorForAllKindsOfConstructors: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "MemberTypeIsConstructorForAllKindsOfConstructors()",
                    line: "761"
                } ));
                t.Fixture.memberTypeIsConstructorForAllKindsOfConstructors();
            },
            nameIsCtorForAllKindsOfConstructors: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "NameIsCtorForAllKindsOfConstructors()",
                    line: "775"
                } ));
                t.Fixture.nameIsCtorForAllKindsOfConstructors();
            },
            declaringTypeIsCorrectForAllKindsOfConstructors: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "DeclaringTypeIsCorrectForAllKindsOfConstructors()",
                    line: "789"
                } ));
                t.Fixture.declaringTypeIsCorrectForAllKindsOfConstructors();
            },
            scriptNameIsCorrectForAllKindsOfConstructors: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ScriptNameIsCorrectForAllKindsOfConstructors()",
                    line: "803"
                } ));
                t.Fixture.scriptNameIsCorrectForAllKindsOfConstructors();
            },
            isStaticMethodIsTrueOnlyForStaticMethodConstructors: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "IsStaticMethodIsTrueOnlyForStaticMethodConstructors()",
                    line: "817"
                } ));
                t.Fixture.isStaticMethodIsTrueOnlyForStaticMethodConstructors();
            },
            isExpandParamsIsCorrectForConstructors: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "IsExpandParamsIsCorrectForConstructors()",
                    line: "831"
                } ));
                t.Fixture.isExpandParamsIsCorrectForConstructors();
            },
            specialImplementationExistsOnlyForObjectLiteralAndInlineCodeConstructors: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "SpecialImplementationExistsOnlyForObjectLiteralAndInlineCodeConstructors()",
                    line: "844"
                } ));
                t.Fixture.specialImplementationExistsOnlyForObjectLiteralAndInlineCodeConstructors();
            },
            declaringTypeShouldBeCorrectForMethods: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "DeclaringTypeShouldBeCorrectForMethods()",
                    line: "858"
                } ));
                t.Fixture.declaringTypeShouldBeCorrectForMethods();
            },
            returnTypeAndParameterTypesAreCorrectForMethods: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ReturnTypeAndParameterTypesAreCorrectForMethods()",
                    line: "866"
                } ));
                t.Fixture.returnTypeAndParameterTypesAreCorrectForMethods();
            },
            parameterTypesShouldBeCorrectForConstructors: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ParameterTypesShouldBeCorrectForConstructors()",
                    line: "889"
                } ));
                t.Fixture.parameterTypesShouldBeCorrectForConstructors();
            },
            voidIsConsideredObjectAsReturnType: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "VoidIsConsideredObjectAsReturnType()",
                    line: "903"
                } ));
                t.Fixture.voidIsConsideredObjectAsReturnType();
            },
            methodNameIsTheCSharpName: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "MethodNameIsTheCSharpName()",
                    line: "909"
                } ));
                t.Fixture.methodNameIsTheCSharpName();
            },
            typeParametersAreReplacedWithObjectForReturnAndParameterTypesForOpenGenericTypes: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TypeParametersAreReplacedWithObjectForReturnAndParameterTypesForOpenGenericTypes()",
                    line: "916"
                } ));
                t.Fixture.typeParametersAreReplacedWithObjectForReturnAndParameterTypesForOpenGenericTypes();
            },
            typeParametersAreCorrectForReturnAndParameterTypesForConstructedGenericTypes: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TypeParametersAreCorrectForReturnAndParameterTypesForConstructedGenericTypes()",
                    line: "924"
                } ));
                t.Fixture.typeParametersAreCorrectForReturnAndParameterTypesForConstructedGenericTypes();
            },
            methodTypeParametersAreReplacedWithObjectForReturnAndParameterTypes: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "MethodTypeParametersAreReplacedWithObjectForReturnAndParameterTypes()",
                    line: "936"
                } ));
                t.Fixture.methodTypeParametersAreReplacedWithObjectForReturnAndParameterTypes();
            },
            isGenericMethodDefinitionAndTypeParameterCountWork: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "IsGenericMethodDefinitionAndTypeParameterCountWork()",
                    line: "944"
                } ));
                t.Fixture.isGenericMethodDefinitionAndTypeParameterCountWork();
            },
            scriptNameWorksForAllKindsOfMethods: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ScriptNameWorksForAllKindsOfMethods()",
                    line: "955"
                } ));
                t.Fixture.scriptNameWorksForAllKindsOfMethods();
            },
            specialImplementationExistsOnlyForMethodsImplementedAsInlineCode: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "SpecialImplementationExistsOnlyForMethodsImplementedAsInlineCode()",
                    line: "969"
                } ));
                t.Fixture.specialImplementationExistsOnlyForMethodsImplementedAsInlineCode();
            },
            isExpandParamsIsCorrectForMethods: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "IsExpandParamsIsCorrectForMethods()",
                    line: "977"
                } ));
                t.Fixture.isExpandParamsIsCorrectForMethods();
            },
            createDelegateWorksForNonGenericInstanceMethods: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "CreateDelegateWorksForNonGenericInstanceMethods()",
                    line: "990"
                } ));
                t.Fixture.createDelegateWorksForNonGenericInstanceMethods();
            },
            delegateCreateDelegateWorksForNonGenericInstanceMethods: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "DelegateCreateDelegateWorksForNonGenericInstanceMethods()",
                    line: "1008"
                } ));
                t.Fixture.delegateCreateDelegateWorksForNonGenericInstanceMethods();
            },
            createDelegateWorksNonGenericStaticMethods: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "CreateDelegateWorksNonGenericStaticMethods()",
                    line: "1016"
                } ));
                t.Fixture.createDelegateWorksNonGenericStaticMethods();
            },
            createDelegateWorksNonGenericStaticMethodOfGenericType: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "CreateDelegateWorksNonGenericStaticMethodOfGenericType()",
                    line: "1035"
                } ));
                t.Fixture.createDelegateWorksNonGenericStaticMethodOfGenericType();
            },
            createDelegateWorksForGenericInstanceMethods: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "CreateDelegateWorksForGenericInstanceMethods()",
                    line: "1043"
                } ));
                t.Fixture.createDelegateWorksForGenericInstanceMethods();
            },
            createDelegateWorksForGenericStaticMethods: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "CreateDelegateWorksForGenericStaticMethods()",
                    line: "1057"
                } ));
                t.Fixture.createDelegateWorksForGenericStaticMethods();
            },
            invokeWorksForNonGenericInstanceMethods: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "InvokeWorksForNonGenericInstanceMethods()",
                    line: "1070"
                } ));
                t.Fixture.invokeWorksForNonGenericInstanceMethods();
            },
            invokeWorksForNonGenericStaticMethods: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "InvokeWorksForNonGenericStaticMethods()",
                    line: "1083"
                } ));
                t.Fixture.invokeWorksForNonGenericStaticMethods();
            },
            invokeWorksForNonGenericInstanceMethodsOnSerializableTypes: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "InvokeWorksForNonGenericInstanceMethodsOnSerializableTypes()",
                    line: "1093"
                } ));
                t.Fixture.invokeWorksForNonGenericInstanceMethodsOnSerializableTypes();
            },
            invokeWorksForNonGenericInlineCodeMethods: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "InvokeWorksForNonGenericInlineCodeMethods()",
                    line: "1100"
                } ));
                t.Fixture.invokeWorksForNonGenericInlineCodeMethods();
            },
            invokeWorksForGenericInlineCodeMethods: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "InvokeWorksForGenericInlineCodeMethods()",
                    line: "1107"
                } ));
                t.Fixture.invokeWorksForGenericInlineCodeMethods();
            },
            invokeWorksForGenericInstanceMethod: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "InvokeWorksForGenericInstanceMethod()",
                    line: "1114"
                } ));
                t.Fixture.invokeWorksForGenericInstanceMethod();
            },
            invokeWorksForGenericStaticMethod: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "InvokeWorksForGenericStaticMethod()",
                    line: "1129"
                } ));
                t.Fixture.invokeWorksForGenericStaticMethod();
            },
            invokeWorksForGenericInstanceMethodsOnSerializableTypes: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "InvokeWorksForGenericInstanceMethodsOnSerializableTypes()",
                    line: "1141"
                } ));
                t.Fixture.invokeWorksForGenericInstanceMethodsOnSerializableTypes();
            },
            invokeWorksForExpandParamsMethods: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "InvokeWorksForExpandParamsMethods()",
                    line: "1148"
                } ));
                t.Fixture.invokeWorksForExpandParamsMethods();
            },
            invokeWorksForAllKindsOfConstructors: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "InvokeWorksForAllKindsOfConstructors()",
                    line: "1160"
                } ));
                t.Fixture.invokeWorksForAllKindsOfConstructors();
            },
            invokeWorksForExpandParamsConstructors: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "InvokeWorksForExpandParamsConstructors()",
                    line: "1186"
                } ));
                t.Fixture.invokeWorksForExpandParamsConstructors();
            },
            memberTypeIsFieldForField: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "MemberTypeIsFieldForField()",
                    line: "1200"
                } ));
                t.Fixture.memberTypeIsFieldForField();
            },
            declaringTypeIsCorrectForField: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "DeclaringTypeIsCorrectForField()",
                    line: "1207"
                } ));
                t.Fixture.declaringTypeIsCorrectForField();
            },
            nameIsCorrectForField: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "NameIsCorrectForField()",
                    line: "1214"
                } ));
                t.Fixture.nameIsCorrectForField();
            },
            isStaticIsCorrectForField: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "IsStaticIsCorrectForField()",
                    line: "1221"
                } ));
                t.Fixture.isStaticIsCorrectForField();
            },
            fieldTypeIsCorrectForField: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FieldTypeIsCorrectForField()",
                    line: "1229"
                } ));
                t.Fixture.fieldTypeIsCorrectForField();
            },
            scriptNameIsCorrectForField: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ScriptNameIsCorrectForField()",
                    line: "1237"
                } ));
                t.Fixture.scriptNameIsCorrectForField();
            },
            getValueWorksForInstanceField: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "GetValueWorksForInstanceField()",
                    line: "1244"
                } ));
                t.Fixture.getValueWorksForInstanceField();
            },
            getValueWorksForStaticField: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "GetValueWorksForStaticField()",
                    line: "1251"
                } ));
                t.Fixture.getValueWorksForStaticField();
            },
            setValueWorksForInstanceField: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "SetValueWorksForInstanceField()",
                    line: "1258"
                } ));
                t.Fixture.setValueWorksForInstanceField();
            },
            setValueWorksForStaticField: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "SetValueWorksForStaticField()",
                    line: "1266"
                } ));
                t.Fixture.setValueWorksForStaticField();
            },
            memberTypeIsEventForEvent: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "MemberTypeIsEventForEvent()",
                    line: "1273"
                } ));
                t.Fixture.memberTypeIsEventForEvent();
            },
            declaringTypeIsCorrectForEvent: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "DeclaringTypeIsCorrectForEvent()",
                    line: "1280"
                } ));
                t.Fixture.declaringTypeIsCorrectForEvent();
            },
            nameIsCorrectForEvent: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "NameIsCorrectForEvent()",
                    line: "1287"
                } ));
                t.Fixture.nameIsCorrectForEvent();
            },
            isStaticIsCorrectForEvent: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "IsStaticIsCorrectForEvent()",
                    line: "1294"
                } ));
                t.Fixture.isStaticIsCorrectForEvent();
            },
            addEventHandlerMethodWorksForInstanceEvent: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "AddEventHandlerMethodWorksForInstanceEvent()",
                    line: "1301"
                } ));
                t.Fixture.addEventHandlerMethodWorksForInstanceEvent();
            },
            addEventHandlerMethodWorksForInstanceEventWithInlineCodeAddMethod: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "AddEventHandlerMethodWorksForInstanceEventWithInlineCodeAddMethod()",
                    line: "1313"
                } ));
                t.Fixture.addEventHandlerMethodWorksForInstanceEventWithInlineCodeAddMethod();
            },
            addEventHandlerMethodWorksForStaticEvent: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "AddEventHandlerMethodWorksForStaticEvent()",
                    line: "1324"
                } ));
                t.Fixture.addEventHandlerMethodWorksForStaticEvent();
            },
            addEventHandlerMethodWorksForStaticEventWithInlineCodeAddMethod: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "AddEventHandlerMethodWorksForStaticEventWithInlineCodeAddMethod()",
                    line: "1335"
                } ));
                t.Fixture.addEventHandlerMethodWorksForStaticEventWithInlineCodeAddMethod();
            },
            removeEventHandlerMethodWorksForInstanceEvent: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "RemoveEventHandlerMethodWorksForInstanceEvent()",
                    line: "1345"
                } ));
                t.Fixture.removeEventHandlerMethodWorksForInstanceEvent();
            },
            removeEventHandlerMethodWorksForInstanceEventWithInlineCodeRemoveMethod: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "RemoveEventHandlerMethodWorksForInstanceEventWithInlineCodeRemoveMethod()",
                    line: "1360"
                } ));
                t.Fixture.removeEventHandlerMethodWorksForInstanceEventWithInlineCodeRemoveMethod();
            },
            removeEventHandlerMethodWorksForStaticEvent: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "RemoveEventHandlerMethodWorksForStaticEvent()",
                    line: "1372"
                } ));
                t.Fixture.removeEventHandlerMethodWorksForStaticEvent();
            },
            removeEventHandlerMethodWorksForStaticEventWithInlineCodeRemoveMethod: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "RemoveEventHandlerMethodWorksForStaticEventWithInlineCodeRemoveMethod()",
                    line: "1386"
                } ));
                t.Fixture.removeEventHandlerMethodWorksForStaticEventWithInlineCodeRemoveMethod();
            },
            propertiesForAddMethodAreCorrect: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "PropertiesForAddMethodAreCorrect()",
                    line: "1397"
                } ));
                t.Fixture.propertiesForAddMethodAreCorrect();
            },
            propertiesForRemoveMethodAreCorrect: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "PropertiesForRemoveMethodAreCorrect()",
                    line: "1434"
                } ));
                t.Fixture.propertiesForRemoveMethodAreCorrect();
            },
            memberTypeIsPropertyForProperty: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "MemberTypeIsPropertyForProperty()",
                    line: "1473"
                } ));
                t.Fixture.memberTypeIsPropertyForProperty();
            },
            scriptFieldNameIsCorrectForPropertiesImplementedAsFieldAndNullForOtherProperties: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ScriptFieldNameIsCorrectForPropertiesImplementedAsFieldAndNullForOtherProperties()",
                    line: "1482"
                } ));
                t.Fixture.scriptFieldNameIsCorrectForPropertiesImplementedAsFieldAndNullForOtherProperties();
            },
            memberTypeIsPropertyForIndexer: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "MemberTypeIsPropertyForIndexer()",
                    line: "1489"
                } ));
                t.Fixture.memberTypeIsPropertyForIndexer();
            },
            declaringTypeIsCorrectForProperty: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "DeclaringTypeIsCorrectForProperty()",
                    line: "1496"
                } ));
                t.Fixture.declaringTypeIsCorrectForProperty();
            },
            declaringTypeIsCorrectForIndexer: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "DeclaringTypeIsCorrectForIndexer()",
                    line: "1505"
                } ));
                t.Fixture.declaringTypeIsCorrectForIndexer();
            },
            nameIsCorrectForProperty: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "NameIsCorrectForProperty()",
                    line: "1512"
                } ));
                t.Fixture.nameIsCorrectForProperty();
            },
            nameIsCorrectForIndexer: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "NameIsCorrectForIndexer()",
                    line: "1521"
                } ));
                t.Fixture.nameIsCorrectForIndexer();
            },
            isStaticIsCorrectForProperty: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "IsStaticIsCorrectForProperty()",
                    line: "1528"
                } ));
                t.Fixture.isStaticIsCorrectForProperty();
            },
            isStaticIsFalseForIndexer: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "IsStaticIsFalseForIndexer()",
                    line: "1537"
                } ));
                t.Fixture.isStaticIsFalseForIndexer();
            },
            propertyTypeIsCorrectForProperty: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "PropertyTypeIsCorrectForProperty()",
                    line: "1544"
                } ));
                t.Fixture.propertyTypeIsCorrectForProperty();
            },
            propertyTypeIsCorrectForIndexer: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "PropertyTypeIsCorrectForIndexer()",
                    line: "1553"
                } ));
                t.Fixture.propertyTypeIsCorrectForIndexer();
            },
            indexParameterTypesAreEmptyForProperty: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "IndexParameterTypesAreEmptyForProperty()",
                    line: "1560"
                } ));
                t.Fixture.indexParameterTypesAreEmptyForProperty();
            },
            indexParameterTypesAreCorrectForIndexer: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "IndexParameterTypesAreCorrectForIndexer()",
                    line: "1569"
                } ));
                t.Fixture.indexParameterTypesAreCorrectForIndexer();
            },
            propertiesForGetMethodAreCorrectForPropertyImplementedAsGetAndSetMethods: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "PropertiesForGetMethodAreCorrectForPropertyImplementedAsGetAndSetMethods()",
                    line: "1576"
                } ));
                t.Fixture.propertiesForGetMethodAreCorrectForPropertyImplementedAsGetAndSetMethods();
            },
            propertiesForSetMethodAreCorrectForPropertyImplementedAsGetAndSetMethods: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "PropertiesForSetMethodAreCorrectForPropertyImplementedAsGetAndSetMethods()",
                    line: "1629"
                } ));
                t.Fixture.propertiesForSetMethodAreCorrectForPropertyImplementedAsGetAndSetMethods();
            },
            propertiesForGetMethodAreCorrectForPropertyImplementedAsFields: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "PropertiesForGetMethodAreCorrectForPropertyImplementedAsFields()",
                    line: "1682"
                } ));
                t.Fixture.propertiesForGetMethodAreCorrectForPropertyImplementedAsFields();
            },
            propertiesForSetMethodAreCorrectForPropertyImplementedAsFields: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "PropertiesForSetMethodAreCorrectForPropertyImplementedAsFields()",
                    line: "1716"
                } ));
                t.Fixture.propertiesForSetMethodAreCorrectForPropertyImplementedAsFields();
            },
            propertiesForGetMethodAreCorrectForIndexer: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "PropertiesForGetMethodAreCorrectForIndexer()",
                    line: "1750"
                } ));
                t.Fixture.propertiesForGetMethodAreCorrectForIndexer();
            },
            propertiesForSetMethodAreCorrectForIndexer: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "PropertiesForSetMethodAreCorrectForIndexer()",
                    line: "1784"
                } ));
                t.Fixture.propertiesForSetMethodAreCorrectForIndexer();
            },
            canReadAndWriteAndPropertiesWithOnlyOneAccessor: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "CanReadAndWriteAndPropertiesWithOnlyOneAccessor()",
                    line: "1824"
                } ));
                t.Fixture.canReadAndWriteAndPropertiesWithOnlyOneAccessor();
            },
            canReadAndWriteAndIndexersWithOnlyOneAccessor: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "CanReadAndWriteAndIndexersWithOnlyOneAccessor()",
                    line: "1878"
                } ));
                t.Fixture.canReadAndWriteAndIndexersWithOnlyOneAccessor();
            },
            propertyInfoGetValueWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "PropertyInfoGetValueWorks()",
                    line: "1896"
                } ));
                t.Fixture.propertyInfoGetValueWorks();
            },
            propertyInfoSetValueWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "PropertyInfoSetValueWorks()",
                    line: "1917"
                } ));
                t.Fixture.propertyInfoSetValueWorks();
            },
            memberAttributesWork: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "MemberAttributesWork()",
                    line: "1972"
                } ));
                t.Fixture.memberAttributesWork();
            },
            membersReflectableAttributeWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "MembersReflectableAttributeWorks()",
                    line: "1988"
                } ));
                t.Fixture.membersReflectableAttributeWorks();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                    project: "Batch1",
                    className: "Bridge.ClientTest.Reflection.ReflectionTests",
                    file: "Batch1\\Reflection\\ReflectionTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexAlternationTests)],
        statics: {
            msdnSimpleAlternationTest1: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexAlternationTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "MsdnSimpleAlternationTest1()",
                    line: "13"
                } ));
                t.Fixture.msdnSimpleAlternationTest1();
            },
            msdnSimpleAlternationTest2: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexAlternationTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "MsdnSimpleAlternationTest2()",
                    line: "25"
                } ));
                t.Fixture.msdnSimpleAlternationTest2();
            },
            msdnSimpleAlternationTest3: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexAlternationTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "MsdnSimpleAlternationTest3()",
                    line: "50"
                } ));
                t.Fixture.msdnSimpleAlternationTest3();
            },
            msdnAlternationExprTest1: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexAlternationTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "MsdnAlternationExprTest1()",
                    line: "81"
                } ));
                t.Fixture.msdnAlternationExprTest1();
            },
            msdnAlternationExprTest2: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexAlternationTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "MsdnAlternationExprTest2()",
                    line: "106"
                } ));
                t.Fixture.msdnAlternationExprTest2();
            },
            msdnAlternationGroupNameExprTest1: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexAlternationTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "MsdnAlternationGroupNameExprTest1()",
                    line: "131"
                } ));
                t.Fixture.msdnAlternationGroupNameExprTest1();
            },
            msdnAlternationGroupNameExprTest2: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexAlternationTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "MsdnAlternationGroupNameExprTest2()",
                    line: "161"
                } ));
                t.Fixture.msdnAlternationGroupNameExprTest2();
            },
            msdnAlternationGroupNumberExprTest: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexAlternationTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "MsdnAlternationGroupNumberExprTest()",
                    line: "191"
                } ));
                t.Fixture.msdnAlternationGroupNumberExprTest();
            },
            simpleAlternationTest: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexAlternationTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "SimpleAlternationTest()",
                    line: "223"
                } ));
                t.Fixture.simpleAlternationTest();
            },
            simpleAlternationTest2: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexAlternationTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "SimpleAlternationTest2()",
                    line: "264"
                } ));
                t.Fixture.simpleAlternationTest2();
            },
            simpleAlternationTest3: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexAlternationTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "SimpleAlternationTest3()",
                    line: "283"
                } ));
                t.Fixture.simpleAlternationTest3();
            },
            alternationWithGroupTest: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexAlternationTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "AlternationWithGroupTest()",
                    line: "325"
                } ));
                t.Fixture.alternationWithGroupTest();
            },
            alternationGroupTest: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexAlternationTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "AlternationGroupTest()",
                    line: "348"
                } ));
                t.Fixture.alternationGroupTest();
            },
            alternationGroupNonCapturingTest: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexAlternationTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "AlternationGroupNonCapturingTest()",
                    line: "362"
                } ));
                t.Fixture.alternationGroupNonCapturingTest();
            },
            alternationGroupPositiveLookaheadTest: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexAlternationTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "AlternationGroupPositiveLookaheadTest()",
                    line: "376"
                } ));
                t.Fixture.alternationGroupPositiveLookaheadTest();
            },
            alternationGroupNegativeLookaheadTest1: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexAlternationTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "AlternationGroupNegativeLookaheadTest1()",
                    line: "390"
                } ));
                t.Fixture.alternationGroupNegativeLookaheadTest1();
            },
            alternationGroupNegativeLookaheadTest2: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexAlternationTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "AlternationGroupNegativeLookaheadTest2()",
                    line: "404"
                } ));
                t.Fixture.alternationGroupNegativeLookaheadTest2();
            },
            alternationGroupPositiveLookbehindTest: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexAlternationTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "AlternationGroupPositiveLookbehindTest()",
                    line: "417"
                } ));
                t.Fixture.alternationGroupPositiveLookbehindTest();
            },
            alternationGroupNegativeLookbehindTest1: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexAlternationTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "AlternationGroupNegativeLookbehindTest1()",
                    line: "431"
                } ));
                t.Fixture.alternationGroupNegativeLookbehindTest1();
            },
            alternationGroupNegativeLookbehindTest2: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexAlternationTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "AlternationGroupNegativeLookbehindTest2()",
                    line: "445"
                } ));
                t.Fixture.alternationGroupNegativeLookbehindTest2();
            },
            alternationGroupNonBacktrackingTest: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexAlternationTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "AlternationGroupNonBacktrackingTest()",
                    line: "459"
                } ));
                t.Fixture.alternationGroupNonBacktrackingTest();
            },
            alternationGroupCommentTest: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexAlternationTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "AlternationGroupCommentTest()",
                    line: "473"
                } ));
                t.Fixture.alternationGroupCommentTest();
            },
            alternationGroupWithNameInConditionTest: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexAlternationTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "AlternationGroupWithNameInConditionTest()",
                    line: "485"
                } ));
                t.Fixture.alternationGroupWithNameInConditionTest();
            },
            alternationGroupWithIncorrectRefTest1: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexAlternationTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "AlternationGroupWithIncorrectRefTest1()",
                    line: "497"
                } ));
                t.Fixture.alternationGroupWithIncorrectRefTest1();
            },
            alternationGroupWithIncorrectRefTest2: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexAlternationTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "AlternationGroupWithIncorrectRefTest2()",
                    line: "509"
                } ));
                t.Fixture.alternationGroupWithIncorrectRefTest2();
            },
            alternationGroupWithImnsxTest1: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexAlternationTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "AlternationGroupWithImnsxTest1()",
                    line: "521"
                } ));
                t.Fixture.alternationGroupWithImnsxTest1();
            },
            alternationGroupWithImnsxTest2: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexAlternationTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "AlternationGroupWithImnsxTest2()",
                    line: "535"
                } ));
                t.Fixture.alternationGroupWithImnsxTest2();
            },
            alternationGroupWithImnsxTest3: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexAlternationTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "AlternationGroupWithImnsxTest3()",
                    line: "548"
                } ));
                t.Fixture.alternationGroupWithImnsxTest3();
            },
            alternationConditionWithGroupTest1: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexAlternationTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "AlternationConditionWithGroupTest1()",
                    line: "562"
                } ));
                t.Fixture.alternationConditionWithGroupTest1();
            },
            alternationConditionWithGroupTest2: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexAlternationTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "AlternationConditionWithGroupTest2()",
                    line: "579"
                } ));
                t.Fixture.alternationConditionWithGroupTest2();
            },
            alternationConditionWithGroupTest3: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexAlternationTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "AlternationConditionWithGroupTest3()",
                    line: "596"
                } ));
                t.Fixture.alternationConditionWithGroupTest3();
            },
            alternationConditionWithGroupTest4: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexAlternationTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "AlternationConditionWithGroupTest4()",
                    line: "615"
                } ));
                t.Fixture.alternationConditionWithGroupTest4();
            },
            alternationConditionWithGroupTest5: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexAlternationTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "AlternationConditionWithGroupTest5()",
                    line: "634"
                } ));
                t.Fixture.alternationConditionWithGroupTest5();
            },
            alternationGroupNonCapturingWithGroupTest: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexAlternationTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "AlternationGroupNonCapturingWithGroupTest()",
                    line: "656"
                } ));
                t.Fixture.alternationGroupNonCapturingWithGroupTest();
            },
            alternationGroupPositiveLookaheadWithGroupTest: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexAlternationTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "AlternationGroupPositiveLookaheadWithGroupTest()",
                    line: "672"
                } ));
                t.Fixture.alternationGroupPositiveLookaheadWithGroupTest();
            },
            alternationGroupNegativeLookaheadWithGroupTest: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexAlternationTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "AlternationGroupNegativeLookaheadWithGroupTest()",
                    line: "688"
                } ));
                t.Fixture.alternationGroupNegativeLookaheadWithGroupTest();
            },
            alternationGroupPositiveLookbehindWithGroupTest: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexAlternationTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "AlternationGroupPositiveLookbehindWithGroupTest()",
                    line: "703"
                } ));
                t.Fixture.alternationGroupPositiveLookbehindWithGroupTest();
            },
            alternationGroupNegativeLookbehindWithGroupTest: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexAlternationTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "AlternationGroupNegativeLookbehindWithGroupTest()",
                    line: "719"
                } ));
                t.Fixture.alternationGroupNegativeLookbehindWithGroupTest();
            },
            alternationGroupNonBacktrackingWithGroupTest: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexAlternationTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "AlternationGroupNonBacktrackingWithGroupTest()",
                    line: "735"
                } ));
                t.Fixture.alternationGroupNonBacktrackingWithGroupTest();
            },
            alternationGroupWithImnsxAndGroupTest: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexAlternationTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "AlternationGroupWithImnsxAndGroupTest()",
                    line: "751"
                } ));
                t.Fixture.alternationGroupWithImnsxAndGroupTest();
            },
            alternationGroupWithoutAlternativeBranchTest1: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexAlternationTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "AlternationGroupWithoutAlternativeBranchTest1()",
                    line: "767"
                } ));
                t.Fixture.alternationGroupWithoutAlternativeBranchTest1();
            },
            alternationGroupWithoutAlternativeBranchTest2: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexAlternationTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "AlternationGroupWithoutAlternativeBranchTest2()",
                    line: "802"
                } ));
                t.Fixture.alternationGroupWithoutAlternativeBranchTest2();
            },
            alternationGroupWithoutAlternativeBranchExceptionTest: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexAlternationTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "AlternationGroupWithoutAlternativeBranchExceptionTest()",
                    line: "879"
                } ));
                t.Fixture.alternationGroupWithoutAlternativeBranchExceptionTest();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                    project: "Batch1",
                    className: "Bridge.ClientTest.Text.RegularExpressions.RegexAlternationTests",
                    file: "Batch1\\Text\\RegularExpressions\\RegexAlternationTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.RegexAnchorsTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexAnchorsTests)],
        statics: {
            msdnStartOfStringOrLineTest: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexAnchorsTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexAnchorsTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "MsdnStartOfStringOrLineTest()",
                    line: "14"
                } ));
                t.Fixture.msdnStartOfStringOrLineTest();
            },
            msdnStartOfStringOrLineMultilineModeTest: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexAnchorsTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexAnchorsTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "MsdnStartOfStringOrLineMultilineModeTest()",
                    line: "52"
                } ));
                t.Fixture.msdnStartOfStringOrLineMultilineModeTest();
            },
            msdnEndOfStringOrLineTest1: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexAnchorsTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexAnchorsTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "MsdnEndOfStringOrLineTest1()",
                    line: "97"
                } ));
                t.Fixture.msdnEndOfStringOrLineTest1();
            },
            msdnEndOfStringOrLineTest2: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexAnchorsTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexAnchorsTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "MsdnEndOfStringOrLineTest2()",
                    line: "140"
                } ));
                t.Fixture.msdnEndOfStringOrLineTest2();
            },
            msdnEndOfStringOrLineTest3: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexAnchorsTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexAnchorsTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "MsdnEndOfStringOrLineTest3()",
                    line: "187"
                } ));
                t.Fixture.msdnEndOfStringOrLineTest3();
            },
            msdnEndOfStringOrLineTest4: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexAnchorsTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexAnchorsTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "MsdnEndOfStringOrLineTest4()",
                    line: "231"
                } ));
                t.Fixture.msdnEndOfStringOrLineTest4();
            },
            msdnStartOfStringOnlyTest: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexAnchorsTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexAnchorsTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "MsdnStartOfStringOnlyTest()",
                    line: "283"
                } ));
                t.Fixture.msdnStartOfStringOnlyTest();
            },
            msdnEndOfStringOrNewlineTest: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexAnchorsTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexAnchorsTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "MsdnEndOfStringOrNewlineTest()",
                    line: "324"
                } ));
                t.Fixture.msdnEndOfStringOrNewlineTest();
            },
            msdnEndOfStringOnlyTest: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexAnchorsTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexAnchorsTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "MsdnEndOfStringOnlyTest()",
                    line: "350"
                } ));
                t.Fixture.msdnEndOfStringOnlyTest();
            },
            msdnContiguousMatchesTest: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexAnchorsTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexAnchorsTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "MsdnContiguousMatchesTest()",
                    line: "376"
                } ));
                t.Fixture.msdnContiguousMatchesTest();
            },
            msdnWordBoundaryTest: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexAnchorsTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexAnchorsTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "MsdnWordBoundaryTest()",
                    line: "414"
                } ));
                t.Fixture.msdnWordBoundaryTest();
            },
            msdnNonWordBoundaryTest: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexAnchorsTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexAnchorsTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "MsdnNonWordBoundaryTest()",
                    line: "435"
                } ));
                t.Fixture.msdnNonWordBoundaryTest();
            },
            startAndEndOfStringCustomTest1: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexAnchorsTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexAnchorsTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "StartAndEndOfStringCustomTest1()",
                    line: "459"
                } ));
                t.Fixture.startAndEndOfStringCustomTest1();
            },
            startAndEndOfStringCustomTest2: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexAnchorsTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexAnchorsTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "StartAndEndOfStringCustomTest2()",
                    line: "484"
                } ));
                t.Fixture.startAndEndOfStringCustomTest2();
            },
            endOfStringOrNewlineCustomTest1: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexAnchorsTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexAnchorsTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "EndOfStringOrNewlineCustomTest1()",
                    line: "523"
                } ));
                t.Fixture.endOfStringOrNewlineCustomTest1();
            },
            endOfStringOrNewlineCustomTest2: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexAnchorsTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexAnchorsTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "EndOfStringOrNewlineCustomTest2()",
                    line: "543"
                } ));
                t.Fixture.endOfStringOrNewlineCustomTest2();
            },
            endOfStringOnlyCustomTest1: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexAnchorsTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexAnchorsTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "EndOfStringOnlyCustomTest1()",
                    line: "563"
                } ));
                t.Fixture.endOfStringOnlyCustomTest1();
            },
            endOfStringOnlyCustomTest2: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexAnchorsTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexAnchorsTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "EndOfStringOnlyCustomTest2()",
                    line: "583"
                } ));
                t.Fixture.endOfStringOnlyCustomTest2();
            },
            endOfStringOnlyCustomTest3: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexAnchorsTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexAnchorsTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "EndOfStringOnlyCustomTest3()",
                    line: "603"
                } ));
                t.Fixture.endOfStringOnlyCustomTest3();
            },
            contiguousMatchesCustomTest1: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexAnchorsTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexAnchorsTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ContiguousMatchesCustomTest1()",
                    line: "623"
                } ));
                t.Fixture.contiguousMatchesCustomTest1();
            },
            contiguousMatchesCustomTest2: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexAnchorsTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexAnchorsTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ContiguousMatchesCustomTest2()",
                    line: "642"
                } ));
                t.Fixture.contiguousMatchesCustomTest2();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                    project: "Batch1",
                    className: "Bridge.ClientTest.Text.RegularExpressions.RegexAnchorsTests",
                    file: "Batch1\\Text\\RegularExpressions\\RegexAnchorsTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.RegexBackreferenceTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexBackreferenceTests)],
        statics: {
            msdnNumberedBackrefTest: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexBackreferenceTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexBackreferenceTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "MsdnNumberedBackrefTest()",
                    line: "12"
                } ));
                t.Fixture.msdnNumberedBackrefTest();
            },
            msdnNamedBackrefTest: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexBackreferenceTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexBackreferenceTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "MsdnNamedBackrefTest()",
                    line: "68"
                } ));
                t.Fixture.msdnNamedBackrefTest();
            },
            msdnNamedBackrefWithNumberAsNameTest: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexBackreferenceTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexBackreferenceTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "MsdnNamedBackrefWithNumberAsNameTest()",
                    line: "124"
                } ));
                t.Fixture.msdnNamedBackrefWithNumberAsNameTest();
            },
            msdnNamedBackrefWithRedefinedGroupTest: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexBackreferenceTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexBackreferenceTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "MsdnNamedBackrefWithRedefinedGroupTest()",
                    line: "185"
                } ));
                t.Fixture.msdnNamedBackrefWithRedefinedGroupTest();
            },
            msdnNamedBackrefWithEmptyCaptureTest1: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexBackreferenceTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexBackreferenceTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "MsdnNamedBackrefWithEmptyCaptureTest1()",
                    line: "204"
                } ));
                t.Fixture.msdnNamedBackrefWithEmptyCaptureTest1();
            },
            msdnNamedBackrefWithEmptyCaptureTest2: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexBackreferenceTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexBackreferenceTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "MsdnNamedBackrefWithEmptyCaptureTest2()",
                    line: "227"
                } ));
                t.Fixture.msdnNamedBackrefWithEmptyCaptureTest2();
            },
            namedBackrefToUnreachableGroupTest: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexBackreferenceTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexBackreferenceTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "NamedBackrefToUnreachableGroupTest()",
                    line: "251"
                } ));
                t.Fixture.namedBackrefToUnreachableGroupTest();
            },
            namedBackrefToSelfGroupTest: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexBackreferenceTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexBackreferenceTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "NamedBackrefToSelfGroupTest()",
                    line: "268"
                } ));
                t.Fixture.namedBackrefToSelfGroupTest();
            },
            namedBackrefToParentGroupTest: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexBackreferenceTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexBackreferenceTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "NamedBackrefToParentGroupTest()",
                    line: "283"
                } ));
                t.Fixture.namedBackrefToParentGroupTest();
            },
            numberedBackrefTest: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexBackreferenceTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexBackreferenceTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "NumberedBackrefTest()",
                    line: "300"
                } ));
                t.Fixture.numberedBackrefTest();
            },
            numberedBackrefInGroupTest: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexBackreferenceTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexBackreferenceTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "NumberedBackrefInGroupTest()",
                    line: "320"
                } ));
                t.Fixture.numberedBackrefInGroupTest();
            },
            namedBackrefInGroupTest: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexBackreferenceTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexBackreferenceTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "NamedBackrefInGroupTest()",
                    line: "343"
                } ));
                t.Fixture.namedBackrefInGroupTest();
            },
            numberedBackrefRecursiveGroupTest: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexBackreferenceTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexBackreferenceTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "NumberedBackrefRecursiveGroupTest()",
                    line: "366"
                } ));
                t.Fixture.numberedBackrefRecursiveGroupTest();
            },
            namedBackrefRecursiveGroupTest: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexBackreferenceTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexBackreferenceTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "NamedBackrefRecursiveGroupTest()",
                    line: "386"
                } ));
                t.Fixture.namedBackrefRecursiveGroupTest();
            },
            complexBackrefTest1: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexBackreferenceTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexBackreferenceTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ComplexBackrefTest1()",
                    line: "406"
                } ));
                t.Fixture.complexBackrefTest1();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                    project: "Batch1",
                    className: "Bridge.ClientTest.Text.RegularExpressions.RegexBackreferenceTests",
                    file: "Batch1\\Text\\RegularExpressions\\RegexBackreferenceTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.RegexBalancingGroupsTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexBalancingGroupsTests)],
        statics: {
            msdnBalancingGroupTest1: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexBalancingGroupsTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexBalancingGroupsTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "MsdnBalancingGroupTest1()",
                    line: "13"
                } ));
                t.Fixture.msdnBalancingGroupTest1();
            },
            msdnBalancingGroupTest2: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexBalancingGroupsTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexBalancingGroupsTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "MsdnBalancingGroupTest2()",
                    line: "48"
                } ));
                t.Fixture.msdnBalancingGroupTest2();
            },
            balancingGroupTest: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexBalancingGroupsTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexBalancingGroupsTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "BalancingGroupTest()",
                    line: "106"
                } ));
                t.Fixture.balancingGroupTest();
            },
            balancingGroupWithoutName1Test: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexBalancingGroupsTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexBalancingGroupsTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "BalancingGroupWithoutName1Test()",
                    line: "125"
                } ));
                t.Fixture.balancingGroupWithoutName1Test();
            },
            balancingGroupWithQuantifierTest: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexBalancingGroupsTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexBalancingGroupsTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "BalancingGroupWithQuantifierTest()",
                    line: "143"
                } ));
                t.Fixture.balancingGroupWithQuantifierTest();
            },
            balancingGroupWithEmptyIntervalTest: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexBalancingGroupsTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexBalancingGroupsTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "BalancingGroupWithEmptyIntervalTest()",
                    line: "164"
                } ));
                t.Fixture.balancingGroupWithEmptyIntervalTest();
            },
            balancingGroupStackApproachTest: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexBalancingGroupsTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexBalancingGroupsTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "BalancingGroupStackApproachTest()",
                    line: "181"
                } ));
                t.Fixture.balancingGroupStackApproachTest();
            },
            balancingGroupWithNumberReferenceTest1: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexBalancingGroupsTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexBalancingGroupsTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "BalancingGroupWithNumberReferenceTest1()",
                    line: "203"
                } ));
                t.Fixture.balancingGroupWithNumberReferenceTest1();
            },
            balancingGroupWithNumberReferenceTest2: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexBalancingGroupsTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexBalancingGroupsTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "BalancingGroupWithNumberReferenceTest2()",
                    line: "221"
                } ));
                t.Fixture.balancingGroupWithNumberReferenceTest2();
            },
            balancingGroupIncorrectReferenceTest1: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexBalancingGroupsTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexBalancingGroupsTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "BalancingGroupIncorrectReferenceTest1()",
                    line: "242"
                } ));
                t.Fixture.balancingGroupIncorrectReferenceTest1();
            },
            balancingGroupIncorrectReferenceTest2: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexBalancingGroupsTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexBalancingGroupsTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "BalancingGroupIncorrectReferenceTest2()",
                    line: "254"
                } ));
                t.Fixture.balancingGroupIncorrectReferenceTest2();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                    project: "Batch1",
                    className: "Bridge.ClientTest.Text.RegularExpressions.RegexBalancingGroupsTests",
                    file: "Batch1\\Text\\RegularExpressions\\RegexBalancingGroupsTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.RegexCaptureCollectionTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Entities.RegexCaptureCollectionTests)],
        statics: {
            caseDataTest: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Entities.RegexCaptureCollectionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexCaptureCollectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "CaseDataTest()",
                    line: "28"
                } ));
                t.Fixture.caseDataTest();
            },
            captureCollectionFieldsTest: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Entities.RegexCaptureCollectionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexCaptureCollectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "CaptureCollectionFieldsTest()",
                    line: "60"
                } ));
                t.Fixture.captureCollectionFieldsTest();
            },
            captureCollectionForeachTest: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Entities.RegexCaptureCollectionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexCaptureCollectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "CaptureCollectionForeachTest()",
                    line: "73"
                } ));
                t.Fixture.captureCollectionForeachTest();
            },
            captureCollectionEnumeratorTest: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Entities.RegexCaptureCollectionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexCaptureCollectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "CaptureCollectionEnumeratorTest()",
                    line: "89"
                } ));
                t.Fixture.captureCollectionEnumeratorTest();
            },
            captureCollectionCopyToTest: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Entities.RegexCaptureCollectionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexCaptureCollectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "CaptureCollectionCopyToTest()",
                    line: "111"
                } ));
                t.Fixture.captureCollectionCopyToTest();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                    project: "Batch1",
                    className: "Bridge.ClientTest.Text.RegularExpressions.Entities.RegexCaptureCollectionTests",
                    file: "Batch1\\Text\\RegularExpressions\\Entities\\RegexCaptureCollectionTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexCharClassesTests)],
        statics: {
            msdnCharGroupTest1: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexCharClassesTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "MsdnCharGroupTest1()",
                    line: "13"
                } ));
                t.Fixture.msdnCharGroupTest1();
            },
            msdnCharGroupTest3: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexCharClassesTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "MsdnCharGroupTest3()",
                    line: "66"
                } ));
                t.Fixture.msdnCharGroupTest3();
            },
            msdnNegativeCharGroupTest1: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexCharClassesTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "MsdnNegativeCharGroupTest1()",
                    line: "105"
                } ));
                t.Fixture.msdnNegativeCharGroupTest1();
            },
            msdnNegativeCharGroupTest2: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexCharClassesTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "MsdnNegativeCharGroupTest2()",
                    line: "137"
                } ));
                t.Fixture.msdnNegativeCharGroupTest2();
            },
            msdnDotCharTest1: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexCharClassesTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "MsdnDotCharTest1()",
                    line: "183"
                } ));
                t.Fixture.msdnDotCharTest1();
            },
            msdnDotCharTest2: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexCharClassesTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "MsdnDotCharTest2()",
                    line: "197"
                } ));
                t.Fixture.msdnDotCharTest2();
            },
            msdnDotCharTest3: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexCharClassesTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "MsdnDotCharTest3()",
                    line: "211"
                } ));
                t.Fixture.msdnDotCharTest3();
            },
            msdnCharRangeInGroupTest: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexCharClassesTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "MsdnCharRangeInGroupTest()",
                    line: "225"
                } ));
                t.Fixture.msdnCharRangeInGroupTest();
            },
            msdnWordCharTest1: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexCharClassesTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "MsdnWordCharTest1()",
                    line: "434"
                } ));
                t.Fixture.msdnWordCharTest1();
            },
            msdnWordCharTest2: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexCharClassesTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "MsdnWordCharTest2()",
                    line: "480"
                } ));
                t.Fixture.msdnWordCharTest2();
            },
            msdnNonWordCharTest1: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexCharClassesTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "MsdnNonWordCharTest1()",
                    line: "497"
                } ));
                t.Fixture.msdnNonWordCharTest1();
            },
            msdnNonWordCharTest2: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexCharClassesTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "MsdnNonWordCharTest2()",
                    line: "522"
                } ));
                t.Fixture.msdnNonWordCharTest2();
            },
            msdnSpaceCharTest1: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexCharClassesTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "MsdnSpaceCharTest1()",
                    line: "678"
                } ));
                t.Fixture.msdnSpaceCharTest1();
            },
            msdnSpaceCharTest2: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexCharClassesTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "MsdnSpaceCharTest2()",
                    line: "692"
                } ));
                t.Fixture.msdnSpaceCharTest2();
            },
            msdnNonSpaceCharTest1: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexCharClassesTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "MsdnNonSpaceCharTest1()",
                    line: "751"
                } ));
                t.Fixture.msdnNonSpaceCharTest1();
            },
            msdnNonSpaceCharTest2: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexCharClassesTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "MsdnNonSpaceCharTest2()",
                    line: "765"
                } ));
                t.Fixture.msdnNonSpaceCharTest2();
            },
            msdnDigitCharTest1: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexCharClassesTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "MsdnDigitCharTest1()",
                    line: "1006"
                } ));
                t.Fixture.msdnDigitCharTest1();
            },
            msdnDigitCharTest2: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexCharClassesTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "MsdnDigitCharTest2()",
                    line: "1020"
                } ));
                t.Fixture.msdnDigitCharTest2();
            },
            msdnDigitCharTest3: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexCharClassesTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "MsdnDigitCharTest3()",
                    line: "1037"
                } ));
                t.Fixture.msdnDigitCharTest3();
            },
            msdnNonDigitCharTest1: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexCharClassesTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "MsdnNonDigitCharTest1()",
                    line: "1052"
                } ));
                t.Fixture.msdnNonDigitCharTest1();
            },
            msdnNonDigitCharTest2: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexCharClassesTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "MsdnNonDigitCharTest2()",
                    line: "1098"
                } ));
                t.Fixture.msdnNonDigitCharTest2();
            },
            msdnNonDigitCharTest3: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexCharClassesTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "MsdnNonDigitCharTest3()",
                    line: "1112"
                } ));
                t.Fixture.msdnNonDigitCharTest3();
            },
            msdnSubstactGroupTest1: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexCharClassesTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "MsdnSubstactGroupTest1()",
                    line: "1125"
                } ));
                t.Fixture.msdnSubstactGroupTest1();
            },
            msdnSubstactGroupTest2: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexCharClassesTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "MsdnSubstactGroupTest2()",
                    line: "1138"
                } ));
                t.Fixture.msdnSubstactGroupTest2();
            },
            msdnSubstactGroupTest3: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexCharClassesTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "MsdnSubstactGroupTest3()",
                    line: "1152"
                } ));
                t.Fixture.msdnSubstactGroupTest3();
            },
            msdnSubstactGroupTest4: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexCharClassesTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "MsdnSubstactGroupTest4()",
                    line: "1165"
                } ));
                t.Fixture.msdnSubstactGroupTest4();
            },
            charClassesInCharGroupTest: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexCharClassesTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "CharClassesInCharGroupTest()",
                    line: "1181"
                } ));
                t.Fixture.charClassesInCharGroupTest();
            },
            caretSymbolInCharGroupTest: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexCharClassesTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "CaretSymbolInCharGroupTest()",
                    line: "1212"
                } ));
                t.Fixture.caretSymbolInCharGroupTest();
            },
            negativeCharGroupTest: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexCharClassesTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "NegativeCharGroupTest()",
                    line: "1243"
                } ));
                t.Fixture.negativeCharGroupTest();
            },
            combiningCharRangesTest: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexCharClassesTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "CombiningCharRangesTest()",
                    line: "1274"
                } ));
                t.Fixture.combiningCharRangesTest();
            },
            substractGroupTest1: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexCharClassesTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "SubstractGroupTest1()",
                    line: "1291"
                } ));
                t.Fixture.substractGroupTest1();
            },
            substractGroupTest2: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexCharClassesTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "SubstractGroupTest2()",
                    line: "1305"
                } ));
                t.Fixture.substractGroupTest2();
            },
            substractGroupTest3: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexCharClassesTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "SubstractGroupTest3()",
                    line: "1318"
                } ));
                t.Fixture.substractGroupTest3();
            },
            substractNegativeGroupTest1: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexCharClassesTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "SubstractNegativeGroupTest1()",
                    line: "1332"
                } ));
                t.Fixture.substractNegativeGroupTest1();
            },
            substractNegativeGroupTest2: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexCharClassesTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "SubstractNegativeGroupTest2()",
                    line: "1346"
                } ));
                t.Fixture.substractNegativeGroupTest2();
            },
            substractNegativeGroupTest3: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexCharClassesTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "SubstractNegativeGroupTest3()",
                    line: "1359"
                } ));
                t.Fixture.substractNegativeGroupTest3();
            },
            substractNestedGroupsTest1: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexCharClassesTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "SubstractNestedGroupsTest1()",
                    line: "1373"
                } ));
                t.Fixture.substractNestedGroupsTest1();
            },
            substractNestedGroupsTest2: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexCharClassesTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "SubstractNestedGroupsTest2()",
                    line: "1419"
                } ));
                t.Fixture.substractNestedGroupsTest2();
            },
            substractGroupIsNotLastTest: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexCharClassesTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "SubstractGroupIsNotLastTest()",
                    line: "1458"
                } ));
                t.Fixture.substractGroupIsNotLastTest();
            },
            charClassWithEscapedBracketInGroupTest: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexCharClassesTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "CharClassWithEscapedBracketInGroupTest()",
                    line: "1471"
                } ));
                t.Fixture.charClassWithEscapedBracketInGroupTest();
            },
            charClassWithEscapedSquareBracketInGroupTest: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexCharClassesTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "CharClassWithEscapedSquareBracketInGroupTest()",
                    line: "1506"
                } ));
                t.Fixture.charClassWithEscapedSquareBracketInGroupTest();
            },
            charClassWithUnescapedBracketInGroupTest: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexCharClassesTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "CharClassWithUnescapedBracketInGroupTest()",
                    line: "1541"
                } ));
                t.Fixture.charClassWithUnescapedBracketInGroupTest();
            },
            charClassWithUnescapedSquareBracketInGroupTest: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexCharClassesTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "CharClassWithUnescapedSquareBracketInGroupTest()",
                    line: "1576"
                } ));
                t.Fixture.charClassWithUnescapedSquareBracketInGroupTest();
            },
            emptyRangeTest: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexCharClassesTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "EmptyRangeTest()",
                    line: "1611"
                } ));
                t.Fixture.emptyRangeTest();
            },
            closingSquareBracketTest1: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexCharClassesTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ClosingSquareBracketTest1()",
                    line: "1624"
                } ));
                t.Fixture.closingSquareBracketTest1();
            },
            closingSquareBracketTest2: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexCharClassesTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ClosingSquareBracketTest2()",
                    line: "1649"
                } ));
                t.Fixture.closingSquareBracketTest2();
            },
            openingSquareBracketTest1: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexCharClassesTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "OpeningSquareBracketTest1()",
                    line: "1663"
                } ));
                t.Fixture.openingSquareBracketTest1();
            },
            openingSquareBracketTest2: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexCharClassesTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "OpeningSquareBracketTest2()",
                    line: "1688"
                } ));
                t.Fixture.openingSquareBracketTest2();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                    project: "Batch1",
                    className: "Bridge.ClientTest.Text.RegularExpressions.RegexCharClassesTests",
                    file: "Batch1\\Text\\RegularExpressions\\RegexCharClassesTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.RegexEntityTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Entities.RegexEntityTests)],
        statics: {
            caseDataTest: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Entities.RegexEntityTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexEntityTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "CaseDataTest()",
                    line: "29"
                } ));
                t.Fixture.caseDataTest();
            },
            getGroupNamesTest: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Entities.RegexEntityTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexEntityTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "GetGroupNamesTest()",
                    line: "61"
                } ));
                t.Fixture.getGroupNamesTest();
            },
            getGroupNumbersTest: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Entities.RegexEntityTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexEntityTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "GetGroupNumbersTest()",
                    line: "101"
                } ));
                t.Fixture.getGroupNumbersTest();
            },
            groupNameFromNumberTest: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Entities.RegexEntityTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexEntityTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "GroupNameFromNumberTest()",
                    line: "141"
                } ));
                t.Fixture.groupNameFromNumberTest();
            },
            groupNumberFromNameTest: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Entities.RegexEntityTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexEntityTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "GroupNumberFromNameTest()",
                    line: "189"
                } ));
                t.Fixture.groupNumberFromNameTest();
            },
            supportedOptionsTest: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Entities.RegexEntityTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexEntityTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "SupportedOptionsTest()",
                    line: "237"
                } ));
                t.Fixture.supportedOptionsTest();
            },
            matchNamedGroupTest: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Entities.RegexEntityTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexEntityTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "MatchNamedGroupTest()",
                    line: "255"
                } ));
                t.Fixture.matchNamedGroupTest();
            },
            matchInnerNamedGroupTest1: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Entities.RegexEntityTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexEntityTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "MatchInnerNamedGroupTest1()",
                    line: "277"
                } ));
                t.Fixture.matchInnerNamedGroupTest1();
            },
            matchInnerNamedGroupTest2: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Entities.RegexEntityTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexEntityTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "MatchInnerNamedGroupTest2()",
                    line: "302"
                } ));
                t.Fixture.matchInnerNamedGroupTest2();
            },
            groupOrderingTest: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Entities.RegexEntityTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexEntityTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "GroupOrderingTest()",
                    line: "335"
                } ));
                t.Fixture.groupOrderingTest();
            },
            repeatingGroupTest: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Entities.RegexEntityTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexEntityTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "RepeatingGroupTest()",
                    line: "373"
                } ));
                t.Fixture.repeatingGroupTest();
            },
            zeroResultTest: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Entities.RegexEntityTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexEntityTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ZeroResultTest()",
                    line: "403"
                } ));
                t.Fixture.zeroResultTest();
            },
            nonCapturingGroupsTest: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Entities.RegexEntityTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexEntityTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "NonCapturingGroupsTest()",
                    line: "448"
                } ));
                t.Fixture.nonCapturingGroupsTest();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                    project: "Batch1",
                    className: "Bridge.ClientTest.Text.RegularExpressions.Entities.RegexEntityTests",
                    file: "Batch1\\Text\\RegularExpressions\\Entities\\RegexEntityTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.RegexEscapesTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexEscapesTests)],
        statics: {
            msdnBellCharTest: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexEscapesTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexEscapesTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "MsdnBellCharTest()",
                    line: "13"
                } ));
                t.Fixture.msdnBellCharTest();
            },
            msdnBackspaceCharTest: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexEscapesTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexEscapesTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "MsdnBackspaceCharTest()",
                    line: "27"
                } ));
                t.Fixture.msdnBackspaceCharTest();
            },
            msdnTabCharTest: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexEscapesTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexEscapesTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "MsdnTabCharTest()",
                    line: "41"
                } ));
                t.Fixture.msdnTabCharTest();
            },
            msdnCarriageRetCharTest: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexEscapesTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexEscapesTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "MsdnCarriageRetCharTest()",
                    line: "72"
                } ));
                t.Fixture.msdnCarriageRetCharTest();
            },
            msdnVerticalTabCharTest: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexEscapesTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexEscapesTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "MsdnVerticalTabCharTest()",
                    line: "89"
                } ));
                t.Fixture.msdnVerticalTabCharTest();
            },
            msdnFormFeedCharTest: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexEscapesTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexEscapesTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "MsdnFormFeedCharTest()",
                    line: "103"
                } ));
                t.Fixture.msdnFormFeedCharTest();
            },
            msdnNewLineCharTest: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexEscapesTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexEscapesTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "MsdnNewLineCharTest()",
                    line: "117"
                } ));
                t.Fixture.msdnNewLineCharTest();
            },
            msdnEscapeCharTest: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexEscapesTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexEscapesTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "MsdnEscapeCharTest()",
                    line: "134"
                } ));
                t.Fixture.msdnEscapeCharTest();
            },
            msdnOctalEscapeTest: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexEscapesTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexEscapesTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "MsdnOctalEscapeTest()",
                    line: "148"
                } ));
                t.Fixture.msdnOctalEscapeTest();
            },
            msdnHexEscapeTest: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexEscapesTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexEscapesTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "MsdnHexEscapeTest()",
                    line: "173"
                } ));
                t.Fixture.msdnHexEscapeTest();
            },
            msdnAsciiEscapeTest: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexEscapesTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexEscapesTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "MsdnAsciiEscapeTest()",
                    line: "198"
                } ));
                t.Fixture.msdnAsciiEscapeTest();
            },
            msdnUnicodeEscapeTest: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexEscapesTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexEscapesTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "MsdnUnicodeEscapeTest()",
                    line: "212"
                } ));
                t.Fixture.msdnUnicodeEscapeTest();
            },
            msdnSpecialEscapesTest: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexEscapesTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexEscapesTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "MsdnSpecialEscapesTest()",
                    line: "237"
                } ));
                t.Fixture.msdnSpecialEscapesTest();
            },
            msdnCharEscapesExampleTest: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexEscapesTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexEscapesTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "MsdnCharEscapesExampleTest()",
                    line: "262"
                } ));
                t.Fixture.msdnCharEscapesExampleTest();
            },
            charEscapesTest: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexEscapesTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexEscapesTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "CharEscapesTest()",
                    line: "340"
                } ));
                t.Fixture.charEscapesTest();
            },
            rangeWithCharEscapesTest: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexEscapesTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexEscapesTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "RangeWithCharEscapesTest()",
                    line: "463"
                } ));
                t.Fixture.rangeWithCharEscapesTest();
            },
            controlCharsTestUpperTest: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexEscapesTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexEscapesTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ControlCharsTestUpperTest()",
                    line: "594"
                } ));
                t.Fixture.controlCharsTestUpperTest();
            },
            controlCharsTestLowerTest: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexEscapesTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexEscapesTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ControlCharsTestLowerTest()",
                    line: "829"
                } ));
                t.Fixture.controlCharsTestLowerTest();
            },
            basicLatinEscapeTest: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexEscapesTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexEscapesTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "BasicLatinEscapeTest()",
                    line: "1064"
                } ));
                t.Fixture.basicLatinEscapeTest();
            },
            octalEscapeTest: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexEscapesTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexEscapesTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "OctalEscapeTest()",
                    line: "1099"
                } ));
                t.Fixture.octalEscapeTest();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                    project: "Batch1",
                    className: "Bridge.ClientTest.Text.RegularExpressions.RegexEscapesTests",
                    file: "Batch1\\Text\\RegularExpressions\\RegexEscapesTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.RegexEscapeTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Methods.RegexEscapeTests)],
        statics: {
            msdnEscapeTest: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Methods.RegexEscapeTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexEscapeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "MsdnEscapeTest()",
                    line: "14"
                } ));
                t.Fixture.msdnEscapeTest();
            },
            msdnUnescapeTest: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Methods.RegexEscapeTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexEscapeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "MsdnUnescapeTest()",
                    line: "43"
                } ));
                t.Fixture.msdnUnescapeTest();
            },
            escapeCharSetTest: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Methods.RegexEscapeTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexEscapeTests, 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "EscapeCharSetTest()",
                    line: "55"
                } ));
                t.Fixture.escapeCharSetTest();
            },
            nonEscapeCharSetTest: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Methods.RegexEscapeTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexEscapeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "NonEscapeCharSetTest()",
                    line: "73"
                } ));
                t.Fixture.nonEscapeCharSetTest();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                    project: "Batch1",
                    className: "Bridge.ClientTest.Text.RegularExpressions.Methods.RegexEscapeTests",
                    file: "Batch1\\Text\\RegularExpressions\\Methods\\RegexEscapeTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.RegexExamplesTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexExamplesTests)],
        statics: {
            emailParseTest: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexExamplesTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexExamplesTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "EmailParseTest()",
                    line: "10"
                } ));
                t.Fixture.emailParseTest();
            },
            phoneParseTest: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexExamplesTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexExamplesTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "PhoneParseTest()",
                    line: "25"
                } ));
                t.Fixture.phoneParseTest();
            },
            passwordValidationTest: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexExamplesTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexExamplesTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "PasswordValidationTest()",
                    line: "39"
                } ));
                t.Fixture.passwordValidationTest();
            },
            wordSlplittingTest: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexExamplesTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexExamplesTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "WordSlplittingTest()",
                    line: "56"
                } ));
                t.Fixture.wordSlplittingTest();
            },
            ipAddressValidationTest: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexExamplesTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexExamplesTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "IpAddressValidationTest()",
                    line: "117"
                } ));
                t.Fixture.ipAddressValidationTest();
            },
            escapeQuotedWordsTest: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexExamplesTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexExamplesTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "EscapeQuotedWordsTest()",
                    line: "143"
                } ));
                t.Fixture.escapeQuotedWordsTest();
            },
            creditCardExpirationParsingTest: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexExamplesTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexExamplesTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "CreditCardExpirationParsingTest()",
                    line: "180"
                } ));
                t.Fixture.creditCardExpirationParsingTest();
            },
            urlParsingTest: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexExamplesTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexExamplesTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "UrlParsingTest()",
                    line: "203"
                } ));
                t.Fixture.urlParsingTest();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                    project: "Batch1",
                    className: "Bridge.ClientTest.Text.RegularExpressions.RegexExamplesTests",
                    file: "Batch1\\Text\\RegularExpressions\\RegexExamplesTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.RegexGroupCollectionTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Entities.RegexGroupCollectionTests)],
        statics: {
            caseDataTest: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Entities.RegexGroupCollectionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexGroupCollectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "CaseDataTest()",
                    line: "28"
                } ));
                t.Fixture.caseDataTest();
            },
            groupCollectionFieldsTest: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Entities.RegexGroupCollectionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexGroupCollectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "GroupCollectionFieldsTest()",
                    line: "60"
                } ));
                t.Fixture.groupCollectionFieldsTest();
            },
            groupCollectionForeachTest: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Entities.RegexGroupCollectionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexGroupCollectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "GroupCollectionForeachTest()",
                    line: "72"
                } ));
                t.Fixture.groupCollectionForeachTest();
            },
            groupCollectionEnumeratorTest: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Entities.RegexGroupCollectionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexGroupCollectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "GroupCollectionEnumeratorTest()",
                    line: "87"
                } ));
                t.Fixture.groupCollectionEnumeratorTest();
            },
            groupCollectionCopyToTest: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Entities.RegexGroupCollectionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexGroupCollectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "GroupCollectionCopyToTest()",
                    line: "108"
                } ));
                t.Fixture.groupCollectionCopyToTest();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                    project: "Batch1",
                    className: "Bridge.ClientTest.Text.RegularExpressions.Entities.RegexGroupCollectionTests",
                    file: "Batch1\\Text\\RegularExpressions\\Entities\\RegexGroupCollectionTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexInlineOptionsTests)],
        statics: {
            msdnInlineOptionsTest: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexInlineOptionsTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "MsdnInlineOptionsTest()",
                    line: "12"
                } ));
                t.Fixture.msdnInlineOptionsTest();
            },
            msdnIgnoreCaseTest: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexInlineOptionsTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "MsdnIgnoreCaseTest()",
                    line: "43"
                } ));
                t.Fixture.msdnIgnoreCaseTest();
            },
            msdnMultilineInlineOptionTest: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexInlineOptionsTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "MsdnMultilineInlineOptionTest()",
                    line: "75"
                } ));
                t.Fixture.msdnMultilineInlineOptionTest();
            },
            msdnSinglelineInlineOptionTest: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexInlineOptionsTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "MsdnSinglelineInlineOptionTest()",
                    line: "142"
                } ));
                t.Fixture.msdnSinglelineInlineOptionTest();
            },
            msdnIngoreWhitespaceInlineOptionTest1: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexInlineOptionsTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "MsdnIngoreWhitespaceInlineOptionTest1()",
                    line: "156"
                } ));
                t.Fixture.msdnIngoreWhitespaceInlineOptionTest1();
            },
            msdnIngoreWhitespaceInlineOptionTest2: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexInlineOptionsTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "MsdnIngoreWhitespaceInlineOptionTest2()",
                    line: "176"
                } ));
                t.Fixture.msdnIngoreWhitespaceInlineOptionTest2();
            },
            msdnIngoreWhitespaceInlineOptionTest3: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexInlineOptionsTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "MsdnIngoreWhitespaceInlineOptionTest3()",
                    line: "196"
                } ));
                t.Fixture.msdnIngoreWhitespaceInlineOptionTest3();
            },
            msdnExplicitCaptureInlineOptionTest1: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexInlineOptionsTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "MsdnExplicitCaptureInlineOptionTest1()",
                    line: "265"
                } ));
                t.Fixture.msdnExplicitCaptureInlineOptionTest1();
            },
            msdnExplicitCaptureInlineOptionTest2: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexInlineOptionsTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "MsdnExplicitCaptureInlineOptionTest2()",
                    line: "304"
                } ));
                t.Fixture.msdnExplicitCaptureInlineOptionTest2();
            },
            ignoreCaseInlineOptionTest1: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexInlineOptionsTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "IgnoreCaseInlineOptionTest1()",
                    line: "345"
                } ));
                t.Fixture.ignoreCaseInlineOptionTest1();
            },
            ignoreCaseInlineOptionTest2: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexInlineOptionsTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "IgnoreCaseInlineOptionTest2()",
                    line: "353"
                } ));
                t.Fixture.ignoreCaseInlineOptionTest2();
            },
            ignoreCaseInlineOptionTest3: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexInlineOptionsTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "IgnoreCaseInlineOptionTest3()",
                    line: "361"
                } ));
                t.Fixture.ignoreCaseInlineOptionTest3();
            },
            ignoreCaseInlineOptionTest4: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexInlineOptionsTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "IgnoreCaseInlineOptionTest4()",
                    line: "369"
                } ));
                t.Fixture.ignoreCaseInlineOptionTest4();
            },
            ignoreCaseInlineOptionTest5: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexInlineOptionsTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "IgnoreCaseInlineOptionTest5()",
                    line: "377"
                } ));
                t.Fixture.ignoreCaseInlineOptionTest5();
            },
            multilineInlineOptionTest1: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexInlineOptionsTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "MultilineInlineOptionTest1()",
                    line: "385"
                } ));
                t.Fixture.multilineInlineOptionTest1();
            },
            multilineInlineOptionTest2: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexInlineOptionsTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "MultilineInlineOptionTest2()",
                    line: "398"
                } ));
                t.Fixture.multilineInlineOptionTest2();
            },
            multilineInlineOptionTest3: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexInlineOptionsTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "MultilineInlineOptionTest3()",
                    line: "423"
                } ));
                t.Fixture.multilineInlineOptionTest3();
            },
            multilineInlineOptionTest4: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexInlineOptionsTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "MultilineInlineOptionTest4()",
                    line: "437"
                } ));
                t.Fixture.multilineInlineOptionTest4();
            },
            multilineInlineOptionTest5: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexInlineOptionsTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "MultilineInlineOptionTest5()",
                    line: "451"
                } ));
                t.Fixture.multilineInlineOptionTest5();
            },
            multilineInlineOptionTest6: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexInlineOptionsTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "MultilineInlineOptionTest6()",
                    line: "468"
                } ));
                t.Fixture.multilineInlineOptionTest6();
            },
            multilineInlineOptionTest7: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexInlineOptionsTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "MultilineInlineOptionTest7()",
                    line: "509"
                } ));
                t.Fixture.multilineInlineOptionTest7();
            },
            singlelineInlineOptionTest1: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexInlineOptionsTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "SinglelineInlineOptionTest1()",
                    line: "526"
                } ));
                t.Fixture.singlelineInlineOptionTest1();
            },
            singlelineInlineOptionTest2: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexInlineOptionsTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "SinglelineInlineOptionTest2()",
                    line: "540"
                } ));
                t.Fixture.singlelineInlineOptionTest2();
            },
            singlelineInlineOptionTest3: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexInlineOptionsTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "SinglelineInlineOptionTest3()",
                    line: "556"
                } ));
                t.Fixture.singlelineInlineOptionTest3();
            },
            ingoreWhitespaceInlineOptionTest1: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexInlineOptionsTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "IngoreWhitespaceInlineOptionTest1()",
                    line: "579"
                } ));
                t.Fixture.ingoreWhitespaceInlineOptionTest1();
            },
            ingoreWhitespaceInlineOptionTest2: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexInlineOptionsTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "IngoreWhitespaceInlineOptionTest2()",
                    line: "592"
                } ));
                t.Fixture.ingoreWhitespaceInlineOptionTest2();
            },
            ingoreWhitespaceInlineOptionTest3: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexInlineOptionsTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "IngoreWhitespaceInlineOptionTest3()",
                    line: "606"
                } ));
                t.Fixture.ingoreWhitespaceInlineOptionTest3();
            },
            ingoreWhitespaceInlineOptionTest4: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexInlineOptionsTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "IngoreWhitespaceInlineOptionTest4()",
                    line: "620"
                } ));
                t.Fixture.ingoreWhitespaceInlineOptionTest4();
            },
            ingoreWhitespaceInlineOptionTest5: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexInlineOptionsTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "IngoreWhitespaceInlineOptionTest5()",
                    line: "634"
                } ));
                t.Fixture.ingoreWhitespaceInlineOptionTest5();
            },
            ingoreWhitespaceInlineOptionTest6: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexInlineOptionsTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "IngoreWhitespaceInlineOptionTest6()",
                    line: "648"
                } ));
                t.Fixture.ingoreWhitespaceInlineOptionTest6();
            },
            ingoreWhitespaceInlineOptionTest7: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexInlineOptionsTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "IngoreWhitespaceInlineOptionTest7()",
                    line: "662"
                } ));
                t.Fixture.ingoreWhitespaceInlineOptionTest7();
            },
            ingoreWhitespaceInlineOptionTest8: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexInlineOptionsTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "IngoreWhitespaceInlineOptionTest8()",
                    line: "676"
                } ));
                t.Fixture.ingoreWhitespaceInlineOptionTest8();
            },
            ingoreWhitespaceInlineOptionTest9: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexInlineOptionsTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "IngoreWhitespaceInlineOptionTest9()",
                    line: "690"
                } ));
                t.Fixture.ingoreWhitespaceInlineOptionTest9();
            },
            inlineCommentTest1: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexInlineOptionsTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "InlineCommentTest1()",
                    line: "704"
                } ));
                t.Fixture.inlineCommentTest1();
            },
            explicitCaptureInlineOptionTest1: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexInlineOptionsTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ExplicitCaptureInlineOptionTest1()",
                    line: "718"
                } ));
                t.Fixture.explicitCaptureInlineOptionTest1();
            },
            explicitCaptureInlineOptionTest2: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexInlineOptionsTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ExplicitCaptureInlineOptionTest2()",
                    line: "738"
                } ));
                t.Fixture.explicitCaptureInlineOptionTest2();
            },
            explicitCaptureInlineOptionTest3: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexInlineOptionsTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ExplicitCaptureInlineOptionTest3()",
                    line: "761"
                } ));
                t.Fixture.explicitCaptureInlineOptionTest3();
            },
            explicitCaptureInlineOptionTest4: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexInlineOptionsTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ExplicitCaptureInlineOptionTest4()",
                    line: "784"
                } ));
                t.Fixture.explicitCaptureInlineOptionTest4();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                    project: "Batch1",
                    className: "Bridge.ClientTest.Text.RegularExpressions.RegexInlineOptionsTests",
                    file: "Batch1\\Text\\RegularExpressions\\RegexInlineOptionsTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.RegexIsMatchTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Methods.RegexIsMatchTests)],
        statics: {
            isMatchTest: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Methods.RegexIsMatchTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexIsMatchTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "IsMatchTest()",
                    line: "18"
                } ));
                t.Fixture.isMatchTest();
            },
            isMatchWithOffsetTest: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Methods.RegexIsMatchTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexIsMatchTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "IsMatchWithOffsetTest()",
                    line: "32"
                } ));
                t.Fixture.isMatchWithOffsetTest();
            },
            isMatchStaticTest: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Methods.RegexIsMatchTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexIsMatchTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "IsMatchStaticTest()",
                    line: "51"
                } ));
                t.Fixture.isMatchStaticTest();
            },
            isMatchStaticWithOptionsTest: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Methods.RegexIsMatchTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexIsMatchTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "IsMatchStaticWithOptionsTest()",
                    line: "65"
                } ));
                t.Fixture.isMatchStaticWithOptionsTest();
            },
            isMatchStaticWithOptionsAndTimeoutTest: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Methods.RegexIsMatchTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexIsMatchTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "IsMatchStaticWithOptionsAndTimeoutTest()",
                    line: "79"
                } ));
                t.Fixture.isMatchStaticWithOptionsAndTimeoutTest();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                    project: "Batch1",
                    className: "Bridge.ClientTest.Text.RegularExpressions.Methods.RegexIsMatchTests",
                    file: "Batch1\\Text\\RegularExpressions\\Methods\\RegexIsMatchTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.RegexLookaheadTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexLookaheadTests)],
        statics: {
            msdnPositiveLookaheadTest: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexLookaheadTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexLookaheadTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "MsdnPositiveLookaheadTest()",
                    line: "12"
                } ));
                t.Fixture.msdnPositiveLookaheadTest();
            },
            msdnNegativeLookaheadTest: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexLookaheadTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexLookaheadTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "MsdnNegativeLookaheadTest()",
                    line: "36"
                } ));
                t.Fixture.msdnNegativeLookaheadTest();
            },
            positiveLookaheadTest1: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexLookaheadTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexLookaheadTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "PositiveLookaheadTest1()",
                    line: "77"
                } ));
                t.Fixture.positiveLookaheadTest1();
            },
            positiveLookaheadTest2: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexLookaheadTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexLookaheadTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "PositiveLookaheadTest2()",
                    line: "90"
                } ));
                t.Fixture.positiveLookaheadTest2();
            },
            negativeLookaheadTest1: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexLookaheadTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexLookaheadTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "NegativeLookaheadTest1()",
                    line: "104"
                } ));
                t.Fixture.negativeLookaheadTest1();
            },
            negativeLookaheadTest2: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexLookaheadTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexLookaheadTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "NegativeLookaheadTest2()",
                    line: "118"
                } ));
                t.Fixture.negativeLookaheadTest2();
            },
            positiveLookaheadWithGroupTest: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexLookaheadTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexLookaheadTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "PositiveLookaheadWithGroupTest()",
                    line: "131"
                } ));
                t.Fixture.positiveLookaheadWithGroupTest();
            },
            negativeLookaheadWithGroupTest: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexLookaheadTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexLookaheadTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "NegativeLookaheadWithGroupTest()",
                    line: "154"
                } ));
                t.Fixture.negativeLookaheadWithGroupTest();
            },
            positiveLookaheadWithOffsetTest: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexLookaheadTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexLookaheadTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "PositiveLookaheadWithOffsetTest()",
                    line: "176"
                } ));
                t.Fixture.positiveLookaheadWithOffsetTest();
            },
            negativeLookaheadWithOffsetTest: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexLookaheadTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexLookaheadTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "NegativeLookaheadWithOffsetTest()",
                    line: "193"
                } ));
                t.Fixture.negativeLookaheadWithOffsetTest();
            },
            positiveLookaheadGroupCombineTest: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexLookaheadTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexLookaheadTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "PositiveLookaheadGroupCombineTest()",
                    line: "254"
                } ));
                t.Fixture.positiveLookaheadGroupCombineTest();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                    project: "Batch1",
                    className: "Bridge.ClientTest.Text.RegularExpressions.RegexLookaheadTests",
                    file: "Batch1\\Text\\RegularExpressions\\RegexLookaheadTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.RegexLookbehindTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexLookbehindTests)],
        statics: {
            msdnPositiveLookbehindTest: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexLookbehindTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexLookbehindTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "MsdnPositiveLookbehindTest()",
                    line: "12"
                } ));
                t.Fixture.msdnPositiveLookbehindTest();
            },
            msdnNegativeLookbehindTest: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexLookbehindTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexLookbehindTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "MsdnNegativeLookbehindTest()",
                    line: "37"
                } ));
                t.Fixture.msdnNegativeLookbehindTest();
            },
            positiveLookbehindTest1: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexLookbehindTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexLookbehindTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "PositiveLookbehindTest1()",
                    line: "65"
                } ));
                t.Fixture.positiveLookbehindTest1();
            },
            positiveLookbehindTest2: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexLookbehindTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexLookbehindTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "PositiveLookbehindTest2()",
                    line: "79"
                } ));
                t.Fixture.positiveLookbehindTest2();
            },
            positiveLookbehindTest3: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexLookbehindTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexLookbehindTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "PositiveLookbehindTest3()",
                    line: "92"
                } ));
                t.Fixture.positiveLookbehindTest3();
            },
            positiveLookbehindWithMatchOffsetTest: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexLookbehindTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexLookbehindTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "PositiveLookbehindWithMatchOffsetTest()",
                    line: "106"
                } ));
                t.Fixture.positiveLookbehindWithMatchOffsetTest();
            },
            negativeLookbehindTest1: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexLookbehindTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexLookbehindTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "NegativeLookbehindTest1()",
                    line: "120"
                } ));
                t.Fixture.negativeLookbehindTest1();
            },
            negativeLookbehindTest2: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexLookbehindTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexLookbehindTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "NegativeLookbehindTest2()",
                    line: "133"
                } ));
                t.Fixture.negativeLookbehindTest2();
            },
            positiveLookbehindWithGroupTest: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexLookbehindTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexLookbehindTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "PositiveLookbehindWithGroupTest()",
                    line: "147"
                } ));
                t.Fixture.positiveLookbehindWithGroupTest();
            },
            negativeLookbehindWithGroupTest: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexLookbehindTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexLookbehindTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "NegativeLookbehindWithGroupTest()",
                    line: "170"
                } ));
                t.Fixture.negativeLookbehindWithGroupTest();
            },
            positiveLookbehindWithOffsetTest: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexLookbehindTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexLookbehindTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "PositiveLookbehindWithOffsetTest()",
                    line: "192"
                } ));
                t.Fixture.positiveLookbehindWithOffsetTest();
            },
            negativeLookbehindWithOffsetTest: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexLookbehindTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexLookbehindTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "NegativeLookbehindWithOffsetTest()",
                    line: "209"
                } ));
                t.Fixture.negativeLookbehindWithOffsetTest();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                    project: "Batch1",
                    className: "Bridge.ClientTest.Text.RegularExpressions.RegexLookbehindTests",
                    file: "Batch1\\Text\\RegularExpressions\\RegexLookbehindTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchCollectionTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Entities.RegexMatchCollectionTests)],
        statics: {
            caseDataTest: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Entities.RegexMatchCollectionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchCollectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "CaseDataTest()",
                    line: "35"
                } ));
                t.Fixture.caseDataTest();
            },
            matchCollectionFieldsTest: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Entities.RegexMatchCollectionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchCollectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "MatchCollectionFieldsTest()",
                    line: "67"
                } ));
                t.Fixture.matchCollectionFieldsTest();
            },
            matchCollectionItemsTest: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Entities.RegexMatchCollectionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchCollectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "MatchCollectionItemsTest()",
                    line: "78"
                } ));
                t.Fixture.matchCollectionItemsTest();
            },
            matchCollectionForeachTest: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Entities.RegexMatchCollectionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchCollectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "MatchCollectionForeachTest()",
                    line: "94"
                } ));
                t.Fixture.matchCollectionForeachTest();
            },
            matchCollectionEnumeratorTest: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Entities.RegexMatchCollectionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchCollectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "MatchCollectionEnumeratorTest()",
                    line: "111"
                } ));
                t.Fixture.matchCollectionEnumeratorTest();
            },
            matchCollectionCopyToTest: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Entities.RegexMatchCollectionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchCollectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "MatchCollectionCopyToTest()",
                    line: "135"
                } ));
                t.Fixture.matchCollectionCopyToTest();
            },
            matchCollectionWithEmptyPatternTest: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Entities.RegexMatchCollectionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchCollectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "MatchCollectionWithEmptyPatternTest()",
                    line: "155"
                } ));
                t.Fixture.matchCollectionWithEmptyPatternTest();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                    project: "Batch1",
                    className: "Bridge.ClientTest.Text.RegularExpressions.Entities.RegexMatchCollectionTests",
                    file: "Batch1\\Text\\RegularExpressions\\Entities\\RegexMatchCollectionTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchEntityTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Entities.RegexMatchEntityTests)],
        statics: {
            caseDataTest: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Entities.RegexMatchEntityTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchEntityTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "CaseDataTest()",
                    line: "28"
                } ));
                t.Fixture.caseDataTest();
            },
            matchEmptyPatternTest: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Entities.RegexMatchEntityTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchEntityTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "MatchEmptyPatternTest()",
                    line: "60"
                } ));
                t.Fixture.matchEmptyPatternTest();
            },
            matchEmptyFieldsTest: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Entities.RegexMatchEntityTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchEntityTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "MatchEmptyFieldsTest()",
                    line: "72"
                } ));
                t.Fixture.matchEmptyFieldsTest();
            },
            matchNextMatchTest: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Entities.RegexMatchEntityTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchEntityTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "MatchNextMatchTest()",
                    line: "79"
                } ));
                t.Fixture.matchNextMatchTest();
            },
            matchNextMatchWithEmptyPatternTest: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Entities.RegexMatchEntityTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchEntityTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "MatchNextMatchWithEmptyPatternTest()",
                    line: "95"
                } ));
                t.Fixture.matchNextMatchWithEmptyPatternTest();
            },
            matchResultTest: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Entities.RegexMatchEntityTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchEntityTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "MatchResultTest()",
                    line: "115"
                } ));
                t.Fixture.matchResultTest();
            },
            matchSearchGroupByNameTest: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Entities.RegexMatchEntityTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchEntityTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "MatchSearchGroupByNameTest()",
                    line: "133"
                } ));
                t.Fixture.matchSearchGroupByNameTest();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                    project: "Batch1",
                    className: "Bridge.ClientTest.Text.RegularExpressions.Entities.RegexMatchEntityTests",
                    file: "Batch1\\Text\\RegularExpressions\\Entities\\RegexMatchEntityTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchesTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Methods.RegexMatchesTests)],
        statics: {
            matchesTest: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Methods.RegexMatchesTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchesTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "MatchesTest()",
                    line: "12"
                } ));
                t.Fixture.matchesTest();
            },
            matchesAtPositionTest: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Methods.RegexMatchesTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchesTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "MatchesAtPositionTest()",
                    line: "36"
                } ));
                t.Fixture.matchesAtPositionTest();
            },
            matchesStaticTest: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Methods.RegexMatchesTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchesTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "MatchesStaticTest()",
                    line: "64"
                } ));
                t.Fixture.matchesStaticTest();
            },
            matchesStaticWithOptionsTest: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Methods.RegexMatchesTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchesTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "MatchesStaticWithOptionsTest()",
                    line: "86"
                } ));
                t.Fixture.matchesStaticWithOptionsTest();
            },
            matchesStaticWithOptionsAndTimeoutTest: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Methods.RegexMatchesTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchesTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "MatchesStaticWithOptionsAndTimeoutTest()",
                    line: "122"
                } ));
                t.Fixture.matchesStaticWithOptionsAndTimeoutTest();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                    project: "Batch1",
                    className: "Bridge.ClientTest.Text.RegularExpressions.Methods.RegexMatchesTests",
                    file: "Batch1\\Text\\RegularExpressions\\Methods\\RegexMatchesTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchSparseTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Entities.RegexMatchSparseTests)],
        statics: {
            groupOrderingTest1: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Entities.RegexMatchSparseTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchSparseTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "GroupOrderingTest1()",
                    line: "10"
                } ));
                t.Fixture.groupOrderingTest1();
            },
            groupOrderingTest2: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Entities.RegexMatchSparseTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchSparseTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "GroupOrderingTest2()",
                    line: "36"
                } ));
                t.Fixture.groupOrderingTest2();
            },
            groupOrderingTest3: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Entities.RegexMatchSparseTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchSparseTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "GroupOrderingTest3()",
                    line: "65"
                } ));
                t.Fixture.groupOrderingTest3();
            },
            sparseOrderingTest: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Entities.RegexMatchSparseTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchSparseTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "SparseOrderingTest()",
                    line: "94"
                } ));
                t.Fixture.sparseOrderingTest();
            },
            groupCapturesMergeTest: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Entities.RegexMatchSparseTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchSparseTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "GroupCapturesMergeTest()",
                    line: "129"
                } ));
                t.Fixture.groupCapturesMergeTest();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                    project: "Batch1",
                    className: "Bridge.ClientTest.Text.RegularExpressions.Entities.RegexMatchSparseTests",
                    file: "Batch1\\Text\\RegularExpressions\\Entities\\RegexMatchSparseTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Methods.RegexMatchTests)],
        statics: {
            matchTest: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Methods.RegexMatchTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "MatchTest()",
                    line: "12"
                } ));
                t.Fixture.matchTest();
            },
            matchAtPositionTest: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Methods.RegexMatchTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "MatchAtPositionTest()",
                    line: "54"
                } ));
                t.Fixture.matchAtPositionTest();
            },
            matchAtPositionAndLengthTest: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Methods.RegexMatchTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "MatchAtPositionAndLengthTest()",
                    line: "96"
                } ));
                t.Fixture.matchAtPositionAndLengthTest();
            },
            matchStaticTest: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Methods.RegexMatchTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "MatchStaticTest()",
                    line: "142"
                } ));
                t.Fixture.matchStaticTest();
            },
            matchStaticWithOptionsTest: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Methods.RegexMatchTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "MatchStaticWithOptionsTest()",
                    line: "169"
                } ));
                t.Fixture.matchStaticWithOptionsTest();
            },
            matchStaticWithOptionsAndTimeoutTest: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Methods.RegexMatchTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "MatchStaticWithOptionsAndTimeoutTest()",
                    line: "193"
                } ));
                t.Fixture.matchStaticWithOptionsAndTimeoutTest();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                    project: "Batch1",
                    className: "Bridge.ClientTest.Text.RegularExpressions.Methods.RegexMatchTests",
                    file: "Batch1\\Text\\RegularExpressions\\Methods\\RegexMatchTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchTimeoutExceptionTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.RegexMatchTimeoutExceptionTests)],
        statics: {
            typePropertiesAreCorrect: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.RegexMatchTimeoutExceptionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchTimeoutExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TypePropertiesAreCorrect()",
                    line: "13"
                } ));
                t.Fixture.typePropertiesAreCorrect();
            },
            defaultConstructorWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.RegexMatchTimeoutExceptionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchTimeoutExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "DefaultConstructorWorks()",
                    line: "24"
                } ));
                t.Fixture.defaultConstructorWorks();
            },
            constructorWithMessageWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.RegexMatchTimeoutExceptionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchTimeoutExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ConstructorWithMessageWorks()",
                    line: "33"
                } ));
                t.Fixture.constructorWithMessageWorks();
            },
            constructorWithMessageAndInnerExceptionWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.RegexMatchTimeoutExceptionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchTimeoutExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ConstructorWithMessageAndInnerExceptionWorks()",
                    line: "42"
                } ));
                t.Fixture.constructorWithMessageAndInnerExceptionWorks();
            },
            constructorWithExceptionDetailsWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.RegexMatchTimeoutExceptionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchTimeoutExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ConstructorWithExceptionDetailsWorks()",
                    line: "52"
                } ));
                t.Fixture.constructorWithExceptionDetailsWorks();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                    project: "Batch1",
                    className: "Bridge.ClientTest.Exceptions.RegexMatchTimeoutExceptionTests",
                    file: "Batch1\\Exceptions\\RegexMatchTimeoutExceptionTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.RegexNonbacktrackingTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexNonbacktrackingTests)],
        statics: {
            msdnNonBacktrackingTest1: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexNonbacktrackingTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexNonbacktrackingTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "MsdnNonBacktrackingTest1()",
                    line: "12"
                } ));
                t.Fixture.msdnNonBacktrackingTest1();
            },
            msdnNonBacktrackingTest2: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexNonbacktrackingTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexNonbacktrackingTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "MsdnNonBacktrackingTest2()",
                    line: "24"
                } ));
                t.Fixture.msdnNonBacktrackingTest2();
            },
            nonBacktrackingTest1: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexNonbacktrackingTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexNonbacktrackingTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "NonBacktrackingTest1()",
                    line: "38"
                } ));
                t.Fixture.nonBacktrackingTest1();
            },
            nonBacktrackingTest2: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexNonbacktrackingTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexNonbacktrackingTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "NonBacktrackingTest2()",
                    line: "55"
                } ));
                t.Fixture.nonBacktrackingTest2();
            },
            nonBacktrackingTest3: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexNonbacktrackingTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexNonbacktrackingTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "NonBacktrackingTest3()",
                    line: "67"
                } ));
                t.Fixture.nonBacktrackingTest3();
            },
            nonBacktrackingTest4: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexNonbacktrackingTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexNonbacktrackingTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "NonBacktrackingTest4()",
                    line: "79"
                } ));
                t.Fixture.nonBacktrackingTest4();
            },
            nonBacktrackingTest5: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexNonbacktrackingTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexNonbacktrackingTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "NonBacktrackingTest5()",
                    line: "93"
                } ));
                t.Fixture.nonBacktrackingTest5();
            },
            nonBacktrackingWithOffsetTest: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexNonbacktrackingTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexNonbacktrackingTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "NonBacktrackingWithOffsetTest()",
                    line: "118"
                } ));
                t.Fixture.nonBacktrackingWithOffsetTest();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                    project: "Batch1",
                    className: "Bridge.ClientTest.Text.RegularExpressions.RegexNonbacktrackingTests",
                    file: "Batch1\\Text\\RegularExpressions\\RegexNonbacktrackingTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.RegexOptionsTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexOptionsTests)],
        statics: {
            msdnIgnoreCaseOptionTest: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexOptionsTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexOptionsTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "MsdnIgnoreCaseOptionTest()",
                    line: "12"
                } ));
                t.Fixture.msdnIgnoreCaseOptionTest();
            },
            msdnMultilineOptionTest1: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexOptionsTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexOptionsTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "MsdnMultilineOptionTest1()",
                    line: "44"
                } ));
                t.Fixture.msdnMultilineOptionTest1();
            },
            msdnMultilineOptionTest2: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexOptionsTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexOptionsTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "MsdnMultilineOptionTest2()",
                    line: "65"
                } ));
                t.Fixture.msdnMultilineOptionTest2();
            },
            msdnSinglelineOptionTest: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexOptionsTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexOptionsTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "MsdnSinglelineOptionTest()",
                    line: "132"
                } ));
                t.Fixture.msdnSinglelineOptionTest();
            },
            msdnIgnoreWhitespaceOptionTest: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexOptionsTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexOptionsTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "MsdnIgnoreWhitespaceOptionTest()",
                    line: "146"
                } ));
                t.Fixture.msdnIgnoreWhitespaceOptionTest();
            },
            msdnExplicitCaptureOptionTest1: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexOptionsTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexOptionsTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "MsdnExplicitCaptureOptionTest1()",
                    line: "215"
                } ));
                t.Fixture.msdnExplicitCaptureOptionTest1();
            },
            msdnExplicitCaptureOptionTest2: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexOptionsTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexOptionsTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "MsdnExplicitCaptureOptionTest2()",
                    line: "284"
                } ));
                t.Fixture.msdnExplicitCaptureOptionTest2();
            },
            ignoreCaseOptionTest1: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexOptionsTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexOptionsTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "IgnoreCaseOptionTest1()",
                    line: "325"
                } ));
                t.Fixture.ignoreCaseOptionTest1();
            },
            ignoreCaseOptionTest2: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexOptionsTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexOptionsTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "IgnoreCaseOptionTest2()",
                    line: "338"
                } ));
                t.Fixture.ignoreCaseOptionTest2();
            },
            ignoreCaseOptionTest3: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexOptionsTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexOptionsTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "IgnoreCaseOptionTest3()",
                    line: "352"
                } ));
                t.Fixture.ignoreCaseOptionTest3();
            },
            defaultLineOptionsTest1: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexOptionsTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexOptionsTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "DefaultLineOptionsTest1()",
                    line: "366"
                } ));
                t.Fixture.defaultLineOptionsTest1();
            },
            defaultLineOptionsTest2: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexOptionsTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexOptionsTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "DefaultLineOptionsTest2()",
                    line: "380"
                } ));
                t.Fixture.defaultLineOptionsTest2();
            },
            multilineOptionTest1: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexOptionsTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexOptionsTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "MultilineOptionTest1()",
                    line: "394"
                } ));
                t.Fixture.multilineOptionTest1();
            },
            multilineOptionTest2: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexOptionsTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexOptionsTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "MultilineOptionTest2()",
                    line: "447"
                } ));
                t.Fixture.multilineOptionTest2();
            },
            singlelineOptionTest: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexOptionsTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexOptionsTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "SinglelineOptionTest()",
                    line: "479"
                } ));
                t.Fixture.singlelineOptionTest();
            },
            singlelineDotCharTest: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexOptionsTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexOptionsTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "SinglelineDotCharTest()",
                    line: "493"
                } ));
                t.Fixture.singlelineDotCharTest();
            },
            multilineAndSinglelineOptionsTest: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexOptionsTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexOptionsTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "MultilineAndSinglelineOptionsTest()",
                    line: "507"
                } ));
                t.Fixture.multilineAndSinglelineOptionsTest();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                    project: "Batch1",
                    className: "Bridge.ClientTest.Text.RegularExpressions.RegexOptionsTests",
                    file: "Batch1\\Text\\RegularExpressions\\RegexOptionsTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.RegexQuantifiersTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexQuantifiersTests)],
        statics: {
            msdnZeroOrMoreTimesTest: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexQuantifiersTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexQuantifiersTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "MsdnZeroOrMoreTimesTest()",
                    line: "12"
                } ));
                t.Fixture.msdnZeroOrMoreTimesTest();
            },
            msdnOneOrMoreTimesTest: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexQuantifiersTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexQuantifiersTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "MsdnOneOrMoreTimesTest()",
                    line: "24"
                } ));
                t.Fixture.msdnOneOrMoreTimesTest();
            },
            msdnZeroOrOneTimeTest: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexQuantifiersTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexQuantifiersTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "MsdnZeroOrOneTimeTest()",
                    line: "36"
                } ));
                t.Fixture.msdnZeroOrOneTimeTest();
            },
            msdnNTimesTest1: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexQuantifiersTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexQuantifiersTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "MsdnNTimesTest1()",
                    line: "48"
                } ));
                t.Fixture.msdnNTimesTest1();
            },
            msdnNTimesTest2: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexQuantifiersTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexQuantifiersTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "MsdnNTimesTest2()",
                    line: "60"
                } ));
                t.Fixture.msdnNTimesTest2();
            },
            msdnNOrMoreTimesTest: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexQuantifiersTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexQuantifiersTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "MsdnNOrMoreTimesTest()",
                    line: "72"
                } ));
                t.Fixture.msdnNOrMoreTimesTest();
            },
            msdnNToMTimesTest: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexQuantifiersTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexQuantifiersTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "MsdnNToMTimesTest()",
                    line: "84"
                } ));
                t.Fixture.msdnNToMTimesTest();
            },
            msdnLazyZeroOrMoreTimesTest: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexQuantifiersTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexQuantifiersTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "MsdnLazyZeroOrMoreTimesTest()",
                    line: "96"
                } ));
                t.Fixture.msdnLazyZeroOrMoreTimesTest();
            },
            msdnLazyOneOrMoreTimesTest: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexQuantifiersTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexQuantifiersTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "MsdnLazyOneOrMoreTimesTest()",
                    line: "108"
                } ));
                t.Fixture.msdnLazyOneOrMoreTimesTest();
            },
            msdnLazyZeroOrOneTimeTest: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexQuantifiersTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexQuantifiersTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "MsdnLazyZeroOrOneTimeTest()",
                    line: "120"
                } ));
                t.Fixture.msdnLazyZeroOrOneTimeTest();
            },
            msdnLazyNTimesTest: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexQuantifiersTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexQuantifiersTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "MsdnLazyNTimesTest()",
                    line: "132"
                } ));
                t.Fixture.msdnLazyNTimesTest();
            },
            msdnLazyNOrMoreTimesTest: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexQuantifiersTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexQuantifiersTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "MsdnLazyNOrMoreTimesTest()",
                    line: "144"
                } ));
                t.Fixture.msdnLazyNOrMoreTimesTest();
            },
            msdnLazyNToMTimesTest: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexQuantifiersTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexQuantifiersTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "MsdnLazyNToMTimesTest()",
                    line: "156"
                } ));
                t.Fixture.msdnLazyNToMTimesTest();
            },
            zeroOrMoreTimesTest: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexQuantifiersTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexQuantifiersTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ZeroOrMoreTimesTest()",
                    line: "170"
                } ));
                t.Fixture.zeroOrMoreTimesTest();
            },
            oneOrMoreTimesTest1: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexQuantifiersTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexQuantifiersTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "OneOrMoreTimesTest1()",
                    line: "190"
                } ));
                t.Fixture.oneOrMoreTimesTest1();
            },
            oneOrMoreTimesTest2: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexQuantifiersTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexQuantifiersTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "OneOrMoreTimesTest2()",
                    line: "210"
                } ));
                t.Fixture.oneOrMoreTimesTest2();
            },
            oneOrMoreTimesTest3: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexQuantifiersTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexQuantifiersTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "OneOrMoreTimesTest3()",
                    line: "227"
                } ));
                t.Fixture.oneOrMoreTimesTest3();
            },
            zeroOrOneTimeTest: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexQuantifiersTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexQuantifiersTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ZeroOrOneTimeTest()",
                    line: "247"
                } ));
                t.Fixture.zeroOrOneTimeTest();
            },
            lazyZeroOrMoreTimesTest1: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexQuantifiersTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexQuantifiersTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "LazyZeroOrMoreTimesTest1()",
                    line: "267"
                } ));
                t.Fixture.lazyZeroOrMoreTimesTest1();
            },
            lazyZeroOrMoreTimesTest2: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexQuantifiersTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexQuantifiersTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "LazyZeroOrMoreTimesTest2()",
                    line: "287"
                } ));
                t.Fixture.lazyZeroOrMoreTimesTest2();
            },
            lazyOneOrMoreTimesTest1: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexQuantifiersTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexQuantifiersTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "LazyOneOrMoreTimesTest1()",
                    line: "307"
                } ));
                t.Fixture.lazyOneOrMoreTimesTest1();
            },
            lazyOneOrMoreTimesTest2: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexQuantifiersTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexQuantifiersTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "LazyOneOrMoreTimesTest2()",
                    line: "327"
                } ));
                t.Fixture.lazyOneOrMoreTimesTest2();
            },
            lazyZeroOrOneTimeTest1: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexQuantifiersTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexQuantifiersTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "LazyZeroOrOneTimeTest1()",
                    line: "347"
                } ));
                t.Fixture.lazyZeroOrOneTimeTest1();
            },
            lazyZeroOrOneTimeTest2: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexQuantifiersTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexQuantifiersTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "LazyZeroOrOneTimeTest2()",
                    line: "367"
                } ));
                t.Fixture.lazyZeroOrOneTimeTest2();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                    project: "Batch1",
                    className: "Bridge.ClientTest.Text.RegularExpressions.RegexQuantifiersTests",
                    file: "Batch1\\Text\\RegularExpressions\\RegexQuantifiersTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.RegexReplaceTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Methods.RegexReplaceTests)],
        statics: {
            replaceTest1: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Methods.RegexReplaceTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexReplaceTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ReplaceTest1()",
                    line: "13"
                } ));
                t.Fixture.replaceTest1();
            },
            replaceAtPositionTest: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Methods.RegexReplaceTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexReplaceTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ReplaceAtPositionTest()",
                    line: "42"
                } ));
                t.Fixture.replaceAtPositionTest();
            },
            replaceAtPositionAndLengthTest: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Methods.RegexReplaceTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexReplaceTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ReplaceAtPositionAndLengthTest()",
                    line: "56"
                } ));
                t.Fixture.replaceAtPositionAndLengthTest();
            },
            replaceWithEvaluatorTest: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Methods.RegexReplaceTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexReplaceTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ReplaceWithEvaluatorTest()",
                    line: "91"
                } ));
                t.Fixture.replaceWithEvaluatorTest();
            },
            replaceWithEvaluatorAndCountTest: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Methods.RegexReplaceTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexReplaceTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ReplaceWithEvaluatorAndCountTest()",
                    line: "106"
                } ));
                t.Fixture.replaceWithEvaluatorAndCountTest();
            },
            replaceWithEvaluatorAndCountAtPostitionTest: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Methods.RegexReplaceTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexReplaceTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ReplaceWithEvaluatorAndCountAtPostitionTest()",
                    line: "118"
                } ));
                t.Fixture.replaceWithEvaluatorAndCountAtPostitionTest();
            },
            replaceStaticTest1: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Methods.RegexReplaceTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexReplaceTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ReplaceStaticTest1()",
                    line: "134"
                } ));
                t.Fixture.replaceStaticTest1();
            },
            replaceStaticTest2: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Methods.RegexReplaceTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexReplaceTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ReplaceStaticTest2()",
                    line: "147"
                } ));
                t.Fixture.replaceStaticTest2();
            },
            replaceStaticWithOptionsTest: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Methods.RegexReplaceTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexReplaceTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ReplaceStaticWithOptionsTest()",
                    line: "173"
                } ));
                t.Fixture.replaceStaticWithOptionsTest();
            },
            replaceStaticWithOptionsAndTimeoutTest: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Methods.RegexReplaceTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexReplaceTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ReplaceStaticWithOptionsAndTimeoutTest()",
                    line: "199"
                } ));
                t.Fixture.replaceStaticWithOptionsAndTimeoutTest();
            },
            replaceStaticWithEvaluatorTest: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Methods.RegexReplaceTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexReplaceTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ReplaceStaticWithEvaluatorTest()",
                    line: "239"
                } ));
                t.Fixture.replaceStaticWithEvaluatorTest();
            },
            replaceStaticWithEvaluatorAndOptionsTest: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Methods.RegexReplaceTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexReplaceTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ReplaceStaticWithEvaluatorAndOptionsTest()",
                    line: "252"
                } ));
                t.Fixture.replaceStaticWithEvaluatorAndOptionsTest();
            },
            replaceStaticWithEvaluatorAndOptionsAndTimoutTest: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Methods.RegexReplaceTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexReplaceTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ReplaceStaticWithEvaluatorAndOptionsAndTimoutTest()",
                    line: "269"
                } ));
                t.Fixture.replaceStaticWithEvaluatorAndOptionsAndTimoutTest();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                    project: "Batch1",
                    className: "Bridge.ClientTest.Text.RegularExpressions.Methods.RegexReplaceTests",
                    file: "Batch1\\Text\\RegularExpressions\\Methods\\RegexReplaceTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.RegexSplitTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Methods.RegexSplitTests)],
        statics: {
            splitTest1: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Methods.RegexSplitTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexSplitTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "SplitTest1()",
                    line: "20"
                } ));
                t.Fixture.splitTest1();
            },
            splitTest2: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Methods.RegexSplitTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexSplitTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "SplitTest2()",
                    line: "31"
                } ));
                t.Fixture.splitTest2();
            },
            splitTest3: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Methods.RegexSplitTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexSplitTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "SplitTest3()",
                    line: "44"
                } ));
                t.Fixture.splitTest3();
            },
            splitTest4: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Methods.RegexSplitTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexSplitTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "SplitTest4()",
                    line: "55"
                } ));
                t.Fixture.splitTest4();
            },
            splitTest5: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Methods.RegexSplitTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexSplitTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "SplitTest5()",
                    line: "68"
                } ));
                t.Fixture.splitTest5();
            },
            splitWithCountTest1: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Methods.RegexSplitTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexSplitTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "SplitWithCountTest1()",
                    line: "80"
                } ));
                t.Fixture.splitWithCountTest1();
            },
            splitWithCountTest2: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Methods.RegexSplitTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexSplitTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "SplitWithCountTest2()",
                    line: "93"
                } ));
                t.Fixture.splitWithCountTest2();
            },
            splitWithCountTest3: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Methods.RegexSplitTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexSplitTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "SplitWithCountTest3()",
                    line: "106"
                } ));
                t.Fixture.splitWithCountTest3();
            },
            splitWithCountTest4: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Methods.RegexSplitTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexSplitTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "SplitWithCountTest4()",
                    line: "119"
                } ));
                t.Fixture.splitWithCountTest4();
            },
            splitWithCountAndStartAtTest1: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Methods.RegexSplitTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexSplitTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "SplitWithCountAndStartAtTest1()",
                    line: "131"
                } ));
                t.Fixture.splitWithCountAndStartAtTest1();
            },
            splitWithCountAndStartAtTest2: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Methods.RegexSplitTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexSplitTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "SplitWithCountAndStartAtTest2()",
                    line: "149"
                } ));
                t.Fixture.splitWithCountAndStartAtTest2();
            },
            splitWithCountAndStartAtTest3: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Methods.RegexSplitTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexSplitTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "SplitWithCountAndStartAtTest3()",
                    line: "163"
                } ));
                t.Fixture.splitWithCountAndStartAtTest3();
            },
            splitWithCountAndStartAtTest4: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Methods.RegexSplitTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexSplitTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "SplitWithCountAndStartAtTest4()",
                    line: "176"
                } ));
                t.Fixture.splitWithCountAndStartAtTest4();
            },
            splitStaticTest1: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Methods.RegexSplitTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexSplitTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "SplitStaticTest1()",
                    line: "188"
                } ));
                t.Fixture.splitStaticTest1();
            },
            splitStaticTest2: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Methods.RegexSplitTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexSplitTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "SplitStaticTest2()",
                    line: "198"
                } ));
                t.Fixture.splitStaticTest2();
            },
            splitStaticTest3: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Methods.RegexSplitTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexSplitTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "SplitStaticTest3()",
                    line: "210"
                } ));
                t.Fixture.splitStaticTest3();
            },
            splitStaticTest4: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Methods.RegexSplitTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexSplitTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "SplitStaticTest4()",
                    line: "220"
                } ));
                t.Fixture.splitStaticTest4();
            },
            splitStaticTest5: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Methods.RegexSplitTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexSplitTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "SplitStaticTest5()",
                    line: "232"
                } ));
                t.Fixture.splitStaticTest5();
            },
            splitStaticWithOptionsTest: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Methods.RegexSplitTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexSplitTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "SplitStaticWithOptionsTest()",
                    line: "243"
                } ));
                t.Fixture.splitStaticWithOptionsTest();
            },
            splitStaticWithOptionsAndTimeout: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Methods.RegexSplitTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexSplitTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "SplitStaticWithOptionsAndTimeout()",
                    line: "255"
                } ));
                t.Fixture.splitStaticWithOptionsAndTimeout();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                    project: "Batch1",
                    className: "Bridge.ClientTest.Text.RegularExpressions.Methods.RegexSplitTests",
                    file: "Batch1\\Text\\RegularExpressions\\Methods\\RegexSplitTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.RegexTimeoutTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexTimeoutTests)],
        statics: {
            regexTimeoutValidationWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexTimeoutTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexTimeoutTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "RegexTimeoutValidationWorks()",
                    line: "32"
                } ));
                t.Fixture.regexTimeoutValidationWorks();
            },
            regexIsMatchWorksWithShortTimeout: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexTimeoutTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexTimeoutTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "RegexIsMatchWorksWithShortTimeout()",
                    line: "47"
                } ));
                t.Fixture.regexIsMatchWorksWithShortTimeout();
            },
            regexIsMatchWorksWithLongTimeout: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexTimeoutTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexTimeoutTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "RegexIsMatchWorksWithLongTimeout()",
                    line: "54"
                } ));
                t.Fixture.regexIsMatchWorksWithLongTimeout();
            },
            regexMatchWorksWithShortTimeout: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexTimeoutTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexTimeoutTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "RegexMatchWorksWithShortTimeout()",
                    line: "62"
                } ));
                t.Fixture.regexMatchWorksWithShortTimeout();
            },
            regexMatchWorksWithLongTimeout: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexTimeoutTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexTimeoutTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "RegexMatchWorksWithLongTimeout()",
                    line: "69"
                } ));
                t.Fixture.regexMatchWorksWithLongTimeout();
            },
            regexNextMatchWorksWithShortTimeout: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexTimeoutTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexTimeoutTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "RegexNextMatchWorksWithShortTimeout()",
                    line: "77"
                } ));
                t.Fixture.regexNextMatchWorksWithShortTimeout();
            },
            regexNextMatchWorksWithLongTimeout: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexTimeoutTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexTimeoutTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "RegexNextMatchWorksWithLongTimeout()",
                    line: "89"
                } ));
                t.Fixture.regexNextMatchWorksWithLongTimeout();
            },
            regexReplaceWorksWithShortTimeout: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexTimeoutTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexTimeoutTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "RegexReplaceWorksWithShortTimeout()",
                    line: "100"
                } ));
                t.Fixture.regexReplaceWorksWithShortTimeout();
            },
            regexReplaceWorksWithLongTimeout: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexTimeoutTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexTimeoutTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "RegexReplaceWorksWithLongTimeout()",
                    line: "109"
                } ));
                t.Fixture.regexReplaceWorksWithLongTimeout();
            },
            regexReplaceEvaluatorWorksWithShortTimeout: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexTimeoutTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexTimeoutTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "RegexReplaceEvaluatorWorksWithShortTimeout()",
                    line: "116"
                } ));
                t.Fixture.regexReplaceEvaluatorWorksWithShortTimeout();
            },
            regexReplaceEvaluatorWorksWithLongTimeout: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexTimeoutTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexTimeoutTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "RegexReplaceEvaluatorWorksWithLongTimeout()",
                    line: "125"
                } ));
                t.Fixture.regexReplaceEvaluatorWorksWithLongTimeout();
            },
            regexSplitWorksWithShortTimeout: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexTimeoutTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexTimeoutTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "RegexSplitWorksWithShortTimeout()",
                    line: "132"
                } ));
                t.Fixture.regexSplitWorksWithShortTimeout();
            },
            regexSplitWorksWithLongTimeout: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexTimeoutTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexTimeoutTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "RegexSplitWorksWithLongTimeout()",
                    line: "141"
                } ));
                t.Fixture.regexSplitWorksWithLongTimeout();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                    project: "Batch1",
                    className: "Bridge.ClientTest.Text.RegularExpressions.RegexTimeoutTests",
                    file: "Batch1\\Text\\RegularExpressions\\RegexTimeoutTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.SByteTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.SByteTests)],
        statics: {
            typePropertiesAreCorrect: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.SByteTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SByteTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TypePropertiesAreCorrect()",
                    line: "10"
                } ));
                t.Fixture.typePropertiesAreCorrect();
            },
            castsWork: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.SByteTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SByteTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "CastsWork()",
                    line: "24"
                } ));
                t.Fixture.castsWork();
            },
            defaultValueIs0: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.SByteTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SByteTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "DefaultValueIs0()",
                    line: "68"
                } ));
                t.Fixture.defaultValueIs0();
            },
            defaultConstructorReturnsZero: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.SByteTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SByteTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "DefaultConstructorReturnsZero()",
                    line: "74"
                } ));
                t.Fixture.defaultConstructorReturnsZero();
            },
            creatingInstanceReturnsZero: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.SByteTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SByteTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "CreatingInstanceReturnsZero()",
                    line: "80"
                } ));
                t.Fixture.creatingInstanceReturnsZero();
            },
            constantsWork: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.SByteTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SByteTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ConstantsWork()",
                    line: "86"
                } ));
                t.Fixture.constantsWork();
            },
            formatWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.SByteTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SByteTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FormatWorks()",
                    line: "93"
                } ));
                t.Fixture.formatWorks();
            },
            iFormattableToStringWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.SByteTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SByteTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "IFormattableToStringWorks()",
                    line: "99"
                } ));
                t.Fixture.iFormattableToStringWorks();
            },
            tryParseWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.SByteTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SByteTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TryParseWorks()",
                    line: "105"
                } ));
                t.Fixture.tryParseWorks();
            },
            parseWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.SByteTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SByteTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ParseWorks()",
                    line: "138"
                } ));
                t.Fixture.parseWorks();
            },
            toStringWithoutRadixWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.SByteTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SByteTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ToStringWithoutRadixWorks()",
                    line: "150"
                } ));
                t.Fixture.toStringWithoutRadixWorks();
            },
            toStringWithRadixWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.SByteTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SByteTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ToStringWithRadixWorks()",
                    line: "156"
                } ));
                t.Fixture.toStringWithRadixWorks();
            },
            getHashCodeWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.SByteTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SByteTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "GetHashCodeWorks()",
                    line: "163"
                } ));
                t.Fixture.getHashCodeWorks();
            },
            equalsWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.SByteTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SByteTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "EqualsWorks()",
                    line: "171"
                } ));
                t.Fixture.equalsWorks();
            },
            iEquatableEqualsWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.SByteTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SByteTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "IEquatableEqualsWorks()",
                    line: "180"
                } ));
                t.Fixture.iEquatableEqualsWorks();
            },
            compareToWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.SByteTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SByteTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "CompareToWorks()",
                    line: "194"
                } ));
                t.Fixture.compareToWorks();
            },
            iComparableCompareToWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.SByteTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SByteTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "IComparableCompareToWorks()",
                    line: "202"
                } ));
                t.Fixture.iComparableCompareToWorks();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                    project: "Batch1",
                    className: "Bridge.ClientTest.SimpleTypes.SByteTests",
                    file: "Batch1\\SimpleTypes\\SByteTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.SerializationTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SerializationTests)],
        statics: {
            byteArrayWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SerializationTests).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SerializationTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ByteArrayWorks()",
                    line: "103"
                } ));
                Bridge.ClientTest.SerializationTests.byteArrayWorks();
            },
            guidWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SerializationTests).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SerializationTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "GuidWorks()",
                    line: "110"
                } ));
                Bridge.ClientTest.SerializationTests.guidWorks();
            },
            typeWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SerializationTests).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SerializationTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TypeWorks()",
                    line: "117"
                } ));
                Bridge.ClientTest.SerializationTests.typeWorks();
            },
            charWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SerializationTests).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SerializationTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "CharWorks()",
                    line: "123"
                } ));
                Bridge.ClientTest.SerializationTests.charWorks();
            },
            int64Works: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SerializationTests).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SerializationTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "Int64Works()",
                    line: "130"
                } ));
                Bridge.ClientTest.SerializationTests.int64Works();
            },
            uInt64Works: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SerializationTests).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SerializationTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "UInt64Works()",
                    line: "140"
                } ));
                Bridge.ClientTest.SerializationTests.uInt64Works();
            },
            decimalWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SerializationTests).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SerializationTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "DecimalWorks()",
                    line: "150"
                } ));
                Bridge.ClientTest.SerializationTests.decimalWorks();
            },
            dateTimeWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SerializationTests).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SerializationTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "DateTimeWorks()",
                    line: "169"
                } ));
                Bridge.ClientTest.SerializationTests.dateTimeWorks();
            },
            arrayWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SerializationTests).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SerializationTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ArrayWorks()",
                    line: "177"
                } ));
                Bridge.ClientTest.SerializationTests.arrayWorks();
            },
            enumWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SerializationTests).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SerializationTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "EnumWorks()",
                    line: "190"
                } ));
                Bridge.ClientTest.SerializationTests.enumWorks();
            },
            iListWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SerializationTests).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SerializationTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "IListWorks()",
                    line: "196"
                } ));
                Bridge.ClientTest.SerializationTests.iListWorks();
            },
            iDictionaryWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SerializationTests).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SerializationTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "IDictionaryWorks()",
                    line: "203"
                } ));
                Bridge.ClientTest.SerializationTests.iDictionaryWorks();
            },
            typeWithFieldWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SerializationTests).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SerializationTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TypeWithFieldWorks()",
                    line: "211"
                } ));
                Bridge.ClientTest.SerializationTests.typeWithFieldWorks();
            },
            complexPropertiesWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SerializationTests).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SerializationTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ComplexPropertiesWorks()",
                    line: "233"
                } ));
                Bridge.ClientTest.SerializationTests.complexPropertiesWorks();
            },
            camelCaseSettingWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SerializationTests).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SerializationTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "CamelCaseSettingWorks()",
                    line: "252"
                } ));
                Bridge.ClientTest.SerializationTests.camelCaseSettingWorks();
            },
            ignoreNullValueWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SerializationTests).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SerializationTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "IgnoreNullValueWorks()",
                    line: "263"
                } ));
                Bridge.ClientTest.SerializationTests.ignoreNullValueWorks();
            },
            typeNameHandlingWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SerializationTests).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SerializationTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TypeNameHandlingWorks()",
                    line: "274"
                } ));
                Bridge.ClientTest.SerializationTests.typeNameHandlingWorks();
            },
            anonymousTypesWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SerializationTests).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SerializationTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "AnonymousTypesWorks()",
                    line: "284"
                } ));
                Bridge.ClientTest.SerializationTests.anonymousTypesWorks();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                    project: "Batch1",
                    className: "Bridge.ClientTest.SerializationTests",
                    file: "Batch1\\Serialization\\SerializationTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.SingleTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.SingleTests)],
        statics: {
            typePropertiesAreCorrect: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.SingleTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SingleTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TypePropertiesAreCorrect()",
                    line: "10"
                } ));
                t.Fixture.typePropertiesAreCorrect();
            },
            defaultValueIs0: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.SingleTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SingleTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "DefaultValueIs0()",
                    line: "26"
                } ));
                t.Fixture.defaultValueIs0();
            },
            creatingInstanceReturnsZero: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.SingleTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SingleTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "CreatingInstanceReturnsZero()",
                    line: "32"
                } ));
                t.Fixture.creatingInstanceReturnsZero();
            },
            constantsWork: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.SingleTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SingleTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ConstantsWork()",
                    line: "38"
                } ));
                t.Fixture.constantsWork();
            },
            defaultConstructorReturnsZero: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.SingleTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SingleTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "DefaultConstructorReturnsZero()",
                    line: "50"
                } ));
                t.Fixture.defaultConstructorReturnsZero();
            },
            formatWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.SingleTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SingleTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FormatWorks()",
                    line: "56"
                } ));
                t.Fixture.formatWorks();
            },
            iFormattableToStringWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.SingleTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SingleTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "IFormattableToStringWorks()",
                    line: "62"
                } ));
                t.Fixture.iFormattableToStringWorks();
            },
            toStringWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.SingleTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SingleTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ToStringWorks()",
                    line: "68"
                } ));
                t.Fixture.toStringWorks();
            },
            toExponentialWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.SingleTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SingleTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ToExponentialWorks()",
                    line: "74"
                } ));
                t.Fixture.toExponentialWorks();
            },
            toExponentialWithFractionalDigitsWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.SingleTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SingleTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ToExponentialWithFractionalDigitsWorks()",
                    line: "80"
                } ));
                t.Fixture.toExponentialWithFractionalDigitsWorks();
            },
            toFixed: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.SingleTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SingleTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ToFixed()",
                    line: "86"
                } ));
                t.Fixture.toFixed();
            },
            toFixedWithFractionalDigitsWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.SingleTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SingleTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ToFixedWithFractionalDigitsWorks()",
                    line: "92"
                } ));
                t.Fixture.toFixedWithFractionalDigitsWorks();
            },
            toPrecisionWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.SingleTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SingleTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ToPrecisionWorks()",
                    line: "98"
                } ));
                t.Fixture.toPrecisionWorks();
            },
            toPrecisionWithPrecisionWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.SingleTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SingleTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ToPrecisionWithPrecisionWorks()",
                    line: "104"
                } ));
                t.Fixture.toPrecisionWithPrecisionWorks();
            },
            isPositiveInfinityWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.SingleTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SingleTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "IsPositiveInfinityWorks()",
                    line: "110"
                } ));
                t.Fixture.isPositiveInfinityWorks();
            },
            isNegativeInfinityWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.SingleTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SingleTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "IsNegativeInfinityWorks()",
                    line: "121"
                } ));
                t.Fixture.isNegativeInfinityWorks();
            },
            isInfinityWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.SingleTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SingleTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "IsInfinityWorks()",
                    line: "131"
                } ));
                t.Fixture.isInfinityWorks();
            },
            isFiniteWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.SingleTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SingleTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "IsFiniteWorks()",
                    line: "141"
                } ));
                t.Fixture.isFiniteWorks();
            },
            isNaNWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.SingleTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SingleTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "IsNaNWorks()",
                    line: "150"
                } ));
                t.Fixture.isNaNWorks();
            },
            getHashCodeWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.SingleTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SingleTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "GetHashCodeWorks()",
                    line: "159"
                } ));
                t.Fixture.getHashCodeWorks();
            },
            equalsWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.SingleTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SingleTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "EqualsWorks()",
                    line: "168"
                } ));
                t.Fixture.equalsWorks();
            },
            iEquatableEqualsWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.SingleTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SingleTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "IEquatableEqualsWorks()",
                    line: "177"
                } ));
                t.Fixture.iEquatableEqualsWorks();
            },
            compareToWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.SingleTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SingleTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "CompareToWorks()",
                    line: "191"
                } ));
                t.Fixture.compareToWorks();
            },
            iComparableCompareToWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.SingleTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SingleTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "IComparableCompareToWorks()",
                    line: "200"
                } ));
                t.Fixture.iComparableCompareToWorks();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                    project: "Batch1",
                    className: "Bridge.ClientTest.SimpleTypes.SingleTests",
                    file: "Batch1\\SimpleTypes\\SingleTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.StopwatchTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Diagnostics.StopwatchTests)],
        statics: {
            getTimestamp: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Diagnostics.StopwatchTests).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StopwatchTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "GetTimestamp()",
                    line: "12"
                } ));
                Bridge.ClientTest.Diagnostics.StopwatchTests.getTimestamp();
            },
            constructStartAndStop: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Diagnostics.StopwatchTests).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StopwatchTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ConstructStartAndStop()",
                    line: "21"
                } ));
                Bridge.ClientTest.Diagnostics.StopwatchTests.constructStartAndStop();
            },
            startNewAndReset: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Diagnostics.StopwatchTests).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StopwatchTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "StartNewAndReset()",
                    line: "46"
                } ));
                Bridge.ClientTest.Diagnostics.StopwatchTests.startNewAndReset();
            },
            startNewAndRestart: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Diagnostics.StopwatchTests).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StopwatchTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "StartNewAndRestart()",
                    line: "61"
                } ));
                Bridge.ClientTest.Diagnostics.StopwatchTests.startNewAndRestart();
            },
            stopShouldContinue: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Diagnostics.StopwatchTests).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StopwatchTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "StopShouldContinue()",
                    line: "89"
                } ));
                Bridge.ClientTest.Diagnostics.StopwatchTests.stopShouldContinue();
            },
            defaultConstructorWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Diagnostics.StopwatchTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StopwatchTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "DefaultConstructorWorks()",
                    line: "117"
                } ));
                t.Fixture.defaultConstructorWorks();
            },
            constantsWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Diagnostics.StopwatchTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StopwatchTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ConstantsWorks()",
                    line: "125"
                } ));
                t.Fixture.constantsWorks();
            },
            startNewWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Diagnostics.StopwatchTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StopwatchTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "StartNewWorks()",
                    line: "132"
                } ));
                t.Fixture.startNewWorks();
            },
            startAndStopWork: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Diagnostics.StopwatchTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StopwatchTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "StartAndStopWork()",
                    line: "140"
                } ));
                t.Fixture.startAndStopWork();
            },
            elapsedWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Diagnostics.StopwatchTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StopwatchTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ElapsedWorks()",
                    line: "151"
                } ));
                t.Fixture.elapsedWorks();
            },
            getTimestampWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Diagnostics.StopwatchTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StopwatchTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "GetTimestampWorks()",
                    line: "185"
                } ));
                t.Fixture.getTimestampWorks();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                    project: "Batch1",
                    className: "Bridge.ClientTest.Diagnostics.StopwatchTests",
                    file: "Batch1\\Diagnostics\\StopwatchTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.StringBuilderTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.StringBuilderTests)],
        statics: {
            typePropertiesAreCorrect: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.StringBuilderTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringBuilderTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TypePropertiesAreCorrect()",
                    line: "18"
                } ));
                t.Fixture.typePropertiesAreCorrect();
            },
            defaultConstructorWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.StringBuilderTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringBuilderTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "DefaultConstructorWorks()",
                    line: "26"
                } ));
                t.Fixture.defaultConstructorWorks();
            },
            constructorWithCapacityWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.StringBuilderTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringBuilderTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ConstructorWithCapacityWorks()",
                    line: "34"
                } ));
                t.Fixture.constructorWithCapacityWorks();
            },
            initialTextConstructorWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.StringBuilderTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringBuilderTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "InitialTextConstructorWorks()",
                    line: "42"
                } ));
                t.Fixture.initialTextConstructorWorks();
            },
            initialTextConstructorWithCapacityWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.StringBuilderTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringBuilderTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "InitialTextConstructorWithCapacityWorks()",
                    line: "50"
                } ));
                t.Fixture.initialTextConstructorWithCapacityWorks();
            },
            substringConstructorWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.StringBuilderTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringBuilderTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "SubstringConstructorWorks()",
                    line: "58"
                } ));
                t.Fixture.substringConstructorWorks();
            },
            appendBoolWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.StringBuilderTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringBuilderTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "AppendBoolWorks()",
                    line: "66"
                } ));
                t.Fixture.appendBoolWorks();
            },
            appendCharWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.StringBuilderTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringBuilderTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "AppendCharWorks()",
                    line: "75"
                } ));
                t.Fixture.appendCharWorks();
            },
            appendIntWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.StringBuilderTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringBuilderTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "AppendIntWorks()",
                    line: "84"
                } ));
                t.Fixture.appendIntWorks();
            },
            appendDoubleWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.StringBuilderTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringBuilderTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "AppendDoubleWorks()",
                    line: "93"
                } ));
                t.Fixture.appendDoubleWorks();
            },
            appendObjectWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.StringBuilderTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringBuilderTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "AppendObjectWorks()",
                    line: "102"
                } ));
                t.Fixture.appendObjectWorks();
            },
            appendStringWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.StringBuilderTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringBuilderTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "AppendStringWorks()",
                    line: "111"
                } ));
                t.Fixture.appendStringWorks();
            },
            appendLineWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.StringBuilderTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringBuilderTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "AppendLineWorks()",
                    line: "120"
                } ));
                t.Fixture.appendLineWorks();
            },
            appendLineStringWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.StringBuilderTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringBuilderTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "AppendLineStringWorks()",
                    line: "129"
                } ));
                t.Fixture.appendLineStringWorks();
            },
            clearWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.StringBuilderTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringBuilderTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ClearWorks()",
                    line: "138"
                } ));
                t.Fixture.clearWorks();
            },
            toStringWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.StringBuilderTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringBuilderTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ToStringWorks()",
                    line: "147"
                } ));
                t.Fixture.toStringWorks();
            },
            lengthPropertyWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.StringBuilderTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringBuilderTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "LengthPropertyWorks()",
                    line: "155"
                } ));
                t.Fixture.lengthPropertyWorks();
            },
            stringBuilders: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.StringBuilderTests).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringBuilderTests, 21, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "StringBuilders()",
                    line: "163"
                } ));
                Bridge.ClientTest.Text.StringBuilderTests.stringBuilders();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                    project: "Batch1",
                    className: "Bridge.ClientTest.Text.StringBuilderTests",
                    file: "Batch1\\Text\\StringBuilderTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.StringFormatTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Format.StringFormatTests)],
        statics: {
            simple: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Format.StringFormatTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringFormatTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "Simple()",
                    line: "11"
                } ));
                t.Fixture.simple();
            },
            valueFormating: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Format.StringFormatTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringFormatTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ValueFormating()",
                    line: "19"
                } ));
                t.Fixture.valueFormating();
            },
            spaceControlling: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Format.StringFormatTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringFormatTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "SpaceControlling()",
                    line: "27"
                } ));
                t.Fixture.spaceControlling();
            },
            aligment: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Format.StringFormatTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringFormatTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "Aligment()",
                    line: "45"
                } ));
                t.Fixture.aligment();
            },
            padIntegerWithLeadingZeros: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Format.StringFormatTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringFormatTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "PadIntegerWithLeadingZeros()",
                    line: "82"
                } ));
                t.Fixture.padIntegerWithLeadingZeros();
            },
            padIntegerWithSpecificNumberLeadingZeros: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Format.StringFormatTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringFormatTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "PadIntegerWithSpecificNumberLeadingZeros()",
                    line: "103"
                } ));
                t.Fixture.padIntegerWithSpecificNumberLeadingZeros();
            },
            padNumericWithLeadingZerosToLength: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Format.StringFormatTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringFormatTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "PadNumericWithLeadingZerosToLength()",
                    line: "113"
                } ));
                t.Fixture.padNumericWithLeadingZerosToLength();
            },
            padNumericWithSpecificNumberOfLeadingZeros: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Format.StringFormatTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringFormatTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "PadNumericWithSpecificNumberOfLeadingZeros()",
                    line: "128"
                } ));
                t.Fixture.padNumericWithSpecificNumberOfLeadingZeros();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                    project: "Batch1",
                    className: "Bridge.ClientTest.Format.StringFormatTests",
                    file: "Batch1\\Format\\StringFormatTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.StringTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests)],
        statics: {
            typePropertiesAreCorrect: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TypePropertiesAreCorrect()",
                    line: "32"
                } ));
                t.Fixture.typePropertiesAreCorrect();
            },
            stringInterfaces: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "StringInterfaces()",
                    line: "40"
                } ));
                t.Fixture.stringInterfaces();
            },
            defaultConstructorWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "DefaultConstructorWorks()",
                    line: "49"
                } ));
                t.Fixture.defaultConstructorWorks();
            },
            charAndCountConstructorWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "CharAndCountConstructorWorks()",
                    line: "55"
                } ));
                t.Fixture.charAndCountConstructorWorks();
            },
            charArrayConstructorWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "CharArrayConstructorWorks()",
                    line: "61"
                } ));
                t.Fixture.charArrayConstructorWorks();
            },
            emptyFieldWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "EmptyFieldWorks()",
                    line: "67"
                } ));
                t.Fixture.emptyFieldWorks();
            },
            lengthPropertyWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "LengthPropertyWorks()",
                    line: "73"
                } ));
                t.Fixture.lengthPropertyWorks();
            },
            compareToWorks_353: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "CompareToWorks_353()",
                    line: "93"
                } ));
                t.Fixture.compareToWorks_353();
            },
            compareWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "CompareWorks()",
                    line: "107"
                } ));
                t.Fixture.compareWorks();
            },
            compareWithIgnoreCaseArgWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "CompareWithIgnoreCaseArgWorks()",
                    line: "115"
                } ));
                t.Fixture.compareWithIgnoreCaseArgWorks();
            },
            concatWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ConcatWorks()",
                    line: "126"
                } ));
                t.Fixture.concatWorks();
            },
            concatWithObjectsWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ConcatWithObjectsWorks()",
                    line: "139"
                } ));
                t.Fixture.concatWithObjectsWorks();
            },
            endsWithCharWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "EndsWithCharWorks()",
                    line: "153"
                } ));
                t.Fixture.endsWithCharWorks();
            },
            endsWithStringWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "EndsWithStringWorks()",
                    line: "160"
                } ));
                t.Fixture.endsWithStringWorks();
            },
            staticEqualsWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "StaticEqualsWorks()",
                    line: "167"
                } ));
                t.Fixture.staticEqualsWorks();
            },
            formatWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FormatWorks()",
                    line: "178"
                } ));
                t.Fixture.formatWorks();
            },
            formatWorksExtended: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FormatWorksExtended()",
                    line: "197"
                } ));
                t.Fixture.formatWorksExtended();
            },
            formatWorksWithIFormattable: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FormatWorksWithIFormattable()",
                    line: "209"
                } ));
                t.Fixture.formatWorksWithIFormattable();
            },
            formatCanUseEscapedBraces: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FormatCanUseEscapedBraces()",
                    line: "215"
                } ));
                t.Fixture.formatCanUseEscapedBraces();
            },
            indexOfCharWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "IndexOfCharWorks()",
                    line: "221"
                } ));
                t.Fixture.indexOfCharWorks();
            },
            indexOfStringWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "IndexOfStringWorks()",
                    line: "228"
                } ));
                t.Fixture.indexOfStringWorks();
            },
            indexOfCharWithStartIndexWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "IndexOfCharWithStartIndexWorks()",
                    line: "235"
                } ));
                t.Fixture.indexOfCharWithStartIndexWorks();
            },
            indexOfCharWithStartIndexAndCountWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "IndexOfCharWithStartIndexAndCountWorks()",
                    line: "242"
                } ));
                t.Fixture.indexOfCharWithStartIndexAndCountWorks();
            },
            indexOfStringWithStartIndexWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "IndexOfStringWithStartIndexWorks()",
                    line: "250"
                } ));
                t.Fixture.indexOfStringWithStartIndexWorks();
            },
            indexOfStringWithStartIndexAndCountWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "IndexOfStringWithStartIndexAndCountWorks()",
                    line: "257"
                } ));
                t.Fixture.indexOfStringWithStartIndexAndCountWorks();
            },
            indexOfAnyWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "IndexOfAnyWorks()",
                    line: "265"
                } ));
                t.Fixture.indexOfAnyWorks();
            },
            indexOfAnyWithStartIndexWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "IndexOfAnyWithStartIndexWorks()",
                    line: "274"
                } ));
                t.Fixture.indexOfAnyWithStartIndexWorks();
            },
            indexOfAnyWithStartIndexAndCountWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "IndexOfAnyWithStartIndexAndCountWorks()",
                    line: "283"
                } ));
                t.Fixture.indexOfAnyWithStartIndexAndCountWorks();
            },
            insertWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "InsertWorks()",
                    line: "293"
                } ));
                t.Fixture.insertWorks();
            },
            isNullOrEmptyWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "IsNullOrEmptyWorks()",
                    line: "299"
                } ));
                t.Fixture.isNullOrEmptyWorks();
            },
            lastIndexOfCharWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "LastIndexOfCharWorks()",
                    line: "308"
                } ));
                t.Fixture.lastIndexOfCharWorks();
            },
            lastIndexOfStringWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "LastIndexOfStringWorks()",
                    line: "315"
                } ));
                t.Fixture.lastIndexOfStringWorks();
            },
            lastIndexOfCharWithStartIndexWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "LastIndexOfCharWithStartIndexWorks()",
                    line: "322"
                } ));
                t.Fixture.lastIndexOfCharWithStartIndexWorks();
            },
            lastIndexOfStringWithStartIndexWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "LastIndexOfStringWithStartIndexWorks()",
                    line: "329"
                } ));
                t.Fixture.lastIndexOfStringWithStartIndexWorks();
            },
            lastIndexOfCharWithStartIndexAndCountWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "LastIndexOfCharWithStartIndexAndCountWorks()",
                    line: "336"
                } ));
                t.Fixture.lastIndexOfCharWithStartIndexAndCountWorks();
            },
            lastIndexOfStringWithStartIndexAndCountWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "LastIndexOfStringWithStartIndexAndCountWorks()",
                    line: "344"
                } ));
                t.Fixture.lastIndexOfStringWithStartIndexAndCountWorks();
            },
            lastIndexOfAnyWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "LastIndexOfAnyWorks()",
                    line: "352"
                } ));
                t.Fixture.lastIndexOfAnyWorks();
            },
            lastIndexOfAnyWithStartIndexWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "LastIndexOfAnyWithStartIndexWorks()",
                    line: "361"
                } ));
                t.Fixture.lastIndexOfAnyWithStartIndexWorks();
            },
            lastIndexOfAnyWithStartIndexAndCountWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "LastIndexOfAnyWithStartIndexAndCountWorks()",
                    line: "370"
                } ));
                t.Fixture.lastIndexOfAnyWithStartIndexAndCountWorks();
            },
            padLeftWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "PadLeftWorks()",
                    line: "380"
                } ));
                t.Fixture.padLeftWorks();
            },
            padLeftWithCharWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "PadLeftWithCharWorks()",
                    line: "386"
                } ));
                t.Fixture.padLeftWithCharWorks();
            },
            padRightWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "PadRightWorks()",
                    line: "392"
                } ));
                t.Fixture.padRightWorks();
            },
            padRightWithCharWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "PadRightWithCharWorks()",
                    line: "398"
                } ));
                t.Fixture.padRightWithCharWorks();
            },
            removeWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "RemoveWorks()",
                    line: "404"
                } ));
                t.Fixture.removeWorks();
            },
            removeWithCountWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "RemoveWithCountWorks()",
                    line: "417"
                } ));
                t.Fixture.removeWithCountWorks();
            },
            replaceWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ReplaceWorks()",
                    line: "445"
                } ));
                t.Fixture.replaceWorks();
            },
            replaceCharWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ReplaceCharWorks()",
                    line: "452"
                } ));
                t.Fixture.replaceCharWorks();
            },
            splitWithCharWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "SplitWithCharWorks()",
                    line: "458"
                } ));
                t.Fixture.splitWithCharWorks();
            },
            splitWithCharsAndLimitWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "SplitWithCharsAndLimitWorks()",
                    line: "464"
                } ));
                t.Fixture.splitWithCharsAndLimitWorks();
            },
            splitWithCharsAndStringSplitOptionsAndLimitWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "SplitWithCharsAndStringSplitOptionsAndLimitWorks()",
                    line: "470"
                } ));
                t.Fixture.splitWithCharsAndStringSplitOptionsAndLimitWorks();
            },
            someNetSplitTests: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "SomeNetSplitTests()",
                    line: "476"
                } ));
                t.Fixture.someNetSplitTests();
            },
            splitWithCharsWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "SplitWithCharsWorks()",
                    line: "508"
                } ));
                t.Fixture.splitWithCharsWorks();
            },
            splitWithStringsWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "SplitWithStringsWorks()",
                    line: "516"
                } ));
                t.Fixture.splitWithStringsWorks();
            },
            splitWithStringsAndLimitWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "SplitWithStringsAndLimitWorks()",
                    line: "523"
                } ));
                t.Fixture.splitWithStringsAndLimitWorks();
            },
            startsWithCharWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "StartsWithCharWorks()",
                    line: "529"
                } ));
                t.Fixture.startsWithCharWorks();
            },
            startsWithStringWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "StartsWithStringWorks()",
                    line: "536"
                } ));
                t.Fixture.startsWithStringWorks();
            },
            substringWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "SubstringWorks()",
                    line: "543"
                } ));
                t.Fixture.substringWorks();
            },
            toLowerCaseWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ToLowerCaseWorks()",
                    line: "571"
                } ));
                t.Fixture.toLowerCaseWorks();
            },
            toUpperCaseWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ToUpperCaseWorks()",
                    line: "577"
                } ));
                t.Fixture.toUpperCaseWorks();
            },
            toLowerWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ToLowerWorks()",
                    line: "583"
                } ));
                t.Fixture.toLowerWorks();
            },
            toUpperWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ToUpperWorks()",
                    line: "589"
                } ));
                t.Fixture.toUpperWorks();
            },
            trimWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TrimWorks()",
                    line: "595"
                } ));
                t.Fixture.trimWorks();
            },
            trimCharsWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TrimCharsWorks()",
                    line: "601"
                } ));
                t.Fixture.trimCharsWorks();
            },
            trimStartCharsWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TrimStartCharsWorks()",
                    line: "607"
                } ));
                t.Fixture.trimStartCharsWorks();
            },
            trimEndCharsWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TrimEndCharsWorks()",
                    line: "613"
                } ));
                t.Fixture.trimEndCharsWorks();
            },
            trimStartWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TrimStartWorks()",
                    line: "619"
                } ));
                t.Fixture.trimStartWorks();
            },
            trimEndWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TrimEndWorks()",
                    line: "625"
                } ));
                t.Fixture.trimEndWorks();
            },
            stringEqualityWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "StringEqualityWorks()",
                    line: "631"
                } ));
                t.Fixture.stringEqualityWorks();
            },
            stringInequalityWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "StringInequalityWorks()",
                    line: "641"
                } ));
                t.Fixture.stringInequalityWorks();
            },
            stringIndexingWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "StringIndexingWorks()",
                    line: "651"
                } ));
                t.Fixture.stringIndexingWorks();
            },
            getHashCodeWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "GetHashCodeWorks()",
                    line: "661"
                } ));
                t.Fixture.getHashCodeWorks();
            },
            instanceEqualsWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "InstanceEqualsWorks()",
                    line: "671"
                } ));
                t.Fixture.instanceEqualsWorks();
            },
            iEquatableEqualsWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "IEquatableEqualsWorks()",
                    line: "686"
                } ));
                t.Fixture.iEquatableEqualsWorks();
            },
            stringEqualsWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "StringEqualsWorks()",
                    line: "704"
                } ));
                t.Fixture.stringEqualsWorks();
            },
            compareToWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "CompareToWorks()",
                    line: "715"
                } ));
                t.Fixture.compareToWorks();
            },
            iComparableCompareToWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "IComparableCompareToWorks()",
                    line: "724"
                } ));
                t.Fixture.iComparableCompareToWorks();
            },
            joinWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "JoinWorks()",
                    line: "735"
                } ));
                t.Fixture.joinWorks();
            },
            containsWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ContainsWorks()",
                    line: "748"
                } ));
                t.Fixture.containsWorks();
            },
            toCharArrayWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ToCharArrayWorks()",
                    line: "757"
                } ));
                t.Fixture.toCharArrayWorks();
            },
            strings: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "Strings()",
                    line: "764"
                } ));
                Bridge.ClientTest.SimpleTypes.StringTests.strings();
            },
            enumerable: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, 5, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "Enumerable()",
                    line: "890"
                } ));
                Bridge.ClientTest.SimpleTypes.StringTests.enumerable();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                    project: "Batch1",
                    className: "Bridge.ClientTest.SimpleTypes.StringTests",
                    file: "Batch1\\SimpleTypes\\StringTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.SystemExceptionTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.SystemExceptionTests)],
        statics: {
            typePropertiesAreCorrect: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.SystemExceptionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SystemExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TypePropertiesAreCorrect()",
                    line: "13"
                } ));
                t.Fixture.typePropertiesAreCorrect();
            },
            defaultConstructorWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.SystemExceptionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SystemExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "DefaultConstructorWorks()",
                    line: "22"
                } ));
                t.Fixture.defaultConstructorWorks();
            },
            constructorWithMessageWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.SystemExceptionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SystemExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ConstructorWithMessageWorks()",
                    line: "31"
                } ));
                t.Fixture.constructorWithMessageWorks();
            },
            constructorWithMessageAndInnerExceptionWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.SystemExceptionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SystemExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ConstructorWithMessageAndInnerExceptionWorks()",
                    line: "40"
                } ));
                t.Fixture.constructorWithMessageAndInnerExceptionWorks();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                    project: "Batch1",
                    className: "Bridge.ClientTest.Exceptions.SystemExceptionTests",
                    file: "Batch1\\Exceptions\\SystemExceptionTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.TaskCanceledExceptionTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.TaskCanceledExceptionTests)],
        statics: {
            typePropertiesAreCorrect: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.TaskCanceledExceptionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TaskCanceledExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TypePropertiesAreCorrect()",
                    line: "12"
                } ));
                t.Fixture.typePropertiesAreCorrect();
            },
            defaultConstructorWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.TaskCanceledExceptionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TaskCanceledExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "DefaultConstructorWorks()",
                    line: "22"
                } ));
                t.Fixture.defaultConstructorWorks();
            },
            messageOnlyConstructorWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.TaskCanceledExceptionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TaskCanceledExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "MessageOnlyConstructorWorks()",
                    line: "33"
                } ));
                t.Fixture.messageOnlyConstructorWorks();
            },
            taskOnlyConstructorWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.TaskCanceledExceptionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TaskCanceledExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TaskOnlyConstructorWorks()",
                    line: "44"
                } ));
                t.Fixture.taskOnlyConstructorWorks();
            },
            messageAndInnerExceptionConstructorWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.TaskCanceledExceptionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TaskCanceledExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "MessageAndInnerExceptionConstructorWorks()",
                    line: "56"
                } ));
                t.Fixture.messageAndInnerExceptionConstructorWorks();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                    project: "Batch1",
                    className: "Bridge.ClientTest.Exceptions.TaskCanceledExceptionTests",
                    file: "Batch1\\Exceptions\\TaskCanceledExceptionTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.TaskTests)],
        statics: {
            taskCompletionSourceTypePropertiesAreCorrect: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.TaskTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests, 2, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TaskCompletionSourceTypePropertiesAreCorrect()",
                    line: "19"
                } ));
                t.Fixture.taskCompletionSourceTypePropertiesAreCorrect();
            },
            taskTypePropertiesAreCorrect: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.TaskTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests, 5, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TaskTypePropertiesAreCorrect()",
                    line: "27"
                } ));
                t.Fixture.taskTypePropertiesAreCorrect();
            },
            taskCompletionSourceWorksWhenSettingResult: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.TaskTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests, 10, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TaskCompletionSourceWorksWhenSettingResult()",
                    line: "41"
                } ));
                t.Fixture.taskCompletionSourceWorksWhenSettingResult();
            },
            taskCompletionSourceWorksWhenSettingASingleException: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.TaskTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests, 12, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TaskCompletionSourceWorksWhenSettingASingleException()",
                    line: "78"
                } ));
                t.Fixture.taskCompletionSourceWorksWhenSettingASingleException();
            },
            taskCompletionSourceWorksWhenSettingTwoExceptions: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.TaskTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests, 14, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TaskCompletionSourceWorksWhenSettingTwoExceptions()",
                    line: "125"
                } ));
                t.Fixture.taskCompletionSourceWorksWhenSettingTwoExceptions();
            },
            taskCompletionSourceWorksWhenCancelling: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.TaskTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests, 10, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TaskCompletionSourceWorksWhenCancelling()",
                    line: "173"
                } ));
                t.Fixture.taskCompletionSourceWorksWhenCancelling();
            },
            cancelledTaskThrowsTaskCanceledExceptionWhenAwaited: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.TaskTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests, 2, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "CancelledTaskThrowsTaskCanceledExceptionWhenAwaited()",
                    line: "215"
                } ));
                t.Fixture.cancelledTaskThrowsTaskCanceledExceptionWhenAwaited();
            },
            cancelledTaskThrowsAggregateExceptionWithTaskCanceledExceptionWhenResultIsAccessed: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.TaskTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests, 3, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "CancelledTaskThrowsAggregateExceptionWithTaskCanceledExceptionWhenResultIsAccessed()",
                    line: "250"
                } ));
                t.Fixture.cancelledTaskThrowsAggregateExceptionWithTaskCanceledExceptionWhenResultIsAccessed();
            },
            setResultFailsWhenTheTaskIsCompleted: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.TaskTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests, 1, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "SetResultFailsWhenTheTaskIsCompleted()",
                    line: "271"
                } ));
                t.Fixture.setResultFailsWhenTheTaskIsCompleted();
            },
            setCanceledFailsWhenTheTaskIsCompleted: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.TaskTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests, 1, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "SetCanceledFailsWhenTheTaskIsCompleted()",
                    line: "279"
                } ));
                t.Fixture.setCanceledFailsWhenTheTaskIsCompleted();
            },
            setExceptionFailsWhenTheTaskIsCompleted: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.TaskTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests, 1, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "SetExceptionFailsWhenTheTaskIsCompleted()",
                    line: "287"
                } ));
                t.Fixture.setExceptionFailsWhenTheTaskIsCompleted();
            },
            completedTaskHasCorrectIsXProperties: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.TaskTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests, 3, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "CompletedTaskHasCorrectIsXProperties()",
                    line: "296"
                } ));
                t.Fixture.completedTaskHasCorrectIsXProperties();
            },
            cancelledTaskHasCorrectIsXProperties: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.TaskTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests, 3, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "CancelledTaskHasCorrectIsXProperties()",
                    line: "306"
                } ));
                t.Fixture.cancelledTaskHasCorrectIsXProperties();
            },
            faultedTaskHasCorrectIsXProperties: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.TaskTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests, 3, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FaultedTaskHasCorrectIsXProperties()",
                    line: "316"
                } ));
                t.Fixture.faultedTaskHasCorrectIsXProperties();
            },
            trySetResultReturnsFalseWhenTheTaskIsCompleted: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.TaskTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests, 2, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TrySetResultReturnsFalseWhenTheTaskIsCompleted()",
                    line: "326"
                } ));
                t.Fixture.trySetResultReturnsFalseWhenTheTaskIsCompleted();
            },
            trySetCanceledReturnsFalseWhenTheTaskIsCompleted: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.TaskTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests, 2, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TrySetCanceledReturnsFalseWhenTheTaskIsCompleted()",
                    line: "334"
                } ));
                t.Fixture.trySetCanceledReturnsFalseWhenTheTaskIsCompleted();
            },
            trySetExceptionReturnsFalseWhenTheTaskIsCompleted: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.TaskTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests, 2, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TrySetExceptionReturnsFalseWhenTheTaskIsCompleted()",
                    line: "342"
                } ));
                t.Fixture.trySetExceptionReturnsFalseWhenTheTaskIsCompleted();
            },
            continueWithForNonGenericTaskWorkWithNoResultAndNoException: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.TaskTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests, 10, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ContinueWithForNonGenericTaskWorkWithNoResultAndNoException()",
                    line: "351"
                } ));
                t.Fixture.continueWithForNonGenericTaskWorkWithNoResultAndNoException();
            },
            continueWithWhenCallbackThrowsAnException: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.TaskTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests, 6, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ContinueWithWhenCallbackThrowsAnException()",
                    line: "393"
                } ));
                t.Fixture.continueWithWhenCallbackThrowsAnException();
            },
            exceptionInTaskBodyAppearsInTheExceptionMemberForNonGenericTask: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.TaskTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests, 8, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ExceptionInTaskBodyAppearsInTheExceptionMemberForNonGenericTask()",
                    line: "431"
                } ));
                t.Fixture.exceptionInTaskBodyAppearsInTheExceptionMemberForNonGenericTask();
            },
            continueWithForNonGenericTaskCanReturnAValue: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.TaskTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests, 11, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ContinueWithForNonGenericTaskCanReturnAValue()",
                    line: "472"
                } ));
                t.Fixture.continueWithForNonGenericTaskCanReturnAValue();
            },
            continueWithWithNoReturnValueForGenericTaskWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.TaskTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests, 10, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ContinueWithWithNoReturnValueForGenericTaskWorks()",
                    line: "517"
                } ));
                t.Fixture.continueWithWithNoReturnValueForGenericTaskWorks();
            },
            continueWithForGenericTaskCanReturnAValue: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.TaskTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests, 11, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ContinueWithForGenericTaskCanReturnAValue()",
                    line: "559"
                } ));
                t.Fixture.continueWithForGenericTaskCanReturnAValue();
            },
            delayWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.TaskTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests, 6, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "DelayWorks()",
                    line: "604"
                } ));
                t.Fixture.delayWorks();
            },
            fromResultWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.TaskTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests, 3, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FromResultWorks()",
                    line: "637"
                } ));
                t.Fixture.fromResultWorks();
            },
            runWithoutResultWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.TaskTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests, 6, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "RunWithoutResultWorks()",
                    line: "646"
                } ));
                t.Fixture.runWithoutResultWorks();
            },
            runWithResultWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.TaskTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests, 7, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "RunWithResultWorks()",
                    line: "677"
                } ));
                t.Fixture.runWithResultWorks();
            },
            runWorksWhenBodyThrows: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.TaskTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests, 7, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "RunWorksWhenBodyThrows()",
                    line: "710"
                } ));
                t.Fixture.runWorksWhenBodyThrows();
            },
            whenAllParamArrayWithResultWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.TaskTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests, 13, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "WhenAllParamArrayWithResultWorks()",
                    line: "743"
                } ));
                t.Fixture.whenAllParamArrayWithResultWorks();
            },
            whenAllEnumerableWithResultWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.TaskTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests, 13, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "WhenAllEnumerableWithResultWorks()",
                    line: "800"
                } ));
                t.Fixture.whenAllEnumerableWithResultWorks();
            },
            whenAllParamArrayWithoutResultWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.TaskTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests, 12, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "WhenAllParamArrayWithoutResultWorks()",
                    line: "857"
                } ));
                t.Fixture.whenAllParamArrayWithoutResultWorks();
            },
            whenAllEnumerableWithoutResultWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.TaskTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests, 12, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "WhenAllEnumerableWithoutResultWorks()",
                    line: "913"
                } ));
                t.Fixture.whenAllEnumerableWithoutResultWorks();
            },
            whenAllShouldHaveAnErrorIfAnyIncludedTaskFaulted: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.TaskTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests, 17, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "WhenAllShouldHaveAnErrorIfAnyIncludedTaskFaulted()",
                    line: "969"
                } ));
                t.Fixture.whenAllShouldHaveAnErrorIfAnyIncludedTaskFaulted();
            },
            whenAllShouldBeCancelledIfNoTaskWasFaultedButSomeWasCancelled: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.TaskTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests, 12, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "WhenAllShouldBeCancelledIfNoTaskWasFaultedButSomeWasCancelled()",
                    line: "1039"
                } ));
                t.Fixture.whenAllShouldBeCancelledIfNoTaskWasFaultedButSomeWasCancelled();
            },
            whenAnyParamArrayWithResultWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.TaskTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests, 10, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "WhenAnyParamArrayWithResultWorks()",
                    line: "1094"
                } ));
                t.Fixture.whenAnyParamArrayWithResultWorks();
            },
            whenAnyEnumerableWithResultWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.TaskTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests, 10, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "WhenAnyEnumerableWithResultWorks()",
                    line: "1142"
                } ));
                t.Fixture.whenAnyEnumerableWithResultWorks();
            },
            whenAnyParamArrayWithoutResultWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.TaskTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests, 9, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "WhenAnyParamArrayWithoutResultWorks()",
                    line: "1189"
                } ));
                t.Fixture.whenAnyParamArrayWithoutResultWorks();
            },
            whenAnyEnumerableWithoutResultWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.TaskTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests, 9, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "WhenAnyEnumerableWithoutResultWorks()",
                    line: "1236"
                } ));
                t.Fixture.whenAnyEnumerableWithoutResultWorks();
            },
            whenAnyFaultsIfTheFirstTaskFaulted: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.TaskTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests, 9, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "WhenAnyFaultsIfTheFirstTaskFaulted()",
                    line: "1283"
                } ));
                t.Fixture.whenAnyFaultsIfTheFirstTaskFaulted();
            },
            whenAnyIsCancelledIfTheFirstTaskWasCancelled: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.TaskTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests, 8, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "WhenAnyIsCancelledIfTheFirstTaskWasCancelled()",
                    line: "1331"
                } ));
                t.Fixture.whenAnyIsCancelledIfTheFirstTaskWasCancelled();
            },
            constructorWithOnlyActionWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.TaskTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests, 7, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ConstructorWithOnlyActionWorks()",
                    line: "1376"
                } ));
                t.Fixture.constructorWithOnlyActionWorks();
            },
            constructorWithActionAndStateWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.TaskTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests, 8, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ConstructorWithActionAndStateWorks()",
                    line: "1415"
                } ));
                t.Fixture.constructorWithActionAndStateWorks();
            },
            exceptionInManuallyCreatedTaskIsStoredOnTheTask: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.TaskTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests, 8, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ExceptionInManuallyCreatedTaskIsStoredOnTheTask()",
                    line: "1457"
                } ));
                t.Fixture.exceptionInManuallyCreatedTaskIsStoredOnTheTask();
            },
            constructorWithOnlyFunctionWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.TaskTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests, 8, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ConstructorWithOnlyFunctionWorks()",
                    line: "1499"
                } ));
                t.Fixture.constructorWithOnlyFunctionWorks();
            },
            constructorWithFunctionAndStateWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.TaskTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests, 9, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ConstructorWithFunctionAndStateWorks()",
                    line: "1541"
                } ));
                t.Fixture.constructorWithFunctionAndStateWorks();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                    project: "Batch1",
                    className: "Bridge.ClientTest.Threading.TaskTests",
                    file: "Batch1\\Threading\\Tasks\\TaskTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.TestAbstractClass", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BasicCSharp.TestAbstractClass)],
        statics: {
            testB: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BasicCSharp.TestAbstractClass).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestAbstractClass, 3, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TestB()",
                    line: "38"
                } ));
                Bridge.ClientTest.BasicCSharp.TestAbstractClass.testB();
            },
            testC: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BasicCSharp.TestAbstractClass).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestAbstractClass, 3, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TestC()",
                    line: "48"
                } ));
                Bridge.ClientTest.BasicCSharp.TestAbstractClass.testC();
            },
            testBC: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BasicCSharp.TestAbstractClass).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestAbstractClass, 6, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TestBC()",
                    line: "58"
                } ));
                Bridge.ClientTest.BasicCSharp.TestAbstractClass.testBC();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                    project: "Batch1",
                    className: "Bridge.ClientTest.BasicCSharp.TestAbstractClass",
                    file: "Batch1\\BasicCSharp\\TestAbstractClass.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.TestAutoProps", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.CSharp6.TestAutoProps)],
        statics: {
            testBasic: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.CSharp6.TestAutoProps).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestAutoProps, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TestBasic()",
                    line: "29"
                } ));
                Bridge.ClientTest.CSharp6.TestAutoProps.testBasic();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                    project: "Batch1",
                    className: "Bridge.ClientTest.CSharp6.TestAutoProps",
                    file: "Batch1\\CSharp6\\TestAutoProps.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.TestAwaitInCatchFinally", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.CSharp6.TestAwaitInCatchFinally)],
        statics: {
            testBasic: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.CSharp6.TestAwaitInCatchFinally).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestAwaitInCatchFinally, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TestBasic()",
                    line: "12"
                } ));
                Bridge.ClientTest.CSharp6.TestAwaitInCatchFinally.testBasic();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                    project: "Batch1",
                    className: "Bridge.ClientTest.CSharp6.TestAwaitInCatchFinally",
                    file: "Batch1\\CSharp6\\TestAwaitInCatchFinally.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.TestConditionAccess", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.CSharp6.TestConditionAccess)],
        statics: {
            testBasic: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.CSharp6.TestConditionAccess).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestConditionAccess, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TestBasic()",
                    line: "11"
                } ));
                Bridge.ClientTest.CSharp6.TestConditionAccess.testBasic();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                    project: "Batch1",
                    className: "Bridge.ClientTest.CSharp6.TestConditionAccess",
                    file: "Batch1\\CSharp6\\TestConditionalAccess.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.TestEnum", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BasicCSharp.TestEnum)],
        statics: {
            testParse: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BasicCSharp.TestEnum).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestEnum, 6, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TestParse()",
                    line: "45"
                } ));
                Bridge.ClientTest.BasicCSharp.TestEnum.testParse();
            },
            testParseIgnoreCase: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BasicCSharp.TestEnum).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestEnum, 4, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TestParseIgnoreCase()",
                    line: "57"
                } ));
                Bridge.ClientTest.BasicCSharp.TestEnum.testParseIgnoreCase();
            },
            testToString: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BasicCSharp.TestEnum).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestEnum, 4, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TestToString()",
                    line: "67"
                } ));
                Bridge.ClientTest.BasicCSharp.TestEnum.testToString();
            },
            testGetValues: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BasicCSharp.TestEnum).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestEnum, 2, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TestGetValues()",
                    line: "76"
                } ));
                Bridge.ClientTest.BasicCSharp.TestEnum.testGetValues();
            },
            testCompareTo: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BasicCSharp.TestEnum).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestEnum, 3, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TestCompareTo()",
                    line: "84"
                } ));
                Bridge.ClientTest.BasicCSharp.TestEnum.testCompareTo();
            },
            testFormat: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BasicCSharp.TestEnum).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestEnum, 22, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TestFormat()",
                    line: "92"
                } ));
                Bridge.ClientTest.BasicCSharp.TestEnum.testFormat();
            },
            testGetName: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BasicCSharp.TestEnum).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestEnum, 3, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TestGetName()",
                    line: "122"
                } ));
                Bridge.ClientTest.BasicCSharp.TestEnum.testGetName();
            },
            testGetNames: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BasicCSharp.TestEnum).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestEnum, 2, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TestGetNames()",
                    line: "130"
                } ));
                Bridge.ClientTest.BasicCSharp.TestEnum.testGetNames();
            },
            testHasFlag: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BasicCSharp.TestEnum).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestEnum, 5, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TestHasFlag()",
                    line: "138"
                } ));
                Bridge.ClientTest.BasicCSharp.TestEnum.testHasFlag();
            },
            testIsDefined: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BasicCSharp.TestEnum).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestEnum, 6, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TestIsDefined()",
                    line: "148"
                } ));
                Bridge.ClientTest.BasicCSharp.TestEnum.testIsDefined();
            },
            testTryParse: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BasicCSharp.TestEnum).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestEnum, 11, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TestTryParse()",
                    line: "159"
                } ));
                Bridge.ClientTest.BasicCSharp.TestEnum.testTryParse();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                    project: "Batch1",
                    className: "Bridge.ClientTest.BasicCSharp.TestEnum",
                    file: "Batch1\\BasicCSharp\\TestEnum.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.TestExceptionFilter", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.CSharp6.TestExceptionFilter)],
        statics: {
            testFalseFilter: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.CSharp6.TestExceptionFilter).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestExceptionFilter, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TestFalseFilter()",
                    line: "12"
                } ));
                Bridge.ClientTest.CSharp6.TestExceptionFilter.testFalseFilter();
            },
            testTrueFilter: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.CSharp6.TestExceptionFilter).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestExceptionFilter, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TestTrueFilter()",
                    line: "39"
                } ));
                Bridge.ClientTest.CSharp6.TestExceptionFilter.testTrueFilter();
            },
            testMultipleCatchClauses_2223: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.CSharp6.TestExceptionFilter).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestExceptionFilter, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TestMultipleCatchClauses_2223()",
                    line: "63"
                } ));
                Bridge.ClientTest.CSharp6.TestExceptionFilter.testMultipleCatchClauses_2223();
            },
            testFailedFilter_2223: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.CSharp6.TestExceptionFilter).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestExceptionFilter, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TestFailedFilter_2223()",
                    line: "90"
                } ));
                Bridge.ClientTest.CSharp6.TestExceptionFilter.testFailedFilter_2223();
            },
            testFailedFilter2_2223: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.CSharp6.TestExceptionFilter).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestExceptionFilter, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TestFailedFilter2_2223()",
                    line: "121"
                } ));
                Bridge.ClientTest.CSharp6.TestExceptionFilter.testFailedFilter2_2223();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                    project: "Batch1",
                    className: "Bridge.ClientTest.CSharp6.TestExceptionFilter",
                    file: "Batch1\\CSharp6\\TestExceptionFilter.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.TestExpressionBodyFunction", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.CSharp6.TestExpressionBodyFunction)],
        statics: {
            testBasic: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.CSharp6.TestExpressionBodyFunction).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestExpressionBodyFunction, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TestBasic()",
                    line: "9"
                } ));
                Bridge.ClientTest.CSharp6.TestExpressionBodyFunction.testBasic();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                    project: "Batch1",
                    className: "Bridge.ClientTest.CSharp6.TestExpressionBodyFunction",
                    file: "Batch1\\CSharp6\\TestExpressionBodyFunction.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.TestGoto", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BasicCSharp.TestGoto)],
        statics: {
            testGotoCase: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BasicCSharp.TestGoto).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestGoto, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TestGotoCase()",
                    line: "70"
                } ));
                Bridge.ClientTest.BasicCSharp.TestGoto.testGotoCase();
            },
            testGotoLabel: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BasicCSharp.TestGoto).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestGoto, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TestGotoLabel()",
                    line: "82"
                } ));
                Bridge.ClientTest.BasicCSharp.TestGoto.testGotoLabel();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                    project: "Batch1",
                    className: "Bridge.ClientTest.BasicCSharp.TestGoto",
                    file: "Batch1\\BasicCSharp\\TestGoto.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.TestIndexInitializer", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.CSharp6.TestIndexInitializer)],
        statics: {
            testBasic: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.CSharp6.TestIndexInitializer).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestIndexInitializer, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TestBasic()",
                    line: "11"
                } ));
                Bridge.ClientTest.CSharp6.TestIndexInitializer.testBasic();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                    project: "Batch1",
                    className: "Bridge.ClientTest.CSharp6.TestIndexInitializer",
                    file: "Batch1\\CSharp6\\TestIndexInitializer.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.TestInheritance", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BasicCSharp.TestInheritance)],
        statics: {
            testA: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BasicCSharp.TestInheritance).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestInheritance, 4, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TestA()",
                    line: "53"
                } ));
                Bridge.ClientTest.BasicCSharp.TestInheritance.testA();
            },
            testB: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BasicCSharp.TestInheritance).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestInheritance, 5, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TestB()",
                    line: "64"
                } ));
                Bridge.ClientTest.BasicCSharp.TestInheritance.testB();
            },
            testAB: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BasicCSharp.TestInheritance).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestInheritance, 4, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TestAB()",
                    line: "76"
                } ));
                Bridge.ClientTest.BasicCSharp.TestInheritance.testAB();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                    project: "Batch1",
                    className: "Bridge.ClientTest.BasicCSharp.TestInheritance",
                    file: "Batch1\\BasicCSharp\\TestInheritance.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.TestInterfaces", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BasicCSharp.TestInterfaces)],
        statics: {
            testInterfaceMethodAndProperty: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BasicCSharp.TestInterfaces).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestInterfaces, 6, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TestInterfaceMethodAndProperty()",
                    line: "124"
                } ));
                Bridge.ClientTest.BasicCSharp.TestInterfaces.testInterfaceMethodAndProperty();
            },
            testExplicitInterfaceMethodAndProperty: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BasicCSharp.TestInterfaces).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestInterfaces, 3, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TestExplicitInterfaceMethodAndProperty()",
                    line: "139"
                } ));
                Bridge.ClientTest.BasicCSharp.TestInterfaces.testExplicitInterfaceMethodAndProperty();
            },
            testTwoInterfaces: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BasicCSharp.TestInterfaces).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestInterfaces, 9, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TestTwoInterfaces()",
                    line: "148"
                } ));
                Bridge.ClientTest.BasicCSharp.TestInterfaces.testTwoInterfaces();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                    project: "Batch1",
                    className: "Bridge.ClientTest.BasicCSharp.TestInterfaces",
                    file: "Batch1\\BasicCSharp\\TestInterfaces.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.TestInterpolatedStrings", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.CSharp6.TestInterpolatedStrings)],
        statics: {
            testBasic: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.CSharp6.TestInterpolatedStrings).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestInterpolatedStrings, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TestBasic()",
                    line: "35"
                } ));
                Bridge.ClientTest.CSharp6.TestInterpolatedStrings.testBasic();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                    project: "Batch1",
                    className: "Bridge.ClientTest.CSharp6.TestInterpolatedStrings",
                    file: "Batch1\\CSharp6\\TestInterpolatedStrings.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.TestLinqAggregateOperators", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.TestLinqAggregateOperators)],
        statics: {
            test: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.TestLinqAggregateOperators).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestLinqAggregateOperators, 20, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "Test()",
                    line: "12"
                } ));
                Bridge.ClientTest.Linq.TestLinqAggregateOperators.test();
            },
            bridge315: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.TestLinqAggregateOperators).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestLinqAggregateOperators, 1, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "Bridge315()",
                    line: "231"
                } ));
                Bridge.ClientTest.Linq.TestLinqAggregateOperators.bridge315();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                    project: "Batch1",
                    className: "Bridge.ClientTest.Linq.TestLinqAggregateOperators",
                    file: "Batch1\\Linq\\TestLinqAggregateOperators.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.TestLinqConversionOperators", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.TestLinqConversionOperators)],
        statics: {
            test: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.TestLinqConversionOperators).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestLinqConversionOperators, 13, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "Test()",
                    line: "30"
                } ));
                Bridge.ClientTest.Linq.TestLinqConversionOperators.test();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                    project: "Batch1",
                    className: "Bridge.ClientTest.Linq.TestLinqConversionOperators",
                    file: "Batch1\\Linq\\TestLinqConversionOperators.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.TestLinqElementOperators", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.TestLinqElementOperators)],
        statics: {
            test: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.TestLinqElementOperators).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestLinqElementOperators, 26, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "Test()",
                    line: "11"
                } ));
                Bridge.ClientTest.Linq.TestLinqElementOperators.test();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                    project: "Batch1",
                    className: "Bridge.ClientTest.Linq.TestLinqElementOperators",
                    file: "Batch1\\Linq\\TestLinqElementOperators.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.TestLinqGenerationOperators", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.TestLinqGenerationOperators)],
        statics: {
            test: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.TestLinqGenerationOperators).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestLinqGenerationOperators, 2, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "Test()",
                    line: "10"
                } ));
                Bridge.ClientTest.Linq.TestLinqGenerationOperators.test();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                    project: "Batch1",
                    className: "Bridge.ClientTest.Linq.TestLinqGenerationOperators",
                    file: "Batch1\\Linq\\TestLinqGenerationOperators.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.TestLinqGroupingOperators", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.TestLinqGroupingOperators)],
        statics: {
            test: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.TestLinqGroupingOperators).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestLinqGroupingOperators, 3, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "Test()",
                    line: "38"
                } ));
                Bridge.ClientTest.Linq.TestLinqGroupingOperators.test();
            },
            testComplexGrouping: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.TestLinqGroupingOperators).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestLinqGroupingOperators, 1, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TestComplexGrouping()",
                    line: "105"
                } ));
                Bridge.ClientTest.Linq.TestLinqGroupingOperators.testComplexGrouping();
            },
            testAnagrams: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.TestLinqGroupingOperators).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestLinqGroupingOperators, 2, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TestAnagrams()",
                    line: "147"
                } ));
                Bridge.ClientTest.Linq.TestLinqGroupingOperators.testAnagrams();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                    project: "Batch1",
                    className: "Bridge.ClientTest.Linq.TestLinqGroupingOperators",
                    file: "Batch1\\Linq\\TestLinqGroupingOperators.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.TestLinqJoinOperators", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.TestLinqJoinOperators)],
        statics: {
            test: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.TestLinqJoinOperators).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestLinqJoinOperators, 5, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "Test()",
                    line: "11"
                } ));
                Bridge.ClientTest.Linq.TestLinqJoinOperators.test();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                    project: "Batch1",
                    className: "Bridge.ClientTest.Linq.TestLinqJoinOperators",
                    file: "Batch1\\Linq\\TestLinqJoinOperators.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.TestLinqMiscellaneousOperators", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.TestLinqMiscellaneousOperators)],
        statics: {
            test: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.TestLinqMiscellaneousOperators).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestLinqMiscellaneousOperators, 4, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "Test()",
                    line: "11"
                } ));
                Bridge.ClientTest.Linq.TestLinqMiscellaneousOperators.test();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                    project: "Batch1",
                    className: "Bridge.ClientTest.Linq.TestLinqMiscellaneousOperators",
                    file: "Batch1\\Linq\\TestLinqMiscellaneousOperators.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.TestLinqOrderingOperators", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.TestLinqOrderingOperators)],
        statics: {
            test: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.TestLinqOrderingOperators).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestLinqOrderingOperators, 8, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "Test()",
                    line: "11"
                } ));
                Bridge.ClientTest.Linq.TestLinqOrderingOperators.test();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                    project: "Batch1",
                    className: "Bridge.ClientTest.Linq.TestLinqOrderingOperators",
                    file: "Batch1\\Linq\\TestLinqOrderingOperators.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.TestLinqPartitioningOperators", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.TestLinqPartitioningOperators)],
        statics: {
            test: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.TestLinqPartitioningOperators).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestLinqPartitioningOperators, 8, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "Test()",
                    line: "11"
                } ));
                Bridge.ClientTest.Linq.TestLinqPartitioningOperators.test();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                    project: "Batch1",
                    className: "Bridge.ClientTest.Linq.TestLinqPartitioningOperators",
                    file: "Batch1\\Linq\\TestLinqPartitioningOperators.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.TestLinqProjectionOperators", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.TestLinqProjectionOperators)],
        statics: {
            test: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.TestLinqProjectionOperators).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestLinqProjectionOperators, 8, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "Test()",
                    line: "16"
                } ));
                Bridge.ClientTest.Linq.TestLinqProjectionOperators.test();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                    project: "Batch1",
                    className: "Bridge.ClientTest.Linq.TestLinqProjectionOperators",
                    file: "Batch1\\Linq\\TestLinqProjectionOperators.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.TestLinqQuantifiers", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.TestLinqQuantifiers)],
        statics: {
            test: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.TestLinqQuantifiers).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestLinqQuantifiers, 4, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "Test()",
                    line: "11"
                } ));
                Bridge.ClientTest.Linq.TestLinqQuantifiers.test();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                    project: "Batch1",
                    className: "Bridge.ClientTest.Linq.TestLinqQuantifiers",
                    file: "Batch1\\Linq\\TestLinqQuantifiers.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.TestLinqQueryExecution", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.TestLinqQueryExecution)],
        statics: {
            test: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.TestLinqQueryExecution).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestLinqQueryExecution, 6, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "Test()",
                    line: "11"
                } ));
                Bridge.ClientTest.Linq.TestLinqQueryExecution.test();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                    project: "Batch1",
                    className: "Bridge.ClientTest.Linq.TestLinqQueryExecution",
                    file: "Batch1\\Linq\\TestLinqQueryExecution.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.TestLinqRestrictionOperators", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.TestLinqRestrictionOperators)],
        statics: {
            test: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.TestLinqRestrictionOperators).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestLinqRestrictionOperators, 5, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "Test()",
                    line: "11"
                } ));
                Bridge.ClientTest.Linq.TestLinqRestrictionOperators.test();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                    project: "Batch1",
                    className: "Bridge.ClientTest.Linq.TestLinqRestrictionOperators",
                    file: "Batch1\\Linq\\TestLinqRestrictionOperators.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.TestLinqSetOperators", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.TestLinqSetOperators)],
        statics: {
            test: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.TestLinqSetOperators).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestLinqSetOperators, 8, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "Test()",
                    line: "11"
                } ));
                Bridge.ClientTest.Linq.TestLinqSetOperators.test();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                    project: "Batch1",
                    className: "Bridge.ClientTest.Linq.TestLinqSetOperators",
                    file: "Batch1\\Linq\\TestLinqSetOperators.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.TestMethodParametersClass", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BasicCSharp.TestMethodParametersClass)],
        statics: {
            test: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BasicCSharp.TestMethodParametersClass).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestMethodParametersClass, 3, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "Test()",
                    line: "25"
                } ));
                Bridge.ClientTest.BasicCSharp.TestMethodParametersClass.test();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                    project: "Batch1",
                    className: "Bridge.ClientTest.BasicCSharp.TestMethodParametersClass",
                    file: "Batch1\\BasicCSharp\\TestMethodParametersClass.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.TestNameOf", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.CSharp6.TestNameOf)],
        statics: {
            testBasic: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.CSharp6.TestNameOf).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestNameOf, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TestBasic()",
                    line: "30"
                } ));
                Bridge.ClientTest.CSharp6.TestNameOf.testBasic();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                    project: "Batch1",
                    className: "Bridge.ClientTest.CSharp6.TestNameOf",
                    file: "Batch1\\CSharp6\\TestNameof.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.TestOverloadInstanceMethods", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BasicCSharp.TestOverloadInstanceMethods)],
        statics: {
            testInstance: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BasicCSharp.TestOverloadInstanceMethods).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestOverloadInstanceMethods, 17, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TestInstance()",
                    line: "82"
                } ));
                Bridge.ClientTest.BasicCSharp.TestOverloadInstanceMethods.testInstance();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                    project: "Batch1",
                    className: "Bridge.ClientTest.BasicCSharp.TestOverloadInstanceMethods",
                    file: "Batch1\\BasicCSharp\\TestOverloadInstanceMethods.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.TestOverloadStaticMethods", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BasicCSharp.TestOverloadStaticMethods)],
        statics: {
            testStatic: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BasicCSharp.TestOverloadStaticMethods).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestOverloadStaticMethods, 16, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TestStatic()",
                    line: "82"
                } ));
                Bridge.ClientTest.BasicCSharp.TestOverloadStaticMethods.testStatic();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                    project: "Batch1",
                    className: "Bridge.ClientTest.BasicCSharp.TestOverloadStaticMethods",
                    file: "Batch1\\BasicCSharp\\TestOverloadStaticMethods.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.TestReferenceTypes", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BasicCSharp.TestReferenceTypes)],
        statics: {
            testInstanceConstructorsAndMethods: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BasicCSharp.TestReferenceTypes).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestReferenceTypes, 26, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TestInstanceConstructorsAndMethods()",
                    line: "256"
                } ));
                Bridge.ClientTest.BasicCSharp.TestReferenceTypes.testInstanceConstructorsAndMethods();
            },
            testStaticConstructorsAndMethods: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BasicCSharp.TestReferenceTypes).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestReferenceTypes, 13, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TestStaticConstructorsAndMethods()",
                    line: "322"
                } ));
                Bridge.ClientTest.BasicCSharp.TestReferenceTypes.testStaticConstructorsAndMethods();
            },
            testMethodParameters: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BasicCSharp.TestReferenceTypes).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestReferenceTypes, 16, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TestMethodParameters()",
                    line: "354"
                } ));
                Bridge.ClientTest.BasicCSharp.TestReferenceTypes.testMethodParameters();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                    project: "Batch1",
                    className: "Bridge.ClientTest.BasicCSharp.TestReferenceTypes",
                    file: "Batch1\\BasicCSharp\\TestReferenceTypes.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.TestTryCatchBlocks", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BasicCSharp.TestTryCatchBlocks)],
        statics: {
            simpleTryCatch: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BasicCSharp.TestTryCatchBlocks).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestTryCatchBlocks, 1, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "SimpleTryCatch()",
                    line: "16"
                } ));
                Bridge.ClientTest.BasicCSharp.TestTryCatchBlocks.simpleTryCatch();
            },
            caughtExceptions: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BasicCSharp.TestTryCatchBlocks).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestTryCatchBlocks, 3, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "CaughtExceptions()",
                    line: "24"
                } ));
                Bridge.ClientTest.BasicCSharp.TestTryCatchBlocks.caughtExceptions();
            },
            thrownExceptions: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BasicCSharp.TestTryCatchBlocks).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestTryCatchBlocks, 12, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ThrownExceptions()",
                    line: "37"
                } ));
                Bridge.ClientTest.BasicCSharp.TestTryCatchBlocks.thrownExceptions();
            },
            bridge320: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BasicCSharp.TestTryCatchBlocks).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestTryCatchBlocks, 1, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "Bridge320()",
                    line: "63"
                } ));
                Bridge.ClientTest.BasicCSharp.TestTryCatchBlocks.bridge320();
            },
            bridge343: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BasicCSharp.TestTryCatchBlocks).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestTryCatchBlocks, 1, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "Bridge343()",
                    line: "84"
                } ));
                Bridge.ClientTest.BasicCSharp.TestTryCatchBlocks.bridge343();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                    project: "Batch1",
                    className: "Bridge.ClientTest.BasicCSharp.TestTryCatchBlocks",
                    file: "Batch1\\BasicCSharp\\TestTryCatchBlocks.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.TestTryCatchFinallyBlocks", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BasicCSharp.TestTryCatchFinallyBlocks)],
        statics: {
            simpleTryCatchFinally: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BasicCSharp.TestTryCatchFinallyBlocks).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestTryCatchFinallyBlocks, 1, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "SimpleTryCatchFinally()",
                    line: "24"
                } ));
                Bridge.ClientTest.BasicCSharp.TestTryCatchFinallyBlocks.simpleTryCatchFinally();
            },
            caughtExceptions: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BasicCSharp.TestTryCatchFinallyBlocks).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestTryCatchFinallyBlocks, 4, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "CaughtExceptions()",
                    line: "33"
                } ));
                Bridge.ClientTest.BasicCSharp.TestTryCatchFinallyBlocks.caughtExceptions();
            },
            thrownExceptions: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BasicCSharp.TestTryCatchFinallyBlocks).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestTryCatchFinallyBlocks, 16, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ThrownExceptions()",
                    line: "53"
                } ));
                Bridge.ClientTest.BasicCSharp.TestTryCatchFinallyBlocks.thrownExceptions();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                    project: "Batch1",
                    className: "Bridge.ClientTest.BasicCSharp.TestTryCatchFinallyBlocks",
                    file: "Batch1\\BasicCSharp\\TestTryCatchFinallyBlocks.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.TestUsingStatic", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.CSharp6.TestUsingStatic)],
        statics: {
            testBasic: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.CSharp6.TestUsingStatic).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestUsingStatic, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TestBasic()",
                    line: "9"
                } ));
                Bridge.ClientTest.CSharp6.TestUsingStatic.testBasic();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                    project: "Batch1",
                    className: "Bridge.ClientTest.CSharp6.TestUsingStatic",
                    file: "Batch1\\CSharp6\\TestUsingStatic.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.TestValueTypes", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BasicCSharp.TestValueTypes)],
        statics: {
            testInstanceConstructorsAndMethods: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BasicCSharp.TestValueTypes).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestValueTypes, 18, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TestInstanceConstructorsAndMethods()",
                    line: "75"
                } ));
                Bridge.ClientTest.BasicCSharp.TestValueTypes.testInstanceConstructorsAndMethods();
            },
            testStaticConstructorsAndMethods: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BasicCSharp.TestValueTypes).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestValueTypes, 7, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TestStaticConstructorsAndMethods()",
                    line: "126"
                } ));
                Bridge.ClientTest.BasicCSharp.TestValueTypes.testStaticConstructorsAndMethods();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                    project: "Batch1",
                    className: "Bridge.ClientTest.BasicCSharp.TestValueTypes",
                    file: "Batch1\\BasicCSharp\\TestValueTypes.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.TestVersion", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.TestVersion)],
        statics: {
            testConstructors: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.TestVersion).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestVersion, 42, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TestConstructors()",
                    line: "11"
                } ));
                Bridge.ClientTest.SimpleTypes.TestVersion.testConstructors();
            },
            testCloneCompare: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.TestVersion).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestVersion, 13, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TestCloneCompare()",
                    line: "70"
                } ));
                Bridge.ClientTest.SimpleTypes.TestVersion.testCloneCompare();
            },
            testEqualsGetHashCode: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.TestVersion).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestVersion, 9, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TestEqualsGetHashCode()",
                    line: "99"
                } ));
                Bridge.ClientTest.SimpleTypes.TestVersion.testEqualsGetHashCode();
            },
            testToString: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.TestVersion).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestVersion, 10, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TestToString()",
                    line: "120"
                } ));
                Bridge.ClientTest.SimpleTypes.TestVersion.testToString();
            },
            testParse: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.TestVersion).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestVersion, 6, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TestParse()",
                    line: "145"
                } ));
                Bridge.ClientTest.SimpleTypes.TestVersion.testParse();
            },
            testOperators: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.TestVersion).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestVersion, 30, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TestOperators()",
                    line: "173"
                } ));
                Bridge.ClientTest.SimpleTypes.TestVersion.testOperators();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                    project: "Batch1",
                    className: "Bridge.ClientTest.SimpleTypes.TestVersion",
                    file: "Batch1\\SimpleTypes\\TestVersion.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.TestVirtualMethods", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BasicCSharp.TestVirtualMethods)],
        statics: {
            testB: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BasicCSharp.TestVirtualMethods).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestVirtualMethods, 7, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TestB()",
                    line: "30"
                } ));
                Bridge.ClientTest.BasicCSharp.TestVirtualMethods.testB();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                    project: "Batch1",
                    className: "Bridge.ClientTest.BasicCSharp.TestVirtualMethods",
                    file: "Batch1\\BasicCSharp\\TestVirtualMethods.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.TimeoutExceptionTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.TimeoutExceptionTests)],
        statics: {
            typePropertiesAreCorrect: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.TimeoutExceptionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TimeoutExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TypePropertiesAreCorrect()",
                    line: "12"
                } ));
                t.Fixture.typePropertiesAreCorrect();
            },
            defaultConstructorWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.TimeoutExceptionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TimeoutExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "DefaultConstructorWorks()",
                    line: "22"
                } ));
                t.Fixture.defaultConstructorWorks();
            },
            constructorWithMessageWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.TimeoutExceptionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TimeoutExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ConstructorWithMessageWorks()",
                    line: "31"
                } ));
                t.Fixture.constructorWithMessageWorks();
            },
            constructorWithMessageAndInnerExceptionWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.TimeoutExceptionTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TimeoutExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ConstructorWithMessageAndInnerExceptionWorks()",
                    line: "40"
                } ));
                t.Fixture.constructorWithMessageAndInnerExceptionWorks();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                    project: "Batch1",
                    className: "Bridge.ClientTest.Exceptions.TimeoutExceptionTests",
                    file: "Batch1\\Exceptions\\TimeoutExceptionTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.TimerTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.TimerTests)],
        statics: {
            testTimerThrows: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.TimerTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TimerTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TestTimerThrows()",
                    line: "34"
                } ));
                t.Fixture.testTimerThrows();
            },
            testStaticCallbackWithDispose: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.TimerTests).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TimerTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TestStaticCallbackWithDispose()",
                    line: "63"
                } ));
                Bridge.ClientTest.Threading.TimerTests.testStaticCallbackWithDispose();
            },
            testStaticCallbackWithChange: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.TimerTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TimerTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TestStaticCallbackWithChange()",
                    line: "89"
                } ));
                t.Fixture.testStaticCallbackWithChange();
            },
            testInstanceCallbackWithDispose: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.TimerTests).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TimerTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TestInstanceCallbackWithDispose()",
                    line: "122"
                } ));
                Bridge.ClientTest.Threading.TimerTests.testInstanceCallbackWithDispose();
            },
            testInstanceCallbackWithChange: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.TimerTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TimerTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TestInstanceCallbackWithChange()",
                    line: "146"
                } ));
                t.Fixture.testInstanceCallbackWithChange();
            },
            testInfiniteTimer: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.TimerTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TimerTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TestInfiniteTimer()",
                    line: "178"
                } ));
                t.Fixture.testInfiniteTimer();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                    project: "Batch1",
                    className: "Bridge.ClientTest.Threading.TimerTests",
                    file: "Batch1\\Threading\\TimerTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.TimeSpanTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.TimeSpanTests)],
        statics: {
            typePropertiesAreCorrect: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.TimeSpanTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TimeSpanTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TypePropertiesAreCorrect()",
                    line: "10"
                } ));
                t.Fixture.typePropertiesAreCorrect();
            },
            defaultConstructorWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.TimeSpanTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TimeSpanTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "DefaultConstructorWorks()",
                    line: "20"
                } ));
                t.Fixture.defaultConstructorWorks();
            },
            defaultValueWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.TimeSpanTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TimeSpanTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "DefaultValueWorks()",
                    line: "27"
                } ));
                t.Fixture.defaultValueWorks();
            },
            zeroWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.TimeSpanTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TimeSpanTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ZeroWorks()",
                    line: "34"
                } ));
                t.Fixture.zeroWorks();
            },
            creatingInstanceReturnsTimeSpanWithZeroValue: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.TimeSpanTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TimeSpanTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "CreatingInstanceReturnsTimeSpanWithZeroValue()",
                    line: "41"
                } ));
                t.Fixture.creatingInstanceReturnsTimeSpanWithZeroValue();
            },
            parameterConstructorsWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.TimeSpanTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TimeSpanTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ParameterConstructorsWorks()",
                    line: "48"
                } ));
                t.Fixture.parameterConstructorsWorks();
            },
            factoryMethodsWork: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.TimeSpanTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TimeSpanTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FactoryMethodsWork()",
                    line: "68"
                } ));
                t.Fixture.factoryMethodsWork();
            },
            propertiesWork: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.TimeSpanTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TimeSpanTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "PropertiesWork()",
                    line: "96"
                } ));
                t.Fixture.propertiesWork();
            },
            compareToWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.TimeSpanTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TimeSpanTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "CompareToWorks()",
                    line: "113"
                } ));
                t.Fixture.compareToWorks();
            },
            compareWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.TimeSpanTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TimeSpanTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "CompareWorks()",
                    line: "126"
                } ));
                t.Fixture.compareWorks();
            },
            staticEqualsWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.TimeSpanTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TimeSpanTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "StaticEqualsWorks()",
                    line: "139"
                } ));
                t.Fixture.staticEqualsWorks();
            },
            equalsWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.TimeSpanTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TimeSpanTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "EqualsWorks()",
                    line: "150"
                } ));
                t.Fixture.equalsWorks();
            },
            iEquatableEqualsWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.TimeSpanTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TimeSpanTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "IEquatableEqualsWorks()",
                    line: "161"
                } ));
                t.Fixture.iEquatableEqualsWorks();
            },
            toStringWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.TimeSpanTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TimeSpanTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ToStringWorks()",
                    line: "172"
                } ));
                t.Fixture.toStringWorks();
            },
            addWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.TimeSpanTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TimeSpanTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "AddWorks()",
                    line: "185"
                } ));
                t.Fixture.addWorks();
            },
            subtractWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.TimeSpanTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TimeSpanTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "SubtractWorks()",
                    line: "195"
                } ));
                t.Fixture.subtractWorks();
            },
            durationWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.TimeSpanTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TimeSpanTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "DurationWorks()",
                    line: "205"
                } ));
                t.Fixture.durationWorks();
            },
            negateWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.TimeSpanTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TimeSpanTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "NegateWorks()",
                    line: "217"
                } ));
                t.Fixture.negateWorks();
            },
            comparisonOperatorsWork: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.TimeSpanTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TimeSpanTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ComparisonOperatorsWork()",
                    line: "234"
                } ));
                t.Fixture.comparisonOperatorsWork();
            },
            additionOperatorWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.TimeSpanTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TimeSpanTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "AdditionOperatorWorks()",
                    line: "271"
                } ));
                t.Fixture.additionOperatorWorks();
            },
            subtractionOperatorWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.TimeSpanTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TimeSpanTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "SubtractionOperatorWorks()",
                    line: "281"
                } ));
                t.Fixture.subtractionOperatorWorks();
            },
            unaryPlusWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.TimeSpanTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TimeSpanTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "UnaryPlusWorks()",
                    line: "291"
                } ));
                t.Fixture.unaryPlusWorks();
            },
            unaryMinusWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.TimeSpanTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TimeSpanTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "UnaryMinusWorks()",
                    line: "300"
                } ));
                t.Fixture.unaryMinusWorks();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                    project: "Batch1",
                    className: "Bridge.ClientTest.SimpleTypes.TimeSpanTests",
                    file: "Batch1\\SimpleTypes\\TimeSpanTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.TupleTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.TupleTests)],
        statics: {
            tuple1Works: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.TupleTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TupleTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "Tuple1Works()",
                    line: "10"
                } ));
                t.Fixture.tuple1Works();
            },
            tuple2Works: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.TupleTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TupleTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "Tuple2Works()",
                    line: "20"
                } ));
                t.Fixture.tuple2Works();
            },
            tuple3Works: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.TupleTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TupleTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "Tuple3Works()",
                    line: "31"
                } ));
                t.Fixture.tuple3Works();
            },
            tuple4Works: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.TupleTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TupleTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "Tuple4Works()",
                    line: "43"
                } ));
                t.Fixture.tuple4Works();
            },
            tuple5Works: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.TupleTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TupleTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "Tuple5Works()",
                    line: "56"
                } ));
                t.Fixture.tuple5Works();
            },
            tuple6Works: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.TupleTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TupleTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "Tuple6Works()",
                    line: "70"
                } ));
                t.Fixture.tuple6Works();
            },
            tuple7Works: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.TupleTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TupleTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "Tuple7Works()",
                    line: "85"
                } ));
                t.Fixture.tuple7Works();
            },
            tuple8Works: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.TupleTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TupleTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "Tuple8Works()",
                    line: "101"
                } ));
                t.Fixture.tuple8Works();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                    project: "Batch1",
                    className: "Bridge.ClientTest.SimpleTypes.TupleTests",
                    file: "Batch1\\SimpleTypes\\TupleTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.TypeAttributeTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeAttributeTests)],
        statics: {
            canGetCustomTypeAttributesForTypeWithNoAttributes: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeAttributeTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeAttributeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "CanGetCustomTypeAttributesForTypeWithNoAttributes()",
                    line: "416"
                } ));
                t.Fixture.canGetCustomTypeAttributesForTypeWithNoAttributes();
            },
            canGetCustomTypeAttributesForClassWithAttributes: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeAttributeTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeAttributeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "CanGetCustomTypeAttributesForClassWithAttributes()",
                    line: "423"
                } ));
                t.Fixture.canGetCustomTypeAttributesForClassWithAttributes();
            },
            nonScriptableAttributesAreNotIncluded: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeAttributeTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeAttributeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "NonScriptableAttributesAreNotIncluded()",
                    line: "436"
                } ));
                t.Fixture.nonScriptableAttributesAreNotIncluded();
            },
            canGetCustomTypeAttributesForInterfaceWithAttributes: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeAttributeTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeAttributeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "CanGetCustomTypeAttributesForInterfaceWithAttributes()",
                    line: "444"
                } ));
                t.Fixture.canGetCustomTypeAttributesForInterfaceWithAttributes();
            },
            canGetCustomTypeAttributesForEnumWithAttributes: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeAttributeTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeAttributeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "CanGetCustomTypeAttributesForEnumWithAttributes()",
                    line: "457"
                } ));
                t.Fixture.canGetCustomTypeAttributesForEnumWithAttributes();
            },
            inheritedFlagToGetCustomAttributesWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeAttributeTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeAttributeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "InheritedFlagToGetCustomAttributesWorks()",
                    line: "470"
                } ));
                t.Fixture.inheritedFlagToGetCustomAttributesWorks();
            },
            deepInheritanceWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeAttributeTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeAttributeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "DeepInheritanceWorks()",
                    line: "484"
                } ));
                t.Fixture.deepInheritanceWorks();
            },
            overridingSingleUseAttributeReplacesTheAttributeOnTheBaseClass: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeAttributeTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeAttributeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "OverridingSingleUseAttributeReplacesTheAttributeOnTheBaseClass()",
                    line: "495"
                } ));
                t.Fixture.overridingSingleUseAttributeReplacesTheAttributeOnTheBaseClass();
            },
            applyingNewInstanceOfMultipleUseAttributeAddsTheAttribute: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeAttributeTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeAttributeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ApplyingNewInstanceOfMultipleUseAttributeAddsTheAttribute()",
                    line: "506"
                } ));
                t.Fixture.applyingNewInstanceOfMultipleUseAttributeAddsTheAttribute();
            },
            nonInheritedAttributeIsNotInherited: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeAttributeTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeAttributeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "NonInheritedAttributeIsNotInherited()",
                    line: "518"
                } ));
                t.Fixture.nonInheritedAttributeIsNotInherited();
            },
            getCustomAttributesTypeFilterWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeAttributeTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeAttributeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "GetCustomAttributesTypeFilterWorks()",
                    line: "525"
                } ));
                t.Fixture.getCustomAttributesTypeFilterWorks();
            },
            getCustomAttributesWorksForOpenGenericClass: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeAttributeTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeAttributeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "GetCustomAttributesWorksForOpenGenericClass()",
                    line: "535"
                } ));
                t.Fixture.getCustomAttributesWorksForOpenGenericClass();
            },
            getCustomAttributesWorksForConstructedGenericClass: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeAttributeTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeAttributeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "GetCustomAttributesWorksForConstructedGenericClass()",
                    line: "543"
                } ));
                t.Fixture.getCustomAttributesWorksForConstructedGenericClass();
            },
            getCustomAttributesWorksForOpenGenericInterface: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeAttributeTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeAttributeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "GetCustomAttributesWorksForOpenGenericInterface()",
                    line: "551"
                } ));
                t.Fixture.getCustomAttributesWorksForOpenGenericInterface();
            },
            getCustomAttributesWorksForConstructedGenericInterface: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeAttributeTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeAttributeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "GetCustomAttributesWorksForConstructedGenericInterface()",
                    line: "559"
                } ));
                t.Fixture.getCustomAttributesWorksForConstructedGenericInterface();
            },
            allSupportedScalarTypesCanBeUsedAsAttributeArguments: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeAttributeTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeAttributeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "AllSupportedScalarTypesCanBeUsedAsAttributeArguments()",
                    line: "567"
                } ));
                t.Fixture.allSupportedScalarTypesCanBeUsedAsAttributeArguments();
            },
            arraysCanBeUsedAsAttributeArguments: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeAttributeTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeAttributeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ArraysCanBeUsedAsAttributeArguments()",
                    line: "585"
                } ));
                t.Fixture.arraysCanBeUsedAsAttributeArguments();
            },
            namedValuesEnumCanBeUsedAsAttributeArgument: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeAttributeTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeAttributeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "NamedValuesEnumCanBeUsedAsAttributeArgument()",
                    line: "593"
                } ));
                t.Fixture.namedValuesEnumCanBeUsedAsAttributeArgument();
            },
            propertiesWithSetMethodsImplementedAsNormalMethodsCanBeSetInAttributeDeclaration: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeAttributeTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeAttributeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "PropertiesWithSetMethodsImplementedAsNormalMethodsCanBeSetInAttributeDeclaration()",
                    line: "600"
                } ));
                t.Fixture.propertiesWithSetMethodsImplementedAsNormalMethodsCanBeSetInAttributeDeclaration();
            },
            propertiesWithSetMethodsImplementedAsInlineCodeCanBeSetInAttributeDeclaration: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeAttributeTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeAttributeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "PropertiesWithSetMethodsImplementedAsInlineCodeCanBeSetInAttributeDeclaration()",
                    line: "607"
                } ));
                t.Fixture.propertiesWithSetMethodsImplementedAsInlineCodeCanBeSetInAttributeDeclaration();
            },
            propertiesImplementedAsFieldsCanBeAssignedInAttributeDeclaration: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeAttributeTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeAttributeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "PropertiesImplementedAsFieldsCanBeAssignedInAttributeDeclaration()",
                    line: "614"
                } ));
                t.Fixture.propertiesImplementedAsFieldsCanBeAssignedInAttributeDeclaration();
            },
            fieldsCanBeAssignedInAttributeDeclaration: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeAttributeTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeAttributeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FieldsCanBeAssignedInAttributeDeclaration()",
                    line: "621"
                } ));
                t.Fixture.fieldsCanBeAssignedInAttributeDeclaration();
            },
            creatingAttributeWithNamedConstructorWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeAttributeTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeAttributeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "CreatingAttributeWithNamedConstructorWorks()",
                    line: "628"
                } ));
                t.Fixture.creatingAttributeWithNamedConstructorWorks();
            },
            creatingAttributeWithInlineCodeConstructorWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeAttributeTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeAttributeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "CreatingAttributeWithInlineCodeConstructorWorks()",
                    line: "635"
                } ));
                t.Fixture.creatingAttributeWithInlineCodeConstructorWorks();
            },
            conditionalAttributesWhoseSymbolsAreNotDefinedAreRemoved: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeAttributeTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeAttributeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ConditionalAttributesWhoseSymbolsAreNotDefinedAreRemoved()",
                    line: "642"
                } ));
                t.Fixture.conditionalAttributesWhoseSymbolsAreNotDefinedAreRemoved();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                    project: "Batch1",
                    className: "Bridge.ClientTest.Reflection.TypeAttributeTests",
                    file: "Batch1\\Reflection\\TypeAttributeTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemLanguageSupportTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests)],
        statics: {
            typeIsWorksForReferenceTypes: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemLanguageSupportTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TypeIsWorksForReferenceTypes()",
                    line: "146"
                } ));
                t.Fixture.typeIsWorksForReferenceTypes();
            },
            typeAsWorksForReferenceTypes: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemLanguageSupportTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TypeAsWorksForReferenceTypes()",
                    line: "289"
                } ));
                t.Fixture.typeAsWorksForReferenceTypes();
            },
            castWorksForReferenceTypes: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemLanguageSupportTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "CastWorksForReferenceTypes()",
                    line: "432"
                } ));
                t.Fixture.castWorksForReferenceTypes();
            },
            getTypeWorksOnObjects: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemLanguageSupportTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "GetTypeWorksOnObjects()",
                    line: "575"
                } ));
                t.Fixture.getTypeWorksOnObjects();
            },
            getTypeOnNullInstanceThrowsException: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemLanguageSupportTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "GetTypeOnNullInstanceThrowsException()",
                    line: "589"
                } ));
                t.Fixture.getTypeOnNullInstanceThrowsException();
            },
            castOperatorForSerializableTypeWithoutTypeCheckCodeAlwaysSucceedsGeneric: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemLanguageSupportTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "CastOperatorForSerializableTypeWithoutTypeCheckCodeAlwaysSucceedsGeneric()",
                    line: "602"
                } ));
                t.Fixture.castOperatorForSerializableTypeWithoutTypeCheckCodeAlwaysSucceedsGeneric();
            },
            typeCheckForSubTypeOfGenericType: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemLanguageSupportTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TypeCheckForSubTypeOfGenericType()",
                    line: "644"
                } ));
                t.Fixture.typeCheckForSubTypeOfGenericType();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                    project: "Batch1",
                    className: "Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests",
                    file: "Batch1\\Reflection\\TypeSystemLanguageSupportTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemTests)],
        statics: {
            fullNamePropertyReturnsTheNameWithTheNamespace: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FullNamePropertyReturnsTheNameWithTheNamespace()",
                    line: "253"
                } ));
                t.Fixture.fullNamePropertyReturnsTheNameWithTheNamespace();
            },
            assemblyQualifiedNameReturnsTheNameWithTheNamespaceAndAssemblyName: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "AssemblyQualifiedNameReturnsTheNameWithTheNamespaceAndAssemblyName()",
                    line: "259"
                } ));
                t.Fixture.assemblyQualifiedNameReturnsTheNameWithTheNamespaceAndAssemblyName();
            },
            assemblyPropertyWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "AssemblyPropertyWorks()",
                    line: "267"
                } ));
                t.Fixture.assemblyPropertyWorks();
            },
            namespacePropertyReturnsTheNamespaceWithoutTheName: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "NamespacePropertyReturnsTheNamespaceWithoutTheName()",
                    line: "279"
                } ));
                t.Fixture.namespacePropertyReturnsTheNamespaceWithoutTheName();
            },
            instantiatingClassWithConstructorThatNeedsToBeAppliedWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "InstantiatingClassWithConstructorThatNeedsToBeAppliedWorks()",
                    line: "286"
                } ));
                t.Fixture.instantiatingClassWithConstructorThatNeedsToBeAppliedWorks();
            },
            namePropertyRemovesTheNamespace: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "NamePropertyRemovesTheNamespace()",
                    line: "296"
                } ));
                t.Fixture.namePropertyRemovesTheNamespace();
            },
            gettingBaseTypeWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "GettingBaseTypeWorks()",
                    line: "304"
                } ));
                t.Fixture.gettingBaseTypeWorks();
            },
            gettingImplementedInterfacesWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "GettingImplementedInterfacesWorks()",
                    line: "312"
                } ));
                t.Fixture.gettingImplementedInterfacesWorks();
            },
            typeOfAnOpenGenericClassWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TypeOfAnOpenGenericClassWorks()",
                    line: "323"
                } ));
                t.Fixture.typeOfAnOpenGenericClassWorks();
            },
            typeOfAnOpenGenericInterfaceWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TypeOfAnOpenGenericInterfaceWorks()",
                    line: "329"
                } ));
                t.Fixture.typeOfAnOpenGenericInterfaceWorks();
            },
            typeOfInstantiatedGenericClassWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TypeOfInstantiatedGenericClassWorks()",
                    line: "335"
                } ));
                t.Fixture.typeOfInstantiatedGenericClassWorks();
            },
            typeOfInstantiatedGenericInterfaceWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TypeOfInstantiatedGenericInterfaceWorks()",
                    line: "341"
                } ));
                t.Fixture.typeOfInstantiatedGenericInterfaceWorks();
            },
            constructingAGenericTypeTwiceWithTheSameArgumentsReturnsTheSameInstance: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ConstructingAGenericTypeTwiceWithTheSameArgumentsReturnsTheSameInstance()",
                    line: "347"
                } ));
                t.Fixture.constructingAGenericTypeTwiceWithTheSameArgumentsReturnsTheSameInstance();
            },
            accessingAStaticMemberInAGenericClassWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "AccessingAStaticMemberInAGenericClassWorks()",
                    line: "357"
                } ));
                t.Fixture.accessingAStaticMemberInAGenericClassWorks();
            },
            typeOfNestedGenericClassWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TypeOfNestedGenericClassWorks()",
                    line: "365"
                } ));
                t.Fixture.typeOfNestedGenericClassWorks();
            },
            baseTypeAndImplementedInterfacesForGenericTypeWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "BaseTypeAndImplementedInterfacesForGenericTypeWorks()",
                    line: "371"
                } ));
                t.Fixture.baseTypeAndImplementedInterfacesForGenericTypeWorks();
            },
            isAbstractWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "IsAbstractWorks()",
                    line: "378"
                } ));
                t.Fixture.isAbstractWorks();
            },
            isGenericTypeWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "IsGenericTypeWorks()",
                    line: "391"
                } ));
                t.Fixture.isGenericTypeWorks();
            },
            isNestedWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemTests).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "IsNestedWorks()",
                    line: "403"
                } ));
                Bridge.ClientTest.Reflection.TypeSystemTests.isNestedWorks();
            },
            isPublicWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "IsPublicWorks()",
                    line: "412"
                } ));
                t.Fixture.isPublicWorks();
            },
            isNestedPublicWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "IsNestedPublicWorks()",
                    line: "428"
                } ));
                t.Fixture.isNestedPublicWorks();
            },
            isNestedPrivateWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "IsNestedPrivateWorks()",
                    line: "445"
                } ));
                t.Fixture.isNestedPrivateWorks();
            },
            isNestedFamilyWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "IsNestedFamilyWorks()",
                    line: "462"
                } ));
                t.Fixture.isNestedFamilyWorks();
            },
            isNestedAssemblyWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "IsNestedAssemblyWorks()",
                    line: "481"
                } ));
                t.Fixture.isNestedAssemblyWorks();
            },
            isNotPublicWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "IsNotPublicWorks()",
                    line: "500"
                } ));
                t.Fixture.isNotPublicWorks();
            },
            isSealedWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "IsSealedWorks()",
                    line: "517"
                } ));
                t.Fixture.isSealedWorks();
            },
            attributesWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "AttributesWorks()",
                    line: "529"
                } ));
                t.Fixture.attributesWorks();
            },
            containsGenericParametersWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemTests).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ContainsGenericParametersWorks()",
                    line: "544"
                } ));
                Bridge.ClientTest.Reflection.TypeSystemTests.containsGenericParametersWorks();
            },
            declaringTypeWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemTests).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "DeclaringTypeWorks()",
                    line: "562"
                } ));
                Bridge.ClientTest.Reflection.TypeSystemTests.declaringTypeWorks();
            },
            isGenericParameterWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemTests).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests, 58, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "IsGenericParameterWorks()",
                    line: "590"
                } ));
                Bridge.ClientTest.Reflection.TypeSystemTests.isGenericParameterWorks();
            },
            getEnumNamesWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "GetEnumNamesWorks()",
                    line: "635"
                } ));
                t.Fixture.getEnumNamesWorks();
            },
            getEnumNameWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "GetEnumNameWorks()",
                    line: "647"
                } ));
                t.Fixture.getEnumNameWorks();
            },
            getEnumValuesWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "GetEnumValuesWorks()",
                    line: "681"
                } ));
                t.Fixture.getEnumValuesWorks();
            },
            getEnumUnderlyingTypeWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "GetEnumUnderlyingTypeWorks()",
                    line: "693"
                } ));
                t.Fixture.getEnumUnderlyingTypeWorks();
            },
            isGenericTypeDefinitionWorksAsExpected: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "IsGenericTypeDefinitionWorksAsExpected()",
                    line: "706"
                } ));
                t.Fixture.isGenericTypeDefinitionWorksAsExpected();
            },
            genericParameterCountReturnsZeroForConstructedTypesAndNonZeroForOpenOnes: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "GenericParameterCountReturnsZeroForConstructedTypesAndNonZeroForOpenOnes()",
                    line: "718"
                } ));
                t.Fixture.genericParameterCountReturnsZeroForConstructedTypesAndNonZeroForOpenOnes();
            },
            getGenericArgumentsReturnsTheCorrectTypesForConstructedTypesOtherwiseNull: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "GetGenericArgumentsReturnsTheCorrectTypesForConstructedTypesOtherwiseNull()",
                    line: "730"
                } ));
                t.Fixture.getGenericArgumentsReturnsTheCorrectTypesForConstructedTypesOtherwiseNull();
            },
            getGenericTypeDefinitionReturnsTheGenericTypeDefinitionForConstructedTypeOtherwiseNull: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "GetGenericTypeDefinitionReturnsTheGenericTypeDefinitionForConstructedTypeOtherwiseNull()",
                    line: "742"
                } ));
                t.Fixture.getGenericTypeDefinitionReturnsTheGenericTypeDefinitionForConstructedTypeOtherwiseNull();
            },
            isAssignableFromWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "IsAssignableFromWorks()",
                    line: "831"
                } ));
                t.Fixture.isAssignableFromWorks();
            },
            isSubclassOfWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "IsSubclassOfWorks()",
                    line: "1039"
                } ));
                t.Fixture.isSubclassOfWorks();
            },
            isClassWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "IsClassWorks()",
                    line: "1056"
                } ));
                t.Fixture.isClassWorks();
            },
            isEnumWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "IsEnumWorks()",
                    line: "1069"
                } ));
                t.Fixture.isEnumWorks();
            },
            isArrayWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "IsArrayWorks()",
                    line: "1082"
                } ));
                t.Fixture.isArrayWorks();
            },
            isFlagsWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "IsFlagsWorks()",
                    line: "1094"
                } ));
                t.Fixture.isFlagsWorks();
            },
            isInterfaceWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "IsInterfaceWorks()",
                    line: "1107"
                } ));
                t.Fixture.isInterfaceWorks();
            },
            isInstanceOfTypeWorksForReferenceTypes: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "IsInstanceOfTypeWorksForReferenceTypes()",
                    line: "1120"
                } ));
                t.Fixture.isInstanceOfTypeWorksForReferenceTypes();
            },
            invokingBaseUnnamedConstructorWithoutArgumentsWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "InvokingBaseUnnamedConstructorWithoutArgumentsWorks()",
                    line: "1312"
                } ));
                t.Fixture.invokingBaseUnnamedConstructorWithoutArgumentsWorks();
            },
            invokingBaseUnnamedConstructorWithArgumentsWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "InvokingBaseUnnamedConstructorWithArgumentsWorks()",
                    line: "1342"
                } ));
                t.Fixture.invokingBaseUnnamedConstructorWithArgumentsWorks();
            },
            invokingBaseNamedConstructorWithoutArgumentsWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "InvokingBaseNamedConstructorWithoutArgumentsWorks()",
                    line: "1372"
                } ));
                t.Fixture.invokingBaseNamedConstructorWithoutArgumentsWorks();
            },
            invokingBaseNamedConstructorWithArgumentsWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "InvokingBaseNamedConstructorWithArgumentsWorks()",
                    line: "1402"
                } ));
                t.Fixture.invokingBaseNamedConstructorWithArgumentsWorks();
            },
            constructingInstanceWithNamedConstructorWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ConstructingInstanceWithNamedConstructorWorks()",
                    line: "1442"
                } ));
                t.Fixture.constructingInstanceWithNamedConstructorWorks();
            },
            constructingInstanceWithNamedConstructorWorks2: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ConstructingInstanceWithNamedConstructorWorks2()",
                    line: "1451"
                } ));
                t.Fixture.constructingInstanceWithNamedConstructorWorks2();
            },
            invokingBaseMethodWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "InvokingBaseMethodWorks()",
                    line: "1502"
                } ));
                t.Fixture.invokingBaseMethodWorks();
            },
            invokingGenericBaseMethodWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "InvokingGenericBaseMethodWorks()",
                    line: "1508"
                } ));
                t.Fixture.invokingGenericBaseMethodWorks();
            },
            methodGroupConversionWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "MethodGroupConversionWorks()",
                    line: "1594"
                } ));
                t.Fixture.methodGroupConversionWorks();
            },
            methodGroupConversionOnGenericMethodWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "MethodGroupConversionOnGenericMethodWorks()",
                    line: "1601"
                } ));
                t.Fixture.methodGroupConversionOnGenericMethodWorks();
            },
            methodGroupConversionOnBaseMethodWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "MethodGroupConversionOnBaseMethodWorks()",
                    line: "1608"
                } ));
                t.Fixture.methodGroupConversionOnBaseMethodWorks();
            },
            methodGroupConversionOnGenericBaseMethodWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "MethodGroupConversionOnGenericBaseMethodWorks()",
                    line: "1615"
                } ));
                t.Fixture.methodGroupConversionOnGenericBaseMethodWorks();
            },
            importedInterfaceAppearsAsObjectWhenUsedAsGenericArgument: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ImportedInterfaceAppearsAsObjectWhenUsedAsGenericArgument()",
                    line: "1622"
                } ));
                t.Fixture.importedInterfaceAppearsAsObjectWhenUsedAsGenericArgument();
            },
            falseIsFunctionShouldReturnFalse: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FalseIsFunctionShouldReturnFalse()",
                    line: "1628"
                } ));
                t.Fixture.falseIsFunctionShouldReturnFalse();
            },
            castingUndefinedToOtherTypeShouldReturnUndefined: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "CastingUndefinedToOtherTypeShouldReturnUndefined()",
                    line: "1634"
                } ));
                t.Fixture.castingUndefinedToOtherTypeShouldReturnUndefined();
            },
            nonSerializableTypeCanInheritFromSerializableType: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "NonSerializableTypeCanInheritFromSerializableType()",
                    line: "1640"
                } ));
                t.Fixture.nonSerializableTypeCanInheritFromSerializableType();
            },
            inheritingFromRecordWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "InheritingFromRecordWorks()",
                    line: "1648"
                } ));
                t.Fixture.inheritingFromRecordWorks();
            },
            instanceOfWorksForSerializableTypesWithCustomTypeCheckCode: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "InstanceOfWorksForSerializableTypesWithCustomTypeCheckCode()",
                    line: "1655"
                } ));
                t.Fixture.instanceOfWorksForSerializableTypesWithCustomTypeCheckCode();
            },
            staticGetTypeMethodWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "StaticGetTypeMethodWorks()",
                    line: "1664"
                } ));
                t.Fixture.staticGetTypeMethodWorks();
            },
            staticGetTypeMethodWithGenericsWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "StaticGetTypeMethodWithGenericsWorks()",
                    line: "1674"
                } ));
                t.Fixture.staticGetTypeMethodWithGenericsWorks();
            },
            castingToNamedValuesEnumCastsToString: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "CastingToNamedValuesEnumCastsToString()",
                    line: "1723"
                } ));
                t.Fixture.castingToNamedValuesEnumCastsToString();
            },
            castingToImportedNamedValuesEnumCastsToString: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "CastingToImportedNamedValuesEnumCastsToString()",
                    line: "1743"
                } ));
                t.Fixture.castingToImportedNamedValuesEnumCastsToString();
            },
            defaultValueOfNamedValuesEnumIsNull: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "DefaultValueOfNamedValuesEnumIsNull()",
                    line: "1759"
                } ));
                t.Fixture.defaultValueOfNamedValuesEnumIsNull();
            },
            defaultValueOfImportedNamedValuesEnumIsNull: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "DefaultValueOfImportedNamedValuesEnumIsNull()",
                    line: "1766"
                } ));
                t.Fixture.defaultValueOfImportedNamedValuesEnumIsNull();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                    project: "Batch1",
                    className: "Bridge.ClientTest.Reflection.TypeSystemTests",
                    file: "Batch1\\Reflection\\TypeSystemTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.Uint16ArrayTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint16ArrayTests)],
        statics: {
            lengthConstructorWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint16ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint16ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "LengthConstructorWorks()",
                    line: "30"
                } ));
                t.Fixture.lengthConstructorWorks();
            },
            constructorFromIntWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint16ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint16ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ConstructorFromIntWorks()",
                    line: "38"
                } ));
                t.Fixture.constructorFromIntWorks();
            },
            copyConstructorWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint16ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint16ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "CopyConstructorWorks()",
                    line: "48"
                } ));
                t.Fixture.copyConstructorWorks();
            },
            arrayBufferConstructorWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint16ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint16ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ArrayBufferConstructorWorks()",
                    line: "58"
                } ));
                t.Fixture.arrayBufferConstructorWorks();
            },
            arrayBufferWithOffsetConstructorWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint16ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint16ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ArrayBufferWithOffsetConstructorWorks()",
                    line: "68"
                } ));
                t.Fixture.arrayBufferWithOffsetConstructorWorks();
            },
            arrayBufferWithOffsetAndLengthConstructorWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint16ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint16ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ArrayBufferWithOffsetAndLengthConstructorWorks()",
                    line: "78"
                } ));
                t.Fixture.arrayBufferWithOffsetAndLengthConstructorWorks();
            },
            staticBytesPerElementWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint16ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint16ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "StaticBytesPerElementWorks()",
                    line: "95"
                } ));
                t.Fixture.staticBytesPerElementWorks();
            },
            lengthWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint16ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint16ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "LengthWorks()",
                    line: "101"
                } ));
                t.Fixture.lengthWorks();
            },
            indexingWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint16ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint16ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "IndexingWorks()",
                    line: "108"
                } ));
                t.Fixture.indexingWorks();
            },
            setUint16ArrayWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint16ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint16ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "SetUint16ArrayWorks()",
                    line: "117"
                } ));
                t.Fixture.setUint16ArrayWorks();
            },
            setUint16ArrayWithOffsetWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint16ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint16ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "SetUint16ArrayWithOffsetWorks()",
                    line: "125"
                } ));
                t.Fixture.setUint16ArrayWithOffsetWorks();
            },
            setNormalArrayWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint16ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint16ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "SetNormalArrayWorks()",
                    line: "133"
                } ));
                t.Fixture.setNormalArrayWorks();
            },
            setNormalArrayWithOffsetWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint16ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint16ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "SetNormalArrayWithOffsetWorks()",
                    line: "141"
                } ));
                t.Fixture.setNormalArrayWithOffsetWorks();
            },
            subarrayWithBeginWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint16ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint16ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "SubarrayWithBeginWorks()",
                    line: "149"
                } ));
                t.Fixture.subarrayWithBeginWorks();
            },
            subarrayWithBeginAndEndWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint16ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint16ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "SubarrayWithBeginAndEndWorks()",
                    line: "159"
                } ));
                t.Fixture.subarrayWithBeginAndEndWorks();
            },
            bufferPropertyWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint16ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint16ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "BufferPropertyWorks()",
                    line: "170"
                } ));
                t.Fixture.bufferPropertyWorks();
            },
            byteOffsetPropertyWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint16ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint16ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ByteOffsetPropertyWorks()",
                    line: "178"
                } ));
                t.Fixture.byteOffsetPropertyWorks();
            },
            byteLengthPropertyWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint16ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint16ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ByteLengthPropertyWorks()",
                    line: "186"
                } ));
                t.Fixture.byteLengthPropertyWorks();
            },
            indexOfWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint16ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint16ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "IndexOfWorks()",
                    line: "193"
                } ));
                t.Fixture.indexOfWorks();
            },
            containsWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint16ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint16ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ContainsWorks()",
                    line: "202"
                } ));
                t.Fixture.containsWorks();
            },
            foreachWorks_SPI_1401: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint16ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint16ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ForeachWorks_SPI_1401()",
                    line: "211"
                } ));
                t.Fixture.foreachWorks_SPI_1401();
            },
            getEnumeratorWorks_SPI_1401: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint16ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint16ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "GetEnumeratorWorks_SPI_1401()",
                    line: "225"
                } ));
                t.Fixture.getEnumeratorWorks_SPI_1401();
            },
            iEnumerableGetEnumeratorWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint16ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint16ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "IEnumerableGetEnumeratorWorks()",
                    line: "239"
                } ));
                t.Fixture.iEnumerableGetEnumeratorWorks();
            },
            iCollectionMethodsWork_SPI_1559: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint16ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint16ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ICollectionMethodsWork_SPI_1559()",
                    line: "252"
                } ));
                t.Fixture.iCollectionMethodsWork_SPI_1559();
            },
            iListMethodsWork_SPI_1559: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint16ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint16ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "IListMethodsWork_SPI_1559()",
                    line: "265"
                } ));
                t.Fixture.iListMethodsWork_SPI_1559();
            },
            iListIsReadOnlyWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint16ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint16ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "IListIsReadOnlyWorks()",
                    line: "298"
                } ));
                t.Fixture.iListIsReadOnlyWorks();
            },
            iCollectionIsReadOnlyWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint16ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint16ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ICollectionIsReadOnlyWorks()",
                    line: "305"
                } ));
                t.Fixture.iCollectionIsReadOnlyWorks();
            },
            iCollectionCopyTo: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint16ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint16ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ICollectionCopyTo()",
                    line: "312"
                } ));
                t.Fixture.iCollectionCopyTo();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                    project: "Batch1",
                    className: "Bridge.ClientTest.Collections.Native.Uint16ArrayTests",
                    file: "Batch1\\Collections\\Native\\Uint16ArrayTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.UInt16Tests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.UInt16Tests)],
        statics: {
            typePropertiesAreCorrect: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.UInt16Tests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.UInt16Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TypePropertiesAreCorrect()",
                    line: "10"
                } ));
                t.Fixture.typePropertiesAreCorrect();
            },
            castsWork: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.UInt16Tests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.UInt16Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "CastsWork()",
                    line: "26"
                } ));
                t.Fixture.castsWork();
            },
            defaultValueIs0: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.UInt16Tests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.UInt16Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "DefaultValueIs0()",
                    line: "70"
                } ));
                t.Fixture.defaultValueIs0();
            },
            defaultConstructorReturnsZero: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.UInt16Tests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.UInt16Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "DefaultConstructorReturnsZero()",
                    line: "76"
                } ));
                t.Fixture.defaultConstructorReturnsZero();
            },
            creatingInstanceReturnsZero: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.UInt16Tests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.UInt16Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "CreatingInstanceReturnsZero()",
                    line: "82"
                } ));
                t.Fixture.creatingInstanceReturnsZero();
            },
            constantsWork: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.UInt16Tests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.UInt16Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ConstantsWork()",
                    line: "88"
                } ));
                t.Fixture.constantsWork();
            },
            formatWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.UInt16Tests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.UInt16Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FormatWorks()",
                    line: "95"
                } ));
                t.Fixture.formatWorks();
            },
            iFormattableToStringWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.UInt16Tests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.UInt16Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "IFormattableToStringWorks()",
                    line: "101"
                } ));
                t.Fixture.iFormattableToStringWorks();
            },
            tryParseWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.UInt16Tests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.UInt16Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TryParseWorks()",
                    line: "107"
                } ));
                t.Fixture.tryParseWorks();
            },
            parseWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.UInt16Tests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.UInt16Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ParseWorks()",
                    line: "140"
                } ));
                t.Fixture.parseWorks();
            },
            toStringWithoutRadixWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.UInt16Tests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.UInt16Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ToStringWithoutRadixWorks()",
                    line: "152"
                } ));
                t.Fixture.toStringWithoutRadixWorks();
            },
            toStringWithRadixWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.UInt16Tests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.UInt16Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ToStringWithRadixWorks()",
                    line: "158"
                } ));
                t.Fixture.toStringWithRadixWorks();
            },
            getHashCodeWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.UInt16Tests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.UInt16Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "GetHashCodeWorks()",
                    line: "165"
                } ));
                t.Fixture.getHashCodeWorks();
            },
            equalsWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.UInt16Tests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.UInt16Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "EqualsWorks()",
                    line: "173"
                } ));
                t.Fixture.equalsWorks();
            },
            iEquatableEqualsWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.UInt16Tests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.UInt16Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "IEquatableEqualsWorks()",
                    line: "182"
                } ));
                t.Fixture.iEquatableEqualsWorks();
            },
            compareToWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.UInt16Tests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.UInt16Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "CompareToWorks()",
                    line: "196"
                } ));
                t.Fixture.compareToWorks();
            },
            iComparableCompareToWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.UInt16Tests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.UInt16Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "IComparableCompareToWorks()",
                    line: "204"
                } ));
                t.Fixture.iComparableCompareToWorks();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                    project: "Batch1",
                    className: "Bridge.ClientTest.SimpleTypes.UInt16Tests",
                    file: "Batch1\\SimpleTypes\\UInt16Tests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.Uint32ArrayTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint32ArrayTests)],
        statics: {
            lengthConstructorWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint32ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint32ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "LengthConstructorWorks()",
                    line: "30"
                } ));
                t.Fixture.lengthConstructorWorks();
            },
            constructorFromIntWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint32ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint32ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ConstructorFromIntWorks()",
                    line: "38"
                } ));
                t.Fixture.constructorFromIntWorks();
            },
            copyConstructorWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint32ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint32ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "CopyConstructorWorks()",
                    line: "48"
                } ));
                t.Fixture.copyConstructorWorks();
            },
            arrayBufferConstructorWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint32ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint32ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ArrayBufferConstructorWorks()",
                    line: "58"
                } ));
                t.Fixture.arrayBufferConstructorWorks();
            },
            arrayBufferWithOffsetConstructorWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint32ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint32ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ArrayBufferWithOffsetConstructorWorks()",
                    line: "68"
                } ));
                t.Fixture.arrayBufferWithOffsetConstructorWorks();
            },
            arrayBufferWithOffsetAndLengthConstructorWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint32ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint32ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ArrayBufferWithOffsetAndLengthConstructorWorks()",
                    line: "78"
                } ));
                t.Fixture.arrayBufferWithOffsetAndLengthConstructorWorks();
            },
            staticBytesPerElementWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint32ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint32ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "StaticBytesPerElementWorks()",
                    line: "95"
                } ));
                t.Fixture.staticBytesPerElementWorks();
            },
            lengthWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint32ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint32ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "LengthWorks()",
                    line: "101"
                } ));
                t.Fixture.lengthWorks();
            },
            indexingWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint32ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint32ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "IndexingWorks()",
                    line: "108"
                } ));
                t.Fixture.indexingWorks();
            },
            setUint32ArrayWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint32ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint32ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "SetUint32ArrayWorks()",
                    line: "117"
                } ));
                t.Fixture.setUint32ArrayWorks();
            },
            setUint32ArrayWithOffsetWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint32ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint32ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "SetUint32ArrayWithOffsetWorks()",
                    line: "125"
                } ));
                t.Fixture.setUint32ArrayWithOffsetWorks();
            },
            setNormalArrayWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint32ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint32ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "SetNormalArrayWorks()",
                    line: "133"
                } ));
                t.Fixture.setNormalArrayWorks();
            },
            setNormalArrayWithOffsetWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint32ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint32ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "SetNormalArrayWithOffsetWorks()",
                    line: "141"
                } ));
                t.Fixture.setNormalArrayWithOffsetWorks();
            },
            subarrayWithBeginWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint32ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint32ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "SubarrayWithBeginWorks()",
                    line: "149"
                } ));
                t.Fixture.subarrayWithBeginWorks();
            },
            subarrayWithBeginAndEndWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint32ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint32ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "SubarrayWithBeginAndEndWorks()",
                    line: "159"
                } ));
                t.Fixture.subarrayWithBeginAndEndWorks();
            },
            bufferPropertyWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint32ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint32ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "BufferPropertyWorks()",
                    line: "170"
                } ));
                t.Fixture.bufferPropertyWorks();
            },
            byteOffsetPropertyWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint32ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint32ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ByteOffsetPropertyWorks()",
                    line: "178"
                } ));
                t.Fixture.byteOffsetPropertyWorks();
            },
            byteLengthPropertyWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint32ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint32ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ByteLengthPropertyWorks()",
                    line: "186"
                } ));
                t.Fixture.byteLengthPropertyWorks();
            },
            indexOfWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint32ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint32ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "IndexOfWorks()",
                    line: "193"
                } ));
                t.Fixture.indexOfWorks();
            },
            containsWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint32ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint32ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ContainsWorks()",
                    line: "202"
                } ));
                t.Fixture.containsWorks();
            },
            foreachWorks_SPI_1401: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint32ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint32ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ForeachWorks_SPI_1401()",
                    line: "211"
                } ));
                t.Fixture.foreachWorks_SPI_1401();
            },
            getEnumeratorWorks_SPI_1401: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint32ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint32ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "GetEnumeratorWorks_SPI_1401()",
                    line: "225"
                } ));
                t.Fixture.getEnumeratorWorks_SPI_1401();
            },
            iEnumerableGetEnumeratorWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint32ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint32ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "IEnumerableGetEnumeratorWorks()",
                    line: "239"
                } ));
                t.Fixture.iEnumerableGetEnumeratorWorks();
            },
            iCollectionMethodsWork_SPI_1559: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint32ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint32ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ICollectionMethodsWork_SPI_1559()",
                    line: "252"
                } ));
                t.Fixture.iCollectionMethodsWork_SPI_1559();
            },
            iListMethodsWork_SPI_1559: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint32ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint32ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "IListMethodsWork_SPI_1559()",
                    line: "265"
                } ));
                t.Fixture.iListMethodsWork_SPI_1559();
            },
            iListIsReadOnlyWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint32ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint32ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "IListIsReadOnlyWorks()",
                    line: "298"
                } ));
                t.Fixture.iListIsReadOnlyWorks();
            },
            iCollectionIsReadOnlyWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint32ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint32ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ICollectionIsReadOnlyWorks()",
                    line: "305"
                } ));
                t.Fixture.iCollectionIsReadOnlyWorks();
            },
            iCollectionCopyTo: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint32ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint32ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ICollectionCopyTo()",
                    line: "312"
                } ));
                t.Fixture.iCollectionCopyTo();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                    project: "Batch1",
                    className: "Bridge.ClientTest.Collections.Native.Uint32ArrayTests",
                    file: "Batch1\\Collections\\Native\\Uint32ArrayTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.UInt32Tests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.UInt32Tests)],
        statics: {
            typePropertiesAreCorrect: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.UInt32Tests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.UInt32Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TypePropertiesAreCorrect()",
                    line: "10"
                } ));
                t.Fixture.typePropertiesAreCorrect();
            },
            castsWork: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.UInt32Tests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.UInt32Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "CastsWork()",
                    line: "25"
                } ));
                t.Fixture.castsWork();
            },
            defaultValueIs0: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.UInt32Tests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.UInt32Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "DefaultValueIs0()",
                    line: "69"
                } ));
                t.Fixture.defaultValueIs0();
            },
            defaultConstructorReturnsZero: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.UInt32Tests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.UInt32Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "DefaultConstructorReturnsZero()",
                    line: "75"
                } ));
                t.Fixture.defaultConstructorReturnsZero();
            },
            creatingInstanceReturnsZero: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.UInt32Tests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.UInt32Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "CreatingInstanceReturnsZero()",
                    line: "81"
                } ));
                t.Fixture.creatingInstanceReturnsZero();
            },
            constantsWork: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.UInt32Tests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.UInt32Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ConstantsWork()",
                    line: "87"
                } ));
                t.Fixture.constantsWork();
            },
            formatWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.UInt32Tests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.UInt32Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FormatWorks()",
                    line: "94"
                } ));
                t.Fixture.formatWorks();
            },
            iFormattableToStringWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.UInt32Tests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.UInt32Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "IFormattableToStringWorks()",
                    line: "100"
                } ));
                t.Fixture.iFormattableToStringWorks();
            },
            tryParseWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.UInt32Tests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.UInt32Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TryParseWorks()",
                    line: "106"
                } ));
                t.Fixture.tryParseWorks();
            },
            parseWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.UInt32Tests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.UInt32Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ParseWorks()",
                    line: "135"
                } ));
                t.Fixture.parseWorks();
            },
            toStringWithoutRadixWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.UInt32Tests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.UInt32Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ToStringWithoutRadixWorks()",
                    line: "147"
                } ));
                t.Fixture.toStringWithoutRadixWorks();
            },
            toStringWithRadixWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.UInt32Tests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.UInt32Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ToStringWithRadixWorks()",
                    line: "153"
                } ));
                t.Fixture.toStringWithRadixWorks();
            },
            getHashCodeWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.UInt32Tests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.UInt32Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "GetHashCodeWorks()",
                    line: "160"
                } ));
                t.Fixture.getHashCodeWorks();
            },
            equalsWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.UInt32Tests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.UInt32Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "EqualsWorks()",
                    line: "168"
                } ));
                t.Fixture.equalsWorks();
            },
            iEquatableEqualsWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.UInt32Tests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.UInt32Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "IEquatableEqualsWorks()",
                    line: "177"
                } ));
                t.Fixture.iEquatableEqualsWorks();
            },
            compareToWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.UInt32Tests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.UInt32Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "CompareToWorks()",
                    line: "191"
                } ));
                t.Fixture.compareToWorks();
            },
            iComparableCompareToWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.UInt32Tests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.UInt32Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "IComparableCompareToWorks()",
                    line: "199"
                } ));
                t.Fixture.iComparableCompareToWorks();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                    project: "Batch1",
                    className: "Bridge.ClientTest.SimpleTypes.UInt32Tests",
                    file: "Batch1\\SimpleTypes\\UInt32Tests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.UInt64Tests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.UInt64Tests)],
        statics: {
            typePropertiesAreCorrect: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.UInt64Tests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.UInt64Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TypePropertiesAreCorrect()",
                    line: "23"
                } ));
                t.Fixture.typePropertiesAreCorrect();
            },
            minMaxValuesAreCorrect: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.UInt64Tests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.UInt64Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "MinMaxValuesAreCorrect()",
                    line: "36"
                } ));
                t.Fixture.minMaxValuesAreCorrect();
            },
            castsWork: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.UInt64Tests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.UInt64Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "CastsWork()",
                    line: "43"
                } ));
                t.Fixture.castsWork();
            },
            overflowWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.UInt64Tests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.UInt64Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "OverflowWorks()",
                    line: "74"
                } ));
                t.Fixture.overflowWorks();
            },
            combinedTypesOperationsWork: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.UInt64Tests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.UInt64Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "CombinedTypesOperationsWork()",
                    line: "94"
                } ));
                t.Fixture.combinedTypesOperationsWork();
            },
            defaultValueIs0: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.UInt64Tests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.UInt64Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "DefaultValueIs0()",
                    line: "137"
                } ));
                t.Fixture.defaultValueIs0();
            },
            defaultConstructorReturnsZero: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.UInt64Tests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.UInt64Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "DefaultConstructorReturnsZero()",
                    line: "143"
                } ));
                t.Fixture.defaultConstructorReturnsZero();
            },
            creatingInstanceReturnsZero: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.UInt64Tests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.UInt64Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "CreatingInstanceReturnsZero()",
                    line: "149"
                } ));
                t.Fixture.creatingInstanceReturnsZero();
            },
            constantsWork: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.UInt64Tests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.UInt64Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ConstantsWork()",
                    line: "155"
                } ));
                t.Fixture.constantsWork();
            },
            formatWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.UInt64Tests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.UInt64Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "FormatWorks()",
                    line: "161"
                } ));
                t.Fixture.formatWorks();
            },
            iFormattableToStringWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.UInt64Tests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.UInt64Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "IFormattableToStringWorks()",
                    line: "167"
                } ));
                t.Fixture.iFormattableToStringWorks();
            },
            castingOfLargeValuesToUInt64Works: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.UInt64Tests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.UInt64Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "CastingOfLargeValuesToUInt64Works()",
                    line: "173"
                } ));
                t.Fixture.castingOfLargeValuesToUInt64Works();
            },
            divisionOfLargeUInt64Works: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.UInt64Tests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.UInt64Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "DivisionOfLargeUInt64Works()",
                    line: "181"
                } ));
                t.Fixture.divisionOfLargeUInt64Works();
            },
            tryParseWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.UInt64Tests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.UInt64Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TryParseWorks()",
                    line: "188"
                } ));
                t.Fixture.tryParseWorks();
            },
            parseWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.UInt64Tests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.UInt64Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ParseWorks()",
                    line: "221"
                } ));
                t.Fixture.parseWorks();
            },
            toStringWithoutRadixWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.UInt64Tests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.UInt64Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ToStringWithoutRadixWorks()",
                    line: "233"
                } ));
                t.Fixture.toStringWithoutRadixWorks();
            },
            toStringWithRadixWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.UInt64Tests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.UInt64Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ToStringWithRadixWorks()",
                    line: "239"
                } ));
                t.Fixture.toStringWithRadixWorks();
            },
            getHashCodeWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.UInt64Tests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.UInt64Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "GetHashCodeWorks()",
                    line: "246"
                } ));
                t.Fixture.getHashCodeWorks();
            },
            equalsWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.UInt64Tests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.UInt64Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "EqualsWorks()",
                    line: "254"
                } ));
                t.Fixture.equalsWorks();
            },
            iEquatableEqualsWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.UInt64Tests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.UInt64Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "IEquatableEqualsWorks()",
                    line: "263"
                } ));
                t.Fixture.iEquatableEqualsWorks();
            },
            compareToWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.UInt64Tests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.UInt64Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "CompareToWorks()",
                    line: "277"
                } ));
                t.Fixture.compareToWorks();
            },
            iComparableCompareToWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.UInt64Tests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.UInt64Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "IComparableCompareToWorks()",
                    line: "285"
                } ));
                t.Fixture.iComparableCompareToWorks();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                    project: "Batch1",
                    className: "Bridge.ClientTest.SimpleTypes.UInt64Tests",
                    file: "Batch1\\SimpleTypes\\UInt64Tests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ArrayTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint8ArrayTests)],
        statics: {
            lengthConstructorWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint8ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "LengthConstructorWorks()",
                    line: "30"
                } ));
                t.Fixture.lengthConstructorWorks();
            },
            constructorFromIntWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint8ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ConstructorFromIntWorks()",
                    line: "38"
                } ));
                t.Fixture.constructorFromIntWorks();
            },
            copyConstructorWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint8ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "CopyConstructorWorks()",
                    line: "48"
                } ));
                t.Fixture.copyConstructorWorks();
            },
            arrayBufferConstructorWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint8ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ArrayBufferConstructorWorks()",
                    line: "58"
                } ));
                t.Fixture.arrayBufferConstructorWorks();
            },
            arrayBufferWithOffsetConstructorWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint8ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ArrayBufferWithOffsetConstructorWorks()",
                    line: "68"
                } ));
                t.Fixture.arrayBufferWithOffsetConstructorWorks();
            },
            arrayBufferWithOffsetAndLengthConstructorWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint8ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ArrayBufferWithOffsetAndLengthConstructorWorks()",
                    line: "78"
                } ));
                t.Fixture.arrayBufferWithOffsetAndLengthConstructorWorks();
            },
            staticBytesPerElementWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint8ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "StaticBytesPerElementWorks()",
                    line: "95"
                } ));
                t.Fixture.staticBytesPerElementWorks();
            },
            lengthWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint8ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "LengthWorks()",
                    line: "101"
                } ));
                t.Fixture.lengthWorks();
            },
            indexingWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint8ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "IndexingWorks()",
                    line: "108"
                } ));
                t.Fixture.indexingWorks();
            },
            setUint8ArrayWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint8ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "SetUint8ArrayWorks()",
                    line: "117"
                } ));
                t.Fixture.setUint8ArrayWorks();
            },
            setUint8ArrayWithOffsetWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint8ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "SetUint8ArrayWithOffsetWorks()",
                    line: "125"
                } ));
                t.Fixture.setUint8ArrayWithOffsetWorks();
            },
            setNormalArrayWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint8ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "SetNormalArrayWorks()",
                    line: "133"
                } ));
                t.Fixture.setNormalArrayWorks();
            },
            setNormalArrayWithOffsetWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint8ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "SetNormalArrayWithOffsetWorks()",
                    line: "141"
                } ));
                t.Fixture.setNormalArrayWithOffsetWorks();
            },
            subarrayWithBeginWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint8ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "SubarrayWithBeginWorks()",
                    line: "149"
                } ));
                t.Fixture.subarrayWithBeginWorks();
            },
            subarrayWithBeginAndEndWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint8ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "SubarrayWithBeginAndEndWorks()",
                    line: "159"
                } ));
                t.Fixture.subarrayWithBeginAndEndWorks();
            },
            bufferPropertyWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint8ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "BufferPropertyWorks()",
                    line: "170"
                } ));
                t.Fixture.bufferPropertyWorks();
            },
            byteOffsetPropertyWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint8ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ByteOffsetPropertyWorks()",
                    line: "178"
                } ));
                t.Fixture.byteOffsetPropertyWorks();
            },
            byteLengthPropertyWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint8ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ByteLengthPropertyWorks()",
                    line: "186"
                } ));
                t.Fixture.byteLengthPropertyWorks();
            },
            indexOfWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint8ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "IndexOfWorks()",
                    line: "193"
                } ));
                t.Fixture.indexOfWorks();
            },
            containsWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint8ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ContainsWorks()",
                    line: "202"
                } ));
                t.Fixture.containsWorks();
            },
            foreachWorks_SPI_1401: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint8ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ForeachWorks_SPI_1401()",
                    line: "211"
                } ));
                t.Fixture.foreachWorks_SPI_1401();
            },
            getEnumeratorWorks_SPI_1401: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint8ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "GetEnumeratorWorks_SPI_1401()",
                    line: "225"
                } ));
                t.Fixture.getEnumeratorWorks_SPI_1401();
            },
            iEnumerableGetEnumeratorWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint8ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "IEnumerableGetEnumeratorWorks()",
                    line: "239"
                } ));
                t.Fixture.iEnumerableGetEnumeratorWorks();
            },
            iCollectionMethodsWork_SPI_1559: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint8ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ICollectionMethodsWork_SPI_1559()",
                    line: "252"
                } ));
                t.Fixture.iCollectionMethodsWork_SPI_1559();
            },
            iListMethodsWork_SPI_1559: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint8ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "IListMethodsWork_SPI_1559()",
                    line: "265"
                } ));
                t.Fixture.iListMethodsWork_SPI_1559();
            },
            iListIsReadOnlyWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint8ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "IListIsReadOnlyWorks()",
                    line: "298"
                } ));
                t.Fixture.iListIsReadOnlyWorks();
            },
            iCollectionIsReadOnlyWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint8ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ICollectionIsReadOnlyWorks()",
                    line: "305"
                } ));
                t.Fixture.iCollectionIsReadOnlyWorks();
            },
            iCollectionCopyTo: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint8ArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ICollectionCopyTo()",
                    line: "312"
                } ));
                t.Fixture.iCollectionCopyTo();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                    project: "Batch1",
                    className: "Bridge.ClientTest.Collections.Native.Uint8ArrayTests",
                    file: "Batch1\\Collections\\Native\\Uint8ArrayTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ClampedArrayTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint8ClampedArrayTests)],
        statics: {
            typePropertiesAreCorrect_SPI_1560: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint8ClampedArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ClampedArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TypePropertiesAreCorrect_SPI_1560()",
                    line: "30"
                } ));
                t.Fixture.typePropertiesAreCorrect_SPI_1560();
            },
            lengthConstructorWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint8ClampedArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ClampedArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "LengthConstructorWorks()",
                    line: "38"
                } ));
                t.Fixture.lengthConstructorWorks();
            },
            constructorFromIntWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint8ClampedArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ClampedArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ConstructorFromIntWorks()",
                    line: "46"
                } ));
                t.Fixture.constructorFromIntWorks();
            },
            constructorFromUint8ArrayWorks_SPI_TODO: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint8ClampedArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ClampedArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ConstructorFromUint8ArrayWorks_SPI_TODO()",
                    line: "56"
                } ));
                t.Fixture.constructorFromUint8ArrayWorks_SPI_TODO();
            },
            copyConstructorWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint8ClampedArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ClampedArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "CopyConstructorWorks()",
                    line: "66"
                } ));
                t.Fixture.copyConstructorWorks();
            },
            arrayBufferConstructorWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint8ClampedArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ClampedArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ArrayBufferConstructorWorks()",
                    line: "76"
                } ));
                t.Fixture.arrayBufferConstructorWorks();
            },
            arrayBufferWithOffsetConstructorWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint8ClampedArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ClampedArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ArrayBufferWithOffsetConstructorWorks()",
                    line: "86"
                } ));
                t.Fixture.arrayBufferWithOffsetConstructorWorks();
            },
            arrayBufferWithOffsetAndLengthConstructorWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint8ClampedArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ClampedArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ArrayBufferWithOffsetAndLengthConstructorWorks()",
                    line: "96"
                } ));
                t.Fixture.arrayBufferWithOffsetAndLengthConstructorWorks();
            },
            staticBytesPerElementWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint8ClampedArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ClampedArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "StaticBytesPerElementWorks()",
                    line: "113"
                } ));
                t.Fixture.staticBytesPerElementWorks();
            },
            lengthWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint8ClampedArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ClampedArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "LengthWorks()",
                    line: "119"
                } ));
                t.Fixture.lengthWorks();
            },
            indexingWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint8ClampedArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ClampedArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "IndexingWorks()",
                    line: "126"
                } ));
                t.Fixture.indexingWorks();
            },
            setUint8ClampedArrayWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint8ClampedArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ClampedArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "SetUint8ClampedArrayWorks()",
                    line: "155"
                } ));
                t.Fixture.setUint8ClampedArrayWorks();
            },
            setUint8ClampedArrayWithOffsetWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint8ClampedArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ClampedArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "SetUint8ClampedArrayWithOffsetWorks()",
                    line: "163"
                } ));
                t.Fixture.setUint8ClampedArrayWithOffsetWorks();
            },
            setNormalArrayWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint8ClampedArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ClampedArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "SetNormalArrayWorks()",
                    line: "171"
                } ));
                t.Fixture.setNormalArrayWorks();
            },
            setNormalArrayWithOffsetWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint8ClampedArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ClampedArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "SetNormalArrayWithOffsetWorks()",
                    line: "179"
                } ));
                t.Fixture.setNormalArrayWithOffsetWorks();
            },
            subarrayWithBeginWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint8ClampedArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ClampedArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "SubarrayWithBeginWorks()",
                    line: "187"
                } ));
                t.Fixture.subarrayWithBeginWorks();
            },
            subarrayWithBeginAndEndWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint8ClampedArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ClampedArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "SubarrayWithBeginAndEndWorks()",
                    line: "197"
                } ));
                t.Fixture.subarrayWithBeginAndEndWorks();
            },
            bufferPropertyWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint8ClampedArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ClampedArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "BufferPropertyWorks()",
                    line: "208"
                } ));
                t.Fixture.bufferPropertyWorks();
            },
            byteOffsetPropertyWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint8ClampedArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ClampedArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ByteOffsetPropertyWorks()",
                    line: "216"
                } ));
                t.Fixture.byteOffsetPropertyWorks();
            },
            byteLengthPropertyWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint8ClampedArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ClampedArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ByteLengthPropertyWorks()",
                    line: "224"
                } ));
                t.Fixture.byteLengthPropertyWorks();
            },
            indexOfWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint8ClampedArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ClampedArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "IndexOfWorks()",
                    line: "231"
                } ));
                t.Fixture.indexOfWorks();
            },
            containsWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint8ClampedArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ClampedArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ContainsWorks()",
                    line: "240"
                } ));
                t.Fixture.containsWorks();
            },
            foreachWorks_SPI_1401: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint8ClampedArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ClampedArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ForeachWorks_SPI_1401()",
                    line: "249"
                } ));
                t.Fixture.foreachWorks_SPI_1401();
            },
            getEnumeratorWorks_SPI_1401: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint8ClampedArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ClampedArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "GetEnumeratorWorks_SPI_1401()",
                    line: "263"
                } ));
                t.Fixture.getEnumeratorWorks_SPI_1401();
            },
            iCollectionMethodsWork_SPI_1559_1560: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint8ClampedArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ClampedArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ICollectionMethodsWork_SPI_1559_1560()",
                    line: "277"
                } ));
                t.Fixture.iCollectionMethodsWork_SPI_1559_1560();
            },
            iListMethodsWork_SPI_1559_1560: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint8ClampedArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ClampedArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "IListMethodsWork_SPI_1559_1560()",
                    line: "290"
                } ));
                t.Fixture.iListMethodsWork_SPI_1559_1560();
            },
            iListIsReadOnlyWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint8ClampedArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ClampedArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "IListIsReadOnlyWorks()",
                    line: "323"
                } ));
                t.Fixture.iListIsReadOnlyWorks();
            },
            iCollectionIsReadOnlyWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint8ClampedArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ClampedArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ICollectionIsReadOnlyWorks()",
                    line: "330"
                } ));
                t.Fixture.iCollectionIsReadOnlyWorks();
            },
            iCollectionCopyTo: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint8ClampedArrayTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ClampedArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "ICollectionCopyTo()",
                    line: "337"
                } ));
                t.Fixture.iCollectionCopyTo();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                    project: "Batch1",
                    className: "Bridge.ClientTest.Collections.Native.Uint8ClampedArrayTests",
                    file: "Batch1\\Collections\\Native\\Uint8ClampedArrayTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.UncheckedInsideCheckedTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.CheckedUncheckedTests.UncheckedInsideCheckedTests)],
        statics: {
            testInt32: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.CheckedUncheckedTests.UncheckedInsideCheckedTests).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.UncheckedInsideCheckedTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TestInt32()",
                    line: "563"
                } ));
                Bridge.ClientTest.CheckedUncheckedTests.UncheckedInsideCheckedTests.testInt32();
            },
            testUInt32: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.CheckedUncheckedTests.UncheckedInsideCheckedTests).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.UncheckedInsideCheckedTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TestUInt32()",
                    line: "615"
                } ));
                Bridge.ClientTest.CheckedUncheckedTests.UncheckedInsideCheckedTests.testUInt32();
            },
            testLong: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.CheckedUncheckedTests.UncheckedInsideCheckedTests).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.UncheckedInsideCheckedTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TestLong()",
                    line: "667"
                } ));
                Bridge.ClientTest.CheckedUncheckedTests.UncheckedInsideCheckedTests.testLong();
            },
            testULong: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.CheckedUncheckedTests.UncheckedInsideCheckedTests).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.UncheckedInsideCheckedTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TestULong()",
                    line: "719"
                } ));
                Bridge.ClientTest.CheckedUncheckedTests.UncheckedInsideCheckedTests.testULong();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                    project: "Batch1",
                    className: "Bridge.ClientTest.CheckedUncheckedTests.UncheckedInsideCheckedTests",
                    file: "Batch1\\CheckedUncheckedTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.UncheckedTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.CheckedUncheckedTests.UncheckedTests)],
        statics: {
            testInt32: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.CheckedUncheckedTests.UncheckedTests).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.UncheckedTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TestInt32()",
                    line: "365"
                } ));
                Bridge.ClientTest.CheckedUncheckedTests.UncheckedTests.testInt32();
            },
            testUInt32: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.CheckedUncheckedTests.UncheckedTests).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.UncheckedTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TestUInt32()",
                    line: "414"
                } ));
                Bridge.ClientTest.CheckedUncheckedTests.UncheckedTests.testUInt32();
            },
            testLong: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.CheckedUncheckedTests.UncheckedTests).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.UncheckedTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TestLong()",
                    line: "463"
                } ));
                Bridge.ClientTest.CheckedUncheckedTests.UncheckedTests.testLong();
            },
            testULong: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.CheckedUncheckedTests.UncheckedTests).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.UncheckedTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TestULong()",
                    line: "512"
                } ));
                Bridge.ClientTest.CheckedUncheckedTests.UncheckedTests.testULong();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                    project: "Batch1",
                    className: "Bridge.ClientTest.CheckedUncheckedTests.UncheckedTests",
                    file: "Batch1\\CheckedUncheckedTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.WeakMapTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.WeakMapTests)],
        statics: {
            gettingSettingAndDeletingWorks: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.WeakMapTests).beforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.WeakMapTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "GettingSettingAndDeletingWorks()",
                    line: "18"
                } ));
                t.Fixture.gettingSettingAndDeletingWorks();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                    project: "Batch1",
                    className: "Bridge.ClientTest.Collections.Generic.WeakMapTests",
                    file: "Batch1\\Collections\\Native\\WeakMapTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.WithNoUncheckedKeywordTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.CheckedUncheckedTests.WithNoUncheckedKeywordTests)],
        statics: {
            testInt32: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.CheckedUncheckedTests.WithNoUncheckedKeywordTests).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.WithNoUncheckedKeywordTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TestInt32()",
                    line: "773"
                } ));
                Bridge.ClientTest.CheckedUncheckedTests.WithNoUncheckedKeywordTests.testInt32();
            },
            testUInt32: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.CheckedUncheckedTests.WithNoUncheckedKeywordTests).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.WithNoUncheckedKeywordTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TestUInt32()",
                    line: "819"
                } ));
                Bridge.ClientTest.CheckedUncheckedTests.WithNoUncheckedKeywordTests.testUInt32();
            },
            testLong: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.CheckedUncheckedTests.WithNoUncheckedKeywordTests).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.WithNoUncheckedKeywordTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TestLong()",
                    line: "865"
                } ));
                Bridge.ClientTest.CheckedUncheckedTests.WithNoUncheckedKeywordTests.testLong();
            },
            testULong: function (assert) {
                var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.CheckedUncheckedTests.WithNoUncheckedKeywordTests).beforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.WithNoUncheckedKeywordTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                    method: "TestULong()",
                    line: "911"
                } ));
                Bridge.ClientTest.CheckedUncheckedTests.WithNoUncheckedKeywordTests.testULong();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                    project: "Batch1",
                    className: "Bridge.ClientTest.CheckedUncheckedTests.WithNoUncheckedKeywordTests",
                    file: "Batch1\\CheckedUncheckedTests.cs"
                } );
            }
            return this.context;
        }
    });
});
